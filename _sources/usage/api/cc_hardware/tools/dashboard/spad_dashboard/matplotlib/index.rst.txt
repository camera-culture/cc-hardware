
:py:mod:`cc_hardware.tools.dashboard.spad_dashboard.matplotlib`
===============================================================


.. py:module:: cc_hardware.tools.dashboard.spad_dashboard.matplotlib

.. autoapi-nested-parse::

   SPAD dashboard based on Matplotlib for real-time visualization.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboardConfig
   cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard
   cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewerConfig
   cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewer



Functions
~~~~~~~~~

.. autoapisummary::

   cc_hardware.tools.dashboard.spad_dashboard.matplotlib.save_animation



.. py:function:: save_animation(ani, filename)

   Saves the animation to a file.

   :Parameters: * **ani** (*FuncAnimation*) -- The animation object to save.
                * **filename** (*str*) -- The filename to save the output.


.. py:class:: MatplotlibDashboardConfig


   .. autoapi-inheritance-diagram:: cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboardConfig
      :parts: 1


   Configuration for the Matplotlib dashboard.


.. py:class:: MatplotlibDashboard(config, sensor)


   .. autoapi-inheritance-diagram:: cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard
      :parts: 1


   Dashboard implementation using Matplotlib for visualization.


   .. py:method:: setup()

      Sets up the Matplotlib plot layout and styling.



   .. py:method:: run()

      Executes the Matplotlib dashboard with real-time updates.



   .. py:method:: update(frame, *, histograms = None)

      Updates the histogram data for each frame.

      :Parameters: **frame** (*int*) -- Current frame number.

      :keyword histograms: The histogram data to update. If not provided, the
                           sensor will be used to accumulate the histogram data.
      :kwtype histograms: np.ndarray



   .. py:method:: adjust_ylim(histograms)

      Adjusts the Y-axis limits based on the histogram data.

      :Parameters: **histograms** (*np.ndarray*) -- Histogram data for all channels.



   .. py:property:: sensor
      :type: cc_hardware.drivers.spads.SPADSensor

      Retrieves the SPAD sensor instance.


   .. py:property:: min_bin
      :type: int

      Minimum bin value for the histogram.

      Supports variable sized bins based on the sensor configuration.


   .. py:property:: max_bin
      :type: int

      Maximum bin value for the histogram.

      Supports variable sized bins based on the sensor configuration.


.. py:class:: MatplotlibTransientViewerConfig


   .. autoapi-inheritance-diagram:: cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewerConfig
      :parts: 1


   Configuration for SPAD sensor dashboards.

   When defining a new dashboard, create a subclass of this configuration class and add
   any necessary parameters.

   :ivar min_bin: Minimum bin value for histogram.
   :vartype min_bin: int, optional
   :ivar max_bin: Maximum bin value for histogram.
   :vartype max_bin: int, optional
   :ivar autoscale: Whether to autoscale the histogram. Default is True.
   :vartype autoscale: bool
   :ivar ylim: Y-axis limit for the histogram.
   :vartype ylim: float, optional
   :ivar channel_mask: List of channels to display.

   :vartype channel_mask: list[int], optional


.. py:class:: MatplotlibTransientViewer(config, sensor)


   .. autoapi-inheritance-diagram:: cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewer
      :parts: 1


   Abstract base class for SPAD sensor dashboards.

   :Parameters: * **config** (*SPADDashboardConfig*) -- The dashboard configuration
                * **sensor** (*SPADSensor*) -- The SPAD sensor instance.


   .. py:method:: setup()

      Abstract method to set up the dashboard. Should be independent of whether the
      dashboard is run in a loop or not.



   .. py:method:: run()

      Abstract method to display the dashboard. Blocks until the dashboard is closed.



   .. py:method:: update(frame_index, *, histograms = None)

      Method to update dashboard synchronously. This should be capable of being
      used independent of the loop, as in a main thread and non-blocking.

      :Parameters: **frame** (*int*) -- Current frame number.



   .. py:property:: sensor
      :type: cc_hardware.drivers.spads.SPADSensor

      Retrieves the SPAD sensor instance.


   .. py:property:: min_bin
      :type: int

      Minimum bin value for the histogram.

      Supports variable sized bins based on the sensor configuration.


   .. py:property:: max_bin
      :type: int

      Maximum bin value for the histogram.

      Supports variable sized bins based on the sensor configuration.


