
:py:mod:`cc_hardware.tools`
===========================


.. py:module:: cc_hardware.tools

.. autoapi-nested-parse::

   Command line interface for the cc_hardware.tools package.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   dashboards/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   calibration/index.rst
   camera_viewer/index.rst
   flash/index.rst
   jogger/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.tools.Registry
   cc_hardware.tools.ToolRegistry




.. py:class:: Registry

   Base class providing a registry for its subclasses, plus a factory method.

   This class supports both direct and lazy registration of subclasses and
   can also associate a registered class with a 'friend' (another class not
   necessarily inheriting from Registry).

   .. rubric:: Examples

   Register directly:
       @MyRegistry.register
       class Foo(MyRegistry):
           pass

   Register by name (lazy):
       MyRegistry.register("Bar", "my_module.submodule")

   Create instance:
       instance = MyRegistry.create_from_registry("Foo")

   Create instance from one of many registries:
       instance = MyRegistry.create_from_registry("Bar")


   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
                  register(class_name: str, module_path: str, friend: str) -> None
      :classmethod:


      Registers a class in this registry.

      :Parameters: * **class_type** (*type[Self] | str*) -- A class object or a class name for lazy
                     loading.
                   * **module_path** (*str | None*) -- Path to the module if `class_type` is a string.
                   * **friend** (*str | None*) -- Name of another class to associate with this class.

      :returns: *type[Self] | None* --

                The registered class if `class_type` is a type,
                    otherwise None.



   .. py:method:: create_from_registry(name = None, *args, **kwargs)
      :classmethod:


      Creates an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** (*str | None*) -- The name of the class to instantiate. If None,
                     and only one class is registered, it will instantiate that class.
                   * **\*args** (*Any*) -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** (*Any*) -- Keyword arguments to pass to the class constructor.

      :returns: *Self | Any* --

                An instance of the requested class, or an associated
                    'friend' class.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



.. py:class:: ToolRegistry


   .. autoapi-inheritance-diagram:: cc_hardware.tools.ToolRegistry
      :parts: 1


   Base class providing a registry for its subclasses, plus a factory method.

   This class supports both direct and lazy registration of subclasses and
   can also associate a registered class with a 'friend' (another class not
   necessarily inheriting from Registry).

   .. rubric:: Examples

   Register directly:
       @MyRegistry.register
       class Foo(MyRegistry):
           pass

   Register by name (lazy):
       MyRegistry.register("Bar", "my_module.submodule")

   Create instance:
       instance = MyRegistry.create_from_registry("Foo")

   Create instance from one of many registries:
       instance = MyRegistry.create_from_registry("Bar")


   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
                  register(class_name: str, module_path: str, friend: str) -> None
      :classmethod:


      Registers a class in this registry.

      :Parameters: * **class_type** (*type[Self] | str*) -- A class object or a class name for lazy
                     loading.
                   * **module_path** (*str | None*) -- Path to the module if `class_type` is a string.
                   * **friend** (*str | None*) -- Name of another class to associate with this class.

      :returns: *type[Self] | None* --

                The registered class if `class_type` is a type,
                    otherwise None.



   .. py:method:: create_from_registry(name = None, *args, **kwargs)
      :classmethod:


      Creates an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** (*str | None*) -- The name of the class to instantiate. If None,
                     and only one class is registered, it will instantiate that class.
                   * **\*args** (*Any*) -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** (*Any*) -- Keyword arguments to pass to the class constructor.

      :returns: *Self | Any* --

                An instance of the requested class, or an associated
                    'friend' class.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



