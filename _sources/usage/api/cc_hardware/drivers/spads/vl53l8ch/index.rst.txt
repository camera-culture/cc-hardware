
:py:mod:`cc_hardware.drivers.spads.vl53l8ch`
============================================


.. py:module:: cc_hardware.drivers.spads.vl53l8ch

.. autoapi-nested-parse::

   Module for VL53L8CH Sensor Driver.

   This module provides classes and functions to interface with the VL53L8CH
   time-of-flight sensor. It includes configurations, data processing, and sensor
   management functionalities necessary for operating the sensor within the
   CC Hardware framework.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.spads.vl53l8ch.RangingMode
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor




.. py:class:: RangingMode(*args, **kwds)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.RangingMode
      :parts: 1


   Enumeration for the ranging mode of the VL53L8CH sensor.


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __dir__()

      Returns public methods and other interesting attributes.



   .. py:method:: __format__(format_spec)

      Default object formatter.

      Return str(self) if format_spec is empty. Raise TypeError otherwise.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __reduce_ex__(proto)

      Helper for pickle.



   .. py:method:: name()

      The name of the Enum member.



   .. py:method:: value()

      The value of the Enum member.



.. py:class:: VL53L8CHConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig
      :parts: 1


   Configuration parameters for the VL53L8CH sensor.

   :ivar port: Serial port for the sensor.

   :vartype port: str
   :ivar resolution: Sensor resolution (uint16_t).
   :vartype resolution: int
   :ivar ranging_mode: Ranging mode (uint16_t).
   :vartype ranging_mode: RangingMode
   :ivar ranging_frequency_hz: Ranging frequency in Hz (uint16_t).
   :vartype ranging_frequency_hz: int
   :ivar integration_time_ms: Integration time in milliseconds (uint16_t).
   :vartype integration_time_ms: int
   :ivar cnh_start_bin: CNH start bin (uint16_t).
   :vartype cnh_start_bin: int
   :ivar cnh_num_bins: Number of CNH bins (uint16_t).
   :vartype cnh_num_bins: int
   :ivar cnh_subsample: CNH subsample rate (uint16_t).
   :vartype cnh_subsample: int
   :ivar agg_start_x: Aggregation start X coordinate (uint16_t).
   :vartype agg_start_x: int
   :ivar agg_start_y: Aggregation start Y coordinate (uint16_t).
   :vartype agg_start_y: int
   :ivar agg_merge_x: Aggregation merge X parameter (uint16_t).
   :vartype agg_merge_x: int
   :ivar agg_merge_y: Aggregation merge Y parameter (uint16_t).
   :vartype agg_merge_y: int
   :ivar agg_cols: Number of aggregation columns (uint16_t).
   :vartype agg_cols: int
   :ivar agg_rows: Number of aggregation rows (uint16_t).

   :vartype agg_rows: int
   :ivar add_back_ambient: Flag to add back ambient light. The VL53L8CH sensor
                           will do some preprocessing on the device and remove a pre-calculated ambient
                           light value from the histogram data. In the histogram returned to the user,
                           the ambient value removed from the histogram is provided. This flag enables
                           the user to add this value back to the histogram data (as if it was never
                           removed).

   :vartype add_back_ambient: bool


   .. py:method:: pack()

      Packs the sensor configuration into a byte structure.

      :returns: *bytes* -- Packed configuration data.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the configuration settings for the sensor.

      :returns: *dict[str, Setting]* -- Configuration settings.


   .. py:property:: num_pixels
      :type: int

      Returns the total number of pixels in the sensor.


.. py:class:: VL53L8CHSharedConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig
      :parts: 1


   Shared sensor configuration with default settings.

   Inherits from SensorConfig and provides default values for common parameters.


   .. py:method:: pack()

      Packs the sensor configuration into a byte structure.

      :returns: *bytes* -- Packed configuration data.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the configuration settings for the sensor.

      :returns: *dict[str, Setting]* -- Configuration settings.


   .. py:property:: num_pixels
      :type: int

      Returns the total number of pixels in the sensor.


.. py:class:: VL53L8CHConfig4x4


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4
      :parts: 1


   Sensor configuration for a 4x4 resolution.


   .. py:method:: pack()

      Packs the sensor configuration into a byte structure.

      :returns: *bytes* -- Packed configuration data.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the configuration settings for the sensor.

      :returns: *dict[str, Setting]* -- Configuration settings.


   .. py:property:: num_pixels
      :type: int

      Returns the total number of pixels in the sensor.


.. py:class:: VL53L8CHConfig8x8


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8
      :parts: 1


   Sensor configuration for an 8x8 resolution.


   .. py:method:: pack()

      Packs the sensor configuration into a byte structure.

      :returns: *bytes* -- Packed configuration data.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the configuration settings for the sensor.

      :returns: *dict[str, Setting]* -- Configuration settings.


   .. py:property:: num_pixels
      :type: int

      Returns the total number of pixels in the sensor.


.. py:class:: VL53L8CHData(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData
      :parts: 1


   Processes and stores both histogram and target data from the VL53L8CH sensor.

   This class handles the accumulation and processing of histogram bins
   and per-pixel target information, keeping them aligned by pixel index.


   .. py:method:: process(row)

      Processes a row of data, routing to histogram or target handlers.

      :Parameters: **row** (*list[str]*) -- A row of string values from sensor output.

      :returns: *bool* -- True if processing succeeds, False otherwise.



   .. py:method:: reset()

      Resets the sensor data to its initial state.



   .. py:property:: has_data
      :type: bool

      Checks if the sensor has data available.


   .. py:method:: get_data(*, verify_has_data = True)

      Retrieves the processed sensor data.



   .. py:method:: calculate_point_cloud(*, histogram = None, distances = None, subpixel_samples = 1, bilinear_interpolation = False)

      Calculates the point cloud from histogram or precomputed distances.

      :Parameters: * **histogram** (*np.ndarray*) -- Histogram data, if distances not provided.
                   * **distances** (*np.ndarray*) -- Precomputed distances (mm).

      :keyword subpixel_samples: Number of samples per pixel.
      :kwtype subpixel_samples: int
      :keyword bilinear_interpolation: Whether to interpolate distances.
      :kwtype bilinear_interpolation: bool

      :returns: *np.ndarray* -- Point cloud (N, 3) in meters.



   .. py:method:: calculate_distance(histogram, *, window = 10, threshold = 0)

      Calculates the distance from the histogram data.

      :Parameters: **histogram** (*np.ndarray*) -- The histogram data.

      :keyword window: The size of the window to use for distance calculation.
                       Defaults to 10.
      :kwtype window: int

      :returns: *np.ndarray* -- The calculated distance.



.. py:class:: VL53L8CHSensor(config, **kwargs)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor
      :parts: 1


   Main sensor class for the VL53L8CH time-of-flight sensor.

   This class handles communication with the sensor, configuration,
   data acquisition, and data processing.

   :Parameters: **config** (*VL53L8CHConfig*) -- Configuration parameters for the sensor.

   :keyword \*\*kwargs: Additional configuration parameters to update.

   :ivar SCRIPT: Path to the sensor's makefile script.
   :vartype SCRIPT: Path
   :ivar BAUDRATE: Serial communication baud rate.

   :vartype BAUDRATE: int


   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.



   .. py:method:: accumulate(num_samples = 1)

      Accumulates histogram and target data from the sensor.

      :Parameters: **num_samples** (*int*) -- Number of samples to accumulate.

      Returns:



   .. py:property:: is_okay
      :type: bool

      Checks if the sensor is operational.

      :returns: *bool* -- True if the sensor is operational, False otherwise.


   .. py:method:: close()

      Closes the sensor connection and stops background processes.



   .. py:property:: num_bins
      :type: int

      Returns the number of bins in the sensor's histogram. This indicates the
      number of discrete values or ranges that the sensor can measure. The total
      distance a sensor can measure is equal to the number of bins multiplied by
      the bin width.

      :returns: *int* -- The total number of bins in the histogram.


   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor as a tuple (width, height). This indicates
      the spatial resolution of the sensor, where the width and height refer to the
      number of pixels or sampling points in the respective dimensions.

      :returns: *tuple[int, int]* --

                A tuple representing the sensor's resolution
                    (width, height).


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



