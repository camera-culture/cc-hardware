
:py:mod:`cc_hardware.drivers.spads.vl53l8ch`
============================================


.. py:module:: cc_hardware.drivers.spads.vl53l8ch

.. autoapi-nested-parse::

   Module for VL53L8CH Sensor Driver.

   This module provides classes and functions to interface with the VL53L8CH
   time-of-flight sensor. It includes configurations, data processing, and sensor
   management functionalities necessary for operating the sensor within the
   CC Hardware framework.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.spads.vl53l8ch.RangingMode
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram
   cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor




.. py:class:: RangingMode(*args, **kwds)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.RangingMode
      :parts: 1


   Enumeration for the ranging mode of the VL53L8CH sensor.


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __dir__()

      Returns public methods and other interesting attributes.



   .. py:method:: __format__(format_spec)

      Default object formatter.

      Return str(self) if format_spec is empty. Raise TypeError otherwise.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __reduce_ex__(proto)

      Helper for pickle.



   .. py:method:: name()

      The name of the Enum member.



   .. py:method:: value()

      The value of the Enum member.



.. py:class:: VL53L8CHConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig
      :parts: 1


   Configuration parameters for the VL53L8CH sensor.

   :ivar port: Serial port for the sensor.

   :vartype port: str
   :ivar resolution: Sensor resolution (uint16_t).
   :vartype resolution: int
   :ivar ranging_mode: Ranging mode (uint16_t).
   :vartype ranging_mode: RangingMode
   :ivar ranging_frequency_hz: Ranging frequency in Hz (uint16_t).
   :vartype ranging_frequency_hz: int
   :ivar integration_time_ms: Integration time in milliseconds (uint16_t).
   :vartype integration_time_ms: int
   :ivar cnh_start_bin: CNH start bin (uint16_t).
   :vartype cnh_start_bin: int
   :ivar cnh_num_bins: Number of CNH bins (uint16_t).
   :vartype cnh_num_bins: int
   :ivar cnh_subsample: CNH subsample rate (uint16_t).
   :vartype cnh_subsample: int
   :ivar agg_start_x: Aggregation start X coordinate (uint16_t).
   :vartype agg_start_x: int
   :ivar agg_start_y: Aggregation start Y coordinate (uint16_t).
   :vartype agg_start_y: int
   :ivar agg_merge_x: Aggregation merge X parameter (uint16_t).
   :vartype agg_merge_x: int
   :ivar agg_merge_y: Aggregation merge Y parameter (uint16_t).
   :vartype agg_merge_y: int
   :ivar agg_cols: Number of aggregation columns (uint16_t).
   :vartype agg_cols: int
   :ivar agg_rows: Number of aggregation rows (uint16_t).

   :vartype agg_rows: int
   :ivar add_back_ambient: Flag to add back ambient light. The VL53L8CH sensor
                           will do some preprocessing on the device and remove a pre-calculated ambient
                           light value from the histogram data. In the histogram returned to the user,
                           the ambient value removed from the histogram is provided. This flag enables
                           the user to add this value back to the histogram data (as if it was never
                           removed).

   :vartype add_back_ambient: bool


   .. py:method:: pack()

      Packs the sensor configuration into a byte structure.

      :returns: *bytes* -- Packed configuration data.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the configuration settings for the sensor.

      :returns: *dict[str, Setting]* -- Configuration settings.


.. py:class:: VL53L8CHSharedConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig
      :parts: 1


   Shared sensor configuration with default settings.

   Inherits from SensorConfig and provides default values for common parameters.


   .. py:method:: pack()

      Packs the sensor configuration into a byte structure.

      :returns: *bytes* -- Packed configuration data.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the configuration settings for the sensor.

      :returns: *dict[str, Setting]* -- Configuration settings.


.. py:class:: VL53L8CHConfig4x4


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4
      :parts: 1


   Sensor configuration for a 4x4 resolution.


   .. py:method:: pack()

      Packs the sensor configuration into a byte structure.

      :returns: *bytes* -- Packed configuration data.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the configuration settings for the sensor.

      :returns: *dict[str, Setting]* -- Configuration settings.


.. py:class:: VL53L8CHConfig8x8


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8
      :parts: 1


   Sensor configuration for an 8x8 resolution.


   .. py:method:: pack()

      Packs the sensor configuration into a byte structure.

      :returns: *bytes* -- Packed configuration data.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the configuration settings for the sensor.

      :returns: *dict[str, Setting]* -- Configuration settings.


.. py:class:: VL53L8CHHistogram(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram
      :parts: 1


   Processes and stores histogram data from the VL53L8CH sensor.

   This class handles the accumulation and processing of histogram data
   received from the sensor, managing multiple pixel histograms.


   .. py:method:: reset(num_pixels = None)

      Resets the histogram data.

      :Parameters: **num_pixels** (*int*) -- Number of pixels expected in the histogram data.



   .. py:method:: process(row)

      Processes a row of histogram data.

      :Parameters: **row** (*list[str]*) -- A list of string values representing a row of data.

      :returns: *bool* -- True if processing is successful, False otherwise.



   .. py:method:: get_data()

      Retrieves the processed histogram data.

      :returns: *np.ndarray* -- A copy of the histogram data.



   .. py:property:: has_data
      :type: bool

      Checks if histogram data is available.

      :returns: *bool* -- True if data is available, False otherwise.


.. py:class:: VL53L8CHSensor(config, **kwargs)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor
      :parts: 1


   Main sensor class for the VL53L8CH time-of-flight sensor.

   This class handles communication with the sensor, configuration,
   data acquisition, and data processing.

   :Parameters: **config** (*VL53L8CHConfig*) -- Configuration parameters for the sensor.

   :keyword \*\*kwargs: Additional configuration parameters to update.

   :ivar SCRIPT: Path to the sensor's makefile script.
   :vartype SCRIPT: Path
   :ivar BAUDRATE: Serial communication baud rate.

   :vartype BAUDRATE: int


   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.



   .. py:method:: accumulate(num_samples = 1, *, average = True)

      Accumulates histogram data from the sensor.

      :Parameters: * **num_samples** (*int*) -- Number of samples to accumulate.
                   * **average** (*bool, optional*) -- If True, returns the average of the samples.
                     If False, returns a list of individual samples. Defaults to True.

      :returns: *np.ndarray | list[np.ndarray]* --

                The accumulated histogram data,
                    either averaged or as a list of samples.



   .. py:property:: num_bins
      :type: int

      Gets the number of CNH bins in the sensor configuration.

      :returns: *int* -- Number of CNH bins.


   .. py:property:: resolution
      :type: tuple[int, int]

      Gets the aggregation grid resolution.

      :returns: *tuple[int, int]* -- Number of aggregation columns and rows.


   .. py:property:: is_okay
      :type: bool

      Checks if the sensor is operational.

      :returns: *bool* -- True if the sensor is operational, False otherwise.


   .. py:method:: close()

      Closes the sensor connection and stops background processes.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



