:orphan:


:py:mod:`cc_hardware.drivers.spads.spad_wrappers`
=================================================


.. py:module:: cc_hardware.drivers.spads.spad_wrappers


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig
   cc_hardware.drivers.spads.spad_wrappers.SPADWrapper
   cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig
   cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper
   cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig
   cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper




.. py:class:: SPADWrapperConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig
      :parts: 1


   Configuration for SPAD sensor wrapper.

   :Parameters: **wrapped** (*SPADSensorConfig*) -- The configuration for the wrapped sensor.


   .. py:property:: settings
      :type: dict[str, Any]

      Retrieves the wrapped sensor settings.


.. py:class:: SPADWrapper(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.spad_wrappers.SPADWrapper
      :parts: 1


   A wrapper class for SPAD sensors that provides additional functionality and
   abstraction. This class is designed to wrap an existing SPAD sensor and expose
   additional methods and properties to simplify sensor management and data
   collection.

   :Parameters: **config** (*SPADWrapperConfig*) -- The configuration for the sensor wrapper.


   .. py:method:: accumulate(*args, **kwargs)

      Accumulates the specified number of histogram samples from the sensor.

      :Parameters: **num_samples** (*int*) -- The number of samples to accumulate into the histogram.
                   The accumulation method (i.e. summing, averaging) may vary depending on
                   the sensor. Defaults to 1.



   .. py:property:: num_bins
      :type: int

      Returns the number of bins in the sensor's histogram. This indicates the
      number of discrete values or ranges that the sensor can measure. The total
      distance a sensor can measure is equal to the number of bins multiplied by
      the bin width.

      :returns: *int* -- The total number of bins in the histogram.


   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor as a tuple (width, height). This indicates
      the spatial resolution of the sensor, where the width and height refer to the
      number of pixels or sampling points in the respective dimensions.

      :returns: *tuple[int, int]* --

                A tuple representing the sensor's resolution
                    (width, height).


   .. py:property:: is_okay
      :type: bool

      Checks if the sensor is operational.


   .. py:method:: close()

      Closes the sensor and releases any resources.



   .. py:method:: calibrate()

      Calibrates the sensor.



   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



.. py:class:: SPADMergeWrapperConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig
      :parts: 1


   Configuration for SPAD sensor merge wrapper.

   :Parameters: * **merge_rows** (*bool*) -- Whether to merge the rows of the histogram.
                * **merge_cols** (*bool*) -- Whether to merge the columns of the histogram.
                * **merge_all** (*bool*) -- Whether to merge all histogram data. If True, merge_rows and
                  merge_cols are ignored.


   .. py:property:: settings
      :type: dict[str, Any]

      Retrieves the wrapped sensor settings.


.. py:class:: SPADMergeWrapper(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper
      :parts: 1


   A wrapper class for SPAD sensors that provides additional functionality and
   abstraction. This class is designed to wrap an existing SPAD sensor and expose
   additional methods and properties to simplify sensor management and data
   collection.

   :Parameters: **config** (*SPADWrapperConfig*) -- The configuration for the sensor wrapper.


   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:method:: accumulate(*args, **kwargs)

      Accumulates the specified number of histogram samples from the sensor.

      :Parameters: **num_samples** (*int*) -- The number of samples to accumulate into the histogram.
                   The accumulation method (i.e. summing, averaging) may vary depending on
                   the sensor. Defaults to 1.



   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor as a tuple (width, height). This indicates
      the spatial resolution of the sensor, where the width and height refer to the
      number of pixels or sampling points in the respective dimensions.

      :returns: *tuple[int, int]* --

                A tuple representing the sensor's resolution
                    (width, height).


   .. py:property:: num_bins
      :type: int

      Returns the number of bins in the sensor's histogram. This indicates the
      number of discrete values or ranges that the sensor can measure. The total
      distance a sensor can measure is equal to the number of bins multiplied by
      the bin width.

      :returns: *int* -- The total number of bins in the histogram.


   .. py:property:: is_okay
      :type: bool

      Checks if the sensor is operational.


   .. py:method:: close()

      Closes the sensor and releases any resources.



   .. py:method:: calibrate()

      Calibrates the sensor.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



.. py:class:: SPADMovingAverageWrapperConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig
      :parts: 1


   Configuration for SPAD sensor moving average wrapper.

   :Parameters: **window_size** (*int*) -- The size of the moving average window.


   .. py:property:: settings
      :type: dict[str, Any]

      Retrieves the wrapped sensor settings.


.. py:class:: SPADMovingAverageWrapper(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper
      :parts: 1


   A wrapper class for SPAD sensors that provides additional functionality and
   abstraction. This class is designed to wrap an existing SPAD sensor and expose
   additional methods and properties to simplify sensor management and data
   collection.

   :Parameters: **config** (*SPADWrapperConfig*) -- The configuration for the sensor wrapper.


   .. py:method:: accumulate(*args, **kwargs)

      Accumulates the specified number of histogram samples from the sensor.

      :Parameters: **num_samples** (*int*) -- The number of samples to accumulate into the histogram.
                   The accumulation method (i.e. summing, averaging) may vary depending on
                   the sensor. Defaults to 1.



   .. py:property:: num_bins
      :type: int

      Returns the number of bins in the sensor's histogram. This indicates the
      number of discrete values or ranges that the sensor can measure. The total
      distance a sensor can measure is equal to the number of bins multiplied by
      the bin width.

      :returns: *int* -- The total number of bins in the histogram.


   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor as a tuple (width, height). This indicates
      the spatial resolution of the sensor, where the width and height refer to the
      number of pixels or sampling points in the respective dimensions.

      :returns: *tuple[int, int]* --

                A tuple representing the sensor's resolution
                    (width, height).


   .. py:property:: is_okay
      :type: bool

      Checks if the sensor is operational.


   .. py:method:: close()

      Closes the sensor and releases any resources.



   .. py:method:: calibrate()

      Calibrates the sensor.



   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



