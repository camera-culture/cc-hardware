
:py:mod:`cc_hardware.drivers.spads.tmf8828`
===========================================


.. py:module:: cc_hardware.drivers.spads.tmf8828

.. autoapi-nested-parse::

   TMF8828 sensor driver for SPAD sensors.

   The `TMF8828     <https://ams-osram.com/products/sensor-solutions/        direct-time-of-flight-sensors-dtof/            ams-tmf8828-configurable-8x8-multi-zone-time-of-flight-sensor>`_
   is a 8x8 multi-zone time-of-flight sensor made by AMS. It uses a wide VCSEL and supports
   custom mapping of SPAD pixels to allow for 3x3, 4x4, 3x6, and 8x8 multizone output. The
   :class:`~cc_hardware.drivers.spads.tmf8828.TMF8828Sensor` class was developed to interface with the
   `TMF882X Arduino Shield     <https://ams-osram.com/products/boards-kits-accessories/kits/        ams-tmf882x-evm-eb-shield-evaluation-kit>`_.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.spads.tmf8828.SPADID
   cc_hardware.drivers.spads.tmf8828.RangeMode
   cc_hardware.drivers.spads.tmf8828.TMF8828Histogram
   cc_hardware.drivers.spads.tmf8828.TMF8828Sensor




.. py:class:: SPADID(*args, **kwds)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.tmf8828.SPADID
      :parts: 1


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:method:: get_num_pixels()

      Returns the number of pixels based on the SPAD ID.

      :returns: *int* -- The number of pixels corresponding to the SPAD ID.



   .. py:method:: get_num_channels()

      Returns the number of channels based on the SPAD ID.

      :returns: *int* -- The number of channels corresponding to the SPAD ID.



   .. py:method:: get_active_channels_per_subcapture()

      Returns the number of active channels per subcapture based on the SPAD ID.

      :returns: *list[int]* --

                A list representing the number of active channels in each
                    subcapture.



   .. py:method:: get_resolution()

      Returns the resolution of the sensor based on the SPAD ID.

      :returns: *tuple[int, int]* -- The resolution (width, height) corresponding to the SPAD ID.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __dir__()

      Returns public methods and other interesting attributes.



   .. py:method:: __format__(format_spec)

      Default object formatter.

      Return str(self) if format_spec is empty. Raise TypeError otherwise.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __reduce_ex__(proto)

      Helper for pickle.



   .. py:method:: name()

      The name of the Enum member.



   .. py:method:: value()

      The value of the Enum member.



.. py:class:: RangeMode(*args, **kwds)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.tmf8828.RangeMode
      :parts: 1


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __dir__()

      Returns public methods and other interesting attributes.



   .. py:method:: __format__(format_spec)

      Default object formatter.

      Return str(self) if format_spec is empty. Raise TypeError otherwise.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __reduce_ex__(proto)

      Helper for pickle.



   .. py:method:: name()

      The name of the Enum member.



   .. py:method:: value()

      The value of the Enum member.



.. py:class:: TMF8828Histogram(spad_id)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.tmf8828.TMF8828Histogram
      :parts: 1


   A class representing histogram data collected from the TMF8828 sensor. The histogram
   data is organized into multiple channels and subcaptures to capture detailed
   measurements.

   :Parameters: **spad_id** (*SPADID*) -- The SPAD ID indicating the resolution of the sensor.


   .. py:method:: reset()

      Resets the histogram data, clearing temporary and accumulated data arrays.



   .. py:method:: process(row)

      Processes a single row of histogram data. Updates the internal data arrays based
      on the channel and subcapture configuration.

      :Parameters: **row** (*list[str]*) -- A list of strings representing a row of data received from
                   the sensor.



   .. py:method:: get_data()

      Returns a copy of the accumulated histogram data and resets the internal state.

      :returns: *np.ndarray* -- The accumulated histogram data.



   .. py:property:: has_data
      :type: bool

      Checks if the histogram has complete data for all subcaptures.

      :returns: *bool* -- True if all subcaptures have been processed, False otherwise.


.. py:class:: TMF8828Sensor(port = None, *, spad_id = SPADID.ID15, setup = True, range_mode = RangeMode.LONG)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.tmf8828.TMF8828Sensor
      :parts: 1


   A class representing the TMF8828 sensor, a specific implementation of a SPAD sensor.
   The TMF8828 sensor collects histogram data across multiple channels and subcaptures,
   enabling high-resolution depth measurements.

   Inherits:
       SPADSensor: Base class for SPAD sensors that defines common methods and
           properties.

   :ivar SCRIPT: The default path to the sensor's Arduino script.
   :vartype SCRIPT: Path
   :ivar BAUDRATE: The communication baud rate.
   :vartype BAUDRATE: int
   :ivar TIMEOUT: The timeout value for sensor communications.

   :vartype TIMEOUT: float


   .. py:method:: accumulate(num_samples, *, average = True)

      Accumulates histogram samples from the sensor.

      :Parameters: * **num_samples** (*int*) -- The number of samples to accumulate.
                   * **average** (*bool*) -- Whether to average the accumulated samples. Defaults to
                     True.

      :returns: *np.ndarray | list[np.ndarray]* --

                The accumulated histogram data, averaged if
                    requested.



   .. py:method:: calibrate(configurations = 2)

      Performs calibration on the sensor. This will run calibration for each
      configuration.

      :Parameters: **configurations** (*int*) -- The number of configurations to calibrate. Defaults
                   to 2.

      :returns: *list[str]* -- A list containing the calibration strings for different modes.



   .. py:property:: is_okay
      :type: bool

      Checks if the sensor is operational.

      :returns: *bool* -- True if the sensor is operational, False otherwise.


   .. py:property:: num_bins
      :type: int

      Returns the number of bins in the sensor's histogram.

      :returns: *int* -- The number of bins in the histogram.


   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor as a tuple (width, height).

      :returns: *tuple[int, int]* -- The resolution (width, height) based on the SPAD ID.


   .. py:method:: close()

      Closes the sensor connection and stops background processes.



   .. py:property:: config
      :type: SensorConfig
      :abstractmethod:

      Retrieves the sensor configuration.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: update(**kwargs)
      :abstractmethod:


      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
      :classmethod:


      Register the given class in this registry.

      :Parameters: * **class_type** -- The class to register. Can be a class type or a str defining
                     a class name to be lazily loaded. If the class_type is a type, this
                     method will return the class itself (useful for decorators).
                   * **module_path** -- The module path where the class can be found
                     (e.g. "my_module.my_submodule"). Only used if class_type is a str.
                     This is the full importable path to the class. The final class
                     path will be ``module_path.class_type``.

      :returns: The registered class if class_type is a class type, otherwise None.



   .. py:method:: create_from_registry(name, *args, **kwargs)
      :classmethod:


      Create an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** -- The name of the class to instantiate.
                   * **\*args** -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** -- Keyword arguments to pass to the class constructor.

      :returns: An instance of the requested class.

      :raises ValueError: If the class name is not registered.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



