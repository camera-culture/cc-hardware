
:py:mod:`cc_hardware.drivers.spads.tmf8828`
===========================================


.. py:module:: cc_hardware.drivers.spads.tmf8828

.. autoapi-nested-parse::

   TMF8828 sensor driver for SPAD sensors.

   The `TMF8828     <https://ams-osram.com/products/sensor-solutions/        direct-time-of-flight-sensors-dtof/            ams-tmf8828-configurable-8x8-multi-zone-time-of-flight-sensor>`_
   is a 8x8 multi-zone time-of-flight sensor made by AMS. It uses a wide VCSEL and supports
   custom mapping of SPAD pixels to allow for 3x3, 4x4, 3x6, and 8x8 multizone output. The
   :class:`~cc_hardware.drivers.spads.tmf8828.TMF8828Sensor` class was developed to interface with the
   `TMF882X Arduino Shield     <https://ams-osram.com/products/boards-kits-accessories/kits/        ams-tmf882x-evm-eb-shield-evaluation-kit>`_.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.spads.tmf8828.SPADID
   cc_hardware.drivers.spads.tmf8828.RangeMode
   cc_hardware.drivers.spads.tmf8828.TMF8828Config
   cc_hardware.drivers.spads.tmf8828.TMF8828Data
   cc_hardware.drivers.spads.tmf8828.TMF8828Sensor




.. py:class:: SPADID(*args, **kwds)



   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:property:: num_channels
      :type: int

      Returns the number of channels based on the SPAD ID.

      :returns: *int* -- The number of channels corresponding to the SPAD ID.


   .. py:property:: active_channels_per_subcapture
      :type: list[int]

      Returns the number of active channels per subcapture based on the SPAD ID.

      :returns: *list[int]* --

                A list representing the number of active channels in each
                    subcapture.


   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor based on the SPAD ID.

      :returns: *tuple[int, int]* -- The resolution (width, height) corresponding to the SPAD ID.


   .. py:property:: fov
      :type: tuple[float, float]

      Returns the field of view (FOV) in degrees based on the SPAD ID.

      :returns: *tuple[float, float]* --

                The field of view (FOVx, FOVy) corresponding to the
                    SPAD ID.


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __dir__()

      Returns public methods and other interesting attributes.



   .. py:method:: __format__(format_spec)

      Default object formatter.

      Return str(self) if format_spec is empty. Raise TypeError otherwise.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __reduce_ex__(proto)

      Helper for pickle.



   .. py:method:: name()

      The name of the Enum member.



   .. py:method:: value()

      The value of the Enum member.



.. py:class:: RangeMode(*args, **kwds)



   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access:

     >>> Color.RED
     <Color.RED: 1>

   - value lookup:

     >>> Color(1)
     <Color.RED: 1>

   - name lookup:

     >>> Color['RED']
     <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:property:: timing_resolution
      :type: float

      Returns the timing resolution for the range mode.

      :returns: *float* -- The timing resolution in seconds.


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __dir__()

      Returns public methods and other interesting attributes.



   .. py:method:: __format__(format_spec)

      Default object formatter.

      Return str(self) if format_spec is empty. Raise TypeError otherwise.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __reduce_ex__(proto)

      Helper for pickle.



   .. py:method:: name()

      The name of the Enum member.



   .. py:method:: value()

      The value of the Enum member.



.. py:class:: TMF8828Config



   Configuration for the TMF8828 sensor.

   :ivar port: The port to use for communication with the sensor.

   :vartype port: str | None
   :ivar spad_id: The SPAD ID indicating the resolution of the sensor.
   :vartype spad_id: SPADID
   :ivar range_mode: The range mode for the sensor (LONG or SHORT).

   :vartype range_mode: RangeMode


   .. py:property:: num_pixels
      :type: int

      Returns the total number of pixels in the sensor.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


.. py:class:: TMF8828Data(config)



   Processes and stores both histogram and target data from the VL53L8CH sensor.

   This class handles the accumulation and processing of histogram bins
   and per-pixel target information, keeping them aligned by pixel index.


   .. py:method:: reset()

      Resets the sensor data to its initial state.



   .. py:method:: process(row)

      Processes a row of data, routing to histogram or target handlers.

      :Parameters: **row** (*list[str]*) -- A row of string values from sensor output.

      :returns: *bool* -- True if processing succeeds, False otherwise.



   .. py:property:: has_data
      :type: bool

      Checks if the sensor has data available.


   .. py:method:: get_data(*, verify_has_data = True, reset = True)

      Retrieves the processed sensor data.



   .. py:method:: calculate_point_cloud(*, histogram = None, distances = None, subpixel_samples = 1, bilinear_interpolation = False)

      Calculates the point cloud from histogram or precomputed distances.

      :Parameters: * **histogram** (*np.ndarray*) -- Histogram data, if distances not provided.
                   * **distances** (*np.ndarray*) -- Precomputed distances (mm).

      :keyword subpixel_samples: Number of samples per pixel.
      :kwtype subpixel_samples: int
      :keyword bilinear_interpolation: Whether to interpolate distances.
      :kwtype bilinear_interpolation: bool

      :returns: *np.ndarray* -- Point cloud (N, 3) in meters.



   .. py:method:: calculate_distance(histogram, *, window = 10, threshold = 0)

      Calculates the distance from the histogram data.

      :Parameters: **histogram** (*np.ndarray*) -- The histogram data.

      :keyword window: The size of the window to use for distance calculation.
                       Defaults to 10.
      :kwtype window: int

      :returns: *np.ndarray* -- The calculated distance.



.. py:class:: TMF8828Sensor(config)



   A class representing the TMF8828 sensor, a specific implementation of a SPAD sensor.
   The TMF8828 sensor collects histogram data across multiple channels and subcaptures,
   enabling high-resolution depth measurements.

   Inherits:
       SPADSensor: Base class for SPAD sensors that defines common methods and
           properties.

   :ivar SCRIPT: The default path to the sensor's Arduino script.
   :vartype SCRIPT: Path
   :ivar BAUDRATE: The communication baud rate.
   :vartype BAUDRATE: int
   :ivar TIMEOUT: The timeout value for sensor communications.

   :vartype TIMEOUT: float


   .. py:property:: config
      :type: TMF8828Config

      Returns the configuration for the sensor.

      :returns: *TMF8828Config* -- The configuration for the sensor.


   .. py:method:: accumulate(num_samples = 1)

      Accumulates histogram samples from the sensor.

      :Parameters: * **num_samples** (*int*) -- The number of samples to accumulate.
                   * **average** (*bool*) -- Whether to average the accumulated samples. Defaults to
                     True.

      :returns: *np.ndarray | list[np.ndarray]* --

                The accumulated histogram data, averaged if
                    requested.



   .. py:method:: calibrate(configurations = 2)

      Performs calibration on the sensor. This will run calibration for each
      configuration.

      :Parameters: **configurations** (*int*) -- The number of configurations to calibrate. Defaults
                   to 2.

      :returns: *list[str]* -- A list containing the calibration strings for different modes.



   .. py:property:: is_okay
      :type: bool

      Checks if the sensor is operational.

      :returns: *bool* -- True if the sensor is operational, False otherwise.


   .. py:method:: close()

      Closes the sensor connection and stops background processes.



   .. py:property:: num_bins
      :type: int

      Returns the number of bins in the sensor's histogram. This indicates the
      number of discrete values or ranges that the sensor can measure. The total
      distance a sensor can measure is equal to the number of bins multiplied by
      the bin width.

      :returns: *int* -- The total number of bins in the histogram.


   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor as a tuple (width, height). This indicates
      the spatial resolution of the sensor, where the width and height refer to the
      number of pixels or sampling points in the respective dimensions.

      :returns: *tuple[int, int]* --

                A tuple representing the sensor's resolution
                    (width, height).


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: reset(**kwargs)

      Resets the sensor configuration to its initial state. This method can be
      overridden by subclasses to implement specific reset behavior.

      :Parameters: **\*\*kwargs** -- Additional parameters that may be used for resetting.



   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



