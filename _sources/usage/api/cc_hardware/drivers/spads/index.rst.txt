
:py:mod:`cc_hardware.drivers.spads`
===================================


.. py:module:: cc_hardware.drivers.spads

.. autoapi-nested-parse::

   SPAD sensor drivers for the cc-hardware package.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   pkl/index.rst
   spad/index.rst
   tmf8828/index.rst
   vl53l8ch/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.spads.SPADDataType
   cc_hardware.drivers.spads.SPADSensor
   cc_hardware.drivers.spads.SPADSensorConfig
   cc_hardware.drivers.spads.SPADSensorData




.. py:class:: SPADDataType(*args, **kwds)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.SPADDataType
      :parts: 1


   Enum for SPAD data types.


   .. py:method:: __contains__(other)

      Returns True if self has at least the same flags set as other.



   .. py:method:: __iter__()

      Returns flags in definition order.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: __str__()

      Return str(self).



   .. py:method:: __dir__()

      Returns public methods and other interesting attributes.



   .. py:method:: __format__(format_spec)

      Default object formatter.

      Return str(self) if format_spec is empty. Raise TypeError otherwise.



   .. py:method:: __hash__()

      Return hash(self).



   .. py:method:: __reduce_ex__(proto)

      Helper for pickle.



   .. py:method:: name()

      The name of the Enum member.



   .. py:method:: value()

      The value of the Enum member.



.. py:class:: SPADSensor(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.SPADSensor
      :parts: 1


   An abstract base class for Single-Photon Avalanche Diode (SPAD) sensors, designed
   to manage histogram-based measurements. This class defines methods and properties
   related to collecting and analyzing histogram data.

   Inherits:
       Sensor: The base class for all sensors in the system.


   .. py:method:: accumulate(num_samples = 1)
      :abstractmethod:


      Accumulates the specified number of histogram samples from the sensor.

      :Parameters: **num_samples** (*int*) -- The number of samples to accumulate into the histogram.
                   The accumulation method (i.e. summing, averaging) may vary depending on
                   the sensor. Defaults to 1.

      :returns: *list[dict[SPADDataType, np.ndarray]] | dict[SPADDataType, np.ndarray]* --     The accumulated histogram data. The format may vary depending on the
                    sensor and the number of samples.



   .. py:property:: num_bins
      :type: int

      Returns the number of bins in the sensor's histogram. This indicates the
      number of discrete values or ranges that the sensor can measure. The total
      distance a sensor can measure is equal to the number of bins multiplied by
      the bin width.

      :returns: *int* -- The total number of bins in the histogram.


   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor as a tuple (width, height). This indicates
      the spatial resolution of the sensor, where the width and height refer to the
      number of pixels or sampling points in the respective dimensions.

      :returns: *tuple[int, int]* --

                A tuple representing the sensor's resolution
                    (width, height).


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:property:: is_okay
      :type: bool
      :abstractmethod:

      Checks if the sensor is operational.


   .. py:method:: close()
      :abstractmethod:


      Closes the sensor and releases any resources.



   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



.. py:class:: SPADSensorConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.SPADSensorConfig
      :parts: 1


   Configuration for SPAD sensors.

   :ivar data_type: The type of data the sensor will collect.
                    Default is SPADDataType.HISTOGRAM.

   :vartype data_type: SPADDataType


   .. py:property:: num_pixels
      :type: int

      Returns the total number of pixels in the sensor.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


.. py:class:: SPADSensorData(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.SPADSensorData
      :parts: 1


   Abstract base class for handling sensor data.


   .. py:method:: reset()

      Resets the sensor data to its initial state.



   .. py:property:: has_data
      :type: bool

      Checks if the sensor has data available.


   .. py:method:: process(data)

      Processes the incoming data and stores it in the appropriate format.

      :Parameters: **data** (*dict[SPADDataType, np.ndarray]*) -- The incoming data to process.



   .. py:method:: get_data(*, verify_has_data = True)

      Retrieves the processed sensor data.



   .. py:method:: calculate_point_cloud(*, histogram = None, distances = None, subpixel_samples = 1, bilinear_interpolation = False)

      Calculates the point cloud from histogram or precomputed distances.

      :Parameters: * **histogram** (*np.ndarray*) -- Histogram data, if distances not provided.
                   * **distances** (*np.ndarray*) -- Precomputed distances (mm).

      :keyword subpixel_samples: Number of samples per pixel.
      :kwtype subpixel_samples: int
      :keyword bilinear_interpolation: Whether to interpolate distances.
      :kwtype bilinear_interpolation: bool

      :returns: *np.ndarray* -- Point cloud (N, 3) in meters.



   .. py:method:: calculate_distance(histogram, *, window = 10, threshold = 0)

      Calculates the distance from the histogram data.

      :Parameters: **histogram** (*np.ndarray*) -- The histogram data.

      :keyword window: The size of the window to use for distance calculation.
                       Defaults to 10.
      :kwtype window: int

      :returns: *np.ndarray* -- The calculated distance.



