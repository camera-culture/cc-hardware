
:py:mod:`cc_hardware.drivers.spads`
===================================


.. py:module:: cc_hardware.drivers.spads

.. autoapi-nested-parse::

   SPAD sensor drivers for the cc-hardware package.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   pkl/index.rst
   spad/index.rst
   tmf8828/index.rst
   vl53l8ch/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.spads.SPADSensor
   cc_hardware.drivers.spads.SPADSensorConfig




.. py:class:: SPADSensor(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.SPADSensor
      :parts: 1


   An abstract base class for Single-Photon Avalanche Diode (SPAD) sensors, designed
   to manage histogram-based measurements. This class defines methods and properties
   related to collecting and analyzing histogram data.

   Inherits:
       Sensor: The base class for all sensors in the system.


   .. py:method:: accumulate(num_samples = 1)
      :abstractmethod:


      Accumulates the specified number of histogram samples from the sensor.

      :Parameters: **num_samples** (*int*) -- The number of samples to accumulate into the histogram.
                   The accumulation method (i.e. summing, averaging) may vary depending on
                   the sensor. Defaults to 1.



   .. py:property:: num_bins
      :type: int
      :abstractmethod:

      Returns the number of bins in the sensor's histogram. This indicates the
      number of discrete values or ranges that the sensor can measure. The total
      distance a sensor can measure is equal to the number of bins multiplied by
      the bin width.

      :returns: *int* -- The total number of bins in the histogram.


   .. py:property:: resolution
      :type: tuple[int, int]
      :abstractmethod:

      Returns the resolution of the sensor as a tuple (width, height). This indicates
      the spatial resolution of the sensor, where the width and height refer to the
      number of pixels or sampling points in the respective dimensions.

      :returns: *tuple[int, int]* --

                A tuple representing the sensor's resolution
                    (width, height).


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:property:: is_okay
      :type: bool
      :abstractmethod:

      Checks if the sensor is operational.


   .. py:method:: close()
      :abstractmethod:


      Closes the sensor and releases any resources.



   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



.. py:class:: SPADSensorConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.SPADSensorConfig
      :parts: 1


   Configuration for SPAD sensors.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


