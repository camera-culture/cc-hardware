
:py:mod:`cc_hardware.drivers.spads.pkl`
=======================================


.. py:module:: cc_hardware.drivers.spads.pkl

.. autoapi-nested-parse::

   SPAD sensor driver that loads pre-recorded data from a PKL file.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.spads.pkl.PklSPADSensor




.. py:class:: PklSPADSensor(pkl_path, *, resolution)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.pkl.PklSPADSensor
      :parts: 1


   A fake SPAD sensor class that simulates sensor behavior by loading pre-recorded
   histogram data from a PKL file. This class inherits from SPADSensor and is used
   for testing or simulations without actual hardware.

   Inherits:
       SPADSensor: Base class for SPAD sensors that defines common methods and
           properties.

   :ivar _pkl_path: Path to the PKL file containing pre-recorded data.
   :vartype _pkl_path: Path
   :ivar _data: A list of entries loaded from the PKL file, each entry
                containing a histogram.
   :vartype _data: list[dict]
   :ivar _data_iterator: An iterator over the loaded data entries.
   :vartype _data_iterator: iterator
   :ivar _resolution: The spatial resolution of the sensor.

   :vartype _resolution: tuple[int, int]


   .. py:method:: accumulate(num_samples, *, average = True)

      Accumulates the specified number of histogram samples from the pre-recorded
      data.

      :Parameters: * **num_samples** (*int*) -- The number of samples to accumulate.
                   * **average** (*bool*) -- Whether to average the accumulated samples. Defaults to
                     True.

      :returns: *np.ndarray* -- The accumulated histogram data, averaged if requested.



   .. py:property:: num_bins
      :type: int

      Returns the number of bins in the sensor's histogram.

      :returns: *int* -- The number of bins in the histogram.


   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor as a tuple (width, height).

      :returns: *tuple[int, int]* -- The resolution (width, height) of the sensor.


   .. py:property:: is_okay
      :type: bool

      Checks if the data iterator is still active and not exhausted.

      :returns: *bool* -- True if the iterator is active, False if exhausted.


   .. py:method:: close()

      Closes the sensor connection. This method is a no-op for this fake sensor.



   .. py:property:: config
      :type: SensorConfig
      :abstractmethod:

      Retrieves the sensor configuration.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: update(**kwargs)
      :abstractmethod:


      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.



   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
      :classmethod:


      Register the given class in this registry.

      :Parameters: * **class_type** -- The class to register. Can be a class type or a str defining
                     a class name to be lazily loaded. If the class_type is a type, this
                     method will return the class itself (useful for decorators).
                   * **module_path** -- The module path where the class can be found
                     (e.g. "my_module.my_submodule"). Only used if class_type is a str.
                     This is the full importable path to the class. The final class
                     path will be ``module_path.class_type``.

      :returns: The registered class if class_type is a class type, otherwise None.



   .. py:method:: create_from_registry(name, *args, **kwargs)
      :classmethod:


      Create an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** -- The name of the class to instantiate.
                   * **\*args** -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** -- Keyword arguments to pass to the class constructor.

      :returns: An instance of the requested class.

      :raises ValueError: If the class name is not registered.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



