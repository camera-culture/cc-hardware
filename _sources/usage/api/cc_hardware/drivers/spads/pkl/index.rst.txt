
:py:mod:`cc_hardware.drivers.spads.pkl`
=======================================


.. py:module:: cc_hardware.drivers.spads.pkl

.. autoapi-nested-parse::

   SPAD sensor driver that loads pre-recorded data from a PKL file.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.spads.pkl.PklSPADSensor




.. py:class:: PklSPADSensor(config, index = 0)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.pkl.PklSPADSensor
      :parts: 1


   A fake SPAD sensor class that simulates sensor behavior by loading pre-recorded
   histogram data from a PKL file. This class inherits from SPADSensor and is used
   for testing or simulations without actual hardware.

   Inherits:
       SPADSensor: Base class for SPAD sensors that defines common methods and
           properties.

   :Parameters: **config** (*PklSPADSensorConfig*) -- The configuration object for the fake sensor.


   .. py:method:: accumulate(num_samples = 1, *, average = True, return_entry = False, index = None)

      Accumulates the specified number of histogram samples from the pre-recorded
      data.

      :Parameters: **num_samples** (*int*) -- The number of samples to accumulate.

      :keyword average: Whether to average the accumulated samples. Defaults to
                        True.
      :kwtype average: bool
      :keyword return_entry: Whether to return the loaded entry. Defaults to
                             False.
      :kwtype return_entry: bool
      :keyword index: The index of the entry to load. If None, the next entry will
                      be loaded. Defaults to None. Will set the index within the handler.
      :kwtype index: int

      :returns: *np.ndarray | tuple[np.ndarray, dict] | None* --

                The accumulated histogram
                    data, or a tuple of the data and the loaded



   .. py:property:: num_bins
      :type: int

      Returns the number of bins in the sensor's histogram.

      :returns: *int* -- The number of bins in the histogram.


   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor as a tuple (width, height).

      :returns: *tuple[int, int]* -- The resolution (width, height) of the sensor.


   .. py:method:: close()

      Closes the sensor connection. This method is a no-op for this fake sensor.



