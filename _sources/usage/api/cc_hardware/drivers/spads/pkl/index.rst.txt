
:py:mod:`cc_hardware.drivers.spads.pkl`
=======================================


.. py:module:: cc_hardware.drivers.spads.pkl

.. autoapi-nested-parse::

   SPAD sensor driver that loads pre-recorded data from a PKL file.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.spads.pkl.PklSPADSensorConfig
   cc_hardware.drivers.spads.pkl.PklSPADSensor




.. py:class:: PklSPADSensorConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.pkl.PklSPADSensorConfig
      :parts: 1


   Configuration for the PklSPADSensor.

   :ivar pkl_path: Path to the PKL file containing pre-recorded data.
   :vartype pkl_path: Path | str
   :ivar index: Initial index for loading data from the PKL file. Default is 0.

   :vartype index: int
   :ivar loop: Whether to loop through the data when it reaches the end.
               Default is False.

   :vartype loop: bool


   .. py:property:: num_pixels
      :type: int

      Returns the total number of pixels in the sensor.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


.. py:class:: PklSPADSensor(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.spads.pkl.PklSPADSensor
      :parts: 1


   A fake SPAD sensor class that simulates sensor behavior by loading pre-recorded
   histogram data from a PKL file. This class inherits from SPADSensor and is used
   for testing or simulations without actual hardware.

   Inherits:
       SPADSensor: Base class for SPAD sensors that defines common methods and
           properties.

   :Parameters: **config** (*PklSPADSensorConfig*) -- The configuration object for the fake sensor.


   .. py:method:: accumulate(num_samples = 1, *, index = None)

      Accumulates the specified number of histogram samples from the pre-recorded
      data.

      :Parameters: **num_samples** (*int*) -- The number of samples to accumulate.



   .. py:property:: is_okay
      :type: bool

      Checks if the sensor is operational.


   .. py:method:: close()

      Closes the sensor connection. This method is a no-op for this fake sensor.



   .. py:property:: num_bins
      :type: int

      Returns the number of bins in the sensor's histogram. This indicates the
      number of discrete values or ranges that the sensor can measure. The total
      distance a sensor can measure is equal to the number of bins multiplied by
      the bin width.

      :returns: *int* -- The total number of bins in the histogram.


   .. py:property:: resolution
      :type: tuple[int, int]

      Returns the resolution of the sensor as a tuple (width, height). This indicates
      the spatial resolution of the sensor, where the width and height refer to the
      number of pixels or sampling points in the respective dimensions.

      :returns: *tuple[int, int]* --

                A tuple representing the sensor's resolution
                    (width, height).


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



