
:py:mod:`cc_hardware.drivers.stepper_motors.telemetrix_stepper`
===============================================================


.. py:module:: cc_hardware.drivers.stepper_motors.telemetrix_stepper

.. autoapi-nested-parse::

   This module contains the TelemetrixStepperMotor and TelemetrixStepperMotorSystem
   classes which are wrappers around the Telemetrix library's interface with stepper
   motors. These classes provide a unified interface for controlling stepper motors
   connected to a CNCShield using the Telemetrix library.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorConfig
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystemConfig
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXConfig
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYConfig
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZConfig
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryXConfig
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryY1Config
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryY2Config
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryConfig
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryXConfig
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryYConfig
   cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryConfig




.. py:class:: TelemetrixStepperMotorConfig



   Configuration for Telemetrix stepper motors.

   :ivar board: The Telemetrix board instance. Optional
                since we set the board in the system.

   :vartype board: telemetrix.Telemetrix | None
   :ivar distance_pin: The pin on the CNCShield that controls this motor's position
   :vartype distance_pin: int
   :ivar direction_pin: The pin on the CNCShield that controls this motor's
                        position
   :vartype direction_pin: int
   :ivar enable_pin: The pin that controls this motor's enable pin.
   :vartype enable_pin: int
   :ivar cm_per_rev: The number of centimeters per revolution of the motor.
   :vartype cm_per_rev: float
   :ivar steps_per_rev: The number of steps per revolution of the motor.
   :vartype steps_per_rev: int
   :ivar speed: The speed of the motor in cm/s.
   :vartype speed: int
   :ivar flip_direction: If True, the motor will move in the opposite direction.

   :vartype flip_direction: bool


.. py:class:: TelemetrixStepperMotor(config)



   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.


   .. py:method:: home()

      Homes the stepper motor to its reference or zero position.



   .. py:method:: move_to(position)

      Moves the stepper motor to a specific absolute position.

      :Parameters: **position** (*float*) -- The target absolute position to move the motor to.



   .. py:method:: move_by(relative_position)

      Moves the stepper motor by a specified relative amount from its current
      position.

      :Parameters: **relative_position** (*float*) -- The amount to move the motor by, relative to its
                   current position.



   .. py:method:: wait_for_move()

      Waits for the motor to complete its current move operation.



   .. py:property:: position
      :type: float

      Returns the current position of the stepper motor.


   .. py:property:: id
      :type: int

      Returns the motor's id.


   .. py:method:: set_target_position_cm(relative_cm)

      Sets the target position of the motor relative to current position.

      :Parameters: **relative_cm** (*float*) -- The relative position to move the motor to.



   .. py:method:: set_absolute_target_position_cm(position_cm)

      Sets the absolute target position in cm.



   .. py:method:: cm_to_revs(cm)

      Converts cm to steps.



   .. py:method:: revs_to_cm(revs)

      Converts steps to cm.



   .. py:property:: is_moving
      :type: bool

      Checks if the stepper motor is currently in motion.


   .. py:property:: is_okay
      :type: bool

      Checks if the stepper motor is in a healthy operational state.


   .. py:method:: close()

      Closes the connection or shuts down the stepper motor safely.



   .. py:method:: __getattr__(key)

      This is a passthrough to the underlying stepper object.

      Usually, stepper methods are accessed through the board with stepper_*. You
      can access these methods directly here using motorX.target_position(...) which
      equates to motorX._board.stepper_target_position(...). Also, if these methods
      require a motor as input, we'll pass it in.



.. py:class:: TelemetrixStepperMotorSystemConfig



   Configuration for Telemetrix stepper motor systems.

   :ivar port: The port to connect to the Telemetrix board. If None,
               the port will be attempted to be auto-detected.
   :vartype port: str | None
   :ivar arduino_wait: The time to wait for the Arduino to initialize in seconds.

   :vartype arduino_wait: int


.. py:class:: TelemetrixStepperMotorSystem(config)



   This is a wrapper of the Telemetrix library's interface with multiple
   stepper motors.


   .. py:method:: close()

      Closes the connection or shuts down the stepper motor safely.



.. py:class:: TelemetrixStepperMotorXConfig



   Configuration for Telemetrix stepper motors.

   :ivar board: The Telemetrix board instance. Optional
                since we set the board in the system.

   :vartype board: telemetrix.Telemetrix | None
   :ivar distance_pin: The pin on the CNCShield that controls this motor's position
   :vartype distance_pin: int
   :ivar direction_pin: The pin on the CNCShield that controls this motor's
                        position
   :vartype direction_pin: int
   :ivar enable_pin: The pin that controls this motor's enable pin.
   :vartype enable_pin: int
   :ivar cm_per_rev: The number of centimeters per revolution of the motor.
   :vartype cm_per_rev: float
   :ivar steps_per_rev: The number of steps per revolution of the motor.
   :vartype steps_per_rev: int
   :ivar speed: The speed of the motor in cm/s.
   :vartype speed: int
   :ivar flip_direction: If True, the motor will move in the opposite direction.

   :vartype flip_direction: bool


.. py:class:: TelemetrixStepperMotorYConfig



   Configuration for Telemetrix stepper motors.

   :ivar board: The Telemetrix board instance. Optional
                since we set the board in the system.

   :vartype board: telemetrix.Telemetrix | None
   :ivar distance_pin: The pin on the CNCShield that controls this motor's position
   :vartype distance_pin: int
   :ivar direction_pin: The pin on the CNCShield that controls this motor's
                        position
   :vartype direction_pin: int
   :ivar enable_pin: The pin that controls this motor's enable pin.
   :vartype enable_pin: int
   :ivar cm_per_rev: The number of centimeters per revolution of the motor.
   :vartype cm_per_rev: float
   :ivar steps_per_rev: The number of steps per revolution of the motor.
   :vartype steps_per_rev: int
   :ivar speed: The speed of the motor in cm/s.
   :vartype speed: int
   :ivar flip_direction: If True, the motor will move in the opposite direction.

   :vartype flip_direction: bool


.. py:class:: TelemetrixStepperMotorZConfig



   Configuration for Telemetrix stepper motors.

   :ivar board: The Telemetrix board instance. Optional
                since we set the board in the system.

   :vartype board: telemetrix.Telemetrix | None
   :ivar distance_pin: The pin on the CNCShield that controls this motor's position
   :vartype distance_pin: int
   :ivar direction_pin: The pin on the CNCShield that controls this motor's
                        position
   :vartype direction_pin: int
   :ivar enable_pin: The pin that controls this motor's enable pin.
   :vartype enable_pin: int
   :ivar cm_per_rev: The number of centimeters per revolution of the motor.
   :vartype cm_per_rev: float
   :ivar steps_per_rev: The number of steps per revolution of the motor.
   :vartype steps_per_rev: int
   :ivar speed: The speed of the motor in cm/s.
   :vartype speed: int
   :ivar flip_direction: If True, the motor will move in the opposite direction.

   :vartype flip_direction: bool


.. py:class:: DualDrive2AxisGantryXConfig



   Configuration for Telemetrix stepper motors.

   :ivar board: The Telemetrix board instance. Optional
                since we set the board in the system.

   :vartype board: telemetrix.Telemetrix | None
   :ivar distance_pin: The pin on the CNCShield that controls this motor's position
   :vartype distance_pin: int
   :ivar direction_pin: The pin on the CNCShield that controls this motor's
                        position
   :vartype direction_pin: int
   :ivar enable_pin: The pin that controls this motor's enable pin.
   :vartype enable_pin: int
   :ivar cm_per_rev: The number of centimeters per revolution of the motor.
   :vartype cm_per_rev: float
   :ivar steps_per_rev: The number of steps per revolution of the motor.
   :vartype steps_per_rev: int
   :ivar speed: The speed of the motor in cm/s.
   :vartype speed: int
   :ivar flip_direction: If True, the motor will move in the opposite direction.

   :vartype flip_direction: bool


.. py:class:: DualDrive2AxisGantryY1Config



   Configuration for Telemetrix stepper motors.

   :ivar board: The Telemetrix board instance. Optional
                since we set the board in the system.

   :vartype board: telemetrix.Telemetrix | None
   :ivar distance_pin: The pin on the CNCShield that controls this motor's position
   :vartype distance_pin: int
   :ivar direction_pin: The pin on the CNCShield that controls this motor's
                        position
   :vartype direction_pin: int
   :ivar enable_pin: The pin that controls this motor's enable pin.
   :vartype enable_pin: int
   :ivar cm_per_rev: The number of centimeters per revolution of the motor.
   :vartype cm_per_rev: float
   :ivar steps_per_rev: The number of steps per revolution of the motor.
   :vartype steps_per_rev: int
   :ivar speed: The speed of the motor in cm/s.
   :vartype speed: int
   :ivar flip_direction: If True, the motor will move in the opposite direction.

   :vartype flip_direction: bool


.. py:class:: DualDrive2AxisGantryY2Config



   Configuration for Telemetrix stepper motors.

   :ivar board: The Telemetrix board instance. Optional
                since we set the board in the system.

   :vartype board: telemetrix.Telemetrix | None
   :ivar distance_pin: The pin on the CNCShield that controls this motor's position
   :vartype distance_pin: int
   :ivar direction_pin: The pin on the CNCShield that controls this motor's
                        position
   :vartype direction_pin: int
   :ivar enable_pin: The pin that controls this motor's enable pin.
   :vartype enable_pin: int
   :ivar cm_per_rev: The number of centimeters per revolution of the motor.
   :vartype cm_per_rev: float
   :ivar steps_per_rev: The number of steps per revolution of the motor.
   :vartype steps_per_rev: int
   :ivar speed: The speed of the motor in cm/s.
   :vartype speed: int
   :ivar flip_direction: If True, the motor will move in the opposite direction.

   :vartype flip_direction: bool


.. py:class:: DualDrive2AxisGantryConfig



   Configuration for Telemetrix stepper motor systems.

   :ivar port: The port to connect to the Telemetrix board. If None,
               the port will be attempted to be auto-detected.
   :vartype port: str | None
   :ivar arduino_wait: The time to wait for the Arduino to initialize in seconds.

   :vartype arduino_wait: int


.. py:class:: SingleDrive1AxisGantryXConfig



   Configuration for Telemetrix stepper motors.

   :ivar board: The Telemetrix board instance. Optional
                since we set the board in the system.

   :vartype board: telemetrix.Telemetrix | None
   :ivar distance_pin: The pin on the CNCShield that controls this motor's position
   :vartype distance_pin: int
   :ivar direction_pin: The pin on the CNCShield that controls this motor's
                        position
   :vartype direction_pin: int
   :ivar enable_pin: The pin that controls this motor's enable pin.
   :vartype enable_pin: int
   :ivar cm_per_rev: The number of centimeters per revolution of the motor.
   :vartype cm_per_rev: float
   :ivar steps_per_rev: The number of steps per revolution of the motor.
   :vartype steps_per_rev: int
   :ivar speed: The speed of the motor in cm/s.
   :vartype speed: int
   :ivar flip_direction: If True, the motor will move in the opposite direction.

   :vartype flip_direction: bool


.. py:class:: SingleDrive1AxisGantryYConfig



   Configuration for Telemetrix stepper motors.

   :ivar board: The Telemetrix board instance. Optional
                since we set the board in the system.

   :vartype board: telemetrix.Telemetrix | None
   :ivar distance_pin: The pin on the CNCShield that controls this motor's position
   :vartype distance_pin: int
   :ivar direction_pin: The pin on the CNCShield that controls this motor's
                        position
   :vartype direction_pin: int
   :ivar enable_pin: The pin that controls this motor's enable pin.
   :vartype enable_pin: int
   :ivar cm_per_rev: The number of centimeters per revolution of the motor.
   :vartype cm_per_rev: float
   :ivar steps_per_rev: The number of steps per revolution of the motor.
   :vartype steps_per_rev: int
   :ivar speed: The speed of the motor in cm/s.
   :vartype speed: int
   :ivar flip_direction: If True, the motor will move in the opposite direction.

   :vartype flip_direction: bool


.. py:class:: SingleDrive1AxisGantryConfig



   Configuration for Telemetrix stepper motor systems.

   :ivar port: The port to connect to the Telemetrix board. If None,
               the port will be attempted to be auto-detected.
   :vartype port: str | None
   :ivar arduino_wait: The time to wait for the Arduino to initialize in seconds.

   :vartype arduino_wait: int


