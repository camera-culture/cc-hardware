
:py:mod:`cc_hardware.drivers.stepper_motors.stepper_motor`
==========================================================


.. py:module:: cc_hardware.drivers.stepper_motors.stepper_motor

.. autoapi-nested-parse::

   Stepper motor driver module for controlling stepper motors.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor
   cc_hardware.drivers.stepper_motors.stepper_motor.DummyStepperMotor




.. py:class:: StepperMotor


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor
      :parts: 1


   An abstract base class for controlling a stepper motor. This class provides a
   unified interface for common operations such as moving to a specific position,
   homing, and closing the motor. It also includes a property to check the operational
   status of the motor.

   Any subclass must implement all the defined abstract methods to ensure
   compatibility with the expected motor control behavior.


   .. py:method:: close()
      :abstractmethod:


      Closes the connection or shuts down the stepper motor safely. Implementations
      should ensure that the motor is properly powered down and any resources are
      released to avoid damage or memory leaks.



   .. py:method:: home()
      :abstractmethod:


      Homes the stepper motor to its reference or zero position. This method should
      move the motor to a predefined starting point, which could involve moving
      until a limit switch or sensor is triggered to establish a known starting
      position.



   .. py:method:: move_to(position)
      :abstractmethod:


      Moves the stepper motor to a specific absolute position.

      :Parameters: **position** (*float*) -- The target absolute position to move the motor to. The
                   interpretation of this value may depend on the specific implementation
                   and motor characteristics (e.g., steps, angle).



   .. py:method:: move_by(relative_position)
      :abstractmethod:


      Moves the stepper motor by a specified relative amount from its current
      position.

      :Parameters: **relative_position** (*float*) -- The amount to move the motor by, relative to its
                   current position. This could represent steps, degrees, or any other
                   unit, depending on the motor's configuration.



   .. py:method:: wait_for_move()
      :abstractmethod:


      Waits for the motor to complete its current move operation. This method should
      block the execution until the motor has reached its target position or
      completed the current motion command.



   .. py:property:: position
      :type: float
      :abstractmethod:

      Returns the current position of the stepper motor. The position value should
      represent the motor's current location in the same units as the move_to and
      move_by methods.

      :returns: *float* -- The current position of the motor.


   .. py:property:: is_okay
      :type: bool
      :abstractmethod:

      Checks if the stepper motor is in a healthy operational state. This could
      involve verifying that the motor is not in an error state, is receiving power,
      and has no detected hardware issues.

      :returns: *bool* -- True if the motor is operational, False otherwise.


   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
                  register(class_name: str, module_path: str, friend: str) -> None
      :classmethod:


      Registers a class in this registry.

      :Parameters: * **class_type** (*type[Self] | str*) -- A class object or a class name for lazy
                     loading.
                   * **module_path** (*str | None*) -- Path to the module if `class_type` is a string.
                   * **friend** (*str | None*) -- Name of another class to associate with this class.

      :returns: *type[Self] | None* --

                The registered class if `class_type` is a type,
                    otherwise None.



   .. py:method:: create_from_registry(name = None, *args, **kwargs)
      :classmethod:


      Creates an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** (*str | None*) -- The name of the class to instantiate. If None,
                     and only one class is registered, it will instantiate that class.
                   * **\*args** (*Any*) -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** (*Any*) -- Keyword arguments to pass to the class constructor.

      :returns: *Self | Any* --

                An instance of the requested class, or an associated
                    'friend' class.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



.. py:class:: DummyStepperMotor(*args, **kwargs)

   This is a dummy stepper motor class that does nothing. This is useful for testing
   or when you don't have the stepper connected to the computer. Also can be used for
   axes which don't have a motor attached to them.


