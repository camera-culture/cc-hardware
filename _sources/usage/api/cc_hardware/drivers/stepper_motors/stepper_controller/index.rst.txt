
:py:mod:`cc_hardware.drivers.stepper_motors.stepper_controller`
===============================================================


.. py:module:: cc_hardware.drivers.stepper_motors.stepper_controller

.. autoapi-nested-parse::

   Stepper motor controller classes.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.stepper_motors.stepper_controller.StepperController
   cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController




.. py:class:: StepperController


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.stepper_motors.stepper_controller.StepperController
      :parts: 1


   A base class that provides a registry for its subclasses and a factory method
   to instantiate them.

   Supports both direct and lazy registration of classes, allowing classes
   to be registered by name and module path for deferred loading. An enumeration
   of registered classes is also provided.


   .. py:method:: get_position(iter)
      :abstractmethod:


      Get the position for the given iteration.

      :Parameters: **iter** (*int*) -- The iteration number.

      :returns: *list[float]* -- The position for the given iteration.



   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
      :classmethod:


      Register the given class in this registry.

      :Parameters: * **class_type** -- The class to register. Can be a class type or a str defining
                     a class name to be lazily loaded. If the class_type is a type, this
                     method will return the class itself (useful for decorators).
                   * **module_path** -- The module path where the class can be found
                     (e.g. "my_module.my_submodule"). Only used if class_type is a str.
                     This is the full importable path to the class. The final class
                     path will be ``module_path.class_type``.

      :returns: The registered class if class_type is a class type, otherwise None.



   .. py:method:: create_from_registry(name, *args, **kwargs)
      :classmethod:


      Create an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** -- The name of the class to instantiate.
                   * **\*args** -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** -- Keyword arguments to pass to the class constructor.

      :returns: An instance of the requested class.

      :raises ValueError: If the class name is not registered.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



.. py:class:: SnakeStepperController(axis_configs)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController
      :parts: 1


   A base class that provides a registry for its subclasses and a factory method
   to instantiate them.

   Supports both direct and lazy registration of classes, allowing classes
   to be registered by name and module path for deferred loading. An enumeration
   of registered classes is also provided.


   .. py:method:: get_position(iter)

      Get the position that the controller should move to for the given iteration.

      :Parameters: **iter** (*int*) -- The current iteration index.

      :returns: *dict* --

                A dictionary with axis names as keys and current positions as values.
                      Returns an empty dictionary if the iteration exceeds total positions.



   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
      :classmethod:


      Register the given class in this registry.

      :Parameters: * **class_type** -- The class to register. Can be a class type or a str defining
                     a class name to be lazily loaded. If the class_type is a type, this
                     method will return the class itself (useful for decorators).
                   * **module_path** -- The module path where the class can be found
                     (e.g. "my_module.my_submodule"). Only used if class_type is a str.
                     This is the full importable path to the class. The final class
                     path will be ``module_path.class_type``.

      :returns: The registered class if class_type is a class type, otherwise None.



   .. py:method:: create_from_registry(name, *args, **kwargs)
      :classmethod:


      Create an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** -- The name of the class to instantiate.
                   * **\*args** -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** -- Keyword arguments to pass to the class constructor.

      :returns: An instance of the requested class.

      :raises ValueError: If the class name is not registered.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



