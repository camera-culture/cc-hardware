
:py:mod:`cc_hardware.drivers.stepper_motors.kinesis_stepper`
============================================================


.. py:module:: cc_hardware.drivers.stepper_motors.kinesis_stepper

.. autoapi-nested-parse::

   StepperMotor driver for Kinesis motors.

   The :class:`~cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor`
   class is a wrapper around the Thorlabs Kinesis C API
   (accessed via the ``pylablib.devices.Throlabs.KinesisMotor`` class). It provides a
   simple interface for controlling the motor.

   .. note::

       The Kinesis motor library is only supported on Windows and Linux.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor
   cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage
   cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem
   cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem




.. py:class:: KinesisStepperMotor(port, *, channel = 1, is_rack_system = True, scale = 1.0)



   A wrapper class for controlling a Kinesis motor using the StepperMotor interface.
   This class provides additional features such as homing, movement with limits, and
   scaling of motor positions.

   :Parameters: **port** (*str*) -- The port of the Kinesis motor.

   :keyword channel: The channel of the motor. Defaults to 1.
   :kwtype channel: int
   :keyword is_rack_system: Whether the motor is part of a rack system. Defaults to
                            True.
   :kwtype is_rack_system: bool
   :keyword scale: The scaling factor for motor positions. Defaults to 1.0.
   :kwtype scale: float


   .. py:method:: initialize(*, max_velocity = None, acceleration = None, lower_limit = None, upper_limit = None, clip_at_limits = False, initial_position = None, reference_position = None, home = False, check_homed = None)

      Initialize the Kinesis motor, with options to home and set a reference position.

      :keyword max_velocity: The maximum velocity of the motor. Defaults
                             to None.
      :kwtype max_velocity: float, optional
      :keyword acceleration: The acceleration of the motor. Defaults to
      :kwtype acceleration: float, optional
      :keyword lower_limit: The lower limit of the motor. Defaults to
                            None.
      :kwtype lower_limit: float, optional
      :keyword upper_limit: The upper limit of the motor. Defaults to
                            None.
      :kwtype upper_limit: float, optional
      :keyword clip_at_limits: Whether to clip the motor position at the
                               limits. Defaults to False.
      :kwtype clip_at_limits: bool, optional
      :keyword initial_position: The initial position to move the motor
                                 to. Defaults to None.
      :kwtype initial_position: float, optional
      :keyword reference_position: The reference position to set.
                                   Defaults to None.
      :kwtype reference_position: float, optional
      :keyword home: Whether to home the motor during initialization. Defaults to
                     False.
      :kwtype home: bool
      :keyword check_homed: Whether to check if the motor is homed.
                            Defaults to the opposite of `home`.
      :kwtype check_homed: bool, optional

      :returns: *bool* -- True if the motor is successfully initialized, False otherwise.



   .. py:method:: close(home = False)

      Closes the Kinesis motor connection, with an optional homing operation.

      :Parameters: **home** (*bool*) -- Whether to home the motor before closing. Defaults to False.



   .. py:method:: home(**kwargs)

      Homes the Kinesis motor to its reference or zero position.



   .. py:method:: move_by(relative_position)

      Moves the motor by a specified relative position.

      :Parameters: **relative_position** (*float*) -- The amount to move the motor by, relative to
                   its current position.



   .. py:method:: move_to(position)

      Moves the motor to a specified absolute position.

      :Parameters: **position** (*float*) -- The target absolute position to move the motor to.



   .. py:method:: wait_for_move()

      Waits for the motor to complete its current move operation.



   .. py:property:: position
      :type: float

      Get the current absolute position of the motor.

      :returns: *float* --

                The current position of the motor, or 0.0 if the motor is not
                    operational.


   .. py:property:: is_okay
      :type: bool

      Check if the motor is in a healthy operational state.

      :returns: *bool* -- True if the motor is operational, False otherwise.


   .. py:property:: lower_limit
      :type: float | None

      Get or set the lower movement limit of the motor.

      :returns: *float | None* -- The current lower limit, or None if not set.


   .. py:property:: upper_limit
      :type: float | None

      Get or set the upper movement limit of the motor.

      :returns: *float | None* -- The current upper limit, or None if not set.


   .. py:property:: is_moving
      :type: bool
      :abstractmethod:

      Checks if the stepper motor is currently in motion.

      :returns: *bool* -- True if the motor is moving, False otherwise.


.. py:class:: KinesisRotationStage(*args, is_rack_system = None, scale = None, **kwargs)



   A wrapper class for controlling a Kinesis motor using the StepperMotor interface.
   This class provides additional features such as homing, movement with limits, and
   scaling of motor positions.

   :Parameters: **port** (*str*) -- The port of the Kinesis motor.

   :keyword channel: The channel of the motor. Defaults to 1.
   :kwtype channel: int
   :keyword is_rack_system: Whether the motor is part of a rack system. Defaults to
                            True.
   :kwtype is_rack_system: bool
   :keyword scale: The scaling factor for motor positions. Defaults to 1.0.
   :kwtype scale: float


   .. py:method:: initialize(**kwargs)

      Initialize the Kinesis motor, with options to home and set a reference position.

      :keyword max_velocity: The maximum velocity of the motor. Defaults
                             to None.
      :kwtype max_velocity: float, optional
      :keyword acceleration: The acceleration of the motor. Defaults to
      :kwtype acceleration: float, optional
      :keyword lower_limit: The lower limit of the motor. Defaults to
                            None.
      :kwtype lower_limit: float, optional
      :keyword upper_limit: The upper limit of the motor. Defaults to
                            None.
      :kwtype upper_limit: float, optional
      :keyword clip_at_limits: Whether to clip the motor position at the
                               limits. Defaults to False.
      :kwtype clip_at_limits: bool, optional
      :keyword initial_position: The initial position to move the motor
                                 to. Defaults to None.
      :kwtype initial_position: float, optional
      :keyword reference_position: The reference position to set.
                                   Defaults to None.
      :kwtype reference_position: float, optional
      :keyword home: Whether to home the motor during initialization. Defaults to
                     False.
      :kwtype home: bool
      :keyword check_homed: Whether to check if the motor is homed.
                            Defaults to the opposite of `home`.
      :kwtype check_homed: bool, optional

      :returns: *bool* -- True if the motor is successfully initialized, False otherwise.



   .. py:method:: close(home = False)

      Closes the Kinesis motor connection, with an optional homing operation.

      :Parameters: **home** (*bool*) -- Whether to home the motor before closing. Defaults to False.



   .. py:method:: home(**kwargs)

      Homes the Kinesis motor to its reference or zero position.



   .. py:method:: move_by(relative_position)

      Moves the motor by a specified relative position.

      :Parameters: **relative_position** (*float*) -- The amount to move the motor by, relative to
                   its current position.



   .. py:method:: move_to(position)

      Moves the motor to a specified absolute position.

      :Parameters: **position** (*float*) -- The target absolute position to move the motor to.



   .. py:method:: wait_for_move()

      Waits for the motor to complete its current move operation.



   .. py:property:: position
      :type: float

      Get the current absolute position of the motor.

      :returns: *float* --

                The current position of the motor, or 0.0 if the motor is not
                    operational.


   .. py:property:: is_okay
      :type: bool

      Check if the motor is in a healthy operational state.

      :returns: *bool* -- True if the motor is operational, False otherwise.


   .. py:property:: lower_limit
      :type: float | None

      Get or set the lower movement limit of the motor.

      :returns: *float | None* -- The current lower limit, or None if not set.


   .. py:property:: upper_limit
      :type: float | None

      Get or set the upper movement limit of the motor.

      :returns: *float | None* -- The current upper limit, or None if not set.


   .. py:property:: is_moving
      :type: bool
      :abstractmethod:

      Checks if the stepper motor is currently in motion.

      :returns: *bool* -- True if the motor is moving, False otherwise.


.. py:class:: KinesisStepperMotorSystem(port, axes)



   A wrapper around multiple Kinesis stepper motors which defines the system as a
   whole.

   :Parameters: * **port** (*str*) -- The port of the Kinesis motor device (has different channels for
                  different axes).
                * **axes** (*dict[StepperMotorSystemAxis, list[type[KinesisStepperMotor]]]*) -- A
                  dictionary of axes and the motors that are attached to them. The motors are
                  specified as classes, which will be instantiated with the port and any
                  additional keyword arguments.


   .. py:method:: move_to(*positions)
                  move_to(**positions: float)

      Move to the specified position using positional or keyword arguments.



   .. py:method:: move_by(*positions)
                  move_by(block: bool = True, **positions: float)

      Moves the steppers to the specified positions.



   .. py:property:: is_moving
      :type: bool

      Returns True if any motor is moving.


   .. py:method:: __getattr__(name)

      This is a passthrough to the underlying motor objects.



   .. py:property:: axes
      :type: dict[StepperMotorSystemAxis, list[cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor]]

      Returns the axes of the stepper motor system.


.. py:class:: AzimuthElevationSystem(port)



   A predefined multi-axis system for an azimuth-elevation setup.

   :Parameters: **port** (*str*) -- The port of the Kinesis motor device.


   .. py:method:: move_to(*positions)
                  move_to(**positions: float)

      Move to the specified position using positional or keyword arguments.



   .. py:method:: move_by(*positions)
                  move_by(block: bool = True, **positions: float)

      Moves the steppers to the specified positions.



   .. py:property:: is_moving
      :type: bool

      Returns True if any motor is moving.


   .. py:method:: __getattr__(name)

      This is a passthrough to the underlying motor objects.



   .. py:property:: axes
      :type: dict[StepperMotorSystemAxis, list[cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor]]

      Returns the axes of the stepper motor system.


