
:py:mod:`cc_hardware.drivers.sensor`
====================================


.. py:module:: cc_hardware.drivers.sensor

.. autoapi-nested-parse::

   Base classes for sensors and sensor data processing.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.sensor.SensorConfig
   cc_hardware.drivers.sensor.Sensor
   cc_hardware.drivers.sensor.SensorData




.. py:class:: SensorConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.sensor.SensorConfig
      :parts: 1


   Configuration for sensors.

   When defining a new sensor, create a subclass of this configuration class
   and add any necessary parameters.

   :ivar settings: A dictionary of settings for the stepper motor.
                   These are used for UI elements. Actual settings should be defined
                   within the subclass.

   :vartype settings: dict[str, Setting]


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


.. py:class:: Sensor(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.sensor.Sensor
      :parts: 1


   Abstract base class for sensors.

   :Parameters: **config** (*SensorConfig*) -- The sensor configuration.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: reset(**kwargs)

      Resets the sensor configuration to its initial state. This method can be
      overridden by subclasses to implement specific reset behavior.

      :Parameters: **\*\*kwargs** -- Additional parameters that may be used for resetting.



   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:property:: is_okay
      :type: bool
      :abstractmethod:

      Checks if the sensor is operational.


   .. py:method:: close()
      :abstractmethod:


      Closes the sensor and releases any resources.



   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



.. py:class:: SensorData


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.sensor.SensorData
      :parts: 1


   Abstract base class for handling sensor data.


   .. py:method:: reset()

      Resets the sensor data to its initial state.



   .. py:method:: process(data)
      :abstractmethod:


      Processes a new row of data.

      :Parameters: **data** (*Any*) -- Sensor data to process.



   .. py:method:: get_data(*, verify_has_data = True)

      Retrieves the processed sensor data.



   .. py:property:: has_data
      :type: bool
      :abstractmethod:

      Checks if there is any processed data available.


