
:py:mod:`cc_hardware.drivers.cameras.realsense`
===============================================


.. py:module:: cc_hardware.drivers.cameras.realsense

.. autoapi-nested-parse::

   Camera driver for Intel RealSense devices.

   The :class:`~cc_hardware.drivers.cameras.realsense.RealsenseCamera` class is a wrapper
   around the PyRealSense library for interfacing with a D435i RealSense camera. It
   provides a simple interface for capturing images and setting camera parameters. It is
   implemented as a singleton to ensure that only one instance of the camera is created.
   It will capture both color and depth images, but the
   :func:`~cc_hardware.drivers.cameras.realsense.RealsenseCamera.accumulate` method will
   only return the color image by default (set ``return_depth=True`` to return the depth
   image, as well).



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.cameras.realsense.RealsenseConfig
   cc_hardware.drivers.cameras.realsense.RealsenseCamera




.. py:class:: RealsenseConfig



   Configuration for Camera sensors.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


.. py:class:: RealsenseCamera(config)



   Camera class for Intel RealSense devices. Captures RGB and depth images on the main
   thread without using background workers.


   .. py:property:: config
      :type: RealsenseConfig

      Get the RealSense configuration object.

      :returns: *rs.config* -- The RealSense configuration object.


   .. py:method:: accumulate(num_samples = 1, *, return_rgb = True, return_depth = False, return_ir = False)

      Accumulates RGB and depth images directly from the pipeline.

      :Parameters: **num_samples** (*int*) -- Number of image samples to accumulate.

      :keyword return_rgb: Whether to return RGB images. Defaults to True.
      :kwtype return_rgb: bool
      :keyword return_depth: Whether to return depth images. Defaults to False.
      :kwtype return_depth: bool

      :returns: *List[np.ndarray] or Tuple[List[np.ndarray], List[np.ndarray]]* --   Accumulated images. Returns a list of RGB images, depth images, or both.



   .. py:property:: resolution
      :type: tuple[int, int]

      Return the resolution (width, height) of the camera.

      :returns: *Tuple[int, int]* -- The resolution of the color stream.


   .. py:property:: is_okay
      :type: bool

      Check if the camera is properly initialized.

      :returns: *bool* -- True if the camera is initialized and ready, False otherwise.


   .. py:property:: intrinsic_matrix
      :type: numpy.ndarray
      :abstractmethod:

      Get the intrinsic matrix of the camera.

      :returns: *np.ndarray* -- The intrinsic matrix of the camera.

      :raises NotImplementedError: This method is not yet implemented.


   .. py:property:: distortion_coefficients
      :type: numpy.ndarray
      :abstractmethod:

      Get the distortion coefficients of the camera.

      :returns: *np.ndarray* -- The distortion coefficients of the camera.

      :raises NotImplementedError: This method is not yet implemented.


   .. py:method:: close()

      Deinitializes the camera and stops the pipeline if running.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: reset(**kwargs)

      Resets the sensor configuration to its initial state. This method can be
      overridden by subclasses to implement specific reset behavior.

      :Parameters: **\*\*kwargs** -- Additional parameters that may be used for resetting.



   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



