
:py:mod:`cc_hardware.drivers.cameras.realsense`
===============================================


.. py:module:: cc_hardware.drivers.cameras.realsense

.. autoapi-nested-parse::

   Camera driver for Intel RealSense devices.

   The :class:`~cc_hardware.drivers.cameras.realsense.RealsenseCamera` class is a wrapper
   around the PyRealSense library for interfacing with a D435i RealSense camera. It
   provides a simple interface for capturing images and setting camera parameters. It is
   implemented as a singleton to ensure that only one instance of the camera is created.
   It will capture both color and depth images, but the
   :func:`~cc_hardware.drivers.cameras.realsense.RealsenseCamera.accumulate` method will
   only return the color image by default (set ``return_depth=True`` to return the depth
   image, as well).



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.cameras.realsense.RealsenseCamera




.. py:class:: RealsenseCamera(camera_index = 0, start_pipeline_once = True, force_autoexposure = False, exposure = None)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.cameras.realsense.RealsenseCamera
      :parts: 1


   Camera class for Intel RealSense devices. Captures RGB and depth images
   in a background thread and stores them in a queue.


   .. py:method:: accumulate(num_samples, return_rgb = True, return_depth = False)

      Accumulates RGB and depth images from the queue.

      :Parameters: **num_samples** (*int*) -- Number of image samples to accumulate.

      :keyword return_rgb: Whether to return RGB images. Defaults to True.
      :kwtype return_rgb: bool
      :keyword return_depth: Whether to return depth images. Defaults to False.
      :kwtype return_depth: bool

      :returns: *List[np.ndarray] or Tuple[List[np.ndarray], List[np.ndarray]]* --   Accumulated images. Returns a list of RGB images, depth images, or both.



   .. py:property:: resolution
      :type: tuple[int, int]

      Return the resolution (width, height) of the camera.

      :returns: *Tuple[int, int]* -- The resolution of the color stream.


   .. py:property:: is_okay
      :type: bool

      Check if the camera is properly initialized.

      :returns: *bool* -- True if the camera is initialized and ready, False otherwise.


   .. py:property:: intrinsic_matrix
      :type: numpy.ndarray
      :abstractmethod:

      Get the intrinsic matrix of the camera.

      :returns: *np.ndarray* -- The intrinsic matrix of the camera.

      :raises NotImplementedError: This method is not yet implemented.


   .. py:property:: distortion_coefficients
      :type: numpy.ndarray
      :abstractmethod:

      Get the distortion coefficients of the camera.

      :returns: *np.ndarray* -- The distortion coefficients of the camera.

      :raises NotImplementedError: This method is not yet implemented.


   .. py:method:: close()

      Stops the background capture thread and deinitializes the camera.



   .. py:property:: config
      :type: SensorConfig
      :abstractmethod:

      Retrieves the sensor configuration.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: update(**kwargs)
      :abstractmethod:


      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.



   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
      :classmethod:


      Register the given class in this registry.

      :Parameters: * **class_type** -- The class to register. Can be a class type or a str defining
                     a class name to be lazily loaded. If the class_type is a type, this
                     method will return the class itself (useful for decorators).
                   * **module_path** -- The module path where the class can be found
                     (e.g. "my_module.my_submodule"). Only used if class_type is a str.
                     This is the full importable path to the class. The final class
                     path will be ``module_path.class_type``.

      :returns: The registered class if class_type is a class type, otherwise None.



   .. py:method:: create_from_registry(name, *args, **kwargs)
      :classmethod:


      Create an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** -- The name of the class to instantiate.
                   * **\*args** -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** -- Keyword arguments to pass to the class constructor.

      :returns: An instance of the requested class.

      :raises ValueError: If the class name is not registered.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



