
:py:mod:`cc_hardware.drivers.cameras`
=====================================


.. py:module:: cc_hardware.drivers.cameras

.. autoapi-nested-parse::

   Camera drivers for the cc-hardware package.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   camera/index.rst
   flir/index.rst
   pkl/index.rst
   realsense/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.cameras.Camera
   cc_hardware.drivers.cameras.CameraConfig




.. py:class:: Camera(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.cameras.Camera
      :parts: 1


   Abstract base class for a Camera sensor, extending the Sensor class.
   Defines methods and properties for specific for cameras.


   .. py:method:: accumulate(num_samples = 1, *, average)
      :abstractmethod:


      Accumulate a specified number of samples from the camera.

      :Parameters: **num_samples** (*int*) -- Number of samples to accumulate.

      :keyword average: Whether to average the accumulated samples.
      :kwtype average: bool

      :returns: *np.ndarray* -- The accumulated samples as an array.



   .. py:property:: distortion_coefficients
      :type: numpy.ndarray
      :abstractmethod:

      Get the camera's distortion coefficients.

      :returns: *np.ndarray* -- An array representing the distortion coefficients.


   .. py:property:: intrinsic_matrix
      :type: numpy.ndarray
      :abstractmethod:

      Get the camera's intrinsic matrix.

      :returns: *np.ndarray* -- A 3x3 matrix representing the camera intrinsics.


   .. py:property:: resolution
      :type: tuple[int, int]
      :abstractmethod:

      Get the camera's resolution.

      :returns: *tuple[int, int]* --

                A tuple containing the width and height of
                                 the camera resolution.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:property:: is_okay
      :type: bool
      :abstractmethod:

      Checks if the sensor is operational.


   .. py:method:: close()
      :abstractmethod:


      Closes the sensor and releases any resources.



   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



.. py:class:: CameraConfig


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.cameras.CameraConfig
      :parts: 1


   Configuration for Camera sensors.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


