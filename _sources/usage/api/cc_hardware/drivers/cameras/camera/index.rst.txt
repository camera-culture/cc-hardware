
:py:mod:`cc_hardware.drivers.cameras.camera`
============================================


.. py:module:: cc_hardware.drivers.cameras.camera

.. autoapi-nested-parse::

   Base class for cameras.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.cameras.camera.Camera




.. py:class:: Camera(config)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.cameras.camera.Camera
      :parts: 1


   Abstract base class for a Camera sensor, extending the Sensor class.
   Defines methods and properties for specific for cameras.


   .. py:method:: accumulate(num_samples, *, average)
      :abstractmethod:


      Accumulate a specified number of samples from the camera.

      :Parameters: **num_samples** (*int*) -- Number of samples to accumulate.

      :keyword average: Whether to average the accumulated samples.
      :kwtype average: bool

      :returns: *np.ndarray* -- The accumulated samples as an array.



   .. py:property:: distortion_coefficients
      :type: numpy.ndarray
      :abstractmethod:

      Get the camera's distortion coefficients.

      :returns: *np.ndarray* -- An array representing the distortion coefficients.


   .. py:property:: intrinsic_matrix
      :type: numpy.ndarray
      :abstractmethod:

      Get the camera's intrinsic matrix.

      :returns: *np.ndarray* -- A 3x3 matrix representing the camera intrinsics.


   .. py:property:: resolution
      :type: tuple[int, int]
      :abstractmethod:

      Get the camera's resolution.

      :returns: *tuple[int, int]* --

                A tuple containing the width and height of
                                 the camera resolution.


   .. py:property:: config
      :type: SensorConfig
      :abstractmethod:

      Retrieves the sensor configuration.


   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: update(**kwargs)
      :abstractmethod:


      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.



   .. py:property:: is_okay
      :type: bool
      :abstractmethod:

      Checks if the sensor is operational.


   .. py:method:: close()
      :abstractmethod:


      Closes the sensor and releases any resources.



   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
      :classmethod:


      Register the given class in this registry.

      :Parameters: * **class_type** -- The class to register. Can be a class type or a str defining
                     a class name to be lazily loaded. If the class_type is a type, this
                     method will return the class itself (useful for decorators).
                   * **module_path** -- The module path where the class can be found
                     (e.g. "my_module.my_submodule"). Only used if class_type is a str.
                     This is the full importable path to the class. The final class
                     path will be ``module_path.class_type``.

      :returns: The registered class if class_type is a class type, otherwise None.



   .. py:method:: create_from_registry(name, *args, **kwargs)
      :classmethod:


      Create an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** -- The name of the class to instantiate.
                   * **\*args** -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** -- Keyword arguments to pass to the class constructor.

      :returns: An instance of the requested class.

      :raises ValueError: If the class name is not registered.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



