
:py:mod:`cc_hardware.drivers.cameras.pkl`
=========================================


.. py:module:: cc_hardware.drivers.cameras.pkl

.. autoapi-nested-parse::

   Camera sensor driver that loads pre-recorded data from a PKL file.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.cameras.pkl.PklCamera




.. py:class:: PklCamera(pkl_path)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.cameras.pkl.PklCamera
      :parts: 1


   Camera class that loads and reads images from a pickle (.pkl) file.
   Inherits from the abstract Camera class.


   .. py:method:: accumulate(num_samples)

      Accumulate a specified number of image samples.

      :Parameters: **num_samples** (*int*) -- Number of image samples to accumulate.

      :returns: *np.ndarray* --

                Array containing the accumulated images.
                            Returns None if no data is available.



   .. py:property:: resolution
      :type: tuple[int, int]

      Get the resolution of the images.

      :returns: *tuple[int, int]* --

                A tuple containing the height and width
                                 of the images.


   .. py:property:: distortion_coefficients
      :type: numpy.ndarray

      Get the distortion coefficients of the camera.

      :returns: *np.ndarray* -- Array of distortion coefficients.


   .. py:property:: intrinsic_matrix
      :type: numpy.ndarray

      Get the intrinsic matrix of the camera.

      :returns: *np.ndarray* --

                A 3x3 array representing the intrinsic matrix
                            of the camera.


   .. py:property:: is_okay
      :type: bool

      Check if the data iterator is not exhausted.

      :returns: *bool* -- True if the iterator is still active, False otherwise.


   .. py:method:: close()

      Close any open resources. This method is a placeholder for
      potential cleanup logic.



   .. py:property:: settings
      :type: dict[str, cc_hardware.utils.setting.Setting]

      Retrieves the sensor settings.


   .. py:method:: update(**kwargs)

      Updates the sensor configuration with provided keyword arguments. If there are
      any changes given via the kwargs or in the settings, the configuration is sent
      to the sensor.

      :Parameters: **\*\*kwargs** -- Configuration parameters to update. Keys must match
                   the fields of SensorConfig.

      :returns: *bool* -- True if the configuration was updated. False if no changes were made.



   .. py:method:: calibrate()
      :abstractmethod:


      Calibrates the sensor.



   .. py:method:: __del__()

      Destructor to ensure the sensor is properly closed.



   .. py:property:: config
      :type: T

      Retrieves the component configuration.


   .. py:method:: create_from_config(config, **kwargs)
      :classmethod:


      Create an instance of the class from a configuration object.

      :Parameters: **config** (*T*) -- The configuration object.

      :returns: *Self* -- An instance of the class.



   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
                  register(class_name: str, module_path: str, friend: str) -> None
      :classmethod:


      Registers a class in this registry.

      :Parameters: * **class_type** (*type[Self] | str*) -- A class object or a class name for lazy
                     loading.
                   * **module_path** (*str | None*) -- Path to the module if `class_type` is a string.
                   * **friend** (*str | None*) -- Name of another class to associate with this class.

      :returns: *type[Self] | None* --

                The registered class if `class_type` is a type,
                    otherwise None.



   .. py:method:: create_from_registry(name = None, *args, **kwargs)
      :classmethod:


      Creates an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** (*str | None*) -- The name of the class to instantiate. If None,
                     and only one class is registered, it will instantiate that class.
                   * **\*args** (*Any*) -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** (*Any*) -- Keyword arguments to pass to the class constructor.

      :returns: *Self | Any* --

                An instance of the requested class, or an associated
                    'friend' class.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



