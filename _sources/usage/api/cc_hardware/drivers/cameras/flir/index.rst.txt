
:py:mod:`cc_hardware.drivers.cameras.flir`
==========================================


.. py:module:: cc_hardware.drivers.cameras.flir

.. autoapi-nested-parse::

   The :class:`~cc_hardware.drivers.cameras.flir.FlirCamera` class is a wrapper around
   the PySpin library for interfacing with FLIR cameras.

   It provides a simple interface for capturing images and setting camera
   parameters. It is implemented as a singleton to ensure that only one instance of the
   camera is created. To create a new instance of the camera, one has to override the base
   :class:`~cc_hardware.drivers.cameras.flir.FlirCamera` class and implement the
   :func:`~drivers.cameras.flir.FlirCamera.distortion_coefficients` and
   :func:`~drivers.cameras.flir.FlirCamera.intrinsic_matrix` methods.

   Example:

   .. code-block:: python

       class GrasshopperFlirCamera(FlirCamera):
           """
           Specialized camera class for a Grasshopper FLIR camera model.
           Inherits from FlirCamera and provides specific intrinsic and
           distortion parameters.
           """

           DISTORTION_COEFFICIENTS = np.array([-0.036, -0.145, 0.001, 0.0, 1.155])
           INTRINSIC_MATRIX = np.array(
               [[1815.5, 0.0, 0.0], [0.0, 1817.753, 0.0], [721.299, 531.352, 1.0]]
           )

           @property
           @override
           def distortion_coefficients(self) -> np.ndarray:
               """
               Get the distortion coefficients of the Grasshopper FLIR camera.

               Returns:
                   np.ndarray: Array of distortion coefficients.
               """
               return self.DISTORTION_COEFFICIENTS

           @property
           @override
           def intrinsic_matrix(self) -> np.ndarray:
               """
               Get the intrinsic matrix of the Grasshopper FLIR camera.

               Returns:
                   np.ndarray: A 3x3 array representing the intrinsic matrix
                               of the camera.
               """
               return self.INTRINSIC_MATRIX

   PySpin Installation
   -------------------

   You will need to install PySpin and Spinnaker
   `as usual <https://www.flir.co.uk/products/spinnaker-sdk>`_.
   As of writing (2024-09-21), PySpin only supports <= 3.10. To install PySpin on newer
   versions of Python, you can use the following steps:

   .. code-block:: bash

       # After installing Spinnaker, you're instructed to run the following command:
       tar -xvzf spinnaker_python-<version>-cp<version>-<os>-<version>-<arch>.tar.gz
       pip install spinnaker_python-<version>-cp<version>-<os>-<version>-<arch>.whl

       # But this will fail for python versions > 3.10. To install on newer versions,
       # replace the cp<version> with your python version. For instance, for python 3.11 on
       # M2 Mac, the command would turn from
       tar -xvzf spinnaker_python-4.1.0.172-cp310-cp310-macosx_13_0_arm64.tar.gz
       pip instal spinnaker_python-4.1.0.172-cp310-cp310-macosx_13_0_arm64.whl
       # To
       tar -xvzf spinnaker_python-4.1.0.172-cp310-cp310-macosx_13_0_arm64.tar.gz
       mv spinnaker_python-4.1.0.172-cp310-cp310-macosx_13_0_arm64.whl         spinnaker_python-4.1.0.172-cp311-cp311-macosx_13_0_arm64.whl
       pip install spinnaker_python-4.1.0.172-cp311-cp311-macosx_13_0_arm64.whl

       # And then go to your site packages and do
       mv _PySpin.cpython-310-darwin.so _PySpin.cpython-311-darwin.so

   .. warning::

       Installing PySpin on newer versions of Python is not officially supported and may
       cause issues. Use at your own risk.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.drivers.cameras.flir.FlirCamera
   cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera




.. py:class:: FlirCamera(camera_index = 0)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.cameras.flir.FlirCamera
      :parts: 1


   A singleton camera class for FLIR cameras using the PySpin library.
   Captures images in a background thread and stores them in a queue.


   .. py:method:: accumulate(num_samples, *, average = False)

      Accumulate a specified number of image samples from the queue.

      :Parameters: **num_samples** (*int*) -- Number of image samples to accumulate.

      :keyword average: Whether to average the accumulated
                        images. Defaults to False.
      :kwtype average: bool, optional

      :returns: *np.ndarray* --

                Array containing the accumulated or averaged images.
                            Returns None if no data is available.



   .. py:property:: resolution
      :type: tuple[int, int]

      Get the resolution (width, height) of the camera.

      :returns: *tuple[int, int]* --

                A tuple containing the width and height
                                 of the camera.


   .. py:property:: is_okay
      :type: bool

      Check if the camera is properly initialized.

      :returns: *bool* --

                True if the camera is initialized and streaming properly,
                      False otherwise.


   .. py:method:: close()

      Stops the background capture thread and deinitializes the camera.



.. py:class:: GrasshopperFlirCamera(camera_index = 0)


   .. autoapi-inheritance-diagram:: cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera
      :parts: 1


   Specialized camera class for a Grasshopper FLIR camera model.
   Inherits from FlirCamera and provides specific intrinsic and
   distortion parameters.


   .. py:property:: distortion_coefficients
      :type: numpy.ndarray

      Get the distortion coefficients of the Grasshopper FLIR camera.

      :returns: *np.ndarray* -- Array of distortion coefficients.


   .. py:property:: intrinsic_matrix
      :type: numpy.ndarray

      Get the intrinsic matrix of the Grasshopper FLIR camera.

      :returns: *np.ndarray* --

                A 3x3 array representing the intrinsic matrix
                            of the camera.


   .. py:method:: accumulate(num_samples, *, average = False)

      Accumulate a specified number of image samples from the queue.

      :Parameters: **num_samples** (*int*) -- Number of image samples to accumulate.

      :keyword average: Whether to average the accumulated
                        images. Defaults to False.
      :kwtype average: bool, optional

      :returns: *np.ndarray* --

                Array containing the accumulated or averaged images.
                            Returns None if no data is available.



   .. py:property:: resolution
      :type: tuple[int, int]

      Get the resolution (width, height) of the camera.

      :returns: *tuple[int, int]* --

                A tuple containing the width and height
                                 of the camera.


   .. py:property:: is_okay
      :type: bool

      Check if the camera is properly initialized.

      :returns: *bool* --

                True if the camera is initialized and streaming properly,
                      False otherwise.


   .. py:method:: close()

      Stops the background capture thread and deinitializes the camera.



