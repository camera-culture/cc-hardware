
:py:mod:`cc_hardware.algos.aruco`
=================================


.. py:module:: cc_hardware.algos.aruco

.. autoapi-nested-parse::

   An algorithm to localize ArUco markers using camera images.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.algos.aruco.ArucoLocalizationAlgorithm




.. py:class:: ArucoLocalizationAlgorithm(sensor, *, aruco_dict, marker_size, origin_id = -1, num_samples = 1, **marker_ids)


   .. autoapi-inheritance-diagram:: cc_hardware.algos.aruco.ArucoLocalizationAlgorithm
      :parts: 1


   An algorithm to localize ArUco markers using camera images.

   This class processes images from a camera sensor to detect ArUco markers and
   compute their poses relative to an origin marker.


   .. py:method:: run(*, show = False, save = False, filename = None, return_images = False)

      Processes images and returns the localization results.

      :Parameters: * **show** (*bool, optional*) -- Whether to display the image with detected markers.
                     Defaults to False.
                   * **save** (*bool, optional*) -- Whether to save the image with detected markers.
                     Defaults to False.
                   * **filename** (*Path | str | None, optional*) -- The filename to save the image or
                     video. Defaults to None.
                   * **return_images** (*bool, optional*) -- Whether to return the processed images.
                     Defaults to False.

      :returns: *dict | list* --

                A dictionary containing localization results for the specified
                    markers. A list of processed images (if return_images is True).



   .. py:property:: is_okay
      :type: bool

      Checks if the algorithm and sensor are functioning properly.

      :returns: *bool* -- True if both the algorithm and sensor are okay, False otherwise.


   .. py:method:: close()

      Closes resources associated with the algorithm.

      Closes any open writers and releases resources.



   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
                  register(class_name: str, module_path: str, friend: str) -> None
      :classmethod:


      Registers a class in this registry.

      :Parameters: * **class_type** (*type[Self] | str*) -- A class object or a class name for lazy
                     loading.
                   * **module_path** (*str | None*) -- Path to the module if `class_type` is a string.
                   * **friend** (*str | None*) -- Name of another class to associate with this class.

      :returns: *type[Self] | None* --

                The registered class if `class_type` is a type,
                    otherwise None.



   .. py:method:: create_from_registry(name = None, *args, **kwargs)
      :classmethod:


      Creates an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** (*str | None*) -- The name of the class to instantiate. If None,
                     and only one class is registered, it will instantiate that class.
                   * **\*args** (*Any*) -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** (*Any*) -- Keyword arguments to pass to the class constructor.

      :returns: *Self | Any* --

                An instance of the requested class, or an associated
                    'friend' class.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



