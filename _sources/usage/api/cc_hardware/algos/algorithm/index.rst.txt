
:py:mod:`cc_hardware.algos.algorithm`
=====================================


.. py:module:: cc_hardware.algos.algorithm

.. autoapi-nested-parse::

   This module contains the Algorithm interface that all algorithms should implement.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.algos.algorithm.Algorithm




.. py:class:: Algorithm



   This is an algorithm interface that all algorithms should implement.


   .. py:method:: run()
      :abstractmethod:


      Runs the algorithm and returns the result.

      Each subclass can add additional parameters to this method and specify it's
      return type.



   .. py:property:: is_okay
      :type: bool
      :abstractmethod:

      Returns True if the algorithm is okay to run, False otherwise.
      An algorithm may not be okay if it either has not been initialized properly or
      if it has encountered an error.


   .. py:method:: close()

      Closes the algorithm and releases any resources. A default implementation
      is provided here, but subclasses can override this method to provide their own
      implementation.



   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
                  register(class_name: str, module_path: str, friend: str) -> None
      :classmethod:


      Registers a class in this registry.

      :Parameters: * **class_type** (*type[Self] | str*) -- A class object or a class name for lazy
                     loading.
                   * **module_path** (*str | None*) -- Path to the module if `class_type` is a string.
                   * **friend** (*str | None*) -- Name of another class to associate with this class.

      :returns: *type[Self] | None* --

                The registered class if `class_type` is a type,
                    otherwise None.



   .. py:method:: create_from_registry(name = None, *args, **kwargs)
      :classmethod:


      Creates an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** (*str | None*) -- The name of the class to instantiate. If None,
                     and only one class is registered, it will instantiate that class.
                   * **\*args** (*Any*) -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** (*Any*) -- Keyword arguments to pass to the class constructor.

      :returns: *Self | Any* --

                An instance of the requested class, or an associated
                    'friend' class.



   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.



   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



