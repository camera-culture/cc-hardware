
:py:mod:`cc_hardware.utils.misc.singleton`
==========================================


.. py:module:: cc_hardware.utils.misc.singleton

.. autoapi-nested-parse::

   This module provides a metaclass for implementing the Singleton pattern,
   ensuring that only one instance of a class is created and shared across
   the application.

   It includes a combined Singleton and Abstract Base Class (ABC) metaclass
   to support both functionalities.

   Example:

   .. code-block:: python

       from abc import ABC
       from singleton_meta import SingletonABCMeta

       class MySingleton(ABC, metaclass=SingletonABCMeta):
           def __init__(self, value):
               self.value = value

       instance1 = MySingleton(10)
       instance2 = MySingleton.instance()

       assert instance1 is instance2
       assert instance1.value == 10



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.utils.misc.singleton.SingletonMeta
   cc_hardware.utils.misc.singleton.SingletonABCMeta




.. py:class:: SingletonMeta


   .. autoapi-inheritance-diagram:: cc_hardware.utils.misc.singleton.SingletonMeta
      :parts: 1


   A metaclass for implementing the Singleton pattern.

   This ensures that only one instance of the class exists. Additional
   calls to create an instance will return the same existing instance.


   .. py:method:: __call__(*args, **kwargs)

      Create or retrieve the Singleton instance.

      :Parameters: * **\*args** -- Positional arguments for the class constructor.
                   * **\*\*kwargs** -- Keyword arguments for the class constructor.

      :returns: *Self* -- The single instance of the class.



   .. py:method:: instance()
      :classmethod:


      Retrieve the Singleton instance, creating it if necessary.

      :returns: *Self* -- The single instance of the class.



.. py:class:: SingletonABCMeta


   .. autoapi-inheritance-diagram:: cc_hardware.utils.misc.singleton.SingletonABCMeta
      :parts: 1


   A metaclass combining Singleton and Abstract Base Class (ABC) functionality.

   This is useful for creating classes that need to enforce the Singleton
   pattern while also being an Abstract Base Class.


   .. py:method:: register(subclass)

      Register a virtual subclass of an ABC.

      Returns the subclass, to allow usage as a class decorator.



   .. py:method:: __instancecheck__(instance)

      Override for isinstance(instance, cls).



   .. py:method:: __subclasscheck__(subclass)

      Override for issubclass(subclass, cls).



   .. py:method:: __call__(*args, **kwargs)

      Create or retrieve the Singleton instance.

      :Parameters: * **\*args** -- Positional arguments for the class constructor.
                   * **\*\*kwargs** -- Keyword arguments for the class constructor.

      :returns: *Self* -- The single instance of the class.



   .. py:method:: instance()
      :classmethod:


      Retrieve the Singleton instance, creating it if necessary.

      :returns: *Self* -- The single instance of the class.



