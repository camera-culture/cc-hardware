
:py:mod:`cc_hardware.utils.logger`
==================================


.. py:module:: cc_hardware.utils.logger

.. autoapi-nested-parse::

   Logging utilities for the cc_hardware package.

   This module provides a custom logger that uses tqdm.write to log messages to the
   console. It also provides a filter to set a maximum logging level for a logger.

   Example:

   .. code-block:: python

       from cc_hardware.utils.logger import get_logger

       get_logger().info("This is an info message.")



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.utils.logger.FileHandler
   cc_hardware.utils.logger.TqdmStreamHandler
   cc_hardware.utils.logger.LoggerMaxLevelFilter




.. py:class:: FileHandler(filename, *args, **kwargs)


   .. autoapi-inheritance-diagram:: cc_hardware.utils.logger.FileHandler
      :parts: 1


   A file handler which creates the directory if it doesn't exist.


   .. py:method:: close()

      Closes the stream.



   .. py:method:: emit(record)

      Emit a record.

      If the stream was not opened because 'delay' was specified in the
      constructor, open it before calling the superclass's emit.

      If stream is not open, current mode is 'w' and `_closed=True`, record
      will not be emitted (see Issue #42378).



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: flush()

      Flushes the stream.



   .. py:method:: setStream(stream)

      Sets the StreamHandler's stream to the specified value,
      if it is different.

      Returns the old stream, if the stream was changed, or None
      if it wasn't.



   .. py:method:: createLock()

      Acquire a thread lock for serializing access to the underlying I/O.



   .. py:method:: acquire()

      Acquire the I/O thread lock.



   .. py:method:: release()

      Release the I/O thread lock.



   .. py:method:: setLevel(level)

      Set the logging level of this handler.  level must be an int or a str.



   .. py:method:: format(record)

      Format the specified record.

      If a formatter is set, use it. Otherwise, use the default formatter
      for the module.



   .. py:method:: handle(record)

      Conditionally emit the specified logging record.

      Emission depends on filters which may have been added to the handler.
      Wrap the actual emission of the record with acquisition/release of
      the I/O thread lock.

      Returns an instance of the log record that was emitted
      if it passed all filters, otherwise a false value is returned.



   .. py:method:: setFormatter(fmt)

      Set the formatter for this handler.



   .. py:method:: handleError(record)

      Handle errors which occur during an emit() call.

      This method should be called from handlers when an exception is
      encountered during an emit() call. If raiseExceptions is false,
      exceptions get silently ignored. This is what is mostly wanted
      for a logging system - most users will not care about errors in
      the logging system, they are more interested in application errors.
      You could, however, replace this with a custom handler if you wish.
      The record which was being processed is passed in to this method.



   .. py:method:: addFilter(filter)

      Add the specified filter to this handler.



   .. py:method:: removeFilter(filter)

      Remove the specified filter from this handler.



   .. py:method:: filter(record)

      Determine if a record is loggable by consulting all the filters.

      The default is to allow the record to be logged; any filter can veto
      this by returning a false value.
      If a filter attached to a handler returns a log record instance,
      then that instance is used in place of the original log record in
      any further processing of the event by that handler.
      If a filter returns any other true value, the original log record
      is used in any further processing of the event by that handler.

      If none of the filters return false values, this method returns
      a log record.
      If any of the filters return a false value, this method returns
      a false value.

      .. versionchanged:: 3.2

         Allow filters to be just callables.

      .. versionchanged:: 3.12
         Allow filters to return a LogRecord instead of
         modifying it in place.



.. py:class:: TqdmStreamHandler(*args, **kwargs)


   .. autoapi-inheritance-diagram:: cc_hardware.utils.logger.TqdmStreamHandler
      :parts: 1


   A handler that uses tqdm.write to log messages.


   .. py:method:: emit(record)

      Emit a record.

      If a formatter is specified, it is used to format the record.
      The record is then written to the stream with a trailing newline.  If
      exception information is present, it is formatted using
      traceback.print_exception and appended to the stream.  If the stream
      has an 'encoding' attribute, it is used to determine how to do the
      output to the stream.



   .. py:method:: flush()

      Flushes the stream.



   .. py:method:: setStream(stream)

      Sets the StreamHandler's stream to the specified value,
      if it is different.

      Returns the old stream, if the stream was changed, or None
      if it wasn't.



   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: createLock()

      Acquire a thread lock for serializing access to the underlying I/O.



   .. py:method:: acquire()

      Acquire the I/O thread lock.



   .. py:method:: release()

      Release the I/O thread lock.



   .. py:method:: setLevel(level)

      Set the logging level of this handler.  level must be an int or a str.



   .. py:method:: format(record)

      Format the specified record.

      If a formatter is set, use it. Otherwise, use the default formatter
      for the module.



   .. py:method:: handle(record)

      Conditionally emit the specified logging record.

      Emission depends on filters which may have been added to the handler.
      Wrap the actual emission of the record with acquisition/release of
      the I/O thread lock.

      Returns an instance of the log record that was emitted
      if it passed all filters, otherwise a false value is returned.



   .. py:method:: setFormatter(fmt)

      Set the formatter for this handler.



   .. py:method:: close()

      Tidy up any resources used by the handler.

      This version removes the handler from an internal map of handlers,
      _handlers, which is used for handler lookup by name. Subclasses
      should ensure that this gets called from overridden close()
      methods.



   .. py:method:: handleError(record)

      Handle errors which occur during an emit() call.

      This method should be called from handlers when an exception is
      encountered during an emit() call. If raiseExceptions is false,
      exceptions get silently ignored. This is what is mostly wanted
      for a logging system - most users will not care about errors in
      the logging system, they are more interested in application errors.
      You could, however, replace this with a custom handler if you wish.
      The record which was being processed is passed in to this method.



   .. py:method:: addFilter(filter)

      Add the specified filter to this handler.



   .. py:method:: removeFilter(filter)

      Remove the specified filter from this handler.



   .. py:method:: filter(record)

      Determine if a record is loggable by consulting all the filters.

      The default is to allow the record to be logged; any filter can veto
      this by returning a false value.
      If a filter attached to a handler returns a log record instance,
      then that instance is used in place of the original log record in
      any further processing of the event by that handler.
      If a filter returns any other true value, the original log record
      is used in any further processing of the event by that handler.

      If none of the filters return false values, this method returns
      a log record.
      If any of the filters return a false value, this method returns
      a false value.

      .. versionchanged:: 3.2

         Allow filters to be just callables.

      .. versionchanged:: 3.12
         Allow filters to return a LogRecord instead of
         modifying it in place.



.. py:class:: LoggerMaxLevelFilter(max_level)


   .. autoapi-inheritance-diagram:: cc_hardware.utils.logger.LoggerMaxLevelFilter
      :parts: 1


   This filter sets a maximum level.


   .. py:method:: filter(record)

      Determine if the specified record is to be logged.

      Returns True if the record should be logged, or False otherwise.
      If deemed appropriate, the record may be modified in-place.



