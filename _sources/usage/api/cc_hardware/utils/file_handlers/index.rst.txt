
:py:mod:`cc_hardware.utils.file_handlers`
=========================================


.. py:module:: cc_hardware.utils.file_handlers

.. autoapi-nested-parse::

   This module provides utility classes for writing data to files.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cc_hardware.utils.file_handlers.PklHandler
   cc_hardware.utils.file_handlers.PklReader
   cc_hardware.utils.file_handlers.VideoWriter




.. py:class:: PklHandler(path, *, overwrite = True, **update_index_kwargs)

   A utility class for writing and reading data to/from pickle files.

   Provides methods to write data, append data, and load single or multiple
   records from a pickle file. It also supports indexing for random access
   to records without loading the entire file into memory.

   :keyword overwrite: If True, overwrite existing file when writing. Defaults to
                       True.
   :kwtype overwrite: bool

   .. rubric:: Example

   .. code-block:: python

       handler = PklHandler("data.pkl")
       handler.write({"key": "value"})
       handler.append({"another_key": "another_value"})

       record = handler.load()
       print(record) # {"key": "value"}
       record = handler.load(1)
       print(record) # {"another_key": "another_value"}


   .. py:method:: update_index(*, prune_fn = lambda _: False)

      Build an index of record positions in the pickle file for random access.

      This method scans the pickle file and records the file positions
      where each record starts. The positions are stored in self._index.

      :keyword prune_fn: Optional function to filter records when
                         building the index. The function should take a record as input and
                         return True to exclude the record from the index.
                         Defaults to lambda _: False.
      :kwtype prune_fn: Callable[[Any], bool]



   .. py:method:: write(data)

      Write data to the pickle file, overwriting any existing content.

      :Parameters: **data** (*Any*) -- The data to write.



   .. py:method:: append(data)

      Append data to the pickle file without overwriting.

      :Parameters: **data** (*Any*) -- The data to append.



   .. py:method:: load(index = None)

      Load the first record from the pickle file.

      :returns: *Any* -- The loaded record.



   .. py:method:: load_all(path, *, key = None)
      :staticmethod:


      Load all records from the pickle file.

      :Parameters: * **path** (*Path | str*) -- The path to the pickle file.
                   * **key** (*str | None*) -- Optional key to extract specific values from each record.

      :returns: *list[Any]* -- A list of all records, or specific values if a key is provided.



   .. py:method:: __len__()

      Get the number of records in the pickle file.

      :returns: *int* -- The number of records.



.. py:class:: PklReader(path)


   .. autoapi-inheritance-diagram:: cc_hardware.utils.file_handlers.PklReader
      :parts: 1


   A utility class for writing and reading data to/from pickle files.

   Provides methods to write data, append data, and load single or multiple
   records from a pickle file. It also supports indexing for random access
   to records without loading the entire file into memory.

   :keyword overwrite: If True, overwrite existing file when writing. Defaults to
                       True.
   :kwtype overwrite: bool

   .. rubric:: Example

   .. code-block:: python

       handler = PklHandler("data.pkl")
       handler.write({"key": "value"})
       handler.append({"another_key": "another_value"})

       record = handler.load()
       print(record) # {"key": "value"}
       record = handler.load(1)
       print(record) # {"another_key": "another_value"}


   .. py:method:: update_index(*, prune_fn = lambda _: False)

      Build an index of record positions in the pickle file for random access.

      This method scans the pickle file and records the file positions
      where each record starts. The positions are stored in self._index.

      :keyword prune_fn: Optional function to filter records when
                         building the index. The function should take a record as input and
                         return True to exclude the record from the index.
                         Defaults to lambda _: False.
      :kwtype prune_fn: Callable[[Any], bool]



   .. py:method:: write(data)

      Write data to the pickle file, overwriting any existing content.

      :Parameters: **data** (*Any*) -- The data to write.



   .. py:method:: append(data)

      Append data to the pickle file without overwriting.

      :Parameters: **data** (*Any*) -- The data to append.



   .. py:method:: load(index = None)

      Load the first record from the pickle file.

      :returns: *Any* -- The loaded record.



   .. py:method:: load_all(path, *, key = None)
      :staticmethod:


      Load all records from the pickle file.

      :Parameters: * **path** (*Path | str*) -- The path to the pickle file.
                   * **key** (*str | None*) -- Optional key to extract specific values from each record.

      :returns: *list[Any]* -- A list of all records, or specific values if a key is provided.



   .. py:method:: __len__()

      Get the number of records in the pickle file.

      :returns: *int* -- The number of records.



.. py:class:: VideoWriter(path, fps, flush_interval = 10)

   A utility class for writing video frames to a file.

   Frames are buffered and written to the video file periodically, based on
   the specified flush interval.

   .. rubric:: Example

   .. code-block:: python

       writer = VideoWriter("output.mp4", fps=30)
       for frame in frames:
           writer.append(frame)
       writer.close()


   .. py:method:: append(frame)

      Append a video frame to the buffer.

      :Parameters: **frame** (*np.ndarray*) -- A single video frame to append.



   .. py:method:: close()

      Flush any remaining frames and close the video writer.



   .. py:method:: __del__()

      Ensure that the video writer is properly closed when the object is deleted.



