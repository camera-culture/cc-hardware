:py:mod:`drivers.stepper_motors.telemetrix_stepper`
===================================================


.. py:module:: drivers.stepper_motors.telemetrix_stepper

.. autoapi-nested-parse::

   This module contains the TelemetrixStepperMotor and TelemetrixStepperMotorSystem
   classes which are wrappers around the Telemetrix library's interface with stepper
   motors. These classes provide a unified interface for controlling stepper motors
   connected to a CNCShield using the Telemetrix library.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor
   drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem
   drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX
   drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY
   drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ
   drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed
   drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed
   drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed
   drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X
   drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1
   drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2
   drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry
   drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X
   drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y
   drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry




.. py:class:: TelemetrixStepperMotor(board, *, distance_pin, direction_pin, enable_pin, cm_per_rev, steps_per_rev, speed, flip_direction = False)


   Bases: :py:obj:`cc_hardware.drivers.stepper_motors.StepperMotor`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool

   .. py:property:: position
      :type: float

      Returns the current position of the stepper motor.

   .. py:property:: id
      :type: int

      Returns the motor's id.

   .. py:property:: is_okay
      :type: bool

      Checks if the stepper motor is in a healthy operational state.

   .. py:method:: home()

      Homes the stepper motor to its reference or zero position.


   .. py:method:: move_to(position)

      Moves the stepper motor to a specific absolute position.

      :Parameters: **position** (*float*) -- The target absolute position to move the motor to.


   .. py:method:: move_by(relative_position)

      Moves the stepper motor by a specified relative amount from its current
      position.

      :Parameters: **relative_position** (*float*) -- The amount to move the motor by, relative to its
                   current position.


   .. py:method:: wait_for_move()

      Waits for the motor to complete its current move operation.


   .. py:method:: set_target_position_cm(relative_cm)

      Sets the target position of the motor relative to current position.

      :Parameters: **relative_cm** (*float*) -- The relative position to move the motor to.


   .. py:method:: set_absolute_target_position_cm(position_cm)

      Sets the absolute target position in cm.


   .. py:method:: cm_to_revs(cm)

      Converts cm to steps.


   .. py:method:: revs_to_cm(revs)

      Converts steps to cm.


   .. py:method:: close()

      Closes the connection or shuts down the stepper motor safely.


   .. py:method:: __getattr__(key)

      This is a passthrough to the underlying stepper object.

      Usually, stepper methods are accessed through the board with stepper_*. You
      can access these methods directly here using motorX.target_position(...) which
      equates to motorX._board.stepper_target_position(...). Also, if these methods
      require a motor as input, we'll pass it in.



.. py:class:: TelemetrixStepperMotorSystem(port = None, *, axes, **kwargs)


   Bases: :py:obj:`cc_hardware.drivers.stepper_motors.StepperMotorSystem`

   This is a wrapper of the Telemetrix library's interface with multiple
   stepper motors.

   :Parameters: **port** (*str | None*) -- The port to connect to the Telemetrix board. If None,
                the port will be attempted to be auto-detected.

   :keyword axes: A dictionary of axes and
                  the motors that are attached to them. The key is the axis name and the
                  value is a list of motors attached to that axis.
   :kwtype axes: dict[str, list[TelemetrixStepperMotor]]
   :keyword kwargs: Additional keyword arguments to pass to the Telemetrix board.

   .. py:property:: is_okay
      :type: bool

      Checks if the stepper motor is in a healthy operational state. This could
      involve verifying that the motor is not in an error state, is receiving power,
      and has no detected hardware issues.

      :returns: *bool* -- True if the motor is operational, False otherwise.

   .. py:method:: home()
      :abstractmethod:

      Homes the stepper motor to its reference or zero position. This method should
      move the motor to a predefined starting point, which could involve moving
      until a limit switch or sensor is triggered to establish a known starting
      position.


   .. py:method:: close()

      Closes the connection or shuts down the stepper motor safely.



.. py:class:: TelemetrixStepperMotorX(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotor`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: TelemetrixStepperMotorY(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotor`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: TelemetrixStepperMotorZ(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotor`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: TelemetrixStepperMotorXReversed(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotorX`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: TelemetrixStepperMotorYReversed(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotorY`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: TelemetrixStepperMotorZReversed(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotorZ`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: DualDrive2AxisGantry_X(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotorZ`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: DualDrive2AxisGantry_Y1(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotorY`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: DualDrive2AxisGantry_Y2(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotorXReversed`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: DualDrive2AxisGantry(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotorSystem`

   This is a wrapper of the Telemetrix library's interface with multiple
   stepper motors.

   :Parameters: **port** (*str | None*) -- The port to connect to the Telemetrix board. If None,
                the port will be attempted to be auto-detected.

   :keyword axes: A dictionary of axes and
                  the motors that are attached to them. The key is the axis name and the
                  value is a list of motors attached to that axis.
   :kwtype axes: dict[str, list[TelemetrixStepperMotor]]
   :keyword kwargs: Additional keyword arguments to pass to the Telemetrix board.


.. py:class:: SingleDrive1AxisGantry_X(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotorX`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: SingleDrive1AxisGantry_Y(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotorY`

   This is a wrapper of the Telemetrix library's interface with stepper motors.

   NOTE: Initialization of this class effectively homes the motor. Call
   `set_current_position` to explicitly set the current position.

   :Parameters: **board** (*telemetrix.Telemetrix*) -- The Telemetrix board object

   :keyword distance_pin: The pin on the CNCShield that controls this motor's position
   :kwtype distance_pin: int
   :keyword direction_pin: The pin on the CNCShield that controls this motor's
                           position
   :kwtype direction_pin: int
   :keyword enable_pin: The pin that controls this motor's enable pin..
   :kwtype enable_pin: int
   :keyword cm_per_rev: The number of centimeters per revolution of the motor.
   :kwtype cm_per_rev: float
   :keyword steps_per_rev: The number of steps per revolution of the motor.
   :kwtype steps_per_rev: int
   :keyword speed: The speed of the motor in cm/s.
   :kwtype speed: float
   :keyword flip_direction: If True, the motor will move in the opposite direction.
   :kwtype flip_direction: bool


.. py:class:: SingleDrive1AxisGantry(*args, **kwargs)


   Bases: :py:obj:`TelemetrixStepperMotorSystem`

   This is a wrapper of the Telemetrix library's interface with multiple
   stepper motors.

   :Parameters: **port** (*str | None*) -- The port to connect to the Telemetrix board. If None,
                the port will be attempted to be auto-detected.

   :keyword axes: A dictionary of axes and
                  the motors that are attached to them. The key is the axis name and the
                  value is a list of motors attached to that axis.
   :kwtype axes: dict[str, list[TelemetrixStepperMotor]]
   :keyword kwargs: Additional keyword arguments to pass to the Telemetrix board.


