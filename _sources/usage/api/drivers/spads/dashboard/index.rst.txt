:py:mod:`drivers.spads.dashboard`
=================================


.. py:module:: drivers.spads.dashboard

.. autoapi-nested-parse::

   Dashboard for SPAD sensors.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   drivers.spads.dashboard.SPADDashboard
   drivers.spads.dashboard.MatplotlibDashboard
   drivers.spads.dashboard.PyQtGraphDashboard
   drivers.spads.dashboard.DashDashboard




.. py:class:: SPADDashboard(sensor: cc_hardware.drivers.spads.spad.SPADSensor, num_frames: int = 1000000, show: bool = True, save: bool = False, filename: str | None = None, min_bin: int | None = None, max_bin: int | None = None, autoscale: bool = True, ylim: float | None = None, channel_mask: list[int] | None = None, fullscreen: bool = False)


   Bases: :py:obj:`abc.ABC`, :py:obj:`cc_hardware.utils.registry.Registry`

   Abstract base class for SPAD sensor dashboards.

   :Parameters: * **sensor** (*SPADSensor*) -- The SPAD sensor instance.
                * **num_frames** (*int*) -- Number of frames to process. Default is 1,000,000.
                * **show** (*bool*) -- Whether to display the dashboard. Default is True.
                * **save** (*bool*) -- Whether to save the output. Default is False.
                * **filename** (*str, optional*) -- Filename to save the output if `save` is True.
                * **min_bin** (*int, optional*) -- Minimum bin value for histogram.
                * **max_bin** (*int, optional*) -- Maximum bin value for histogram.
                * **autoscale** (*bool*) -- Whether to autoscale the histogram. Default is True.
                * **ylim** (*float, optional*) -- Y-axis limit for the histogram.
                * **channel_mask** (*list[int], optional*) -- List of channels to display.
                * **fullscreen** (*bool*) -- Whether to display in fullscreen mode. Default is False.

   .. py:method:: validate_parameters()

      Validates the initialization parameters to ensure correct usage.


   .. py:method:: setup_sensor()

      Configures the sensor settings and channel mask.


   .. py:method:: run()
      :abstractmethod:

      Abstract method to run the dashboard.



.. py:class:: MatplotlibDashboard(sensor: cc_hardware.drivers.spads.spad.SPADSensor, num_frames: int = 1000000, show: bool = True, save: bool = False, filename: str | None = None, min_bin: int | None = None, max_bin: int | None = None, autoscale: bool = True, ylim: float | None = None, channel_mask: list[int] | None = None, fullscreen: bool = False)


   Bases: :py:obj:`SPADDashboard`

   Dashboard implementation using Matplotlib for visualization.

   .. py:method:: run()

      Executes the Matplotlib dashboard with real-time updates.


   .. py:method:: setup_plot()

      Sets up the Matplotlib plot layout and styling.


   .. py:method:: update(frame)

      Updates the histogram data for each frame.

      :Parameters: **frame** (*int*) -- Current frame number.


   .. py:method:: adjust_ylim(histograms)

      Adjusts the Y-axis limits based on the histogram data.

      :Parameters: **histograms** (*np.ndarray*) -- Histogram data for all channels.


   .. py:method:: save_animation(ani)

      Saves the animation to a file.

      :Parameters: **ani** (*FuncAnimation*) -- The animation object to save.



.. py:class:: PyQtGraphDashboard(sensor: cc_hardware.drivers.spads.spad.SPADSensor, num_frames: int = 1000000, show: bool = True, save: bool = False, filename: str | None = None, min_bin: int | None = None, max_bin: int | None = None, autoscale: bool = True, ylim: float | None = None, channel_mask: list[int] | None = None, fullscreen: bool = False)


   Bases: :py:obj:`SPADDashboard`

   Dashboard implementation using PyQtGraph for real-time visualization.

   .. py:method:: run()

      Executes the PyQtGraph dashboard application.


   .. py:method:: setup_plots(win)

      Sets up the plots for each channel in the dashboard.

      :Parameters: **win** (*DashboardWindow*) -- The main window for the plots.


   .. py:method:: update()

      Updates the histogram data in the plots.



.. py:class:: DashDashboard(sensor: cc_hardware.drivers.spads.spad.SPADSensor, num_frames: int = 1000000, show: bool = True, save: bool = False, filename: str | None = None, min_bin: int | None = None, max_bin: int | None = None, autoscale: bool = True, ylim: float | None = None, channel_mask: list[int] | None = None, fullscreen: bool = False)


   Bases: :py:obj:`SPADDashboard`

   Dashboard implementation using Dash and Plotly for web-based visualization.

   .. py:method:: run()

      Executes the Dash dashboard application.


   .. py:method:: setup_layout()

      Sets up the layout and figures for the Dash application.


   .. py:method:: run_dash()

      Runs the Dash server in a separate thread.


   .. py:method:: update_graph_live(n_intervals, existing_fig)

      Updates the live graph with new histogram data.

      :Parameters: * **n_intervals** (*int*) -- The number of intervals that have passed.
                   * **existing_fig** (*dict*) -- The existing figure to update.



