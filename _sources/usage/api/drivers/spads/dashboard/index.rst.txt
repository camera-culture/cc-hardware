:py:mod:`drivers.spads.dashboard`
=================================


.. py:module:: drivers.spads.dashboard

.. autoapi-nested-parse::

   Dashboard for SPAD sensors.

   This module provides a dashboard for visualizing SPAD sensor data in real-time. There
   are three implementations available with different supported features:

   - :class:`~drivers.spads.dashboard.MatplotlibDashboard`: Uses Matplotlib for
       visualization.
   - :class:`~drivers.spads.dashboard.PyQtGraphDashboard`: Uses PyQtGraph for
       visualization.
   - :class:`~drivers.spads.dashboard.DashDashboard`: Uses Dash and Plotly for web-based
       visualization.

   You can specify user-defined callbacks to be executed on each update of the dashboard.

   Example:

   .. code-block:: python

       from cc_hardware.drivers.spads import SPADSensor
       from cc_hardware.drivers.spads.dashboard import SPADDashboard

       sensor = SPADSensor.create_from_registry(...)
       dashboard = SPADDashboard.create_from_registry(
           ...,
           sensor=sensor,
           user_callback=my_callback,
       )

       dashboard.run()



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   drivers.spads.dashboard.SPADDashboard
   drivers.spads.dashboard.MatplotlibDashboard
   drivers.spads.dashboard.PyQtGraphDashboard
   drivers.spads.dashboard.DashDashboard




.. py:class:: SPADDashboard(sensor, num_frames = 1000000, min_bin = None, max_bin = None, autoscale = True, ylim = None, channel_mask = None, user_callback = None)


   Bases: :py:obj:`abc.ABC`, :py:obj:`cc_hardware.utils.registry.Registry`

   Abstract base class for SPAD sensor dashboards.

   :Parameters: * **sensor** (*SPADSensor*) -- The SPAD sensor instance.
                * **num_frames** (*int*) -- Number of frames to process. Default is 1,000,000.
                * **min_bin** (*int, optional*) -- Minimum bin value for histogram.
                * **max_bin** (*int, optional*) -- Maximum bin value for histogram.
                * **autoscale** (*bool*) -- Whether to autoscale the histogram. Default is True.
                * **ylim** (*float, optional*) -- Y-axis limit for the histogram.
                * **channel_mask** (*list[int], optional*) -- List of channels to display.
                * **user_callback** (*Callable[[Self], None], optional*) -- User-defined callback
                  function. It should accept the dashboard instance as an argument.

   .. py:property:: min_bin
      :type: int

      Minimum bin value for the histogram.

      Supports variable sized bins based on the sensor configuration.

   .. py:property:: max_bin
      :type: int

      Maximum bin value for the histogram.

      Supports variable sized bins based on the sensor configuration.

   .. py:method:: setup_sensor()

      Configures the sensor settings and channel mask.


   .. py:method:: setup(*, fullscreen = False, headless = False, save = None)
      :abstractmethod:

      Abstract method to set up the dashboard. Should be independent of whether the
      dashboard is run in a loop or not.

      :Parameters: * **fullscreen** (*bool*) -- Whether to display in fullscreen mode.
                   * **headless** (*bool*) -- Whether to run in headless mode.
                   * **save** (*Path | None*) -- If provided, save the output to this file.


   .. py:method:: run()
      :abstractmethod:

      Abstract method to display the dashboard. Blocks until the dashboard is closed.


   .. py:method:: update(frame, histograms = None)
      :abstractmethod:

      Abstract method to update the histogram data. This should be capable of being
      used independent of the loop, as in in a main thread and non-blocking.

      :Parameters: **frame** (*int*) -- Current frame number.

      :keyword histograms: The histogram data to update. If not provided, the
                           sensor will be used to accumulate the histogram data.
      :kwtype histograms: np.ndarray



.. py:class:: MatplotlibDashboard(sensor, num_frames = 1000000, min_bin = None, max_bin = None, autoscale = True, ylim = None, channel_mask = None, user_callback = None)


   Bases: :py:obj:`SPADDashboard`

   Dashboard implementation using Matplotlib for visualization.

   .. py:method:: setup(*, fullscreen = False, headless = False, save = None)

      Sets up the Matplotlib plot layout and styling.


   .. py:method:: run()

      Executes the Matplotlib dashboard with real-time updates.


   .. py:method:: update(frame, histograms = None)

      Updates the histogram data for each frame.

      :Parameters: **frame** (*int*) -- Current frame number.

      :keyword histograms: The histogram data to update. If not provided, the
                           sensor will be used to accumulate the histogram data.
      :kwtype histograms: np.ndarray


   .. py:method:: adjust_ylim(histograms)

      Adjusts the Y-axis limits based on the histogram data.

      :Parameters: **histograms** (*np.ndarray*) -- Histogram data for all channels.


   .. py:method:: save_animation(ani, filename)

      Saves the animation to a file.

      :Parameters: * **ani** (*FuncAnimation*) -- The animation object to save.
                   * **filename** (*str*) -- The filename to save the output.



.. py:class:: PyQtGraphDashboard(sensor, num_frames = 1000000, min_bin = None, max_bin = None, autoscale = True, ylim = None, channel_mask = None, user_callback = None)


   Bases: :py:obj:`SPADDashboard`

   Dashboard implementation using PyQtGraph for real-time visualization.

   .. py:method:: setup(*, fullscreen = False, headless = False, save = None)

      Sets up the PyQtGraph plot layout and styling.

      :Parameters: * **fullscreen** (*bool*) -- Whether to display in fullscreen mode.
                   * **headless** (*bool*) -- Whether to run in headless mode.
                   * **save** (*Path | None*) -- If provided, save the output to this file.


   .. py:method:: run()

      Executes the PyQtGraph dashboard application.

      :Parameters: * **fullscreen** (*bool*) -- Whether to display in fullscreen mode.
                   * **headless** (*bool*) -- Whether to run in headless mode.
                   * **save** (*Path | None*) -- If provided, save the output to this file.


   .. py:method:: update(frame, histograms = None, *, step = True)

      Updates the histogram data in the plots.



.. py:class:: DashDashboard(sensor, num_frames = 1000000, min_bin = None, max_bin = None, autoscale = True, ylim = None, channel_mask = None, user_callback = None)


   Bases: :py:obj:`SPADDashboard`

   Dashboard implementation using Dash and Plotly for web-based visualization.

   .. py:method:: setup(*, fullscreen = False, headless = False, save = None)

      Sets up the layout and figures for the Dash application

      :Parameters: * **fullscreen** (*bool*) -- Unused parameter for DashDashboard.
                   * **headless** (*bool*) -- Whether to run in headless mode.
                   * **save** (*Path | None*) -- If provided, save the dashboard to this file.


   .. py:method:: run()

      Executes the Dash dashboard application.


   .. py:method:: update(n_intervals, histograms = None, existing_fig = None)

      Updates the histogram data for each frame.

      :Parameters: **n_intervals** (*int*) -- Current frame number.

      :keyword histograms: The histogram data to update. If not provided, the
                           sensor will be used to accumulate the histogram data.
      :kwtype histograms: np.ndarray



