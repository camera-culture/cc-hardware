:py:mod:`utils.registry`
========================


.. py:module:: utils.registry

.. autoapi-nested-parse::

   Registry base class and decorator for registering classes in the registry.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   utils.registry.Registry



Functions
~~~~~~~~~

.. autoapisummary::

   utils.registry.register



.. py:class:: Registry


   A base class that provides a registry for its subclasses and a factory method
   to instantiate them.

   Supports both direct and lazy registration of classes, allowing classes
   to be registered by name and module path for deferred loading. An enumeration
   of registered classes is also provided.

   .. py:method:: register(class_type)
                  register(class_name: str, module_path: str) -> None
      :classmethod:

      Register the given class in this registry.

      :Parameters: * **class_type** -- The class to register. Can be a class type or a str defining
                     a class name to be lazily loaded. If the class_type is a type, this
                     method will return the class itself (useful for decorators).
                   * **module_path** -- The module path where the class can be found
                     (e.g. "my_module.my_submodule"). Only used if class_type is a str.
                     This is the full importable path to the class. The final class
                     path will be ``module_path.class_type``.

      :returns: The registered class if class_type is a class type, otherwise None.


   .. py:method:: create_from_registry(name, *args, **kwargs)
      :classmethod:

      Create an instance of a registered class, performing lazy loading if necessary.

      :Parameters: * **name** -- The name of the class to instantiate.
                   * **\*args** -- Positional arguments to pass to the class constructor.
                   * **\*\*kwargs** -- Keyword arguments to pass to the class constructor.

      :returns: An instance of the requested class.

      :raises ValueError: If the class name is not registered.


   .. py:method:: registry()

      Get the registry for this class.

      :returns: A dictionary mapping class names to class objects or lazy load paths.


   .. py:method:: registered()

      Get an enumeration of the registered classes.

      :returns: An enumeration of the registered classes.



.. py:function:: register(class_type)

   Decorator to register a class with its base Registry class. Uses a recursive
   approach to ensure that the class is registered with all Registry-based ancestors.

   :Parameters: **class_type** -- The class to register.

   :returns: The registered class.


