:py:mod:`utils.writers`
=======================


.. py:module:: utils.writers

.. autoapi-nested-parse::

   This module provides utility classes for writing data to files.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   utils.writers.PklWriter
   utils.writers.VideoWriter




.. py:class:: PklWriter(path: pathlib.Path | str)


   A utility class for writing and reading data to/from pickle files.

   Provides methods to write data, append data, and load single or multiple
   records from a pickle file.

   .. rubric:: Example

   .. code-block:: python

       writer = PklWriter("data.pkl")
       writer.write({"key": "value"})
       writer.append({"another_key": "another_value"})

       data = PklWriter.load("data.pkl")
       all_data = PklWriter.load_all("data.pkl")

   .. py:method:: write(data: dict)

      Write data to the pickle file, overwriting any existing content.

      :Parameters: **data** (*dict*) -- The data to write.


   .. py:method:: append(data: dict)

      Append data to the pickle file without overwriting.

      :Parameters: **data** (*dict*) -- The data to append.


   .. py:method:: load(path: pathlib.Path | str) -> dict
      :staticmethod:

      Load a single record from the pickle file.

      :Parameters: **path** (*Path | str*) -- The path to the pickle file.

      :returns: *dict* -- The loaded data.


   .. py:method:: load_all(path: pathlib.Path | str, *, key: str | None = None) -> list[dict]
      :staticmethod:

      Load all records from the pickle file.

      :Parameters: * **path** (*Path | str*) -- The path to the pickle file.
                   * **key** (*str | None*) -- Optional key to extract specific values from each record.

      :returns: *list[dict]* -- A list of all records, or specific values if a key is provided.



.. py:class:: VideoWriter(path: pathlib.Path | str, fps: float, flush_interval: int = 10)


   A utility class for writing video frames to a file.

   Frames are buffered and written to the video file periodically, based on
   the specified flush interval.

   .. rubric:: Example

   .. code-block:: python

       writer = VideoWriter("output.mp4", fps=30)
       for frame in frames:
           writer.append(frame)
       writer.close()

   .. py:method:: append(frame: numpy.ndarray)

      Append a video frame to the buffer.

      :Parameters: **frame** (*np.ndarray*) -- A single video frame to append.



