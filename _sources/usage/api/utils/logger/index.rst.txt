:py:mod:`utils.logger`
======================


.. py:module:: utils.logger

.. autoapi-nested-parse::

   Logging utilities for the cc_hardware package.

   This module provides a custom logger that uses tqdm.write to log messages to the
   console. It also provides a filter to set a maximum logging level for a logger.

   Example:

   .. code-block:: python

       from cc_hardware.utils.logger import get_logger

       get_logger().info("This is an info message.")



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   utils.logger.FileHandler
   utils.logger.TqdmStreamHandler
   utils.logger.LoggerMaxLevelFilter




.. py:class:: FileHandler(filename, *args, **kwargs)


   Bases: :py:obj:`logging.FileHandler`

   A file handler which creates the directory if it doesn't exist.


.. py:class:: TqdmStreamHandler(*args, **kwargs)


   Bases: :py:obj:`logging.StreamHandler`

   A handler that uses tqdm.write to log messages.

   .. py:method:: emit(record: logging.LogRecord) -> None

      Emit a record.

      If a formatter is specified, it is used to format the record.
      The record is then written to the stream with a trailing newline.  If
      exception information is present, it is formatted using
      traceback.print_exception and appended to the stream.  If the stream
      has an 'encoding' attribute, it is used to determine how to do the
      output to the stream.



.. py:class:: LoggerMaxLevelFilter(max_level: int | str)


   Bases: :py:obj:`logging.Filter`

   This filter sets a maximum level.

   .. py:method:: filter(record: logging.LogRecord) -> bool | logging.LogRecord

      Determine if the specified record is to be logged.

      Returns True if the record should be logged, or False otherwise.
      If deemed appropriate, the record may be modified in-place.



