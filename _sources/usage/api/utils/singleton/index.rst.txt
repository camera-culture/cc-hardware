:py:mod:`utils.singleton`
=========================


.. py:module:: utils.singleton

.. autoapi-nested-parse::

   This module provides a metaclass for implementing the Singleton pattern,
   ensuring that only one instance of a class is created and shared across
   the application.

   It includes a combined Singleton and Abstract Base Class (ABC) metaclass
   to support both functionalities.

   Example:

   .. code-block:: python

       from abc import ABC
       from singleton_meta import SingletonABCMeta

       class MySingleton(ABC, metaclass=SingletonABCMeta):
           def __init__(self, value):
               self.value = value

       instance1 = MySingleton(10)
       instance2 = MySingleton.instance()

       assert instance1 is instance2
       assert instance1.value == 10



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   utils.singleton.SingletonMeta
   utils.singleton.SingletonABCMeta




.. py:class:: SingletonMeta


   Bases: :py:obj:`type`

   A metaclass for implementing the Singleton pattern.

   This ensures that only one instance of the class exists. Additional
   calls to create an instance will return the same existing instance.

   .. py:method:: __call__(*args, **kwargs)

      Create or retrieve the Singleton instance.

      :Parameters: * **\*args** -- Positional arguments for the class constructor.
                   * **\*\*kwargs** -- Keyword arguments for the class constructor.

      :returns: *Self* -- The single instance of the class.


   .. py:method:: instance() -> Self
      :classmethod:

      Retrieve the Singleton instance, creating it if necessary.

      :returns: *Self* -- The single instance of the class.



.. py:class:: SingletonABCMeta


   Bases: :py:obj:`abc.ABCMeta`, :py:obj:`SingletonMeta`

   A metaclass combining Singleton and Abstract Base Class (ABC) functionality.

   This is useful for creating classes that need to enforce the Singleton
   pattern while also being an Abstract Base Class.


