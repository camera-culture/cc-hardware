Search.setIndex({"docnames": ["contributing", "examples/algo_nlos", "examples/camera_viewer", "examples/index", "examples/spad_dashboard", "examples/spad_gantry_capture", "examples/stepper_motor_controller", "index", "usage/api", "usage/api/cc_hardware/algos/algorithm/index", "usage/api/cc_hardware/algos/aruco/index", "usage/api/cc_hardware/algos/index", "usage/api/cc_hardware/drivers/cameras/camera/index", "usage/api/cc_hardware/drivers/cameras/flir/index", "usage/api/cc_hardware/drivers/cameras/index", "usage/api/cc_hardware/drivers/cameras/pkl/index", "usage/api/cc_hardware/drivers/cameras/realsense/index", "usage/api/cc_hardware/drivers/cameras/usb/index", "usage/api/cc_hardware/drivers/index", "usage/api/cc_hardware/drivers/mocap/index", "usage/api/cc_hardware/drivers/mocap/mocap/index", "usage/api/cc_hardware/drivers/mocap/vive/index", "usage/api/cc_hardware/drivers/safe_serial/index", "usage/api/cc_hardware/drivers/sensor/index", "usage/api/cc_hardware/drivers/spads/index", "usage/api/cc_hardware/drivers/spads/pkl/index", "usage/api/cc_hardware/drivers/spads/spad/index", "usage/api/cc_hardware/drivers/spads/spad_wrappers/index", "usage/api/cc_hardware/drivers/spads/tmf8828/index", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index", "usage/api/cc_hardware/drivers/stepper_motors/index", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index", "usage/api/cc_hardware/index", "usage/api/cc_hardware/tools/calibration/index", "usage/api/cc_hardware/tools/camera_viewer/index", "usage/api/cc_hardware/tools/dashboard/dashboard/index", "usage/api/cc_hardware/tools/dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/dash/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/mocap_dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/pyqtgraph/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/dash/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/matplotlib/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/pyqtgraph/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/spad_dashboard/index", "usage/api/cc_hardware/tools/flash/index", "usage/api/cc_hardware/tools/index", "usage/api/cc_hardware/tools/jogger/index", "usage/api/cc_hardware/utils/constants/index", "usage/api/cc_hardware/utils/file_handlers/index", "usage/api/cc_hardware/utils/index", "usage/api/cc_hardware/utils/logger/index", "usage/api/cc_hardware/utils/manager/index", "usage/api/cc_hardware/utils/matplotlib/index", "usage/api/cc_hardware/utils/misc/asyncio_utils/index", "usage/api/cc_hardware/utils/misc/blocking_deque/index", "usage/api/cc_hardware/utils/misc/index", "usage/api/cc_hardware/utils/misc/misc/index", "usage/api/cc_hardware/utils/misc/multiprocessing_deque/index", "usage/api/cc_hardware/utils/misc/serial_utils/index", "usage/api/cc_hardware/utils/misc/singleton/index", "usage/api/cc_hardware/utils/registry/index", "usage/api/cc_hardware/utils/setting/index", "usage/api/cc_hardware/utils/transformations/index", "usage/index"], "filenames": ["contributing.md", "examples/algo_nlos.md", "examples/camera_viewer.md", "examples/index.md", "examples/spad_dashboard.md", "examples/spad_gantry_capture.md", "examples/stepper_motor_controller.md", "index.md", "usage/api.md", "usage/api/cc_hardware/algos/algorithm/index.rst", "usage/api/cc_hardware/algos/aruco/index.rst", "usage/api/cc_hardware/algos/index.rst", "usage/api/cc_hardware/drivers/cameras/camera/index.rst", "usage/api/cc_hardware/drivers/cameras/flir/index.rst", "usage/api/cc_hardware/drivers/cameras/index.rst", "usage/api/cc_hardware/drivers/cameras/pkl/index.rst", "usage/api/cc_hardware/drivers/cameras/realsense/index.rst", "usage/api/cc_hardware/drivers/cameras/usb/index.rst", "usage/api/cc_hardware/drivers/index.rst", "usage/api/cc_hardware/drivers/mocap/index.rst", "usage/api/cc_hardware/drivers/mocap/mocap/index.rst", "usage/api/cc_hardware/drivers/mocap/vive/index.rst", "usage/api/cc_hardware/drivers/safe_serial/index.rst", "usage/api/cc_hardware/drivers/sensor/index.rst", "usage/api/cc_hardware/drivers/spads/index.rst", "usage/api/cc_hardware/drivers/spads/pkl/index.rst", "usage/api/cc_hardware/drivers/spads/spad/index.rst", "usage/api/cc_hardware/drivers/spads/spad_wrappers/index.rst", "usage/api/cc_hardware/drivers/spads/tmf8828/index.rst", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index.rst", "usage/api/cc_hardware/index.rst", "usage/api/cc_hardware/tools/calibration/index.rst", "usage/api/cc_hardware/tools/camera_viewer/index.rst", "usage/api/cc_hardware/tools/dashboard/dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/dash/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/mocap_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/pyqtgraph/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/dash/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/matplotlib/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/pyqtgraph/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/spad_dashboard/index.rst", "usage/api/cc_hardware/tools/flash/index.rst", "usage/api/cc_hardware/tools/index.rst", "usage/api/cc_hardware/tools/jogger/index.rst", "usage/api/cc_hardware/utils/constants/index.rst", "usage/api/cc_hardware/utils/file_handlers/index.rst", "usage/api/cc_hardware/utils/index.rst", "usage/api/cc_hardware/utils/logger/index.rst", "usage/api/cc_hardware/utils/manager/index.rst", "usage/api/cc_hardware/utils/matplotlib/index.rst", "usage/api/cc_hardware/utils/misc/asyncio_utils/index.rst", "usage/api/cc_hardware/utils/misc/blocking_deque/index.rst", "usage/api/cc_hardware/utils/misc/index.rst", "usage/api/cc_hardware/utils/misc/misc/index.rst", "usage/api/cc_hardware/utils/misc/multiprocessing_deque/index.rst", "usage/api/cc_hardware/utils/misc/serial_utils/index.rst", "usage/api/cc_hardware/utils/misc/singleton/index.rst", "usage/api/cc_hardware/utils/registry/index.rst", "usage/api/cc_hardware/utils/setting/index.rst", "usage/api/cc_hardware/utils/transformations/index.rst", "usage/index.md"], "titles": ["Contributing", "&lt;no title&gt;", "Camera Viewer", "Examples", "SPAD Dashboard", "Stepper Gantry Collab", "Stepper Motor Controller", "Camera Culture Hardware Repo", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.aruco</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.camera</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.flir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.realsense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.usb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap.mocap</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap.vive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.safe_serial</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.sensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.tmf8828</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.vl53l8ch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.kinesis_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_controller</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_motor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_system</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.telemetrix_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.camera_viewer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.dash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.dash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.matplotlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.flash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.jogger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.file_handlers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.matplotlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.asyncio_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.blocking_deque</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.multiprocessing_deque</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.serial_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.registry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.setting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.transformations</span></code>", "Reference"], "terms": {"repositori": [0, 7], "i": [0, 2, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 39, 40, 41, 42, 43, 44, 46, 47, 49, 51, 52, 54, 55, 56, 57, 60, 61, 62, 65, 66, 67], "fairli": [0, 55, 57, 67], "easi": 0, "so": [0, 4, 13, 52], "pleas": [0, 4], "see": [0, 18, 28, 30, 34, 56], "below": 0, "instruct": [0, 13], "how": [0, 2, 3, 4, 5, 6, 18, 28, 30, 34, 56], "actual": [0, 4, 25, 52, 56], "make": [0, 55, 59, 60, 61], "thi": [0, 2, 4, 5, 6, 7, 9, 10, 13, 15, 16, 17, 18, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68], "project": 0, "There": [0, 4, 5, 49], "ar": [0, 4, 5, 7, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 24, 26, 27, 29, 30, 31, 33, 34, 35, 49, 52, 54, 55, 56, 57, 61, 64], "two": [0, 5], "form": 0, "simpl": [0, 2, 13, 16, 31, 44], "ad": [0, 18, 28, 30, 34, 52, 56], "content": 0, "within": [0, 7, 25, 29, 55, 57, 67], "doc": 0, "folder": 0, "all": [0, 7, 9, 17, 18, 22, 24, 26, 27, 28, 30, 33, 47, 52, 54, 55, 56, 57, 59, 61, 64, 66, 67], "written": [0, 18, 22, 54, 56], "markdown": 0, "convert": [0, 35, 55, 57, 67], "html": 0, "through": [0, 35], "myst_pars": 0, "sphinx": 0, "To": [0, 13], "well": [0, 16, 55, 57, 67], "you": [0, 4, 5, 7, 13, 17, 18, 30, 33, 35, 49, 52, 55, 56, 57, 67], "want": [0, 52, 55, 56, 57, 67], "packag": [0, 3, 13, 56], "symlink": 0, "A": [0, 9, 10, 12, 13, 14, 15, 17, 18, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 44, 51, 54, 55, 56, 57, 60, 61, 64, 65, 66, 67], "conda": 0, "virtualenv": 0, "add": [0, 2, 4, 5, 6, 9, 18, 23, 29, 40, 41, 42, 43, 44, 46, 47, 49, 52, 55, 56, 57, 67], "isol": 0, "python": [0, 4, 13], "environ": [0, 55, 60, 61], "reduc": 0, "conflict": 0, "amongst": 0, "It": [0, 13, 16, 18, 22, 28, 29, 30, 31, 33, 39, 40, 54, 55, 56, 57, 65], "highli": 0, "recommend": 0, "us": [0, 3, 4, 5, 6, 7, 10, 13, 17, 18, 22, 23, 25, 28, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 57, 60, 61, 64, 65, 66, 67], "one": [0, 9, 13, 16, 18, 22, 37, 51, 55, 57, 61, 65, 66, 67], "normal": 0, "git": [0, 7], "http": 0, "github": [0, 7], "com": [0, 7], "camera": [0, 3, 5, 10, 18, 38, 57], "cultur": 0, "cc": [0, 7, 14, 19, 24, 29, 30, 55, 57], "hardwar": [0, 14, 18, 19, 24, 25, 29, 30, 33, 37, 50, 55, 57], "cd": [0, 7], "sinc": [0, 55, 57, 67], "organ": [0, 28], "monorepo": [0, 7], "need": [0, 13, 44, 55, 61, 65], "poetri": [0, 7], "The": [0, 4, 5, 6, 7, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 56, 57, 60, 61, 64, 65, 66, 67], "develop": [0, 28], "mode": [0, 5, 6, 28, 29, 37, 48, 56], "e": [0, 7, 17, 18, 19, 20, 24, 26, 30, 33, 34, 44, 55, 57, 67], "symbol": 0, "link": 0, "immedi": 0, "reflect": 0, "pip": [0, 7, 13], "action": 0, "automat": [0, 5, 7], "site": [0, 13], "page": 0, "host": 0, "static": [0, 54], "updat": [0, 4, 5, 12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 28, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 67], "have": [0, 7, 18, 28, 30, 33, 34, 52, 56], "push": 0, "main": [0, 4, 6, 29, 39, 40, 41, 42, 43, 46, 47, 49], "branch": 0, "onc": [0, 17], "rebuild": 0, "ensur": [0, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 26, 30, 33, 52, 54, 55, 56, 57, 60, 61, 65, 66], "error": [0, 9, 18, 22, 30, 33, 52, 56], "befor": [0, 4, 18, 22, 31, 55, 56, 57], "do": [0, 13, 29, 52, 56], "mai": [0, 9, 13, 18, 19, 20, 24, 26, 30, 33, 52, 56], "get": [0, 9, 12, 13, 14, 15, 16, 17, 18, 29, 31, 32, 51, 52, 54, 55, 56, 57, 60, 61, 66, 67], "an": [0, 4, 9, 10, 12, 13, 14, 18, 19, 20, 22, 24, 26, 27, 29, 30, 31, 32, 33, 39, 40, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67], "email": 0, "from": [0, 2, 4, 5, 6, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 33, 35, 49, 51, 52, 54, 55, 56, 57, 60, 61, 62, 65, 66, 67], "someth": [0, 18, 22], "bad": 0, "happen": [0, 18, 22], "tag": 0, "exampl": [0, 4, 5, 6, 13, 18, 21, 28, 30, 34, 49, 51, 54, 55, 56, 57, 65, 66], "v3": 0, "0": [0, 4, 5, 6, 13, 17, 25, 31, 53, 55, 57], "1": [0, 2, 4, 10, 12, 13, 14, 16, 17, 18, 19, 20, 22, 24, 25, 26, 28, 29, 30, 31, 34, 39, 40, 41, 54], "follow": [0, 4, 7, 13], "pkg": [0, 7], "algo": [0, 7, 8], "contain": [0, 7, 9, 10, 12, 13, 14, 15, 18, 28, 35, 57], "algorithm": [0, 7, 10, 11], "process": [0, 4, 7, 10, 21, 23, 28, 29, 39, 40, 52, 56], "data": [0, 4, 5, 6, 7, 13, 15, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 37, 41, 44, 45, 47, 48, 49, 54, 55, 57, 58, 67], "driver": [0, 2, 4, 5, 6, 7, 8, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "interfac": [0, 7, 9, 13, 16, 18, 22, 28, 29, 30, 31, 33, 35, 48, 51, 52], "util": [0, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 47, 48], "function": [0, 7, 10, 27, 29, 39, 40, 54, 57, 65], "class": [0, 4, 7, 62, 64, 68], "tool": [0, 4, 5, 7, 8, 36], "work": [0, 7, 64, 68], "calibr": [0, 7, 12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 28, 36, 51], "visual": [0, 4, 7, 44, 45, 47, 48, 49, 58], "script": [0, 7, 28, 29, 55, 61, 64], "addit": [0, 9, 18, 21, 22, 27, 29, 31, 35, 37, 55, 57, 61, 64, 65, 67], "licens": 0, "pyproject": [0, 7], "toml": [0, 7], "descript": [0, 6], "If": [0, 9, 12, 13, 14, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 35, 45, 47, 48, 51, 52, 54, 55, 56, 57, 61, 64, 66, 67], "plan": 0, "visit": 0, "correspond": [0, 21, 28], "under": 0, "each": [0, 4, 7, 9, 17, 18, 22, 28, 37, 45, 47, 49, 54, 55, 57, 67], "should": [0, 7, 9, 18, 21, 30, 32, 33, 39, 40, 41, 42, 43, 44, 46, 47, 49, 52, 54, 56, 67], "readm": [0, 7], "md": [0, 7], "cc_hardwar": [0, 2, 3, 4, 5, 6, 7, 8], "__init__": [0, 7, 65, 66], "py": [0, 7], "googl": 0, "": [0, 5, 6, 9, 12, 13, 14, 18, 24, 25, 26, 28, 29, 30, 33, 35, 44, 53, 55, 56, 57, 67], "style": [0, 47, 48, 58], "These": [0, 35], "also": [0, 4, 18, 22, 30, 33, 35, 51, 54, 55, 56, 61, 65, 66], "gener": [0, 5, 17, 67], "tutori": 0, "fix": [0, 48], "exist": [0, 5, 6, 27, 54, 55, 56, 61, 65], "_static": 0, "persist": 0, "css": 0, "custom": [0, 28, 48, 52, 55, 56, 57, 67], "differ": [0, 18, 22, 28, 31, 49, 56, 67], "default": [0, 6, 9, 10, 13, 16, 17, 18, 19, 20, 22, 24, 25, 26, 28, 29, 30, 31, 34, 39, 40, 46, 47, 49, 52, 54, 55, 56, 57, 58, 67], "furo": 0, "theme": 0, "imag": [0, 10, 13, 15, 16], "favicon": 0, "etc": 0, "usag": [0, 55, 61, 65], "refer": [0, 4, 18, 24, 26, 30, 31, 33, 35], "guid": 0, "eyesofcambrian": 0, "conf": 0, "set": [0, 4, 5, 6, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 31, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 57, 58], "relat": [0, 18, 24, 26], "extens": 0, "index": [0, 17, 25, 32, 54, 55, 59, 60, 61], "home": [0, 18, 30, 31, 33, 35], "try": 0, "maintain": [0, 55, 57, 67], "describ": [0, 7], "abov": 0, "tab": 0, "onli": [0, 9, 13, 16, 31, 51, 55, 57, 61, 64, 65, 66, 67], "singl": [0, 17, 18, 22, 24, 26, 28, 34, 54, 55, 61, 65], "background": [0, 13, 16, 17, 28, 29], "ha": [0, 9, 13, 18, 28, 30, 31, 33, 52, 56, 67], "multipl": [0, 7, 18, 22, 28, 29, 30, 31, 34, 35, 54, 55, 59, 61], "creat": [0, 6, 9, 13, 16, 18, 22, 23, 28, 30, 32, 34, 40, 41, 42, 43, 46, 47, 49, 51, 55, 56, 57, 61, 65, 66, 67], "titl": [0, 67], "same": [0, 18, 30, 33, 55, 61, 65], "insert": 0, "name": [0, 6, 9, 17, 18, 22, 23, 28, 29, 30, 32, 34, 35, 51, 52, 55, 56, 57, 60, 61, 64, 66, 67], "without": [0, 21, 25, 54], "tabl": 0, "insid": 0, "restructuredtext": 0, "which": [0, 4, 5, 18, 30, 31, 33, 34, 35, 52, 55, 56, 57], "both": [0, 10, 16, 51, 55, 65, 66], "advantag": 0, "disadvantag": 0, "allow": [0, 17, 28, 48, 52, 55, 56, 57, 61, 65, 67], "u": 0, "understand": 0, "languag": 0, "compil": 0, "down": [0, 18, 30, 33, 35], "featur": [0, 31, 49], "librari": [0, 13, 16, 31, 35], "websit": 0, "wai": [0, 7, 32, 67], "easiest": 0, "makefil": [0, 29], "bat": 0, "provid": [0, 3, 9, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 35, 45, 47, 48, 49, 51, 54, 55, 56, 59, 60, 65, 66, 67, 68], "directli": [0, 17, 35, 51, 55, 66], "necessari": [0, 9, 18, 23, 29, 40, 41, 42, 43, 46, 47, 49, 51, 55, 57, 61, 65, 66, 67], "depend": [0, 18, 19, 20, 24, 26, 30, 33, 52, 56], "run": [0, 2, 4, 5, 6, 7, 9, 10, 13, 17, 28, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 57], "command": [0, 4, 7, 13, 18, 30, 33, 51], "dev": 0, "clean": [0, 44], "view": [0, 2, 38, 44], "go": [0, 13], "browser": [0, 45], "open": [0, 10, 15, 44, 56], "locat": [0, 18, 30, 33], "autobuild": 0, "extrem": 0, "when": [0, 4, 7, 18, 23, 30, 33, 40, 41, 42, 43, 44, 46, 47, 49, 52, 54, 55, 56, 57, 60, 67], "made": [0, 12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 28], "pypi": 0, "tl": 0, "dr": 0, "show": [2, 4, 5, 6, 10], "demonstr": [2, 6], "feed": [2, 38], "spad": [2, 3, 5, 18, 19, 20, 40, 45, 46, 47, 48, 49], "import": [2, 4, 5, 6, 7, 49, 56, 57, 65, 66], "cv2": 2, "cameraconfig": [2, 12, 14, 16, 17, 18], "manag": [2, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 40, 41, 42, 44, 45, 46, 47, 48, 55, 67], "get_logg": [2, 4, 5, 6, 56], "register_cli": [2, 4, 5], "run_cli": [2, 4, 5], "def": [2, 4, 5, 6, 13, 57, 65, 66], "camera_view": [2, 36, 51], "num_fram": [2, 39, 40], "int": [2, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 31, 32, 35, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 60, 61], "resolut": [2, 12, 13, 14, 15, 16, 17, 18, 24, 25, 26, 28, 29], "tupl": [2, 12, 13, 14, 15, 16, 17, 18, 22, 24, 25, 26, 28, 29], "none": [2, 5, 6, 9, 10, 13, 15, 17, 18, 21, 22, 25, 28, 29, 31, 35, 37, 39, 40, 41, 44, 45, 47, 48, 51, 52, 54, 55, 56, 57, 61, 64, 66, 67], "setup": [2, 4, 5, 6, 31, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 57], "_camera": 2, "create_from_config": [2, 4, 5, 55, 57], "loop": [2, 4, 5, 6, 39, 40, 41, 42, 43, 44, 46, 47, 49, 55, 57], "iter": [2, 5, 6, 15, 18, 28, 30, 32, 34, 55, 57], "bool": [2, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 40, 44, 46, 47, 48, 49, 54, 55, 57, 67], "info": [2, 4, 5, 6, 56], "f": [2, 4, 5, 6], "finish": 2, "captur": [2, 13, 16, 17, 18, 19, 20, 28, 41, 42, 43, 44, 52], "frame": [2, 4, 17, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54], "return": [2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 51, 52, 54, 55, 56, 57, 59, 60, 61, 64, 65, 66, 67], "fals": [2, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 52, 54, 55, 56, 57, 67], "accumul": [2, 4, 5, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 28, 29, 44, 45, 47], "resiz": 2, "imshow": 2, "waitkei": 2, "0xff": 2, "ord": 2, "q": [2, 44], "true": [2, 4, 5, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 40, 41, 44, 46, 47, 48, 49, 52, 54, 55, 56, 57, 58, 61, 62, 67], "__name__": [2, 4, 5, 6], "__main__": [2, 4, 5, 6], "we": [3, 4, 7, 17, 35, 44, 55, 57, 67], "few": [3, 22], "dashboard": [3, 5], "stepper": [3, 18, 30, 31, 32, 33, 34, 35], "gantri": [3, 18, 30, 34, 52], "collab": 3, "motor": [3, 18, 30, 31, 32, 33, 34, 35], "control": [3, 4, 5, 18, 30, 31, 32, 33, 34, 35, 52], "viewer": 3, "demo": [4, 5, 6], "can": [4, 5, 7, 9, 13, 17, 18, 22, 24, 26, 28, 30, 33, 34, 35, 44, 49, 51, 52, 55, 56, 57, 66], "current": [4, 7, 17, 18, 30, 31, 32, 33, 35, 39, 40, 41, 42, 43, 45, 46, 47, 49, 56, 67], "number": [4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 28, 29, 32, 35, 39, 40, 41, 42, 43, 45, 46, 47, 49, 54, 55, 60, 61, 67], "support": [4, 7, 13, 17, 28, 31, 40, 45, 46, 47, 48, 49, 51, 54, 55, 65, 66, 67], "document": [4, 18, 28, 30, 34], "more": [4, 5, 44, 52, 56], "inform": [4, 56], "exampel": 4, "regist": [4, 9, 51, 55, 57, 61, 65, 66, 67], "explicit": [4, 5], "callback": [4, 39, 40, 49, 55, 59, 61], "In": [4, 7, 29], "case": 4, "explicitli": [4, 6, 35], "just": [4, 52, 55, 56, 57], "call": [4, 17, 35, 44, 52, 55, 56, 57, 61, 65, 67], "becom": 4, "help": [4, 6], "block": [4, 18, 30, 33, 34, 39, 40, 41, 42, 43, 46, 47, 49, 55, 60, 61], "sensor": [4, 5, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 33, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 67], "spadsensor": [4, 5, 18, 24, 25, 26, 27, 28, 29, 40, 45, 46, 47, 48, 49], "spaddashboard": [4, 5, 40, 45, 46, 47, 48, 49], "file": [4, 5, 6, 15, 21, 25, 37, 47, 48, 54, 55, 56, 57, 67], "spadwrapp": [4, 27], "user": [4, 29, 39, 40, 48, 49, 52, 56], "wrap": [4, 27, 52, 55, 56, 59, 60, 61], "spadmergewrapp": [4, 27], "merg": [4, 27, 29, 55, 57, 67], "neighbor": 4, "pixel": [4, 18, 24, 26, 28, 29], "togeth": 4, "merge_al": [4, 27], "group": 4, "wrapper": [4, 13, 16, 18, 22, 27, 30, 31, 34, 35, 55, 57, 59, 60, 61, 67], "like": [4, 52], "spadmovingaveragewrapp": [4, 27], "window_s": [4, 27], "5": [4, 13], "time": [4, 5, 6, 17, 18, 22, 28, 29, 47, 48, 49, 67], "functool": [4, 5], "partial": [4, 5], "spadsensorconfig": [4, 5, 18, 24, 26, 27, 28, 29], "spaddashboardconfig": [4, 5, 40, 45, 46, 47, 48, 49], "t0": 4, "my_callback": [4, 49], "logger": [4, 5, 6, 55], "interv": [4, 54], "arg": [4, 6, 9, 18, 22, 28, 29, 30, 31, 33, 34, 35, 51, 55, 56, 57, 60, 61, 65, 66, 67], "instanc": [4, 9, 13, 16, 17, 18, 22, 23, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 56, 57, 61, 65, 66, 67], "global": 4, "10": [4, 6, 13, 18, 22, 54, 65], "configur": [4, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 33, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 57], "user_callback": [4, 39, 40, 49], "create_from_registri": [4, 6, 9, 49, 51, 55, 57, 66, 67], "config": [4, 12, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 57, 67], "unus": 4, "here": [4, 9, 35], "t1": 4, "fp": [4, 54], "2f": 4, "histogram": [4, 5, 18, 24, 25, 26, 27, 28, 29, 40, 45, 46, 47, 48, 49], "spad_dashboard_demo": 4, "up": [4, 18, 22, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 61, 62], "object": [4, 6, 9, 16, 18, 25, 28, 29, 30, 34, 35, 47, 51, 54, 55, 57, 60, 66, 67], "along": 5, "separ": [5, 7], "api": [5, 31, 55, 57, 67, 69], "first": [5, 54], "v1": 5, "argpars": [5, 6], "code": [5, 55, 57, 67], "instanti": [5, 9, 18, 23, 31, 51, 55, 57, 66, 67], "second": [5, 18, 22], "v2": 5, "decor": [5, 55, 61, 65, 66], "cli": 5, "datetim": [5, 6], "pathlib": [5, 6], "path": [5, 6, 7, 9, 10, 21, 28, 29, 48, 51, 54, 55, 57, 61, 62, 66, 67], "stepper_motor": [5, 6, 18], "steppermotorsystem": [5, 6, 18, 30, 31, 34, 35], "steppermotorsystemconfig": 5, "stepper_control": [5, 6, 18, 30], "steppercontrol": [5, 32], "steppercontrollerconfig": 5, "file_handl": [5, 6, 55], "pklhandler": [5, 6, 54], "uncom": [5, 6], "debug": [5, 6], "level": [5, 6, 52, 56], "log": [5, 6, 18, 22, 52, 56], "now": [5, 6], "logdir": [5, 6], "mkdir": [5, 6], "parent": [5, 6, 18, 22, 44, 48], "exist_ok": [5, 6], "is_okai": [5, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 28, 29, 30, 31, 33, 35, 44, 55, 57], "fatal": 5, "fail": [5, 13], "initi": [5, 6, 9, 13, 16, 17, 21, 23, 31, 35, 48], "output_pkl": [5, 6], "pkl": [5, 6, 14, 18, 24, 54], "assert": [5, 6, 65], "output": [5, 6, 28, 47, 48, 52, 54, 56], "alreadi": [5, 6], "writer": [5, 6, 10, 54], "stepper_system": [5, 6, 18, 30, 31, 35], "kwarg": [5, 6, 9, 12, 13, 14, 17, 18, 19, 20, 22, 23, 24, 26, 29, 30, 31, 33, 35, 37, 51, 55, 56, 57, 60, 61, 64, 65, 66, 67], "start": [5, 6, 17, 18, 22, 29, 30, 33, 54, 57], "po": [5, 6], "get_posit": [5, 6, 32], "move_to": [5, 6, 18, 30, 31, 33, 34, 35], "x": [5, 6, 29], "y": [5, 6, 29, 40, 46, 47, 49], "append": [5, 6, 54, 55, 56, 60, 61], "sleep": [5, 6], "25": [5, 6], "spad_gantry_capture_v2": 5, "strftime": [5, 6], "m": [5, 6, 53], "d": [5, 6], "h": [5, 6], "_setup": 5, "defin": [6, 12, 14, 18, 23, 24, 25, 26, 28, 30, 31, 33, 34, 39, 40, 41, 42, 43, 46, 47, 49, 55, 57, 67], "itself": 6, "system": [6, 18, 24, 26, 30, 31, 34, 52, 56], "snakesteppercontrol": [6, 32], "stepper_system_nam": 6, "str": [6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 34, 35, 47, 51, 52, 54, 55, 56, 57, 60, 61, 66, 67], "singledrive1axisgantri": [6, 35], "stepper_port": 6, "controller_config": 6, "list": [6, 10, 16, 17, 18, 22, 28, 29, 30, 31, 32, 34, 35, 40, 46, 47, 49, 54, 55, 57, 59, 61, 64, 67], "dict": [6, 10, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 55, 57, 67], "rang": [6, 18, 24, 26, 28, 29, 37, 67], "16": 6, "sampl": [6, 12, 13, 14, 15, 16, 18, 19, 20, 24, 25, 26, 28, 29], "port": [6, 18, 22, 28, 29, 31, 35, 37, 55, 61, 64], "parser": 6, "argumentpars": 6, "add_argu": 6, "parse_arg": 6, "instal": 7, "clone": 7, "publish": 7, "io": 7, "subdirectori": 7, "directori": [7, 55, 56, 57, 67], "done": [7, 44], "package_nam": 7, "module_nam": 7, "implement": [9, 13, 16, 17, 18, 22, 28, 30, 33, 37, 45, 47, 48, 49, 52, 55, 61, 65], "registri": [9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 47, 48, 51, 55, 57, 67], "abc": [9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 47, 48, 55, 57, 61, 65], "abstract": [9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 30, 32, 33, 39, 40, 41, 42, 43, 44, 46, 47, 49, 55, 57, 61, 65], "result": [9, 10, 55, 59, 61], "subclass": [9, 18, 23, 30, 33, 40, 41, 42, 43, 46, 47, 49, 51, 52, 55, 56, 61, 65, 66], "paramet": [9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 54, 55, 57, 60, 61, 64, 65, 66, 67], "method": [9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 51, 52, 54, 55, 56, 57, 59, 61, 66, 67], "specifi": [9, 10, 12, 13, 14, 15, 18, 19, 20, 22, 24, 25, 26, 30, 31, 33, 34, 35, 49, 52, 54, 55, 56, 60, 61], "type": [9, 18, 22, 31, 37, 51, 55, 57, 61, 62, 66, 67], "properti": [9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 57], "okai": [9, 10, 55, 57], "otherwis": [9, 10, 13, 15, 16, 17, 18, 22, 28, 29, 30, 31, 33, 34, 51, 52, 55, 56, 57, 66, 67], "either": [9, 18, 22, 29], "been": [9, 28, 52, 56, 67], "properli": [9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 26, 30, 33, 54, 55, 57], "encount": [9, 52, 56], "close": [9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 47, 49, 52, 54, 55, 56, 57], "releas": [9, 10, 12, 14, 17, 18, 19, 20, 23, 24, 26, 30, 33, 52, 55, 56, 57], "ani": [9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 33, 34, 37, 40, 41, 42, 43, 46, 47, 49, 51, 52, 54, 55, 56, 57, 60, 61, 62, 66, 67], "resourc": [9, 10, 12, 14, 15, 17, 18, 19, 20, 23, 24, 26, 30, 33, 52, 55, 56, 57], "overrid": [9, 13, 55, 57, 61, 65, 67], "own": [9, 13, 18, 28, 30, 34], "classmethod": [9, 18, 22, 51, 55, 57, 61, 65, 66, 67], "class_typ": [9, 51, 55, 57, 66, 67], "class_nam": [9, 51, 55, 57, 66, 67], "module_path": [9, 51, 55, 57, 66, 67], "friend": [9, 51, 55, 57, 66, 67], "self": [9, 13, 18, 28, 29, 30, 34, 39, 40, 51, 52, 54, 55, 56, 57, 61, 65, 66, 67], "lazi": [9, 51, 55, 57, 66, 67], "load": [9, 15, 25, 51, 54, 55, 57, 66, 67], "string": [9, 28, 29, 51, 55, 57, 60, 61, 66, 67], "anoth": [9, 51, 55, 57, 66, 67], "associ": [9, 10, 51, 55, 57, 66, 67], "perform": [9, 18, 22, 28, 37, 51, 55, 57, 61, 62, 66, 67], "posit": [9, 18, 30, 31, 32, 33, 34, 35, 51, 54, 55, 57, 61, 65, 66, 67], "argument": [9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 37, 39, 40, 45, 47, 51, 54, 55, 57, 61, 64, 65, 66, 67], "pass": [9, 18, 21, 22, 35, 37, 51, 52, 55, 56, 57, 61, 64, 66, 67], "constructor": [9, 18, 22, 37, 51, 55, 56, 57, 61, 65, 66, 67], "keyword": [9, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 31, 34, 35, 37, 45, 47, 51, 54, 55, 57, 61, 64, 65, 66, 67], "request": [9, 28, 51, 55, 57, 60, 61, 66, 67], "dictionari": [9, 10, 18, 30, 31, 32, 34, 35, 51, 55, 57, 66, 67], "map": [9, 28, 51, 52, 55, 56, 57, 66, 67], "enumer": [9, 18, 28, 29, 30, 34, 51, 55, 57, 66, 67], "local": 10, "marker": 10, "arucolocalizationalgorithm": 10, "aruco_dict": 10, "marker_s": 10, "origin_id": 10, "num_sampl": [10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 28, 29], "marker_id": 10, "detect": [10, 18, 30, 33, 35], "comput": [10, 18, 30, 33], "pose": [10, 18, 19, 20], "rel": [10, 18, 30, 31, 33, 35], "origin": [10, 52, 55, 56, 57, 67], "save": [10, 37, 47, 48, 55, 57, 67], "filenam": [10, 37, 47, 56], "return_imag": 10, "option": [10, 13, 29, 31, 39, 40, 46, 47, 49, 54, 55, 57, 67], "whether": [10, 12, 13, 14, 16, 17, 18, 22, 25, 27, 28, 31, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 55, 57, 67], "displai": [10, 39, 40, 41, 42, 43, 46, 47, 48, 49], "video": [10, 54], "check": [10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 28, 29, 30, 31, 33, 35, 44, 55, 57, 61, 62, 64], "aruco": 11, "base": [12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 28, 30, 33, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 54, 55, 57, 61, 62, 65, 66, 67], "sensorconfig": [12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29], "hydra_config": [12, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 40, 41, 42, 44, 45, 46, 47, 48, 55, 57, 67], "hydracontainerconfig": [12, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 40, 41, 42, 44, 45, 46, 47, 48, 55, 57, 67], "retriev": [12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 57, 60, 61, 65], "compon": [12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 40, 41, 42, 44, 45, 46, 47, 48, 55, 57], "extend": [12, 14, 18], "specif": [12, 13, 14, 18, 22, 28, 30, 33, 35, 37, 54, 55, 57, 59, 61, 67], "averag": [12, 13, 14, 18, 19, 20, 24, 25, 26, 27, 28, 29], "np": [12, 13, 14, 15, 16, 17, 18, 21, 23, 25, 28, 29, 45, 47, 54], "ndarrai": [12, 13, 14, 15, 16, 17, 18, 21, 23, 25, 28, 29, 45, 47, 54], "arrai": [12, 13, 14, 15, 18, 28], "distortion_coeffici": [12, 13, 14, 15, 16, 17, 18], "numpi": [12, 13, 14, 15, 16, 17, 18], "distort": [12, 13, 14, 15, 16, 17, 18], "coeffici": [12, 13, 14, 15, 16, 17, 18], "repres": [12, 13, 14, 15, 18, 24, 26, 28, 29, 30, 33], "intrinsic_matrix": [12, 13, 14, 15, 16, 17, 18], "intrins": [12, 13, 14, 15, 16, 17, 18], "matrix": [12, 13, 14, 15, 16, 17, 18], "3x3": [12, 13, 14, 15, 18, 28], "width": [12, 13, 14, 15, 16, 17, 18, 24, 25, 26, 28], "height": [12, 13, 14, 15, 16, 17, 18, 24, 25, 26, 28], "chang": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 29, 52, 56], "given": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 29, 32, 37, 55, 61, 64], "via": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 29, 31], "sent": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 29], "kei": [12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 26, 29, 32, 35, 48, 54, 67], "must": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 29, 30, 33, 52, 55, 56, 57], "match": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 29], "field": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 29, 44], "wa": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 28, 29, 52, 56, 67], "were": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26], "oper": [12, 14, 18, 19, 20, 22, 23, 24, 26, 28, 29, 30, 31, 33, 35, 55, 57], "__del__": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26, 54], "destructor": [12, 13, 14, 17, 18, 19, 20, 23, 24, 26], "flircamera": 13, "around": [13, 16, 18, 22, 30, 31, 34, 35, 55, 57, 60, 67], "singleton": [13, 16, 55, 61], "new": [13, 18, 21, 23, 40, 41, 42, 43, 44, 46, 47, 49, 55, 57, 67], "grasshopperflircamera": 13, "special": 13, "grasshopp": 13, "model": 13, "inherit": [13, 15, 18, 24, 25, 26, 28, 29, 32, 51, 55, 66], "036": 13, "145": 13, "001": 13, "155": 13, "1815": 13, "1817": 13, "753": 13, "721": 13, "299": 13, "531": 13, "352": 13, "spinnak": 13, "usual": [13, 35], "As": 13, "write": [13, 18, 22, 54, 56], "2024": 13, "09": 13, "21": 13, "3": [13, 18, 28, 30, 34, 52, 56], "newer": 13, "version": [13, 52, 56], "step": [13, 18, 30, 33, 35, 41, 44, 48], "after": [13, 55, 57], "re": 13, "tar": 13, "xvzf": 13, "spinnaker_python": 13, "cp": 13, "o": [13, 52, 56], "arch": 13, "gz": 13, "whl": 13, "But": 13, "replac": [13, 52, 56], "your": 13, "For": [13, 21], "11": 13, "m2": 13, "mac": 13, "would": [13, 67], "turn": 13, "4": 13, "172": 13, "cp310": 13, "macosx_13_0_arm64": 13, "mv": 13, "cp311": 13, "And": 13, "_pyspin": 13, "cpython": 13, "310": 13, "darwin": 13, "311": 13, "offici": 13, "caus": 13, "issu": [13, 18, 30, 33, 56], "risk": 13, "camera_index": [13, 17], "thread": [13, 16, 17, 18, 22, 39, 40, 41, 42, 43, 46, 47, 49, 52, 55, 56, 60, 61], "store": [13, 16, 17, 29, 52, 54, 55, 57, 67], "them": [13, 16, 17, 18, 28, 30, 31, 33, 34, 35, 67], "queue": [13, 16, 17], "avail": [13, 15, 18, 22, 29, 49, 55, 61, 64], "stream": [13, 16, 56], "stop": [13, 16, 17, 18, 22, 28, 29, 55, 57], "deiniti": [13, 16], "flir": [14, 18], "realsens": [14, 18], "pre": [15, 25, 29], "record": [15, 25, 52, 54, 56], "pklcamera": 15, "pkl_path": 15, "read": [15, 18, 22, 54, 67], "pickl": [15, 18, 28, 29, 30, 34, 54, 55, 57, 67], "exhaust": 15, "still": [15, 44], "activ": [15, 28], "placehold": 15, "potenti": 15, "cleanup": [15, 55, 57], "logic": [15, 55, 57, 67], "intel": 16, "devic": [16, 18, 22, 29, 31, 37, 50, 55, 61, 64], "realsensecamera": 16, "pyrealsens": 16, "d435i": 16, "color": [16, 18, 28, 30, 34], "depth": [16, 17, 28], "return_depth": [16, 17], "realsenseconfig": 16, "rgb": [16, 17], "r": 16, "return_rgb": [16, 17], "return_ir": 16, "readi": 16, "rais": [16, 17, 18, 22, 28, 29, 30, 34, 52], "notimplementederror": [16, 17, 52], "yet": [16, 17], "usbcameraconfig": 17, "variabl": [17, 18, 23, 28, 29, 39, 40, 45, 46, 47, 48, 49, 67], "identifi": 17, "g": [17, 18, 30, 33, 44], "start_capture_onc": 17, "keep": 17, "until": [17, 18, 22, 30, 33, 39, 40, 41, 42, 43, 46, 47, 49, 55, 57], "exposur": 17, "desir": 17, "valu": [17, 18, 21, 22, 24, 26, 28, 29, 30, 32, 33, 34, 35, 40, 45, 46, 47, 48, 49, 52, 54, 55, 56, 57, 59, 60, 61, 65, 66, 67], "note": [17, 35], "vari": [17, 18, 19, 20, 24, 26], "platform": 17, "force_autoexposur": 17, "attempt": [17, 18, 22, 35, 60], "enabl": [17, 28, 29, 35], "auto": [17, 35], "Not": 17, "usbcamera": 17, "ignor": [17, 27, 52, 56], "don": [17, 18, 30, 33], "t": [17, 18, 30, 33, 55, 56, 57], "known": [17, 18, 30, 33], "fallback": 17, "mocap": [18, 41, 42, 43, 44], "tmf8828": [18, 24, 37], "vl53l8ch": [18, 24], "kinesis_stepp": [18, 30], "telemetrix_stepp": [18, 30], "safe_seri": 18, "motioncapturesensor": [18, 19, 20, 41, 42, 43, 44], "motion": [18, 19, 20, 30, 33, 35, 41, 42, 43, 44], "sum": [18, 19, 20, 24, 26], "motioncapturesensorconfig": [18, 19, 20, 21], "safeseri": [18, 22], "lock_typ": [18, 22], "multiprocess": [18, 22], "safe": [18, 22, 30, 33, 35, 55, 60, 61], "serial": [18, 22, 29, 52, 55, 56, 57, 61, 64, 67], "synchron": [18, 22, 39, 40, 41, 42, 43, 46, 47, 49, 55, 59, 60, 61], "lock": [18, 22, 52, 56], "handl": [18, 21, 22, 23, 29, 48, 52, 55, 56, 57], "format": [18, 22, 52, 56], "wait": [18, 22, 30, 31, 33, 35, 55, 60, 61], "reset": [18, 21, 22, 23, 28, 29], "establish": [18, 22, 30, 33], "connect": [18, 22, 25, 28, 29, 30, 31, 33, 35], "2": [18, 22, 28, 30, 34, 52, 55, 56, 59, 61], "forc": [18, 22], "found": [18, 22], "invalid": [18, 22], "warn": [18, 22], "size": [18, 22, 27, 40, 45, 46, 47, 48, 49], "byte": [18, 22, 29], "wait_for_start_talk": [18, 22], "timeout": [18, 22, 28], "talk": [18, 22], "success": [18, 22, 29], "float": [18, 22, 28, 30, 31, 32, 33, 34, 35, 40, 46, 47, 49], "maximum": [18, 22, 31, 40, 45, 46, 47, 48, 49, 56, 67], "give": [18, 22], "receiv": [18, 22, 28, 29, 30, 33], "wait_for_stop_talk": [18, 22], "write_and_wait_for_start_talk": [18, 22], "tri": [18, 22], "resend": [18, 22], "write_and_wait_for_stop_talk": [18, 22], "return_data": [18, 22], "upon": [18, 22], "statu": [18, 22, 30, 33], "write_and_wait_for_start_and_stop_talk": [18, 22], "event": [18, 22, 44, 48, 52, 56], "__getattr__": [18, 22, 30, 34, 35, 55, 60, 61], "forward": [18, 22], "attribut": [18, 22, 28, 29, 30, 34, 55, 56, 57, 60, 61, 67], "access": [18, 22, 28, 30, 31, 34, 35, 52, 54, 55, 56, 60, 61], "appli": [18, 22], "prevent": [18, 22], "concurr": [18, 22], "photon": [18, 24, 26], "avalanch": [18, 24, 26], "diod": [18, 24, 26], "design": [18, 24, 26, 27], "measur": [18, 24, 26, 28], "collect": [18, 24, 26, 27, 28, 30, 34], "analyz": [18, 24, 26], "num_bin": [18, 24, 25, 26, 28, 29], "bin": [18, 24, 25, 26, 28, 29, 40, 45, 46, 47, 48, 49], "indic": [18, 24, 26, 28], "discret": [18, 24, 26], "total": [18, 24, 26, 32], "distanc": [18, 24, 26], "equal": [18, 24, 26], "multipli": [18, 24, 26], "spatial": [18, 24, 26], "where": [18, 24, 26, 54, 55, 57, 60, 61, 67], "point": [18, 24, 26, 30, 33], "respect": [18, 24, 26], "dimens": [18, 24, 26], "dummysteppermotor": [18, 30, 33], "dummi": [18, 30, 33, 34], "doe": [18, 30, 33, 34, 52, 55, 61, 62, 67], "noth": [18, 30, 33, 34, 52], "test": [18, 25, 30, 33], "ax": [18, 30, 31, 33, 34, 35], "attach": [18, 30, 31, 33, 34, 35, 52, 56], "steppermotor": [18, 30, 31, 33, 34, 35], "unifi": [18, 30, 33, 35], "common": [18, 25, 28, 29, 30, 33], "move": [18, 27, 30, 31, 32, 33, 34, 35], "includ": [18, 29, 30, 33, 65], "compat": [18, 30, 33, 67], "expect": [18, 29, 30, 33], "behavior": [18, 25, 30, 33, 55, 60, 61], "shut": [18, 30, 33, 35], "power": [18, 30, 33], "avoid": [18, 30, 33], "damag": [18, 30, 33], "memori": [18, 30, 33, 54], "leak": [18, 30, 33], "its": [18, 21, 23, 30, 31, 33, 35, 51, 55, 61, 64, 66], "zero": [18, 30, 31, 33, 35], "predefin": [18, 30, 31, 33], "could": [18, 30, 33, 52, 56], "involv": [18, 30, 33], "limit": [18, 30, 31, 33, 40, 46, 47, 49], "switch": [18, 30, 33], "trigger": [18, 30, 33], "absolut": [18, 30, 31, 33, 35], "target": [18, 30, 31, 33, 35], "interpret": [18, 30, 33], "characterist": [18, 30, 33], "angl": [18, 30, 33], "move_bi": [18, 30, 31, 33, 34, 35], "relative_posit": [18, 30, 31, 33, 35], "amount": [18, 30, 31, 33, 35], "degre": [18, 30, 33], "other": [18, 28, 29, 30, 33, 34, 52, 55, 56, 57, 67], "unit": [18, 30, 33, 34], "wait_for_mov": [18, 30, 31, 33, 35], "complet": [18, 28, 30, 31, 33, 35], "execut": [18, 30, 33, 45, 47, 48, 49], "reach": [18, 30, 33], "is_mov": [18, 30, 33, 34, 35], "healthi": [18, 30, 31, 33, 35], "state": [18, 21, 23, 28, 30, 31, 33, 35, 55, 57, 67], "verifi": [18, 30, 33], "whole": [18, 30, 31, 34], "multi": [18, 28, 30, 31, 34, 55, 60, 61], "axi": [18, 30, 31, 32, 34, 35, 40, 46, 47, 49], "rotat": [18, 30, 34], "stage": [18, 30, 34], "steppermotorsystemaxi": [18, 30, 31, 34], "passthrough": [18, 30, 34, 35], "underli": [18, 30, 34, 35, 52, 55, 56, 60, 61], "kwd": [18, 28, 29, 30, 34], "pair": [18, 28, 30, 34], "enum": [18, 28, 29, 30, 34, 67], "red": [18, 28, 30, 34], "blue": [18, 28, 30, 34], "green": [18, 28, 30, 34], "lookup": [18, 28, 30, 34, 52, 56], "over": [18, 28, 30, 34], "know": [18, 28, 30, 34], "mani": [18, 28, 30, 34, 51, 55, 66], "member": [18, 28, 29, 30, 34], "thei": [18, 28, 30, 34, 52, 56], "len": [18, 28, 30, 34], "detail": [18, 28, 30, 34], "__repr__": [18, 28, 29, 30, 34, 52, 55, 56, 60, 61], "repr": [18, 28, 29, 30, 34, 52, 56], "__str__": [18, 28, 29, 30, 34, 55, 57, 67], "__dir__": [18, 28, 29, 30, 34], "public": [18, 28, 29, 30, 34], "interest": [18, 28, 29, 30, 34, 52, 56], "__format__": [18, 28, 29, 30, 34], "format_spec": [18, 28, 29, 30, 34], "formatt": [18, 28, 29, 30, 34, 52, 56], "empti": [18, 28, 29, 30, 32, 34, 55, 60, 61], "typeerror": [18, 28, 29, 30, 34], "__hash__": [18, 28, 29, 30, 34], "hash": [18, 28, 29, 30, 34], "__reduce_ex__": [18, 28, 29, 30, 34], "proto": [18, 28, 29, 30, 34], "helper": [18, 28, 29, 30, 32, 34, 67], "vivetrackersensorconfig": 21, "vivetrack": 21, "cfg": 21, "json": 21, "additional_arg": 21, "pysurv": 21, "simplecontext": 21, "lead": 21, "poser": 21, "mpfit": 21, "vivetrackerpos": 21, "sensordata": [21, 23, 28, 29], "row": [21, 23, 27, 28, 29], "get_data": [21, 23, 28, 29], "commun": [22, 28, 29], "conveni": 22, "verify_has_data": 23, "pklspadsensor": 25, "fake": 25, "simul": 25, "pklspadsensorconfig": 25, "return_entri": 25, "entri": 25, "next": 25, "Will": 25, "handler": [25, 52, 54, 56], "op": 25, "spadwrapperconfig": 27, "expos": 27, "simplifi": 27, "spadmergewrapperconfig": 27, "merge_row": 27, "merge_col": 27, "column": [27, 29], "spadmovingaveragewrapperconfig": 27, "window": [27, 31, 44, 48], "8x8": [28, 29], "zone": 28, "flight": [28, 29], "am": 28, "wide": 28, "vcsel": 28, "4x4": [28, 29], "3x6": 28, "multizon": 28, "tmf8828sensor": 28, "tmf882x": [28, 37], "arduino": [28, 55, 61, 64], "shield": 28, "spadid": [28, 37], "get_num_pixel": 28, "id": [28, 35], "get_num_channel": 28, "channel": [28, 31, 40, 46, 47, 49], "get_active_channels_per_subcaptur": 28, "per": [28, 35], "subcaptur": 28, "get_resolut": 28, "rangemod": [28, 37], "tmf8828config": 28, "spad_id": [28, 37], "range_mod": [28, 37], "long": [28, 37], "short": [28, 37], "tmf8828histogram": 28, "clear": 28, "temporari": 28, "intern": [28, 52, 56], "copi": [28, 29, 55, 57, 67], "has_data": [28, 29], "across": [28, 65], "high": 28, "baudrat": [28, 29], "baud": [28, 29], "rate": [28, 29], "framework": 29, "rangingmod": 29, "vl53l8chconfig": 29, "uint16_t": 29, "ranging_mod": 29, "ranging_frequency_hz": 29, "frequenc": 29, "hz": 29, "integration_time_m": 29, "integr": 29, "millisecond": 29, "cnh_start_bin": 29, "cnh": 29, "cnh_num_bin": 29, "cnh_subsampl": 29, "subsampl": 29, "agg_start_x": 29, "aggreg": 29, "coordin": 29, "agg_start_i": 29, "agg_merge_x": 29, "agg_merge_i": 29, "agg_col": 29, "agg_row": 29, "add_back_ambi": 29, "flag": 29, "back": 29, "ambient": 29, "light": [29, 53], "some": [29, 55, 57, 67], "preprocess": 29, "remov": [29, 52, 56], "calcul": 29, "never": 29, "pack": 29, "structur": [29, 55, 57, 67], "vl53l8chsharedconfig": 29, "share": [29, 55, 60, 61, 65], "vl53l8chconfig4x4": 29, "vl53l8chconfig8x8": 29, "vl53l8chhistogram": 29, "num_pixel": 29, "vl53l8chsensor": 29, "acquisit": [29, 52, 56], "individu": [29, 67], "grid": 29, "kinesi": 31, "kinesissteppermotor": 31, "thorlab": 31, "c": [31, 53], "pylablib": 31, "throlab": 31, "kinesismotor": 31, "linux": 31, "is_rack_system": 31, "scale": 31, "movement": 31, "part": 31, "rack": 31, "factor": 31, "max_veloc": 31, "acceler": 31, "lower_limit": 31, "upper_limit": 31, "clip_at_limit": 31, "initial_posit": 31, "reference_posit": 31, "check_hom": 31, "veloc": 31, "lower": 31, "upper": 31, "clip": 31, "dure": [31, 52, 56], "opposit": [31, 35], "successfulli": 31, "kinesisrotationstag": 31, "kinesissteppermotorsystem": 31, "azimuthelevationsystem": 31, "azimuth": 31, "elev": 31, "standard": 32, "axis_config": 32, "exce": 32, "dummysteppersystem": 34, "telemetrixsteppermotor": 35, "telemetrixsteppermotorsystem": 35, "telemetrix": 35, "cncshield": 35, "board": 35, "distance_pin": 35, "direction_pin": 35, "enable_pin": 35, "cm_per_rev": 35, "steps_per_rev": 35, "speed": [35, 53], "flip_direct": 35, "effect": 35, "set_current_posit": 35, "pin": 35, "centimet": 35, "revolut": 35, "cm": 35, "direct": [35, 51, 55, 66], "set_target_position_cm": 35, "relative_cm": 35, "set_absolute_target_position_cm": 35, "position_cm": 35, "cm_to_rev": 35, "revs_to_cm": 35, "rev": 35, "stepper_": 35, "motorx": 35, "target_posit": 35, "equat": 35, "_board": 35, "stepper_target_posit": 35, "requir": [35, 55, 60, 61], "input": [35, 54], "ll": [35, 55, 57, 67], "telemetrixsteppermotorx": 35, "telemetrixsteppermotori": 35, "telemetrixsteppermotorz": 35, "telemetrixsteppermotorxrevers": 35, "telemetrixsteppermotoryrevers": 35, "telemetrixsteppermotorzrevers": 35, "dualdrive2axisgantry_x": 35, "dualdrive2axisgantry_y1": 35, "dualdrive2axisgantry_y2": 35, "dualdrive2axisgantri": 35, "singledrive1axisgantry_x": 35, "singledrive1axisgantry_i": 35, "axes_kwarg": 35, "flash": [36, 51], "jogger": [36, 51], "tmf8828_calibr": 37, "id6": 37, "id15": 37, "four": 37, "legaci": 37, "twice": 37, "dashboardconfig": [39, 40, 41, 42, 44, 45, 46, 47, 48], "gui": [39, 40], "000": [39, 40], "callabl": [39, 40, 52, 54, 55, 56, 57], "accept": [39, 40, 55, 57], "independ": [39, 40, 41, 42, 43, 44, 46, 47, 49], "capabl": [39, 40, 41, 42, 43, 46, 47, 49], "being": [39, 40, 41, 42, 43, 46, 47, 49, 52, 55, 56, 61, 65], "non": [39, 40, 41, 42, 43, 46, 47, 49], "mocap_dashboard": 40, "spad_dashboard": 40, "dash": [40, 46, 49], "matplotlib": [40, 46, 49, 55], "pyqtgraph": [40, 46, 49], "min_bin": [40, 45, 46, 47, 48, 49], "minimum": [40, 45, 46, 47, 48, 49, 67], "max_bin": [40, 45, 46, 47, 48, 49], "autoscal": [40, 46, 47, 49], "ylim": [40, 46, 47, 49], "channel_mask": [40, 46, 47, 49], "dashmotioncapturedashboardconfig": 41, "motioncapturedashboardconfig": [41, 42, 43, 44], "dashmotioncapturedashboard": 41, "motioncapturedashboard": [41, 42, 43, 44], "motioncaptur": [41, 42, 43, 44], "fig": 41, "pyqtgraphmotioncapturedashboardconfig": 44, "3d": [44, 68], "dashboardwindow": [44, 48], "qwidget": 44, "hold": 44, "opengl": 44, "glviewwidget": 44, "keypressev": [44, 48], "quit": 44, "esc": 44, "pyqtgraphmotioncapturedashboard": 44, "enter": 44, "qt": 44, "period": [44, 54], "timer": 44, "transform": [44, 55], "send": 44, "ui": [44, 67], "applic": [44, 45, 48, 52, 56, 65], "dashdashboardconfig": 45, "dashdashboard": [45, 49], "plotli": [45, 49], "web": [45, 49], "layout": [45, 47, 48], "figur": 45, "n_interv": 45, "existing_fig": 45, "real": [47, 48, 49], "save_anim": 47, "anim": 47, "funcanim": 47, "matplotlibdashboardconfig": 47, "matplotlibdashboard": [47, 49], "plot": [47, 48, 58], "adjust_ylim": 47, "adjust": 47, "matplotlibtransientviewerconfig": 47, "matplotlibtransientview": 47, "frame_index": 47, "pyqtgraphdashboardconfig": 48, "panel": 48, "right": 48, "init_ui": 48, "press": 48, "exit": 48, "pyqtgraphdashboard": [48, 49], "fullscreen": 48, "headless": 48, "three": 49, "firmwar": 50, "line": 51, "plu": [51, 55, 66], "factori": [51, 55, 66, 67], "registr": [51, 55, 66], "necessarili": [51, 55, 57, 66, 67], "myregistri": [51, 55, 66], "foo": [51, 55, 66], "bar": [51, 55, 66], "my_modul": [51, 55, 66], "modul": [51, 55, 68], "joystick": 52, "outputcaptur": 52, "buffer": [52, 54], "stdout": 52, "stderr": 52, "logbufferhandl": 52, "filter": [52, 54, 56], "emit": [52, 56], "whatev": 52, "take": [52, 54], "intend": 52, "createlock": [52, 56], "acquir": [52, 56], "setlevel": [52, 56], "condition": [52, 56], "emiss": [52, 56], "setformatt": [52, 56], "fmt": [52, 56], "flush": [52, 54, 56], "tidi": [52, 56], "_handler": [52, 56], "overridden": [52, 56, 67], "handleerror": [52, 56], "occur": [52, 56], "except": [52, 56], "raiseexcept": [52, 56], "silent": [52, 56], "what": [52, 56], "mostli": [52, 56], "most": [52, 56], "care": [52, 56], "about": [52, 56], "howev": [52, 56], "wish": [52, 56], "addfilt": [52, 56], "removefilt": [52, 56], "determin": [52, 56], "loggabl": [52, 56], "consult": [52, 56], "veto": [52, 56], "place": [52, 56], "further": [52, 56], "12": [52, 56], "logrecord": [52, 56], "instead": [52, 56], "modifi": [52, 56, 67], "300000000": 53, "overwrit": 54, "update_index_kwarg": 54, "random": 54, "entir": 54, "another_kei": 54, "another_valu": 54, "print": [54, 55, 57, 66, 67], "update_index": 54, "prune_fn": 54, "lambda": 54, "_": [54, 55, 57], "build": 54, "scan": 54, "_index": 54, "exclud": 54, "load_al": 54, "extract": 54, "__len__": [54, 55, 60, 61], "pklreader": 54, "videowrit": 54, "flush_interv": 54, "mp4": 54, "30": 54, "remain": 54, "delet": 54, "constant": 55, "omegaconf": [55, 57, 67], "dictconfig": [55, 57, 67], "uninstanti": [55, 57, 67], "nest": [55, 57, 67], "proper": [55, 57, 67], "deseri": [55, 57, 67], "yaml": [55, 57, 67], "_convert_": [55, 57, 67], "listconfig": [55, 57, 67], "convers": [55, 57, 67], "mean": [55, 57, 67], "dataclass": [55, 57, 67], "equival": [55, 57, 67], "compos": [55, 57, 67], "config_dir": [55, 57, 67], "config_nam": [55, 57, 67], "return_hydra_config": [55, 57, 67], "hydra": [55, 57, 61, 62, 67], "hydraconfig": [55, 57, 67], "pattern": [55, 57, 61, 65, 67], "instantiate_kwarg": [55, 57, 67], "select": [55, 57, 67], "merge_with": [55, 57, 67], "deepcopi": [55, 57, 67], "__getstate__": [55, 57, 67], "__setstate__": [55, 57, 67], "slow": [55, 57, 67], "unpickl": [55, 57, 67], "header": [55, 57, 67], "top": [55, 57, 67], "to_yaml": [55, 57, 67], "represent": [55, 57, 60, 61, 67], "essenti": [55, 57], "context": [55, 57], "counter": [55, 57], "begin": [55, 57], "continu": [55, 57], "__enter__": [55, 57], "__exit__": [55, 57], "__": [55, 57], "call_async": [55, 59, 61], "fn": [55, 59, 61], "asynchron": [55, 59, 61], "call_async_gath": [55, 59, 61], "call_async_valu": [55, 59, 61], "idx": [55, 59, 61], "singletonabcmeta": [55, 61, 65], "metaclass": [55, 61, 65], "combin": [55, 61, 65], "enforc": [55, 61, 65], "while": [55, 61, 65], "virtual": [55, 61, 65], "__instancecheck__": [55, 61, 65], "isinst": [55, 61, 65], "cl": [55, 61, 64, 65], "__subclasscheck__": [55, 61, 65], "issubclass": [55, 61, 65], "__call__": [55, 61, 65], "singletonmeta": [55, 61, 65], "blockingdequ": [55, 60, 61], "dequ": [55, 60, 61], "item": [55, 60, 61], "condit": [55, 60, 61], "suitabl": [55, 60, 61], "notifi": [55, 60, 61], "manner": [55, 60, 61], "__getitem__": [55, 60, 61], "find_device_by_label": [55, 61, 64], "label": [55, 61, 64], "find": [55, 61, 64], "volum": [55, 61, 64], "search": [55, 61, 64], "find_port": [55, 61, 64], "arduino_upload": [55, 61, 64], "upload": [55, 61, 64], "sketch": [55, 61, 64], "get_object": [55, 61, 62], "verbos": [55, 61, 62], "look": [55, 61, 62], "entiti": [55, 61, 62], "dotpath": [55, 61, 62], "lift": [55, 61, 62], "recurs": [55, 66], "approach": [55, 66], "ancestor": [55, 66], "tqdm": 56, "messag": 56, "consol": 56, "filehandl": 56, "streamhandl": 56, "doesn": 56, "becaus": 56, "delai": 56, "superclass": 56, "w": 56, "_close": 56, "42378": 56, "setstream": 56, "old": 56, "wasn": 56, "tqdmstreamhandl": 56, "trail": 56, "newlin": 56, "present": 56, "traceback": 56, "print_except": 56, "encod": 56, "loggermaxlevelfilt": 56, "max_level": 56, "deem": 56, "appropri": 56, "100": 57, "set_matplotlib_styl": 58, "use_scienceplot": 58, "asyncio_util": 61, "blocking_dequ": 61, "serial_util": 61, "_py_abc": [61, 65], "abcmeta": [61, 65], "miscellan": 62, "singleton_meta": 65, "mysingleton": 65, "instance1": 65, "instance2": 65, "my_registri": 66, "myclass": 66, "hello": 66, "lazili": 66, "myotherclass": 66, "other_inst": 66, "some_arg": 66, "submodul": 66, "dirti": 67, "last": 67, "ideal": 67, "731": 67, "default_factori": 67, "sensorset": 67, "rangeset": 67, "valid": 67, "min": 67, "max": 67, "optionset": 67, "from_enum": 67, "boolset": 67, "boolean": 67, "space": 68}, "objects": {"": [[36, 0, 0, "-", "cc_hardware"]], "cc_hardware": [[11, 0, 0, "-", "algos"], [18, 0, 0, "-", "drivers"], [51, 0, 0, "-", "tools"], [55, 0, 0, "-", "utils"]], "cc_hardware.algos": [[9, 0, 0, "-", "algorithm"], [10, 0, 0, "-", "aruco"]], "cc_hardware.algos.algorithm": [[9, 1, 1, "", "Algorithm"]], "cc_hardware.algos.algorithm.Algorithm": [[9, 2, 1, "", "close"], [9, 2, 1, "", "create_from_registry"], [9, 3, 1, "", "is_okay"], [9, 2, 1, "", "register"], [9, 2, 1, "", "registered"], [9, 2, 1, "", "registry"], [9, 2, 1, "", "run"]], "cc_hardware.algos.aruco": [[10, 1, 1, "", "ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm": [[10, 2, 1, "", "close"], [10, 3, 1, "", "is_okay"], [10, 2, 1, "", "run"]], "cc_hardware.drivers": [[18, 1, 1, "", "Camera"], [18, 1, 1, "", "CameraConfig"], [18, 1, 1, "", "DummyStepperMotor"], [18, 1, 1, "", "MotionCaptureSensor"], [18, 1, 1, "", "MotionCaptureSensorConfig"], [18, 1, 1, "", "SPADSensor"], [18, 1, 1, "", "SPADSensorConfig"], [18, 1, 1, "", "SafeSerial"], [18, 1, 1, "", "Sensor"], [18, 1, 1, "", "SensorConfig"], [18, 1, 1, "", "StepperMotor"], [18, 1, 1, "", "StepperMotorSystem"], [18, 1, 1, "", "StepperMotorSystemAxis"], [14, 0, 0, "-", "cameras"], [19, 0, 0, "-", "mocap"], [22, 0, 0, "-", "safe_serial"], [23, 0, 0, "-", "sensor"], [24, 0, 0, "-", "spads"], [30, 0, 0, "-", "stepper_motors"]], "cc_hardware.drivers.Camera": [[18, 2, 1, "", "__del__"], [18, 2, 1, "", "accumulate"], [18, 2, 1, "", "calibrate"], [18, 2, 1, "", "close"], [18, 3, 1, "", "distortion_coefficients"], [18, 3, 1, "", "intrinsic_matrix"], [18, 3, 1, "", "is_okay"], [18, 3, 1, "", "resolution"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "update"]], "cc_hardware.drivers.CameraConfig": [[18, 3, 1, "", "settings"]], "cc_hardware.drivers.MotionCaptureSensor": [[18, 2, 1, "", "__del__"], [18, 2, 1, "", "accumulate"], [18, 2, 1, "", "calibrate"], [18, 2, 1, "", "close"], [18, 3, 1, "", "is_okay"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "update"]], "cc_hardware.drivers.MotionCaptureSensorConfig": [[18, 3, 1, "", "settings"]], "cc_hardware.drivers.SPADSensor": [[18, 2, 1, "", "__del__"], [18, 2, 1, "", "accumulate"], [18, 2, 1, "", "calibrate"], [18, 2, 1, "", "close"], [18, 3, 1, "", "is_okay"], [18, 3, 1, "", "num_bins"], [18, 3, 1, "", "resolution"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "update"]], "cc_hardware.drivers.SPADSensorConfig": [[18, 3, 1, "", "settings"]], "cc_hardware.drivers.SafeSerial": [[18, 2, 1, "", "__getattr__"], [18, 2, 1, "", "create"], [18, 2, 1, "", "read"], [18, 2, 1, "", "wait_for_start_talk"], [18, 2, 1, "", "wait_for_stop_talk"], [18, 2, 1, "", "write"], [18, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [18, 2, 1, "", "write_and_wait_for_start_talk"], [18, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.Sensor": [[18, 2, 1, "", "__del__"], [18, 2, 1, "", "calibrate"], [18, 2, 1, "", "close"], [18, 3, 1, "", "is_okay"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "update"]], "cc_hardware.drivers.SensorConfig": [[18, 3, 1, "", "settings"]], "cc_hardware.drivers.StepperMotor": [[18, 2, 1, "", "close"], [18, 2, 1, "", "home"], [18, 3, 1, "", "is_moving"], [18, 3, 1, "", "is_okay"], [18, 2, 1, "", "move_by"], [18, 2, 1, "", "move_to"], [18, 3, 1, "", "position"], [18, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.StepperMotorSystem": [[18, 2, 1, "", "__getattr__"], [18, 3, 1, "", "is_moving"], [18, 2, 1, "", "move_by"], [18, 2, 1, "", "move_to"]], "cc_hardware.drivers.StepperMotorSystemAxis": [[18, 2, 1, "", "__dir__"], [18, 2, 1, "", "__format__"], [18, 2, 1, "", "__hash__"], [18, 2, 1, "", "__reduce_ex__"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "name"], [18, 2, 1, "", "value"]], "cc_hardware.drivers.cameras": [[14, 1, 1, "", "Camera"], [14, 1, 1, "", "CameraConfig"], [12, 0, 0, "-", "camera"], [13, 0, 0, "-", "flir"], [15, 0, 0, "-", "pkl"], [16, 0, 0, "-", "realsense"], [17, 0, 0, "-", "usb"]], "cc_hardware.drivers.cameras.Camera": [[14, 2, 1, "", "__del__"], [14, 2, 1, "", "accumulate"], [14, 2, 1, "", "calibrate"], [14, 2, 1, "", "close"], [14, 3, 1, "", "distortion_coefficients"], [14, 3, 1, "", "intrinsic_matrix"], [14, 3, 1, "", "is_okay"], [14, 3, 1, "", "resolution"], [14, 3, 1, "", "settings"], [14, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.CameraConfig": [[14, 3, 1, "", "settings"]], "cc_hardware.drivers.cameras.camera": [[12, 1, 1, "", "Camera"], [12, 1, 1, "", "CameraConfig"]], "cc_hardware.drivers.cameras.camera.Camera": [[12, 2, 1, "", "__del__"], [12, 2, 1, "", "accumulate"], [12, 2, 1, "", "calibrate"], [12, 2, 1, "", "close"], [12, 3, 1, "", "distortion_coefficients"], [12, 3, 1, "", "intrinsic_matrix"], [12, 3, 1, "", "is_okay"], [12, 3, 1, "", "resolution"], [12, 3, 1, "", "settings"], [12, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.camera.CameraConfig": [[12, 3, 1, "", "settings"]], "cc_hardware.drivers.cameras.flir": [[13, 1, 1, "", "FlirCamera"], [13, 1, 1, "", "GrasshopperFlirCamera"]], "cc_hardware.drivers.cameras.flir.FlirCamera": [[13, 2, 1, "", "__del__"], [13, 2, 1, "", "accumulate"], [13, 2, 1, "", "calibrate"], [13, 2, 1, "", "close"], [13, 3, 1, "", "distortion_coefficients"], [13, 3, 1, "", "intrinsic_matrix"], [13, 3, 1, "", "is_okay"], [13, 3, 1, "", "resolution"], [13, 3, 1, "", "settings"], [13, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera": [[13, 2, 1, "", "__del__"], [13, 2, 1, "", "accumulate"], [13, 2, 1, "", "calibrate"], [13, 2, 1, "", "close"], [13, 3, 1, "", "distortion_coefficients"], [13, 3, 1, "", "intrinsic_matrix"], [13, 3, 1, "", "is_okay"], [13, 3, 1, "", "resolution"], [13, 3, 1, "", "settings"], [13, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.pkl": [[15, 1, 1, "", "PklCamera"]], "cc_hardware.drivers.cameras.pkl.PklCamera": [[15, 2, 1, "", "accumulate"], [15, 2, 1, "", "close"], [15, 3, 1, "", "distortion_coefficients"], [15, 3, 1, "", "intrinsic_matrix"], [15, 3, 1, "", "is_okay"], [15, 3, 1, "", "resolution"]], "cc_hardware.drivers.cameras.realsense": [[16, 1, 1, "", "RealsenseCamera"], [16, 1, 1, "", "RealsenseConfig"]], "cc_hardware.drivers.cameras.realsense.RealsenseCamera": [[16, 2, 1, "", "accumulate"], [16, 2, 1, "", "close"], [16, 3, 1, "", "config"], [16, 3, 1, "", "distortion_coefficients"], [16, 3, 1, "", "intrinsic_matrix"], [16, 3, 1, "", "is_okay"], [16, 3, 1, "", "resolution"]], "cc_hardware.drivers.cameras.usb": [[17, 1, 1, "", "USBCamera"], [17, 1, 1, "", "USBCameraConfig"]], "cc_hardware.drivers.cameras.usb.USBCamera": [[17, 2, 1, "", "__del__"], [17, 2, 1, "", "accumulate"], [17, 2, 1, "", "calibrate"], [17, 2, 1, "", "close"], [17, 3, 1, "", "distortion_coefficients"], [17, 3, 1, "", "intrinsic_matrix"], [17, 3, 1, "", "is_okay"], [17, 3, 1, "", "resolution"], [17, 3, 1, "", "settings"], [17, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.usb.USBCameraConfig": [[17, 3, 1, "", "settings"]], "cc_hardware.drivers.mocap": [[19, 1, 1, "", "MotionCaptureSensor"], [19, 1, 1, "", "MotionCaptureSensorConfig"], [20, 0, 0, "-", "mocap"], [21, 0, 0, "-", "vive"]], "cc_hardware.drivers.mocap.MotionCaptureSensor": [[19, 2, 1, "", "__del__"], [19, 2, 1, "", "accumulate"], [19, 2, 1, "", "calibrate"], [19, 2, 1, "", "close"], [19, 3, 1, "", "is_okay"], [19, 3, 1, "", "settings"], [19, 2, 1, "", "update"]], "cc_hardware.drivers.mocap.MotionCaptureSensorConfig": [[19, 3, 1, "", "settings"]], "cc_hardware.drivers.mocap.mocap": [[20, 1, 1, "", "MotionCaptureSensor"], [20, 1, 1, "", "MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor": [[20, 2, 1, "", "__del__"], [20, 2, 1, "", "accumulate"], [20, 2, 1, "", "calibrate"], [20, 2, 1, "", "close"], [20, 3, 1, "", "is_okay"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "update"]], "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig": [[20, 3, 1, "", "settings"]], "cc_hardware.drivers.mocap.vive": [[21, 1, 1, "", "ViveTrackerPose"], [21, 1, 1, "", "ViveTrackerSensorConfig"]], "cc_hardware.drivers.mocap.vive.ViveTrackerPose": [[21, 2, 1, "", "get_data"], [21, 2, 1, "", "process"], [21, 2, 1, "", "reset"]], "cc_hardware.drivers.safe_serial": [[22, 1, 1, "", "SafeSerial"]], "cc_hardware.drivers.safe_serial.SafeSerial": [[22, 2, 1, "", "__getattr__"], [22, 2, 1, "", "create"], [22, 2, 1, "", "read"], [22, 2, 1, "", "wait_for_start_talk"], [22, 2, 1, "", "wait_for_stop_talk"], [22, 2, 1, "", "write"], [22, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [22, 2, 1, "", "write_and_wait_for_start_talk"], [22, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.sensor": [[23, 1, 1, "", "Sensor"], [23, 1, 1, "", "SensorConfig"], [23, 1, 1, "", "SensorData"]], "cc_hardware.drivers.sensor.Sensor": [[23, 2, 1, "", "__del__"], [23, 2, 1, "", "calibrate"], [23, 2, 1, "", "close"], [23, 3, 1, "", "is_okay"], [23, 3, 1, "", "settings"], [23, 2, 1, "", "update"]], "cc_hardware.drivers.sensor.SensorConfig": [[23, 3, 1, "", "settings"]], "cc_hardware.drivers.sensor.SensorData": [[23, 2, 1, "", "get_data"], [23, 2, 1, "", "process"], [23, 2, 1, "", "reset"]], "cc_hardware.drivers.spads": [[24, 1, 1, "", "SPADSensor"], [24, 1, 1, "", "SPADSensorConfig"], [25, 0, 0, "-", "pkl"], [26, 0, 0, "-", "spad"], [27, 0, 0, "-", "spad_wrappers"], [28, 0, 0, "-", "tmf8828"], [29, 0, 0, "-", "vl53l8ch"]], "cc_hardware.drivers.spads.SPADSensor": [[24, 2, 1, "", "__del__"], [24, 2, 1, "", "accumulate"], [24, 2, 1, "", "calibrate"], [24, 2, 1, "", "close"], [24, 3, 1, "", "is_okay"], [24, 3, 1, "", "num_bins"], [24, 3, 1, "", "resolution"], [24, 3, 1, "", "settings"], [24, 2, 1, "", "update"]], "cc_hardware.drivers.spads.SPADSensorConfig": [[24, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.pkl": [[25, 1, 1, "", "PklSPADSensor"]], "cc_hardware.drivers.spads.pkl.PklSPADSensor": [[25, 2, 1, "", "accumulate"], [25, 2, 1, "", "close"], [25, 3, 1, "", "num_bins"], [25, 3, 1, "", "resolution"]], "cc_hardware.drivers.spads.spad": [[26, 1, 1, "", "SPADSensor"], [26, 1, 1, "", "SPADSensorConfig"]], "cc_hardware.drivers.spads.spad.SPADSensor": [[26, 2, 1, "", "__del__"], [26, 2, 1, "", "accumulate"], [26, 2, 1, "", "calibrate"], [26, 2, 1, "", "close"], [26, 3, 1, "", "is_okay"], [26, 3, 1, "", "num_bins"], [26, 3, 1, "", "resolution"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad.SPADSensorConfig": [[26, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers": [[27, 1, 1, "", "SPADMergeWrapper"], [27, 1, 1, "", "SPADMergeWrapperConfig"], [27, 1, 1, "", "SPADMovingAverageWrapper"], [27, 1, 1, "", "SPADMovingAverageWrapperConfig"], [27, 1, 1, "", "SPADWrapper"], [27, 1, 1, "", "SPADWrapperConfig"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig": [[27, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig": [[27, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig": [[27, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.tmf8828": [[28, 1, 1, "", "RangeMode"], [28, 1, 1, "", "SPADID"], [28, 1, 1, "", "TMF8828Config"], [28, 1, 1, "", "TMF8828Histogram"], [28, 1, 1, "", "TMF8828Sensor"]], "cc_hardware.drivers.spads.tmf8828.RangeMode": [[28, 2, 1, "", "__dir__"], [28, 2, 1, "", "__format__"], [28, 2, 1, "", "__hash__"], [28, 2, 1, "", "__reduce_ex__"], [28, 2, 1, "", "__repr__"], [28, 2, 1, "", "__str__"], [28, 2, 1, "", "name"], [28, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.SPADID": [[28, 2, 1, "", "__dir__"], [28, 2, 1, "", "__format__"], [28, 2, 1, "", "__hash__"], [28, 2, 1, "", "__reduce_ex__"], [28, 2, 1, "", "__repr__"], [28, 2, 1, "", "__str__"], [28, 2, 1, "", "get_active_channels_per_subcapture"], [28, 2, 1, "", "get_num_channels"], [28, 2, 1, "", "get_num_pixels"], [28, 2, 1, "", "get_resolution"], [28, 2, 1, "", "name"], [28, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram": [[28, 2, 1, "", "get_data"], [28, 3, 1, "", "has_data"], [28, 2, 1, "", "process"], [28, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor": [[28, 2, 1, "", "accumulate"], [28, 2, 1, "", "calibrate"], [28, 2, 1, "", "close"], [28, 3, 1, "", "config"], [28, 3, 1, "", "is_okay"], [28, 3, 1, "", "num_bins"], [28, 3, 1, "", "resolution"]], "cc_hardware.drivers.spads.vl53l8ch": [[29, 1, 1, "", "RangingMode"], [29, 1, 1, "", "VL53L8CHConfig"], [29, 1, 1, "", "VL53L8CHConfig4x4"], [29, 1, 1, "", "VL53L8CHConfig8x8"], [29, 1, 1, "", "VL53L8CHHistogram"], [29, 1, 1, "", "VL53L8CHSensor"], [29, 1, 1, "", "VL53L8CHSharedConfig"]], "cc_hardware.drivers.spads.vl53l8ch.RangingMode": [[29, 2, 1, "", "__dir__"], [29, 2, 1, "", "__format__"], [29, 2, 1, "", "__hash__"], [29, 2, 1, "", "__reduce_ex__"], [29, 2, 1, "", "__repr__"], [29, 2, 1, "", "__str__"], [29, 2, 1, "", "name"], [29, 2, 1, "", "value"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig": [[29, 2, 1, "", "pack"], [29, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4": [[29, 2, 1, "", "pack"], [29, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8": [[29, 2, 1, "", "pack"], [29, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram": [[29, 2, 1, "", "get_data"], [29, 3, 1, "", "has_data"], [29, 2, 1, "", "process"], [29, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor": [[29, 2, 1, "", "accumulate"], [29, 2, 1, "", "close"], [29, 3, 1, "", "is_okay"], [29, 3, 1, "", "num_bins"], [29, 3, 1, "", "resolution"], [29, 2, 1, "", "update"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig": [[29, 2, 1, "", "pack"], [29, 3, 1, "", "settings"]], "cc_hardware.drivers.stepper_motors": [[30, 1, 1, "", "DummyStepperMotor"], [30, 1, 1, "", "StepperMotor"], [30, 1, 1, "", "StepperMotorSystem"], [30, 1, 1, "", "StepperMotorSystemAxis"], [31, 0, 0, "-", "kinesis_stepper"], [32, 0, 0, "-", "stepper_controller"], [33, 0, 0, "-", "stepper_motor"], [34, 0, 0, "-", "stepper_system"], [35, 0, 0, "-", "telemetrix_stepper"]], "cc_hardware.drivers.stepper_motors.StepperMotor": [[30, 2, 1, "", "close"], [30, 2, 1, "", "home"], [30, 3, 1, "", "is_moving"], [30, 3, 1, "", "is_okay"], [30, 2, 1, "", "move_by"], [30, 2, 1, "", "move_to"], [30, 3, 1, "", "position"], [30, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystem": [[30, 2, 1, "", "__getattr__"], [30, 3, 1, "", "is_moving"], [30, 2, 1, "", "move_by"], [30, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis": [[30, 2, 1, "", "__dir__"], [30, 2, 1, "", "__format__"], [30, 2, 1, "", "__hash__"], [30, 2, 1, "", "__reduce_ex__"], [30, 2, 1, "", "__repr__"], [30, 2, 1, "", "__str__"], [30, 2, 1, "", "name"], [30, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[31, 1, 1, "", "AzimuthElevationSystem"], [31, 1, 1, "", "KinesisRotationStage"], [31, 1, 1, "", "KinesisStepperMotor"], [31, 1, 1, "", "KinesisStepperMotorSystem"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage": [[31, 2, 1, "", "close"], [31, 2, 1, "", "home"], [31, 2, 1, "", "initialize"], [31, 3, 1, "", "is_okay"], [31, 3, 1, "", "lower_limit"], [31, 2, 1, "", "move_by"], [31, 2, 1, "", "move_to"], [31, 3, 1, "", "position"], [31, 3, 1, "", "upper_limit"], [31, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor": [[31, 2, 1, "", "close"], [31, 2, 1, "", "home"], [31, 2, 1, "", "initialize"], [31, 3, 1, "", "is_okay"], [31, 3, 1, "", "lower_limit"], [31, 2, 1, "", "move_by"], [31, 2, 1, "", "move_to"], [31, 3, 1, "", "position"], [31, 3, 1, "", "upper_limit"], [31, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[32, 1, 1, "", "SnakeStepperController"], [32, 1, 1, "", "StepperController"]], "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController": [[32, 2, 1, "", "get_position"]], "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController": [[32, 2, 1, "", "get_position"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[33, 1, 1, "", "DummyStepperMotor"], [33, 1, 1, "", "StepperMotor"]], "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor": [[33, 2, 1, "", "close"], [33, 2, 1, "", "home"], [33, 3, 1, "", "is_moving"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[34, 1, 1, "", "DummyStepperSystem"], [34, 1, 1, "", "StepperMotorSystem"], [34, 1, 1, "", "StepperMotorSystemAxis"]], "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem": [[34, 2, 1, "", "__getattr__"], [34, 3, 1, "", "is_moving"], [34, 2, 1, "", "move_by"], [34, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem": [[34, 2, 1, "", "__getattr__"], [34, 3, 1, "", "is_moving"], [34, 2, 1, "", "move_by"], [34, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis": [[34, 2, 1, "", "__dir__"], [34, 2, 1, "", "__format__"], [34, 2, 1, "", "__hash__"], [34, 2, 1, "", "__reduce_ex__"], [34, 2, 1, "", "__repr__"], [34, 2, 1, "", "__str__"], [34, 2, 1, "", "name"], [34, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[35, 1, 1, "", "DualDrive2AxisGantry"], [35, 1, 1, "", "DualDrive2AxisGantry_X"], [35, 1, 1, "", "DualDrive2AxisGantry_Y1"], [35, 1, 1, "", "DualDrive2AxisGantry_Y2"], [35, 1, 1, "", "SingleDrive1AxisGantry"], [35, 1, 1, "", "SingleDrive1AxisGantry_X"], [35, 1, 1, "", "SingleDrive1AxisGantry_Y"], [35, 1, 1, "", "TelemetrixStepperMotor"], [35, 1, 1, "", "TelemetrixStepperMotorSystem"], [35, 1, 1, "", "TelemetrixStepperMotorX"], [35, 1, 1, "", "TelemetrixStepperMotorXReversed"], [35, 1, 1, "", "TelemetrixStepperMotorY"], [35, 1, 1, "", "TelemetrixStepperMotorYReversed"], [35, 1, 1, "", "TelemetrixStepperMotorZ"], [35, 1, 1, "", "TelemetrixStepperMotorZReversed"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry": [[35, 2, 1, "", "close"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry": [[35, 2, 1, "", "close"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem": [[35, 2, 1, "", "close"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed": [[35, 2, 1, "", "__getattr__"], [35, 2, 1, "", "close"], [35, 2, 1, "", "cm_to_revs"], [35, 2, 1, "", "home"], [35, 3, 1, "", "id"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "revs_to_cm"], [35, 2, 1, "", "set_absolute_target_position_cm"], [35, 2, 1, "", "set_target_position_cm"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.tools": [[51, 1, 1, "", "Registry"], [37, 0, 0, "-", "calibration"], [38, 0, 0, "-", "camera_viewer"], [40, 0, 0, "-", "dashboard"], [50, 0, 0, "-", "flash"], [52, 0, 0, "-", "jogger"]], "cc_hardware.tools.Registry": [[51, 2, 1, "", "create_from_registry"], [51, 2, 1, "", "register"], [51, 2, 1, "", "registered"], [51, 2, 1, "", "registry"]], "cc_hardware.tools.calibration": [[37, 4, 1, "", "calibrate"], [37, 4, 1, "", "tmf8828_calibrate"]], "cc_hardware.tools.dashboard": [[40, 1, 1, "", "Dashboard"], [40, 1, 1, "", "DashboardConfig"], [40, 1, 1, "", "SPADDashboard"], [40, 1, 1, "", "SPADDashboardConfig"], [39, 0, 0, "-", "dashboard"], [42, 0, 0, "-", "mocap_dashboard"], [46, 0, 0, "-", "spad_dashboard"]], "cc_hardware.tools.dashboard.Dashboard": [[40, 2, 1, "", "run"], [40, 2, 1, "", "setup"], [40, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.SPADDashboard": [[40, 3, 1, "", "max_bin"], [40, 3, 1, "", "min_bin"], [40, 2, 1, "", "run"], [40, 3, 1, "", "sensor"], [40, 2, 1, "", "setup"], [40, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.dashboard": [[39, 1, 1, "", "Dashboard"], [39, 1, 1, "", "DashboardConfig"]], "cc_hardware.tools.dashboard.dashboard.Dashboard": [[39, 2, 1, "", "run"], [39, 2, 1, "", "setup"], [39, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[42, 1, 1, "", "MotionCaptureDashboard"], [42, 1, 1, "", "MotionCaptureDashboardConfig"], [41, 0, 0, "-", "dash"], [43, 0, 0, "-", "mocap_dashboard"], [44, 0, 0, "-", "pyqtgraph"]], "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard": [[42, 2, 1, "", "run"], [42, 3, 1, "", "sensor"], [42, 2, 1, "", "setup"], [42, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[41, 1, 1, "", "DashMotionCaptureDashboard"], [41, 1, 1, "", "DashMotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard": [[41, 2, 1, "", "run"], [41, 3, 1, "", "sensor"], [41, 2, 1, "", "setup"], [41, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[43, 1, 1, "", "MotionCaptureDashboard"], [43, 1, 1, "", "MotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard": [[43, 2, 1, "", "run"], [43, 3, 1, "", "sensor"], [43, 2, 1, "", "setup"], [43, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[44, 1, 1, "", "DashboardWindow"], [44, 1, 1, "", "PyQtGraphMotionCaptureDashboard"], [44, 1, 1, "", "PyQtGraphMotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow": [[44, 2, 1, "", "keyPressEvent"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard": [[44, 2, 1, "", "close"], [44, 3, 1, "", "is_okay"], [44, 2, 1, "", "run"], [44, 3, 1, "", "sensor"], [44, 2, 1, "", "setup"], [44, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard": [[46, 1, 1, "", "SPADDashboard"], [46, 1, 1, "", "SPADDashboardConfig"], [45, 0, 0, "-", "dash"], [47, 0, 0, "-", "matplotlib"], [48, 0, 0, "-", "pyqtgraph"], [49, 0, 0, "-", "spad_dashboard"]], "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard": [[46, 3, 1, "", "max_bin"], [46, 3, 1, "", "min_bin"], [46, 2, 1, "", "run"], [46, 3, 1, "", "sensor"], [46, 2, 1, "", "setup"], [46, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.dash": [[45, 1, 1, "", "DashDashboard"], [45, 1, 1, "", "DashDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard": [[45, 3, 1, "", "max_bin"], [45, 3, 1, "", "min_bin"], [45, 2, 1, "", "run"], [45, 3, 1, "", "sensor"], [45, 2, 1, "", "setup"], [45, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.matplotlib": [[47, 1, 1, "", "MatplotlibDashboard"], [47, 1, 1, "", "MatplotlibDashboardConfig"], [47, 1, 1, "", "MatplotlibTransientViewer"], [47, 1, 1, "", "MatplotlibTransientViewerConfig"], [47, 4, 1, "", "save_animation"]], "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard": [[47, 2, 1, "", "adjust_ylim"], [47, 3, 1, "", "max_bin"], [47, 3, 1, "", "min_bin"], [47, 2, 1, "", "run"], [47, 3, 1, "", "sensor"], [47, 2, 1, "", "setup"], [47, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewer": [[47, 3, 1, "", "max_bin"], [47, 3, 1, "", "min_bin"], [47, 2, 1, "", "run"], [47, 3, 1, "", "sensor"], [47, 2, 1, "", "setup"], [47, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[48, 1, 1, "", "DashboardWindow"], [48, 1, 1, "", "PyQtGraphDashboard"], [48, 1, 1, "", "PyQtGraphDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow": [[48, 2, 1, "", "init_ui"], [48, 2, 1, "", "keyPressEvent"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard": [[48, 3, 1, "", "max_bin"], [48, 3, 1, "", "min_bin"], [48, 2, 1, "", "run"], [48, 3, 1, "", "sensor"], [48, 2, 1, "", "setup"], [48, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[49, 1, 1, "", "SPADDashboard"], [49, 1, 1, "", "SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard": [[49, 3, 1, "", "max_bin"], [49, 3, 1, "", "min_bin"], [49, 2, 1, "", "run"], [49, 3, 1, "", "sensor"], [49, 2, 1, "", "setup"], [49, 2, 1, "", "update"]], "cc_hardware.tools.jogger": [[52, 1, 1, "", "LogBufferHandler"], [52, 1, 1, "", "OutputCapture"]], "cc_hardware.tools.jogger.LogBufferHandler": [[52, 2, 1, "", "__repr__"], [52, 2, 1, "", "acquire"], [52, 2, 1, "", "addFilter"], [52, 2, 1, "", "close"], [52, 2, 1, "", "createLock"], [52, 2, 1, "", "emit"], [52, 2, 1, "", "filter"], [52, 2, 1, "", "flush"], [52, 2, 1, "", "format"], [52, 2, 1, "", "handle"], [52, 2, 1, "", "handleError"], [52, 2, 1, "", "release"], [52, 2, 1, "", "removeFilter"], [52, 2, 1, "", "setFormatter"], [52, 2, 1, "", "setLevel"]], "cc_hardware.utils": [[55, 1, 1, "", "BlockingDeque"], [55, 1, 1, "", "Component"], [55, 1, 1, "", "Config"], [55, 1, 1, "", "Manager"], [55, 1, 1, "", "Registry"], [55, 1, 1, "", "SingletonABCMeta"], [55, 1, 1, "", "SingletonMeta"], [55, 4, 1, "", "arduino_upload"], [55, 4, 1, "", "call_async"], [55, 4, 1, "", "call_async_gather"], [55, 4, 1, "", "call_async_value"], [53, 0, 0, "-", "constants"], [54, 0, 0, "-", "file_handlers"], [55, 4, 1, "", "find_device_by_label"], [55, 4, 1, "", "find_ports"], [55, 4, 1, "", "get_object"], [56, 0, 0, "-", "logger"], [57, 0, 0, "-", "manager"], [58, 0, 0, "-", "matplotlib"], [61, 0, 0, "-", "misc"], [55, 4, 1, "", "register"], [66, 0, 0, "-", "registry"], [67, 0, 0, "-", "setting"], [68, 0, 0, "-", "transformations"]], "cc_hardware.utils.BlockingDeque": [[55, 2, 1, "", "__getattr__"], [55, 2, 1, "", "__getitem__"], [55, 2, 1, "", "__len__"], [55, 2, 1, "", "__repr__"], [55, 2, 1, "", "append"]], "cc_hardware.utils.Component": [[55, 2, 1, "", "close"], [55, 3, 1, "", "config"], [55, 2, 1, "", "create_from_config"], [55, 2, 1, "", "create_from_registry"], [55, 3, 1, "", "is_okay"], [55, 2, 1, "", "register"], [55, 2, 1, "", "registered"], [55, 2, 1, "", "registry"]], "cc_hardware.utils.Config": [[55, 2, 1, "", "__getstate__"], [55, 2, 1, "", "__setstate__"], [55, 2, 1, "", "__str__"], [55, 2, 1, "", "compose"], [55, 5, 1, "", "config"], [55, 2, 1, "", "copy"], [55, 2, 1, "", "create"], [55, 2, 1, "", "create_from_registry"], [55, 5, 1, "", "custom"], [55, 2, 1, "", "instantiate"], [55, 2, 1, "", "load"], [55, 2, 1, "", "merge_with"], [55, 2, 1, "", "register"], [55, 2, 1, "", "registered"], [55, 2, 1, "", "registry"], [55, 2, 1, "", "save"], [55, 2, 1, "", "to_yaml"]], "cc_hardware.utils.Manager": [[55, 2, 1, "", "__enter__"], [55, 2, 1, "", "__exit__"], [55, 2, 1, "", "add"], [55, 2, 1, "", "close"], [55, 3, 1, "", "components"], [55, 3, 1, "", "is_okay"], [55, 2, 1, "", "run"]], "cc_hardware.utils.Registry": [[55, 2, 1, "", "create_from_registry"], [55, 2, 1, "", "register"], [55, 2, 1, "", "registered"], [55, 2, 1, "", "registry"]], "cc_hardware.utils.SingletonABCMeta": [[55, 2, 1, "", "__call__"], [55, 2, 1, "", "__instancecheck__"], [55, 2, 1, "", "__subclasscheck__"], [55, 2, 1, "", "instance"], [55, 2, 1, "", "register"]], "cc_hardware.utils.SingletonMeta": [[55, 2, 1, "", "__call__"], [55, 2, 1, "", "instance"]], "cc_hardware.utils.constants": [[53, 6, 1, "", "C"]], "cc_hardware.utils.file_handlers": [[54, 1, 1, "", "PklHandler"], [54, 1, 1, "", "PklReader"], [54, 1, 1, "", "VideoWriter"]], "cc_hardware.utils.file_handlers.PklHandler": [[54, 2, 1, "", "__len__"], [54, 2, 1, "", "append"], [54, 2, 1, "", "load"], [54, 2, 1, "", "load_all"], [54, 2, 1, "", "update_index"], [54, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.PklReader": [[54, 2, 1, "", "__len__"], [54, 2, 1, "", "append"], [54, 2, 1, "", "load"], [54, 2, 1, "", "load_all"], [54, 2, 1, "", "update_index"], [54, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.VideoWriter": [[54, 2, 1, "", "__del__"], [54, 2, 1, "", "append"], [54, 2, 1, "", "close"]], "cc_hardware.utils.logger": [[56, 1, 1, "", "FileHandler"], [56, 1, 1, "", "LoggerMaxLevelFilter"], [56, 1, 1, "", "TqdmStreamHandler"]], "cc_hardware.utils.logger.FileHandler": [[56, 2, 1, "", "__repr__"], [56, 2, 1, "", "acquire"], [56, 2, 1, "", "addFilter"], [56, 2, 1, "", "close"], [56, 2, 1, "", "createLock"], [56, 2, 1, "", "emit"], [56, 2, 1, "", "filter"], [56, 2, 1, "", "flush"], [56, 2, 1, "", "format"], [56, 2, 1, "", "handle"], [56, 2, 1, "", "handleError"], [56, 2, 1, "", "release"], [56, 2, 1, "", "removeFilter"], [56, 2, 1, "", "setFormatter"], [56, 2, 1, "", "setLevel"], [56, 2, 1, "", "setStream"]], "cc_hardware.utils.logger.LoggerMaxLevelFilter": [[56, 2, 1, "", "filter"]], "cc_hardware.utils.logger.TqdmStreamHandler": [[56, 2, 1, "", "__repr__"], [56, 2, 1, "", "acquire"], [56, 2, 1, "", "addFilter"], [56, 2, 1, "", "close"], [56, 2, 1, "", "createLock"], [56, 2, 1, "", "emit"], [56, 2, 1, "", "filter"], [56, 2, 1, "", "flush"], [56, 2, 1, "", "format"], [56, 2, 1, "", "handle"], [56, 2, 1, "", "handleError"], [56, 2, 1, "", "release"], [56, 2, 1, "", "removeFilter"], [56, 2, 1, "", "setFormatter"], [56, 2, 1, "", "setLevel"], [56, 2, 1, "", "setStream"]], "cc_hardware.utils.manager": [[57, 1, 1, "", "Component"], [57, 1, 1, "", "Config"], [57, 1, 1, "", "Manager"]], "cc_hardware.utils.manager.Component": [[57, 2, 1, "", "close"], [57, 3, 1, "", "config"], [57, 2, 1, "", "create_from_config"], [57, 2, 1, "", "create_from_registry"], [57, 3, 1, "", "is_okay"], [57, 2, 1, "", "register"], [57, 2, 1, "", "registered"], [57, 2, 1, "", "registry"]], "cc_hardware.utils.manager.Config": [[57, 2, 1, "", "__getstate__"], [57, 2, 1, "", "__setstate__"], [57, 2, 1, "", "__str__"], [57, 2, 1, "", "compose"], [57, 5, 1, "", "config"], [57, 2, 1, "", "copy"], [57, 2, 1, "", "create"], [57, 2, 1, "", "create_from_registry"], [57, 5, 1, "", "custom"], [57, 2, 1, "", "instantiate"], [57, 2, 1, "", "load"], [57, 2, 1, "", "merge_with"], [57, 2, 1, "", "register"], [57, 2, 1, "", "registered"], [57, 2, 1, "", "registry"], [57, 2, 1, "", "save"], [57, 2, 1, "", "to_yaml"]], "cc_hardware.utils.manager.Manager": [[57, 2, 1, "", "__enter__"], [57, 2, 1, "", "__exit__"], [57, 2, 1, "", "add"], [57, 2, 1, "", "close"], [57, 3, 1, "", "components"], [57, 3, 1, "", "is_okay"], [57, 2, 1, "", "run"]], "cc_hardware.utils.matplotlib": [[58, 4, 1, "", "set_matplotlib_style"]], "cc_hardware.utils.misc": [[61, 1, 1, "", "BlockingDeque"], [61, 1, 1, "", "SingletonABCMeta"], [61, 1, 1, "", "SingletonMeta"], [61, 4, 1, "", "arduino_upload"], [59, 0, 0, "-", "asyncio_utils"], [60, 0, 0, "-", "blocking_deque"], [61, 4, 1, "", "call_async"], [61, 4, 1, "", "call_async_gather"], [61, 4, 1, "", "call_async_value"], [61, 4, 1, "", "find_device_by_label"], [61, 4, 1, "", "find_ports"], [61, 4, 1, "", "get_object"], [62, 0, 0, "-", "misc"], [63, 0, 0, "-", "multiprocessing_deque"], [64, 0, 0, "-", "serial_utils"], [65, 0, 0, "-", "singleton"]], "cc_hardware.utils.misc.BlockingDeque": [[61, 2, 1, "", "__getattr__"], [61, 2, 1, "", "__getitem__"], [61, 2, 1, "", "__len__"], [61, 2, 1, "", "__repr__"], [61, 2, 1, "", "append"]], "cc_hardware.utils.misc.SingletonABCMeta": [[61, 2, 1, "", "__call__"], [61, 2, 1, "", "__instancecheck__"], [61, 2, 1, "", "__subclasscheck__"], [61, 2, 1, "", "instance"], [61, 2, 1, "", "register"]], "cc_hardware.utils.misc.SingletonMeta": [[61, 2, 1, "", "__call__"], [61, 2, 1, "", "instance"]], "cc_hardware.utils.misc.asyncio_utils": [[59, 4, 1, "", "call_async"], [59, 4, 1, "", "call_async_gather"], [59, 4, 1, "", "call_async_value"]], "cc_hardware.utils.misc.blocking_deque": [[60, 1, 1, "", "BlockingDeque"]], "cc_hardware.utils.misc.blocking_deque.BlockingDeque": [[60, 2, 1, "", "__getattr__"], [60, 2, 1, "", "__getitem__"], [60, 2, 1, "", "__len__"], [60, 2, 1, "", "__repr__"], [60, 2, 1, "", "append"]], "cc_hardware.utils.misc.misc": [[62, 4, 1, "", "get_object"]], "cc_hardware.utils.misc.serial_utils": [[64, 4, 1, "", "arduino_upload"], [64, 4, 1, "", "find_device_by_label"], [64, 4, 1, "", "find_ports"]], "cc_hardware.utils.misc.singleton": [[65, 1, 1, "", "SingletonABCMeta"], [65, 1, 1, "", "SingletonMeta"]], "cc_hardware.utils.misc.singleton.SingletonABCMeta": [[65, 2, 1, "", "__call__"], [65, 2, 1, "", "__instancecheck__"], [65, 2, 1, "", "__subclasscheck__"], [65, 2, 1, "", "instance"], [65, 2, 1, "", "register"]], "cc_hardware.utils.misc.singleton.SingletonMeta": [[65, 2, 1, "", "__call__"], [65, 2, 1, "", "instance"]], "cc_hardware.utils.registry": [[66, 1, 1, "", "Registry"], [66, 4, 1, "", "register"]], "cc_hardware.utils.registry.Registry": [[66, 2, 1, "", "create_from_registry"], [66, 2, 1, "", "register"], [66, 2, 1, "", "registered"], [66, 2, 1, "", "registry"]], "cc_hardware.utils.setting": [[67, 1, 1, "", "BoolSetting"], [67, 1, 1, "", "OptionSetting"], [67, 1, 1, "", "RangeSetting"], [67, 1, 1, "", "Setting"]], "cc_hardware.utils.setting.BoolSetting": [[67, 2, 1, "", "__getstate__"], [67, 2, 1, "", "__setstate__"], [67, 2, 1, "", "__str__"], [67, 2, 1, "", "compose"], [67, 5, 1, "", "config"], [67, 2, 1, "", "copy"], [67, 2, 1, "", "create"], [67, 2, 1, "", "create_from_registry"], [67, 5, 1, "", "custom"], [67, 2, 1, "", "default_factory"], [67, 2, 1, "", "instantiate"], [67, 2, 1, "", "load"], [67, 2, 1, "", "merge_with"], [67, 2, 1, "", "register"], [67, 2, 1, "", "registered"], [67, 2, 1, "", "registry"], [67, 2, 1, "", "save"], [67, 2, 1, "", "to_yaml"], [67, 2, 1, "", "update"]], "cc_hardware.utils.setting.OptionSetting": [[67, 2, 1, "", "__getstate__"], [67, 2, 1, "", "__setstate__"], [67, 2, 1, "", "__str__"], [67, 2, 1, "", "compose"], [67, 5, 1, "", "config"], [67, 2, 1, "", "copy"], [67, 2, 1, "", "create"], [67, 2, 1, "", "create_from_registry"], [67, 5, 1, "", "custom"], [67, 2, 1, "", "default_factory"], [67, 2, 1, "", "from_enum"], [67, 2, 1, "", "instantiate"], [67, 2, 1, "", "load"], [67, 2, 1, "", "merge_with"], [67, 2, 1, "", "register"], [67, 2, 1, "", "registered"], [67, 2, 1, "", "registry"], [67, 2, 1, "", "save"], [67, 2, 1, "", "to_yaml"], [67, 2, 1, "", "update"]], "cc_hardware.utils.setting.RangeSetting": [[67, 2, 1, "", "__getstate__"], [67, 2, 1, "", "__setstate__"], [67, 2, 1, "", "__str__"], [67, 2, 1, "", "compose"], [67, 5, 1, "", "config"], [67, 2, 1, "", "copy"], [67, 2, 1, "", "create"], [67, 2, 1, "", "create_from_registry"], [67, 5, 1, "", "custom"], [67, 2, 1, "", "default_factory"], [67, 2, 1, "", "instantiate"], [67, 2, 1, "", "load"], [67, 2, 1, "", "merge_with"], [67, 2, 1, "", "register"], [67, 2, 1, "", "registered"], [67, 2, 1, "", "registry"], [67, 2, 1, "", "save"], [67, 2, 1, "", "to_yaml"], [67, 2, 1, "", "update"]], "cc_hardware.utils.setting.Setting": [[67, 2, 1, "", "__getstate__"], [67, 2, 1, "", "__setstate__"], [67, 2, 1, "", "__str__"], [67, 2, 1, "", "compose"], [67, 5, 1, "", "config"], [67, 2, 1, "", "copy"], [67, 2, 1, "", "create"], [67, 2, 1, "", "create_from_registry"], [67, 5, 1, "", "custom"], [67, 2, 1, "", "default_factory"], [67, 2, 1, "", "instantiate"], [67, 2, 1, "", "load"], [67, 2, 1, "", "merge_with"], [67, 2, 1, "", "register"], [67, 2, 1, "", "registered"], [67, 2, 1, "", "registry"], [67, 2, 1, "", "save"], [67, 2, 1, "", "to_yaml"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"]}, "titleterms": {"contribut": 0, "setup": 0, "clone": 0, "repo": [0, 7], "instal": [0, 13], "deploi": 0, "your": 0, "chang": 0, "guidelin": 0, "file": 0, "structur": [0, 7], "edit": 0, "sourc": 0, "code": 0, "comment": 0, "document": [0, 7], "build": 0, "camera": [2, 7, 12, 13, 14, 15, 16, 17], "viewer": 2, "exampl": 3, "avail": 3, "spad": [4, 24, 25, 26, 27, 28, 29], "dashboard": [4, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "spad_dashboard": [4, 45, 46, 47, 48, 49], "py": 4, "spad_wrapp": [4, 27], "stepper": [5, 6], "gantri": 5, "collab": 5, "motor": 6, "control": 6, "cultur": 7, "hardwar": 7, "get": 7, "start": 7, "websit": 7, "other": 7, "detail": 7, "packag": [7, 8, 14, 18, 19, 24, 30, 40, 42, 46, 51, 55, 61], "api": 8, "refer": [8, 69], "cc_hardwar": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "algo": [9, 10, 11], "algorithm": 9, "modul": [9, 10, 12, 13, 15, 16, 17, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 39, 41, 43, 44, 45, 47, 48, 49, 52, 53, 54, 56, 57, 58, 59, 60, 62, 64, 65, 66, 67], "content": [9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67], "class": [9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 60, 61, 65, 66, 67], "aruco": 10, "submodul": [11, 14, 18, 24, 30, 42, 46, 51, 55, 61], "driver": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "flir": 13, "pyspin": 13, "pkl": [15, 25], "realsens": 16, "usb": 17, "subpackag": [18, 36, 40], "mocap": [19, 20, 21], "vive": 21, "safe_seri": 22, "sensor": 23, "tmf8828": 28, "vl53l8ch": 29, "stepper_motor": [30, 31, 32, 33, 34, 35], "kinesis_stepp": 31, "stepper_control": 32, "stepper_system": 34, "telemetrix_stepp": 35, "tool": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "calibr": 37, "function": [37, 47, 55, 58, 59, 61, 62, 64, 66], "camera_view": 38, "mocap_dashboard": [41, 42, 43, 44], "dash": [41, 45], "pyqtgraph": [44, 48], "matplotlib": [47, 58], "flash": 50, "jogger": 52, "util": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "constant": 53, "file_handl": 54, "logger": 56, "manag": 57, "misc": [59, 60, 61, 62, 63, 64, 65], "asyncio_util": 59, "blocking_dequ": 60, "multiprocessing_dequ": 63, "serial_util": 64, "singleton": 65, "registri": 66, "set": 67, "transform": 68}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Setup": [[0, "setup"]], "Cloning the Repo": [[0, "cloning-the-repo"]], "Installing": [[0, "installing"]], "Deploy your Changes": [[0, "deploy-your-changes"]], "Guidelines": [[0, "guidelines"]], "File Structure": [[0, "file-structure"]], "Editing the Source Code": [[0, "editing-the-source-code"]], "Commenting": [[0, "commenting"]], "Editing the Documentation": [[0, "editing-the-documentation"]], "Building the Documentation": [[0, "building-the-documentation"]], "Camera Viewer": [[2, "camera-viewer"]], "Examples": [[3, "examples"]], "Available Examples": [[3, "available-examples"]], "SPAD Dashboard": [[4, "spad-dashboard"]], "spad_dashboard.py": [[4, "spad-dashboard-py"]], "spad_wrappers.py": [[4, "spad-wrappers-py"]], "Stepper Gantry Collab": [[5, "stepper-gantry-collab"]], "Stepper Motor Controller": [[6, "stepper-motor-controller"]], "Camera Culture Hardware Repo": [[7, "camera-culture-hardware-repo"]], "Getting Started": [[7, "getting-started"]], "Documentation Website": [[7, "documentation-website"]], "Other Details": [[7, "other-details"]], "Repo Structure": [[7, "repo-structure"]], "Package Structure": [[7, "package-structure"]], "API Reference": [[8, "api-reference"]], "Packages": [[8, "packages"]], "cc_hardware.algos.algorithm": [[9, "module-cc_hardware.algos.algorithm"]], "Module Contents": [[9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [37, "module-contents"], [39, "module-contents"], [41, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [62, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"]], "Classes": [[9, "classes"], [10, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [60, "classes"], [61, "classes"], [65, "classes"], [66, "classes"], [67, "classes"]], "cc_hardware.algos.aruco": [[10, "module-cc_hardware.algos.aruco"]], "cc_hardware.algos": [[11, "module-cc_hardware.algos"]], "Submodules": [[11, "submodules"], [14, "submodules"], [18, "submodules"], [24, "submodules"], [30, "submodules"], [42, "submodules"], [46, "submodules"], [51, "submodules"], [55, "submodules"], [61, "submodules"]], "cc_hardware.drivers.cameras.camera": [[12, "module-cc_hardware.drivers.cameras.camera"]], "cc_hardware.drivers.cameras.flir": [[13, "module-cc_hardware.drivers.cameras.flir"]], "PySpin Installation": [[13, "pyspin-installation"]], "cc_hardware.drivers.cameras": [[14, "module-cc_hardware.drivers.cameras"]], "Package Contents": [[14, "package-contents"], [18, "package-contents"], [19, "package-contents"], [24, "package-contents"], [30, "package-contents"], [40, "package-contents"], [42, "package-contents"], [46, "package-contents"], [51, "package-contents"], [55, "package-contents"], [61, "package-contents"]], "cc_hardware.drivers.cameras.pkl": [[15, "module-cc_hardware.drivers.cameras.pkl"]], "cc_hardware.drivers.cameras.realsense": [[16, "module-cc_hardware.drivers.cameras.realsense"]], "cc_hardware.drivers.cameras.usb": [[17, "module-cc_hardware.drivers.cameras.usb"]], "cc_hardware.drivers": [[18, "module-cc_hardware.drivers"]], "Subpackages": [[18, "subpackages"], [36, "subpackages"], [40, "subpackages"]], "cc_hardware.drivers.mocap": [[19, "module-cc_hardware.drivers.mocap"]], "cc_hardware.drivers.mocap.mocap": [[20, "module-cc_hardware.drivers.mocap.mocap"]], "cc_hardware.drivers.mocap.vive": [[21, "module-cc_hardware.drivers.mocap.vive"]], "cc_hardware.drivers.safe_serial": [[22, "module-cc_hardware.drivers.safe_serial"]], "cc_hardware.drivers.sensor": [[23, "module-cc_hardware.drivers.sensor"]], "cc_hardware.drivers.spads": [[24, "module-cc_hardware.drivers.spads"]], "cc_hardware.drivers.spads.pkl": [[25, "module-cc_hardware.drivers.spads.pkl"]], "cc_hardware.drivers.spads.spad": [[26, "module-cc_hardware.drivers.spads.spad"]], "cc_hardware.drivers.spads.spad_wrappers": [[27, "module-cc_hardware.drivers.spads.spad_wrappers"]], "cc_hardware.drivers.spads.tmf8828": [[28, "module-cc_hardware.drivers.spads.tmf8828"]], "cc_hardware.drivers.spads.vl53l8ch": [[29, "module-cc_hardware.drivers.spads.vl53l8ch"]], "cc_hardware.drivers.stepper_motors": [[30, "module-cc_hardware.drivers.stepper_motors"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[31, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[32, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[33, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[34, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[35, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "cc_hardware": [[36, "module-cc_hardware"]], "cc_hardware.tools.calibration": [[37, "module-cc_hardware.tools.calibration"]], "Functions": [[37, "functions"], [47, "functions"], [55, "functions"], [58, "functions"], [59, "functions"], [61, "functions"], [62, "functions"], [64, "functions"], [66, "functions"]], "cc_hardware.tools.camera_viewer": [[38, "module-cc_hardware.tools.camera_viewer"]], "cc_hardware.tools.dashboard.dashboard": [[39, "module-cc_hardware.tools.dashboard.dashboard"]], "cc_hardware.tools.dashboard": [[40, "module-cc_hardware.tools.dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[41, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[42, "module-cc_hardware.tools.dashboard.mocap_dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[43, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[44, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"]], "cc_hardware.tools.dashboard.spad_dashboard.dash": [[45, "module-cc_hardware.tools.dashboard.spad_dashboard.dash"]], "cc_hardware.tools.dashboard.spad_dashboard": [[46, "module-cc_hardware.tools.dashboard.spad_dashboard"]], "cc_hardware.tools.dashboard.spad_dashboard.matplotlib": [[47, "module-cc_hardware.tools.dashboard.spad_dashboard.matplotlib"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[48, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[49, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"]], "cc_hardware.tools.flash": [[50, "module-cc_hardware.tools.flash"]], "cc_hardware.tools": [[51, "module-cc_hardware.tools"]], "cc_hardware.tools.jogger": [[52, "module-cc_hardware.tools.jogger"]], "cc_hardware.utils.constants": [[53, "module-cc_hardware.utils.constants"]], "cc_hardware.utils.file_handlers": [[54, "module-cc_hardware.utils.file_handlers"]], "cc_hardware.utils": [[55, "module-cc_hardware.utils"]], "cc_hardware.utils.logger": [[56, "module-cc_hardware.utils.logger"]], "cc_hardware.utils.manager": [[57, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.matplotlib": [[58, "module-cc_hardware.utils.matplotlib"]], "cc_hardware.utils.misc.asyncio_utils": [[59, "module-cc_hardware.utils.misc.asyncio_utils"]], "cc_hardware.utils.misc.blocking_deque": [[60, "module-cc_hardware.utils.misc.blocking_deque"]], "cc_hardware.utils.misc": [[61, "module-cc_hardware.utils.misc"]], "cc_hardware.utils.misc.misc": [[62, "module-cc_hardware.utils.misc.misc"]], "cc_hardware.utils.misc.multiprocessing_deque": [[63, "module-cc_hardware.utils.misc.multiprocessing_deque"]], "cc_hardware.utils.misc.serial_utils": [[64, "module-cc_hardware.utils.misc.serial_utils"]], "cc_hardware.utils.misc.singleton": [[65, "module-cc_hardware.utils.misc.singleton"]], "cc_hardware.utils.registry": [[66, "module-cc_hardware.utils.registry"]], "cc_hardware.utils.setting": [[67, "module-cc_hardware.utils.setting"]], "cc_hardware.utils.transformations": [[68, "module-cc_hardware.utils.transformations"]], "Reference": [[69, "reference"]]}, "indexentries": {"algorithm (class in cc_hardware.algos.algorithm)": [[9, "cc_hardware.algos.algorithm.Algorithm"]], "cc_hardware.algos.algorithm": [[9, "module-cc_hardware.algos.algorithm"]], "close() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.close"]], "create_from_registry() (algorithm class method)": [[9, "cc_hardware.algos.algorithm.Algorithm.create_from_registry"]], "is_okay (algorithm property)": [[9, "cc_hardware.algos.algorithm.Algorithm.is_okay"]], "module": [[9, "module-cc_hardware.algos.algorithm"], [10, "module-cc_hardware.algos.aruco"], [11, "module-cc_hardware.algos"], [12, "module-cc_hardware.drivers.cameras.camera"], [13, "module-cc_hardware.drivers.cameras.flir"], [14, "module-cc_hardware.drivers.cameras"], [15, "module-cc_hardware.drivers.cameras.pkl"], [16, "module-cc_hardware.drivers.cameras.realsense"], [17, "module-cc_hardware.drivers.cameras.usb"], [18, "module-cc_hardware.drivers"], [19, "module-cc_hardware.drivers.mocap"], [20, "module-cc_hardware.drivers.mocap.mocap"], [21, "module-cc_hardware.drivers.mocap.vive"], [22, "module-cc_hardware.drivers.safe_serial"], [23, "module-cc_hardware.drivers.sensor"], [24, "module-cc_hardware.drivers.spads"], [25, "module-cc_hardware.drivers.spads.pkl"], [26, "module-cc_hardware.drivers.spads.spad"], [27, "module-cc_hardware.drivers.spads.spad_wrappers"], [28, "module-cc_hardware.drivers.spads.tmf8828"], [29, "module-cc_hardware.drivers.spads.vl53l8ch"], [30, "module-cc_hardware.drivers.stepper_motors"], [31, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"], [32, "module-cc_hardware.drivers.stepper_motors.stepper_controller"], [33, "module-cc_hardware.drivers.stepper_motors.stepper_motor"], [34, "module-cc_hardware.drivers.stepper_motors.stepper_system"], [35, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"], [36, "module-cc_hardware"], [37, "module-cc_hardware.tools.calibration"], [38, "module-cc_hardware.tools.camera_viewer"], [39, "module-cc_hardware.tools.dashboard.dashboard"], [40, "module-cc_hardware.tools.dashboard"], [41, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"], [42, "module-cc_hardware.tools.dashboard.mocap_dashboard"], [43, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"], [44, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"], [45, "module-cc_hardware.tools.dashboard.spad_dashboard.dash"], [46, "module-cc_hardware.tools.dashboard.spad_dashboard"], [47, "module-cc_hardware.tools.dashboard.spad_dashboard.matplotlib"], [48, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"], [49, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"], [50, "module-cc_hardware.tools.flash"], [51, "module-cc_hardware.tools"], [52, "module-cc_hardware.tools.jogger"], [53, "module-cc_hardware.utils.constants"], [54, "module-cc_hardware.utils.file_handlers"], [55, "module-cc_hardware.utils"], [56, "module-cc_hardware.utils.logger"], [57, "module-cc_hardware.utils.manager"], [58, "module-cc_hardware.utils.matplotlib"], [59, "module-cc_hardware.utils.misc.asyncio_utils"], [60, "module-cc_hardware.utils.misc.blocking_deque"], [61, "module-cc_hardware.utils.misc"], [62, "module-cc_hardware.utils.misc.misc"], [63, "module-cc_hardware.utils.misc.multiprocessing_deque"], [64, "module-cc_hardware.utils.misc.serial_utils"], [65, "module-cc_hardware.utils.misc.singleton"], [66, "module-cc_hardware.utils.registry"], [67, "module-cc_hardware.utils.setting"], [68, "module-cc_hardware.utils.transformations"]], "register() (algorithm class method)": [[9, "cc_hardware.algos.algorithm.Algorithm.register"]], "registered() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.registered"]], "registry() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.registry"]], "run() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.run"]], "arucolocalizationalgorithm (class in cc_hardware.algos.aruco)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco": [[10, "module-cc_hardware.algos.aruco"]], "close() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.close"]], "is_okay (arucolocalizationalgorithm property)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.is_okay"]], "run() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.run"]], "cc_hardware.algos": [[11, "module-cc_hardware.algos"]], "camera (class in cc_hardware.drivers.cameras.camera)": [[12, "cc_hardware.drivers.cameras.camera.Camera"]], "cameraconfig (class in cc_hardware.drivers.cameras.camera)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig"]], "__del__() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.__del__"], [14, "cc_hardware.drivers.cameras.Camera.__del__"], [18, "cc_hardware.drivers.Camera.__del__"]], "accumulate() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.accumulate"], [14, "cc_hardware.drivers.cameras.Camera.accumulate"], [18, "cc_hardware.drivers.Camera.accumulate"]], "calibrate() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.calibrate"], [14, "cc_hardware.drivers.cameras.Camera.calibrate"], [18, "cc_hardware.drivers.Camera.calibrate"]], "cc_hardware.drivers.cameras.camera": [[12, "module-cc_hardware.drivers.cameras.camera"]], "close() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.close"], [14, "cc_hardware.drivers.cameras.Camera.close"], [18, "cc_hardware.drivers.Camera.close"]], "distortion_coefficients (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.distortion_coefficients"], [14, "cc_hardware.drivers.cameras.Camera.distortion_coefficients"], [18, "cc_hardware.drivers.Camera.distortion_coefficients"]], "intrinsic_matrix (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.intrinsic_matrix"], [14, "cc_hardware.drivers.cameras.Camera.intrinsic_matrix"], [18, "cc_hardware.drivers.Camera.intrinsic_matrix"]], "is_okay (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.is_okay"], [14, "cc_hardware.drivers.cameras.Camera.is_okay"], [18, "cc_hardware.drivers.Camera.is_okay"]], "resolution (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.resolution"], [14, "cc_hardware.drivers.cameras.Camera.resolution"], [18, "cc_hardware.drivers.Camera.resolution"]], "settings (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.settings"], [14, "cc_hardware.drivers.cameras.Camera.settings"], [18, "cc_hardware.drivers.Camera.settings"]], "settings (cameraconfig property)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.settings"], [14, "cc_hardware.drivers.cameras.CameraConfig.settings"], [18, "cc_hardware.drivers.CameraConfig.settings"]], "update() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.update"], [14, "cc_hardware.drivers.cameras.Camera.update"], [18, "cc_hardware.drivers.Camera.update"]], "flircamera (class in cc_hardware.drivers.cameras.flir)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera"]], "grasshopperflircamera (class in cc_hardware.drivers.cameras.flir)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera"]], "__del__() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.__del__"]], "__del__() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.__del__"]], "accumulate() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.accumulate"]], "accumulate() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.accumulate"]], "calibrate() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.calibrate"]], "calibrate() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.calibrate"]], "cc_hardware.drivers.cameras.flir": [[13, "module-cc_hardware.drivers.cameras.flir"]], "close() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.close"]], "close() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.close"]], "distortion_coefficients (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.distortion_coefficients"]], "distortion_coefficients (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.distortion_coefficients"]], "intrinsic_matrix (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.intrinsic_matrix"]], "intrinsic_matrix (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.intrinsic_matrix"]], "is_okay (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.is_okay"]], "is_okay (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.is_okay"]], "resolution (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.resolution"]], "resolution (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.resolution"]], "settings (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.settings"]], "settings (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.settings"]], "update() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.update"]], "update() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.update"]], "camera (class in cc_hardware.drivers.cameras)": [[14, "cc_hardware.drivers.cameras.Camera"]], "cameraconfig (class in cc_hardware.drivers.cameras)": [[14, "cc_hardware.drivers.cameras.CameraConfig"]], "cc_hardware.drivers.cameras": [[14, "module-cc_hardware.drivers.cameras"]], "pklcamera (class in cc_hardware.drivers.cameras.pkl)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera"]], "accumulate() (pklcamera method)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.accumulate"]], "cc_hardware.drivers.cameras.pkl": [[15, "module-cc_hardware.drivers.cameras.pkl"]], "close() (pklcamera method)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.close"]], "distortion_coefficients (pklcamera property)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.distortion_coefficients"]], "intrinsic_matrix (pklcamera property)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.intrinsic_matrix"]], "is_okay (pklcamera property)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.is_okay"]], "resolution (pklcamera property)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.resolution"]], "realsensecamera (class in cc_hardware.drivers.cameras.realsense)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera"]], "realsenseconfig (class in cc_hardware.drivers.cameras.realsense)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseConfig"]], "accumulate() (realsensecamera method)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.accumulate"]], "cc_hardware.drivers.cameras.realsense": [[16, "module-cc_hardware.drivers.cameras.realsense"]], "close() (realsensecamera method)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.close"]], "config (realsensecamera property)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.config"]], "distortion_coefficients (realsensecamera property)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.distortion_coefficients"]], "intrinsic_matrix (realsensecamera property)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.intrinsic_matrix"]], "is_okay (realsensecamera property)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.is_okay"]], "resolution (realsensecamera property)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.resolution"]], "usbcamera (class in cc_hardware.drivers.cameras.usb)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera"]], "usbcameraconfig (class in cc_hardware.drivers.cameras.usb)": [[17, "cc_hardware.drivers.cameras.usb.USBCameraConfig"]], "__del__() (usbcamera method)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.__del__"]], "accumulate() (usbcamera method)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.accumulate"]], "calibrate() (usbcamera method)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.calibrate"]], "cc_hardware.drivers.cameras.usb": [[17, "module-cc_hardware.drivers.cameras.usb"]], "close() (usbcamera method)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.close"]], "distortion_coefficients (usbcamera property)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.distortion_coefficients"]], "intrinsic_matrix (usbcamera property)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.intrinsic_matrix"]], "is_okay (usbcamera property)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.is_okay"]], "resolution (usbcamera property)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.resolution"]], "settings (usbcamera property)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.settings"]], "settings (usbcameraconfig property)": [[17, "cc_hardware.drivers.cameras.usb.USBCameraConfig.settings"]], "update() (usbcamera method)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.update"]], "camera (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.Camera"]], "cameraconfig (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.CameraConfig"]], "dummysteppermotor (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.DummyStepperMotor"]], "motioncapturesensor (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.MotionCaptureSensorConfig"]], "spadsensor (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.SPADSensorConfig"]], "safeserial (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.SafeSerial"]], "sensor (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.Sensor"]], "sensorconfig (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.SensorConfig"]], "steppermotor (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.StepperMotor"]], "steppermotorsystem (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis"]], "__del__() (motioncapturesensor method)": [[18, "cc_hardware.drivers.MotionCaptureSensor.__del__"], [19, "cc_hardware.drivers.mocap.MotionCaptureSensor.__del__"], [20, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.__del__"]], "__del__() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.__del__"], [24, "cc_hardware.drivers.spads.SPADSensor.__del__"], [26, "cc_hardware.drivers.spads.spad.SPADSensor.__del__"]], "__del__() (sensor method)": [[18, "cc_hardware.drivers.Sensor.__del__"], [23, "cc_hardware.drivers.sensor.Sensor.__del__"]], "__dir__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__dir__"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__dir__"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__dir__"]], "__format__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__format__"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__format__"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__format__"]], "__getattr__() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.__getattr__"], [22, "cc_hardware.drivers.safe_serial.SafeSerial.__getattr__"]], "__getattr__() (steppermotorsystem method)": [[18, "cc_hardware.drivers.StepperMotorSystem.__getattr__"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.__getattr__"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.__getattr__"]], "__hash__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__hash__"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__hash__"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__hash__"]], "__reduce_ex__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__reduce_ex__"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__reduce_ex__"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__reduce_ex__"]], "__repr__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__repr__"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__repr__"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__repr__"]], "__str__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__str__"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__str__"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__str__"]], "accumulate() (motioncapturesensor method)": [[18, "cc_hardware.drivers.MotionCaptureSensor.accumulate"], [19, "cc_hardware.drivers.mocap.MotionCaptureSensor.accumulate"], [20, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.accumulate"]], "accumulate() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.accumulate"], [24, "cc_hardware.drivers.spads.SPADSensor.accumulate"], [26, "cc_hardware.drivers.spads.spad.SPADSensor.accumulate"]], "calibrate() (motioncapturesensor method)": [[18, "cc_hardware.drivers.MotionCaptureSensor.calibrate"], [19, "cc_hardware.drivers.mocap.MotionCaptureSensor.calibrate"], [20, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.calibrate"]], "calibrate() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.calibrate"], [24, "cc_hardware.drivers.spads.SPADSensor.calibrate"], [26, "cc_hardware.drivers.spads.spad.SPADSensor.calibrate"]], "calibrate() (sensor method)": [[18, "cc_hardware.drivers.Sensor.calibrate"], [23, "cc_hardware.drivers.sensor.Sensor.calibrate"]], "cc_hardware.drivers": [[18, "module-cc_hardware.drivers"]], "close() (motioncapturesensor method)": [[18, "cc_hardware.drivers.MotionCaptureSensor.close"], [19, "cc_hardware.drivers.mocap.MotionCaptureSensor.close"], [20, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.close"]], "close() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.close"], [24, "cc_hardware.drivers.spads.SPADSensor.close"], [26, "cc_hardware.drivers.spads.spad.SPADSensor.close"]], "close() (sensor method)": [[18, "cc_hardware.drivers.Sensor.close"], [23, "cc_hardware.drivers.sensor.Sensor.close"]], "close() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.close"], [30, "cc_hardware.drivers.stepper_motors.StepperMotor.close"], [33, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.close"]], "create() (safeserial class method)": [[18, "cc_hardware.drivers.SafeSerial.create"], [22, "cc_hardware.drivers.safe_serial.SafeSerial.create"]], "home() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.home"], [30, "cc_hardware.drivers.stepper_motors.StepperMotor.home"], [33, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.home"]], "is_moving (steppermotor property)": [[18, "cc_hardware.drivers.StepperMotor.is_moving"], [30, "cc_hardware.drivers.stepper_motors.StepperMotor.is_moving"], [33, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.is_moving"]], "is_moving (steppermotorsystem property)": [[18, "cc_hardware.drivers.StepperMotorSystem.is_moving"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.is_moving"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.is_moving"]], "is_okay (motioncapturesensor property)": [[18, "cc_hardware.drivers.MotionCaptureSensor.is_okay"], [19, "cc_hardware.drivers.mocap.MotionCaptureSensor.is_okay"], [20, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.is_okay"]], "is_okay (spadsensor property)": [[18, "cc_hardware.drivers.SPADSensor.is_okay"], [24, "cc_hardware.drivers.spads.SPADSensor.is_okay"], [26, "cc_hardware.drivers.spads.spad.SPADSensor.is_okay"]], "is_okay (sensor property)": [[18, "cc_hardware.drivers.Sensor.is_okay"], [23, "cc_hardware.drivers.sensor.Sensor.is_okay"]], "is_okay (steppermotor property)": [[18, "cc_hardware.drivers.StepperMotor.is_okay"], [30, "cc_hardware.drivers.stepper_motors.StepperMotor.is_okay"], [33, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.is_okay"]], "move_by() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.move_by"], [30, "cc_hardware.drivers.stepper_motors.StepperMotor.move_by"], [33, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_by"]], "move_by() (steppermotorsystem method)": [[18, "cc_hardware.drivers.StepperMotorSystem.move_by"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_by"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_by"]], "move_to() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.move_to"], [30, "cc_hardware.drivers.stepper_motors.StepperMotor.move_to"], [33, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_to"]], "move_to() (steppermotorsystem method)": [[18, "cc_hardware.drivers.StepperMotorSystem.move_to"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_to"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_to"]], "name() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.name"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.name"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.name"]], "num_bins (spadsensor property)": [[18, "cc_hardware.drivers.SPADSensor.num_bins"], [24, "cc_hardware.drivers.spads.SPADSensor.num_bins"], [26, "cc_hardware.drivers.spads.spad.SPADSensor.num_bins"]], "position (steppermotor property)": [[18, "cc_hardware.drivers.StepperMotor.position"], [30, "cc_hardware.drivers.stepper_motors.StepperMotor.position"], [33, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.position"]], "read() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.read"], [22, "cc_hardware.drivers.safe_serial.SafeSerial.read"]], "resolution (spadsensor property)": [[18, "cc_hardware.drivers.SPADSensor.resolution"], [24, "cc_hardware.drivers.spads.SPADSensor.resolution"], [26, "cc_hardware.drivers.spads.spad.SPADSensor.resolution"]], "settings (motioncapturesensor property)": [[18, "cc_hardware.drivers.MotionCaptureSensor.settings"], [19, "cc_hardware.drivers.mocap.MotionCaptureSensor.settings"], [20, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.settings"]], "settings (motioncapturesensorconfig property)": [[18, "cc_hardware.drivers.MotionCaptureSensorConfig.settings"], [19, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.settings"], [20, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.settings"]], "settings (spadsensor property)": [[18, "cc_hardware.drivers.SPADSensor.settings"], [24, "cc_hardware.drivers.spads.SPADSensor.settings"], [26, "cc_hardware.drivers.spads.spad.SPADSensor.settings"]], "settings (spadsensorconfig property)": [[18, "cc_hardware.drivers.SPADSensorConfig.settings"], [24, "cc_hardware.drivers.spads.SPADSensorConfig.settings"], [26, "cc_hardware.drivers.spads.spad.SPADSensorConfig.settings"]], "settings (sensor property)": [[18, "cc_hardware.drivers.Sensor.settings"], [23, "cc_hardware.drivers.sensor.Sensor.settings"]], "settings (sensorconfig property)": [[18, "cc_hardware.drivers.SensorConfig.settings"], [23, "cc_hardware.drivers.sensor.SensorConfig.settings"]], "update() (motioncapturesensor method)": [[18, "cc_hardware.drivers.MotionCaptureSensor.update"], [19, "cc_hardware.drivers.mocap.MotionCaptureSensor.update"], [20, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.update"]], "update() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.update"], [24, "cc_hardware.drivers.spads.SPADSensor.update"], [26, "cc_hardware.drivers.spads.spad.SPADSensor.update"]], "update() (sensor method)": [[18, "cc_hardware.drivers.Sensor.update"], [23, "cc_hardware.drivers.sensor.Sensor.update"]], "value() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.value"], [30, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.value"], [34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.value"]], "wait_for_move() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.wait_for_move"], [30, "cc_hardware.drivers.stepper_motors.StepperMotor.wait_for_move"], [33, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.wait_for_move"]], "wait_for_start_talk() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.wait_for_start_talk"], [22, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_start_talk"]], "wait_for_stop_talk() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.wait_for_stop_talk"], [22, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_stop_talk"]], "write() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.write"], [22, "cc_hardware.drivers.safe_serial.SafeSerial.write"]], "write_and_wait_for_start_and_stop_talk() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_and_stop_talk"], [22, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_and_stop_talk"]], "write_and_wait_for_start_talk() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_talk"], [22, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_talk"]], "write_and_wait_for_stop_talk() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.write_and_wait_for_stop_talk"], [22, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_stop_talk"]], "motioncapturesensor (class in cc_hardware.drivers.mocap)": [[19, "cc_hardware.drivers.mocap.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers.mocap)": [[19, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap": [[19, "module-cc_hardware.drivers.mocap"]], "motioncapturesensor (class in cc_hardware.drivers.mocap.mocap)": [[20, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers.mocap.mocap)": [[20, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap.mocap": [[20, "module-cc_hardware.drivers.mocap.mocap"]], "vivetrackerpose (class in cc_hardware.drivers.mocap.vive)": [[21, "cc_hardware.drivers.mocap.vive.ViveTrackerPose"]], "vivetrackersensorconfig (class in cc_hardware.drivers.mocap.vive)": [[21, "cc_hardware.drivers.mocap.vive.ViveTrackerSensorConfig"]], "cc_hardware.drivers.mocap.vive": [[21, "module-cc_hardware.drivers.mocap.vive"]], "get_data() (vivetrackerpose method)": [[21, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.get_data"]], "process() (vivetrackerpose method)": [[21, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.process"]], "reset() (vivetrackerpose method)": [[21, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.reset"]], "safeserial (class in cc_hardware.drivers.safe_serial)": [[22, "cc_hardware.drivers.safe_serial.SafeSerial"]], "cc_hardware.drivers.safe_serial": [[22, "module-cc_hardware.drivers.safe_serial"]], "sensor (class in cc_hardware.drivers.sensor)": [[23, "cc_hardware.drivers.sensor.Sensor"]], "sensorconfig (class in cc_hardware.drivers.sensor)": [[23, "cc_hardware.drivers.sensor.SensorConfig"]], "sensordata (class in cc_hardware.drivers.sensor)": [[23, "cc_hardware.drivers.sensor.SensorData"]], "cc_hardware.drivers.sensor": [[23, "module-cc_hardware.drivers.sensor"]], "get_data() (sensordata method)": [[23, "cc_hardware.drivers.sensor.SensorData.get_data"]], "process() (sensordata method)": [[23, "cc_hardware.drivers.sensor.SensorData.process"]], "reset() (sensordata method)": [[23, "cc_hardware.drivers.sensor.SensorData.reset"]], "spadsensor (class in cc_hardware.drivers.spads)": [[24, "cc_hardware.drivers.spads.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads)": [[24, "cc_hardware.drivers.spads.SPADSensorConfig"]], "cc_hardware.drivers.spads": [[24, "module-cc_hardware.drivers.spads"]], "pklspadsensor (class in cc_hardware.drivers.spads.pkl)": [[25, "cc_hardware.drivers.spads.pkl.PklSPADSensor"]], "accumulate() (pklspadsensor method)": [[25, "cc_hardware.drivers.spads.pkl.PklSPADSensor.accumulate"]], "cc_hardware.drivers.spads.pkl": [[25, "module-cc_hardware.drivers.spads.pkl"]], "close() (pklspadsensor method)": [[25, "cc_hardware.drivers.spads.pkl.PklSPADSensor.close"]], "num_bins (pklspadsensor property)": [[25, "cc_hardware.drivers.spads.pkl.PklSPADSensor.num_bins"]], "resolution (pklspadsensor property)": [[25, "cc_hardware.drivers.spads.pkl.PklSPADSensor.resolution"]], "spadsensor (class in cc_hardware.drivers.spads.spad)": [[26, "cc_hardware.drivers.spads.spad.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads.spad)": [[26, "cc_hardware.drivers.spads.spad.SPADSensorConfig"]], "cc_hardware.drivers.spads.spad": [[26, "module-cc_hardware.drivers.spads.spad"]], "spadmergewrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[27, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper"]], "spadmergewrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[27, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig"]], "spadmovingaveragewrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[27, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper"]], "spadmovingaveragewrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[27, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig"]], "spadwrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[27, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper"]], "spadwrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[27, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig"]], "cc_hardware.drivers.spads.spad_wrappers": [[27, "module-cc_hardware.drivers.spads.spad_wrappers"]], "settings (spadmergewrapperconfig property)": [[27, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.settings"]], "settings (spadmovingaveragewrapperconfig property)": [[27, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.settings"]], "settings (spadwrapperconfig property)": [[27, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.settings"]], "rangemode (class in cc_hardware.drivers.spads.tmf8828)": [[28, "cc_hardware.drivers.spads.tmf8828.RangeMode"]], "spadid (class in cc_hardware.drivers.spads.tmf8828)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID"]], "tmf8828config (class in cc_hardware.drivers.spads.tmf8828)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Config"]], "tmf8828histogram (class in cc_hardware.drivers.spads.tmf8828)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram"]], "tmf8828sensor (class in cc_hardware.drivers.spads.tmf8828)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor"]], "__dir__() (rangemode method)": [[28, "cc_hardware.drivers.spads.tmf8828.RangeMode.__dir__"]], "__dir__() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.__dir__"]], "__format__() (rangemode method)": [[28, "cc_hardware.drivers.spads.tmf8828.RangeMode.__format__"]], "__format__() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.__format__"]], "__hash__() (rangemode method)": [[28, "cc_hardware.drivers.spads.tmf8828.RangeMode.__hash__"]], "__hash__() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.__hash__"]], "__reduce_ex__() (rangemode method)": [[28, "cc_hardware.drivers.spads.tmf8828.RangeMode.__reduce_ex__"]], "__reduce_ex__() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.__reduce_ex__"]], "__repr__() (rangemode method)": [[28, "cc_hardware.drivers.spads.tmf8828.RangeMode.__repr__"]], "__repr__() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.__repr__"]], "__str__() (rangemode method)": [[28, "cc_hardware.drivers.spads.tmf8828.RangeMode.__str__"]], "__str__() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.__str__"]], "accumulate() (tmf8828sensor method)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.accumulate"]], "calibrate() (tmf8828sensor method)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.calibrate"]], "cc_hardware.drivers.spads.tmf8828": [[28, "module-cc_hardware.drivers.spads.tmf8828"]], "close() (tmf8828sensor method)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.close"]], "config (tmf8828sensor property)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.config"]], "get_active_channels_per_subcapture() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.get_active_channels_per_subcapture"]], "get_data() (tmf8828histogram method)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.get_data"]], "get_num_channels() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.get_num_channels"]], "get_num_pixels() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.get_num_pixels"]], "get_resolution() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.get_resolution"]], "has_data (tmf8828histogram property)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.has_data"]], "is_okay (tmf8828sensor property)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.is_okay"]], "name() (rangemode method)": [[28, "cc_hardware.drivers.spads.tmf8828.RangeMode.name"]], "name() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.name"]], "num_bins (tmf8828sensor property)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.num_bins"]], "process() (tmf8828histogram method)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.process"]], "reset() (tmf8828histogram method)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.reset"]], "resolution (tmf8828sensor property)": [[28, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.resolution"]], "value() (rangemode method)": [[28, "cc_hardware.drivers.spads.tmf8828.RangeMode.value"]], "value() (spadid method)": [[28, "cc_hardware.drivers.spads.tmf8828.SPADID.value"]], "rangingmode (class in cc_hardware.drivers.spads.vl53l8ch)": [[29, "cc_hardware.drivers.spads.vl53l8ch.RangingMode"]], "vl53l8chconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig"]], "vl53l8chconfig4x4 (class in cc_hardware.drivers.spads.vl53l8ch)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4"]], "vl53l8chconfig8x8 (class in cc_hardware.drivers.spads.vl53l8ch)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8"]], "vl53l8chhistogram (class in cc_hardware.drivers.spads.vl53l8ch)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram"]], "vl53l8chsensor (class in cc_hardware.drivers.spads.vl53l8ch)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor"]], "vl53l8chsharedconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig"]], "__dir__() (rangingmode method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__dir__"]], "__format__() (rangingmode method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__format__"]], "__hash__() (rangingmode method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__hash__"]], "__reduce_ex__() (rangingmode method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__reduce_ex__"]], "__repr__() (rangingmode method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__repr__"]], "__str__() (rangingmode method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__str__"]], "accumulate() (vl53l8chsensor method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.accumulate"]], "cc_hardware.drivers.spads.vl53l8ch": [[29, "module-cc_hardware.drivers.spads.vl53l8ch"]], "close() (vl53l8chsensor method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.close"]], "get_data() (vl53l8chhistogram method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.get_data"]], "has_data (vl53l8chhistogram property)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.has_data"]], "is_okay (vl53l8chsensor property)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.is_okay"]], "name() (rangingmode method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.name"]], "num_bins (vl53l8chsensor property)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.num_bins"]], "pack() (vl53l8chconfig method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.pack"]], "pack() (vl53l8chconfig4x4 method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.pack"]], "pack() (vl53l8chconfig8x8 method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.pack"]], "pack() (vl53l8chsharedconfig method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.pack"]], "process() (vl53l8chhistogram method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.process"]], "reset() (vl53l8chhistogram method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.reset"]], "resolution (vl53l8chsensor property)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.resolution"]], "settings (vl53l8chconfig property)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.settings"]], "settings (vl53l8chconfig4x4 property)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.settings"]], "settings (vl53l8chconfig8x8 property)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.settings"]], "settings (vl53l8chsharedconfig property)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.settings"]], "update() (vl53l8chsensor method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.update"]], "value() (rangingmode method)": [[29, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.value"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors)": [[30, "cc_hardware.drivers.stepper_motors.DummyStepperMotor"]], "steppermotor (class in cc_hardware.drivers.stepper_motors)": [[30, "cc_hardware.drivers.stepper_motors.StepperMotor"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors)": [[30, "cc_hardware.drivers.stepper_motors.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors)": [[30, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis"]], "cc_hardware.drivers.stepper_motors": [[30, "module-cc_hardware.drivers.stepper_motors"]], "azimuthelevationsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem"]], "kinesisrotationstage (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage"]], "kinesissteppermotor (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor"]], "kinesissteppermotorsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[31, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "close() (kinesisrotationstage method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.close"]], "close() (kinesissteppermotor method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.close"]], "home() (kinesisrotationstage method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.home"]], "home() (kinesissteppermotor method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.home"]], "initialize() (kinesisrotationstage method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.initialize"]], "initialize() (kinesissteppermotor method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.initialize"]], "is_okay (kinesisrotationstage property)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.is_okay"]], "is_okay (kinesissteppermotor property)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.is_okay"]], "lower_limit (kinesisrotationstage property)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.lower_limit"]], "lower_limit (kinesissteppermotor property)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.lower_limit"]], "move_by() (kinesisrotationstage method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_by"]], "move_by() (kinesissteppermotor method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_by"]], "move_to() (kinesisrotationstage method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_to"]], "move_to() (kinesissteppermotor method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_to"]], "position (kinesisrotationstage property)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.position"]], "position (kinesissteppermotor property)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.position"]], "upper_limit (kinesisrotationstage property)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.upper_limit"]], "upper_limit (kinesissteppermotor property)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.upper_limit"]], "wait_for_move() (kinesisrotationstage method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.wait_for_move"]], "wait_for_move() (kinesissteppermotor method)": [[31, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.wait_for_move"]], "snakesteppercontroller (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[32, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController"]], "steppercontroller (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[32, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[32, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "get_position() (snakesteppercontroller method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.get_position"]], "get_position() (steppercontroller method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.get_position"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[33, "cc_hardware.drivers.stepper_motors.stepper_motor.DummyStepperMotor"]], "steppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[33, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[33, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "dummysteppersystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[34, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[34, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis"]], "__getattr__() (dummysteppersystem method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.__getattr__"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[34, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "is_moving (dummysteppersystem property)": [[34, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.is_moving"]], "move_by() (dummysteppersystem method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_by"]], "move_to() (dummysteppersystem method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_to"]], "dualdrive2axisgantry (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry"]], "dualdrive2axisgantry_x (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X"]], "dualdrive2axisgantry_y1 (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1"]], "dualdrive2axisgantry_y2 (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2"]], "singledrive1axisgantry (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry"]], "singledrive1axisgantry_x (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X"]], "singledrive1axisgantry_y (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y"]], "telemetrixsteppermotor (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor"]], "telemetrixsteppermotorsystem (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem"]], "telemetrixsteppermotorx (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX"]], "telemetrixsteppermotorxreversed (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed"]], "telemetrixsteppermotory (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY"]], "telemetrixsteppermotoryreversed (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed"]], "telemetrixsteppermotorz (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ"]], "telemetrixsteppermotorzreversed (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed"]], "__getattr__() (dualdrive2axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.__getattr__"]], "__getattr__() (dualdrive2axisgantry_y1 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.__getattr__"]], "__getattr__() (dualdrive2axisgantry_y2 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.__getattr__"]], "__getattr__() (singledrive1axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.__getattr__"]], "__getattr__() (singledrive1axisgantry_y method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.__getattr__"]], "__getattr__() (telemetrixsteppermotor method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.__getattr__"]], "__getattr__() (telemetrixsteppermotorx method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.__getattr__"]], "__getattr__() (telemetrixsteppermotorxreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.__getattr__"]], "__getattr__() (telemetrixsteppermotory method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.__getattr__"]], "__getattr__() (telemetrixsteppermotoryreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.__getattr__"]], "__getattr__() (telemetrixsteppermotorz method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.__getattr__"]], "__getattr__() (telemetrixsteppermotorzreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.__getattr__"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[35, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "close() (dualdrive2axisgantry method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.close"]], "close() (dualdrive2axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.close"]], "close() (dualdrive2axisgantry_y1 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.close"]], "close() (dualdrive2axisgantry_y2 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.close"]], "close() (singledrive1axisgantry method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.close"]], "close() (singledrive1axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.close"]], "close() (singledrive1axisgantry_y method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.close"]], "close() (telemetrixsteppermotor method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.close"]], "close() (telemetrixsteppermotorsystem method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.close"]], "close() (telemetrixsteppermotorx method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.close"]], "close() (telemetrixsteppermotorxreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.close"]], "close() (telemetrixsteppermotory method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.close"]], "close() (telemetrixsteppermotoryreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.close"]], "close() (telemetrixsteppermotorz method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.close"]], "close() (telemetrixsteppermotorzreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.close"]], "cm_to_revs() (dualdrive2axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.cm_to_revs"]], "cm_to_revs() (dualdrive2axisgantry_y1 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.cm_to_revs"]], "cm_to_revs() (dualdrive2axisgantry_y2 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.cm_to_revs"]], "cm_to_revs() (singledrive1axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.cm_to_revs"]], "cm_to_revs() (singledrive1axisgantry_y method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotor method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorx method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorxreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotory method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotoryreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorz method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorzreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.cm_to_revs"]], "home() (dualdrive2axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.home"]], "home() (dualdrive2axisgantry_y1 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.home"]], "home() (dualdrive2axisgantry_y2 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.home"]], "home() (singledrive1axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.home"]], "home() (singledrive1axisgantry_y method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.home"]], "home() (telemetrixsteppermotor method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.home"]], "home() (telemetrixsteppermotorx method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.home"]], "home() (telemetrixsteppermotorxreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.home"]], "home() (telemetrixsteppermotory method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.home"]], "home() (telemetrixsteppermotoryreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.home"]], "home() (telemetrixsteppermotorz method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.home"]], "home() (telemetrixsteppermotorzreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.home"]], "id (dualdrive2axisgantry_x property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.id"]], "id (dualdrive2axisgantry_y1 property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.id"]], "id (dualdrive2axisgantry_y2 property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.id"]], "id (singledrive1axisgantry_x property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.id"]], "id (singledrive1axisgantry_y property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.id"]], "id (telemetrixsteppermotor property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.id"]], "id (telemetrixsteppermotorx property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.id"]], "id (telemetrixsteppermotorxreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.id"]], "id (telemetrixsteppermotory property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.id"]], "id (telemetrixsteppermotoryreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.id"]], "id (telemetrixsteppermotorz property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.id"]], "id (telemetrixsteppermotorzreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.id"]], "is_moving (dualdrive2axisgantry_x property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.is_moving"]], "is_moving (dualdrive2axisgantry_y1 property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.is_moving"]], "is_moving (dualdrive2axisgantry_y2 property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.is_moving"]], "is_moving (singledrive1axisgantry_x property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.is_moving"]], "is_moving (singledrive1axisgantry_y property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.is_moving"]], "is_moving (telemetrixsteppermotor property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.is_moving"]], "is_moving (telemetrixsteppermotorx property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.is_moving"]], "is_moving (telemetrixsteppermotorxreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.is_moving"]], "is_moving (telemetrixsteppermotory property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.is_moving"]], "is_moving (telemetrixsteppermotoryreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.is_moving"]], "is_moving (telemetrixsteppermotorz property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.is_moving"]], "is_moving (telemetrixsteppermotorzreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.is_moving"]], "is_okay (dualdrive2axisgantry_x property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.is_okay"]], "is_okay (dualdrive2axisgantry_y1 property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.is_okay"]], "is_okay (dualdrive2axisgantry_y2 property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.is_okay"]], "is_okay (singledrive1axisgantry_x property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.is_okay"]], "is_okay (singledrive1axisgantry_y property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.is_okay"]], "is_okay (telemetrixsteppermotor property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.is_okay"]], "is_okay (telemetrixsteppermotorx property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.is_okay"]], "is_okay (telemetrixsteppermotorxreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.is_okay"]], "is_okay (telemetrixsteppermotory property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.is_okay"]], "is_okay (telemetrixsteppermotoryreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.is_okay"]], "is_okay (telemetrixsteppermotorz property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.is_okay"]], "is_okay (telemetrixsteppermotorzreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.is_okay"]], "move_by() (dualdrive2axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.move_by"]], "move_by() (dualdrive2axisgantry_y1 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.move_by"]], "move_by() (dualdrive2axisgantry_y2 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.move_by"]], "move_by() (singledrive1axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.move_by"]], "move_by() (singledrive1axisgantry_y method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.move_by"]], "move_by() (telemetrixsteppermotor method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_by"]], "move_by() (telemetrixsteppermotorx method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.move_by"]], "move_by() (telemetrixsteppermotorxreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.move_by"]], "move_by() (telemetrixsteppermotory method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.move_by"]], "move_by() (telemetrixsteppermotoryreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.move_by"]], "move_by() (telemetrixsteppermotorz method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.move_by"]], "move_by() (telemetrixsteppermotorzreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.move_by"]], "move_to() (dualdrive2axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.move_to"]], "move_to() (dualdrive2axisgantry_y1 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.move_to"]], "move_to() (dualdrive2axisgantry_y2 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.move_to"]], "move_to() (singledrive1axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.move_to"]], "move_to() (singledrive1axisgantry_y method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.move_to"]], "move_to() (telemetrixsteppermotor method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_to"]], "move_to() (telemetrixsteppermotorx method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.move_to"]], "move_to() (telemetrixsteppermotorxreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.move_to"]], "move_to() (telemetrixsteppermotory method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.move_to"]], "move_to() (telemetrixsteppermotoryreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.move_to"]], "move_to() (telemetrixsteppermotorz method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.move_to"]], "move_to() (telemetrixsteppermotorzreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.move_to"]], "position (dualdrive2axisgantry_x property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.position"]], "position (dualdrive2axisgantry_y1 property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.position"]], "position (dualdrive2axisgantry_y2 property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.position"]], "position (singledrive1axisgantry_x property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.position"]], "position (singledrive1axisgantry_y property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.position"]], "position (telemetrixsteppermotor property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.position"]], "position (telemetrixsteppermotorx property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.position"]], "position (telemetrixsteppermotorxreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.position"]], "position (telemetrixsteppermotory property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.position"]], "position (telemetrixsteppermotoryreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.position"]], "position (telemetrixsteppermotorz property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.position"]], "position (telemetrixsteppermotorzreversed property)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.position"]], "revs_to_cm() (dualdrive2axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.revs_to_cm"]], "revs_to_cm() (dualdrive2axisgantry_y1 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.revs_to_cm"]], "revs_to_cm() (dualdrive2axisgantry_y2 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.revs_to_cm"]], "revs_to_cm() (singledrive1axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.revs_to_cm"]], "revs_to_cm() (singledrive1axisgantry_y method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotor method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorx method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorxreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotory method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotoryreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorz method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorzreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.revs_to_cm"]], "set_absolute_target_position_cm() (dualdrive2axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (dualdrive2axisgantry_y1 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (dualdrive2axisgantry_y2 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (singledrive1axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (singledrive1axisgantry_y method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotor method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorx method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorxreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotory method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotoryreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorz method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorzreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.set_absolute_target_position_cm"]], "set_target_position_cm() (dualdrive2axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.set_target_position_cm"]], "set_target_position_cm() (dualdrive2axisgantry_y1 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.set_target_position_cm"]], "set_target_position_cm() (dualdrive2axisgantry_y2 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.set_target_position_cm"]], "set_target_position_cm() (singledrive1axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.set_target_position_cm"]], "set_target_position_cm() (singledrive1axisgantry_y method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotor method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorx method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorxreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotory method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotoryreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorz method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorzreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.set_target_position_cm"]], "wait_for_move() (dualdrive2axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.wait_for_move"]], "wait_for_move() (dualdrive2axisgantry_y1 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.wait_for_move"]], "wait_for_move() (dualdrive2axisgantry_y2 method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.wait_for_move"]], "wait_for_move() (singledrive1axisgantry_x method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.wait_for_move"]], "wait_for_move() (singledrive1axisgantry_y method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.wait_for_move"]], "wait_for_move() (telemetrixsteppermotor method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorx method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorxreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.wait_for_move"]], "wait_for_move() (telemetrixsteppermotory method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.wait_for_move"]], "wait_for_move() (telemetrixsteppermotoryreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorz method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorzreversed method)": [[35, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.wait_for_move"]], "cc_hardware": [[36, "module-cc_hardware"]], "calibrate() (in module cc_hardware.tools.calibration)": [[37, "cc_hardware.tools.calibration.calibrate"]], "cc_hardware.tools.calibration": [[37, "module-cc_hardware.tools.calibration"]], "tmf8828_calibrate() (in module cc_hardware.tools.calibration)": [[37, "cc_hardware.tools.calibration.tmf8828_calibrate"]], "cc_hardware.tools.camera_viewer": [[38, "module-cc_hardware.tools.camera_viewer"]], "dashboard (class in cc_hardware.tools.dashboard.dashboard)": [[39, "cc_hardware.tools.dashboard.dashboard.Dashboard"]], "dashboardconfig (class in cc_hardware.tools.dashboard.dashboard)": [[39, "cc_hardware.tools.dashboard.dashboard.DashboardConfig"]], "cc_hardware.tools.dashboard.dashboard": [[39, "module-cc_hardware.tools.dashboard.dashboard"]], "run() (dashboard method)": [[39, "cc_hardware.tools.dashboard.dashboard.Dashboard.run"], [40, "cc_hardware.tools.dashboard.Dashboard.run"]], "setup() (dashboard method)": [[39, "cc_hardware.tools.dashboard.dashboard.Dashboard.setup"], [40, "cc_hardware.tools.dashboard.Dashboard.setup"]], "update() (dashboard method)": [[39, "cc_hardware.tools.dashboard.dashboard.Dashboard.update"], [40, "cc_hardware.tools.dashboard.Dashboard.update"]], "dashboard (class in cc_hardware.tools.dashboard)": [[40, "cc_hardware.tools.dashboard.Dashboard"]], "dashboardconfig (class in cc_hardware.tools.dashboard)": [[40, "cc_hardware.tools.dashboard.DashboardConfig"]], "spaddashboard (class in cc_hardware.tools.dashboard)": [[40, "cc_hardware.tools.dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard)": [[40, "cc_hardware.tools.dashboard.SPADDashboardConfig"]], "cc_hardware.tools.dashboard": [[40, "module-cc_hardware.tools.dashboard"]], "max_bin (spaddashboard property)": [[40, "cc_hardware.tools.dashboard.SPADDashboard.max_bin"], [46, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.max_bin"], [49, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.max_bin"]], "min_bin (spaddashboard property)": [[40, "cc_hardware.tools.dashboard.SPADDashboard.min_bin"], [46, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.min_bin"], [49, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.min_bin"]], "run() (spaddashboard method)": [[40, "cc_hardware.tools.dashboard.SPADDashboard.run"], [46, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.run"], [49, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.run"]], "sensor (spaddashboard property)": [[40, "cc_hardware.tools.dashboard.SPADDashboard.sensor"], [46, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.sensor"], [49, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.sensor"]], "setup() (spaddashboard method)": [[40, "cc_hardware.tools.dashboard.SPADDashboard.setup"], [46, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.setup"], [49, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.setup"]], "update() (spaddashboard method)": [[40, "cc_hardware.tools.dashboard.SPADDashboard.update"], [46, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.update"], [49, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.update"]], "dashmotioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.dash)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard"]], "dashmotioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.dash)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[41, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"]], "run() (dashmotioncapturedashboard method)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.run"]], "sensor (dashmotioncapturedashboard property)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.sensor"]], "setup() (dashmotioncapturedashboard method)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.setup"]], "update() (dashmotioncapturedashboard method)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.update"]], "motioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard)": [[42, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard"]], "motioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard)": [[42, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[42, "module-cc_hardware.tools.dashboard.mocap_dashboard"]], "run() (motioncapturedashboard method)": [[42, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.run"], [43, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.run"]], "sensor (motioncapturedashboard property)": [[42, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.sensor"], [43, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.sensor"]], "setup() (motioncapturedashboard method)": [[42, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.setup"], [43, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.setup"]], "update() (motioncapturedashboard method)": [[42, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.update"], [43, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.update"]], "motioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard"]], "motioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[43, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"]], "dashboardwindow (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow"]], "pyqtgraphmotioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard"]], "pyqtgraphmotioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[44, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"]], "close() (pyqtgraphmotioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.close"]], "is_okay (pyqtgraphmotioncapturedashboard property)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.is_okay"]], "keypressevent() (dashboardwindow method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow.keyPressEvent"], [48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.keyPressEvent"]], "run() (pyqtgraphmotioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.run"]], "sensor (pyqtgraphmotioncapturedashboard property)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.sensor"]], "setup() (pyqtgraphmotioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.setup"]], "update() (pyqtgraphmotioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.update"]], "dashdashboard (class in cc_hardware.tools.dashboard.spad_dashboard.dash)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard"]], "dashdashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.dash)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.dash": [[45, "module-cc_hardware.tools.dashboard.spad_dashboard.dash"]], "max_bin (dashdashboard property)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard.max_bin"]], "min_bin (dashdashboard property)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard.min_bin"]], "run() (dashdashboard method)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard.run"]], "sensor (dashdashboard property)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard.sensor"]], "setup() (dashdashboard method)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard.setup"]], "update() (dashdashboard method)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard.update"]], "spaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard)": [[46, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard)": [[46, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard": [[46, "module-cc_hardware.tools.dashboard.spad_dashboard"]], "matplotlibdashboard (class in cc_hardware.tools.dashboard.spad_dashboard.matplotlib)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard"]], "matplotlibdashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.matplotlib)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboardConfig"]], "matplotlibtransientviewer (class in cc_hardware.tools.dashboard.spad_dashboard.matplotlib)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewer"]], "matplotlibtransientviewerconfig (class in cc_hardware.tools.dashboard.spad_dashboard.matplotlib)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewerConfig"]], "adjust_ylim() (matplotlibdashboard method)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.adjust_ylim"]], "cc_hardware.tools.dashboard.spad_dashboard.matplotlib": [[47, "module-cc_hardware.tools.dashboard.spad_dashboard.matplotlib"]], "max_bin (matplotlibdashboard property)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.max_bin"]], "max_bin (matplotlibtransientviewer property)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewer.max_bin"]], "min_bin (matplotlibdashboard property)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.min_bin"]], "min_bin (matplotlibtransientviewer property)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewer.min_bin"]], "run() (matplotlibdashboard method)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.run"]], "run() (matplotlibtransientviewer method)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewer.run"]], "save_animation() (in module cc_hardware.tools.dashboard.spad_dashboard.matplotlib)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.save_animation"]], "sensor (matplotlibdashboard property)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.sensor"]], "sensor (matplotlibtransientviewer property)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewer.sensor"]], "setup() (matplotlibdashboard method)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.setup"]], "setup() (matplotlibtransientviewer method)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewer.setup"]], "update() (matplotlibdashboard method)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.update"]], "update() (matplotlibtransientviewer method)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibTransientViewer.update"]], "dashboardwindow (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow"]], "pyqtgraphdashboard (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard"]], "pyqtgraphdashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[48, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"]], "init_ui() (dashboardwindow method)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.init_ui"]], "max_bin (pyqtgraphdashboard property)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.max_bin"]], "min_bin (pyqtgraphdashboard property)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.min_bin"]], "run() (pyqtgraphdashboard method)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.run"]], "sensor (pyqtgraphdashboard property)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.sensor"]], "setup() (pyqtgraphdashboard method)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.setup"]], "update() (pyqtgraphdashboard method)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.update"]], "spaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[49, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"]], "cc_hardware.tools.flash": [[50, "module-cc_hardware.tools.flash"]], "registry (class in cc_hardware.tools)": [[51, "cc_hardware.tools.Registry"]], "cc_hardware.tools": [[51, "module-cc_hardware.tools"]], "create_from_registry() (registry class method)": [[51, "cc_hardware.tools.Registry.create_from_registry"], [55, "cc_hardware.utils.Registry.create_from_registry"], [66, "cc_hardware.utils.registry.Registry.create_from_registry"]], "register() (registry class method)": [[51, "cc_hardware.tools.Registry.register"], [55, "cc_hardware.utils.Registry.register"], [66, "cc_hardware.utils.registry.Registry.register"]], "registered() (registry method)": [[51, "cc_hardware.tools.Registry.registered"], [55, "cc_hardware.utils.Registry.registered"], [66, "cc_hardware.utils.registry.Registry.registered"]], "registry() (registry method)": [[51, "cc_hardware.tools.Registry.registry"], [55, "cc_hardware.utils.Registry.registry"], [66, "cc_hardware.utils.registry.Registry.registry"]], "logbufferhandler (class in cc_hardware.tools.jogger)": [[52, "cc_hardware.tools.jogger.LogBufferHandler"]], "outputcapture (class in cc_hardware.tools.jogger)": [[52, "cc_hardware.tools.jogger.OutputCapture"]], "__repr__() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.__repr__"]], "acquire() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.acquire"]], "addfilter() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.addFilter"]], "cc_hardware.tools.jogger": [[52, "module-cc_hardware.tools.jogger"]], "close() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.close"]], "createlock() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.createLock"]], "emit() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.emit"]], "filter() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.filter"]], "flush() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.flush"]], "format() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.format"]], "handle() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.handle"]], "handleerror() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.handleError"]], "release() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.release"]], "removefilter() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.removeFilter"]], "setformatter() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.setFormatter"]], "setlevel() (logbufferhandler method)": [[52, "cc_hardware.tools.jogger.LogBufferHandler.setLevel"]], "c (in module cc_hardware.utils.constants)": [[53, "cc_hardware.utils.constants.C"]], "cc_hardware.utils.constants": [[53, "module-cc_hardware.utils.constants"]], "pklhandler (class in cc_hardware.utils.file_handlers)": [[54, "cc_hardware.utils.file_handlers.PklHandler"]], "pklreader (class in cc_hardware.utils.file_handlers)": [[54, "cc_hardware.utils.file_handlers.PklReader"]], "videowriter (class in cc_hardware.utils.file_handlers)": [[54, "cc_hardware.utils.file_handlers.VideoWriter"]], "__del__() (videowriter method)": [[54, "cc_hardware.utils.file_handlers.VideoWriter.__del__"]], "__len__() (pklhandler method)": [[54, "cc_hardware.utils.file_handlers.PklHandler.__len__"]], "__len__() (pklreader method)": [[54, "cc_hardware.utils.file_handlers.PklReader.__len__"]], "append() (pklhandler method)": [[54, "cc_hardware.utils.file_handlers.PklHandler.append"]], "append() (pklreader method)": [[54, "cc_hardware.utils.file_handlers.PklReader.append"]], "append() (videowriter method)": [[54, "cc_hardware.utils.file_handlers.VideoWriter.append"]], "cc_hardware.utils.file_handlers": [[54, "module-cc_hardware.utils.file_handlers"]], "close() (videowriter method)": [[54, "cc_hardware.utils.file_handlers.VideoWriter.close"]], "load() (pklhandler method)": [[54, "cc_hardware.utils.file_handlers.PklHandler.load"]], "load() (pklreader method)": [[54, "cc_hardware.utils.file_handlers.PklReader.load"]], "load_all() (pklhandler static method)": [[54, "cc_hardware.utils.file_handlers.PklHandler.load_all"]], "load_all() (pklreader static method)": [[54, "cc_hardware.utils.file_handlers.PklReader.load_all"]], "update_index() (pklhandler method)": [[54, "cc_hardware.utils.file_handlers.PklHandler.update_index"]], "update_index() (pklreader method)": [[54, "cc_hardware.utils.file_handlers.PklReader.update_index"]], "write() (pklhandler method)": [[54, "cc_hardware.utils.file_handlers.PklHandler.write"]], "write() (pklreader method)": [[54, "cc_hardware.utils.file_handlers.PklReader.write"]], "blockingdeque (class in cc_hardware.utils)": [[55, "cc_hardware.utils.BlockingDeque"]], "component (class in cc_hardware.utils)": [[55, "cc_hardware.utils.Component"]], "config (class in cc_hardware.utils)": [[55, "cc_hardware.utils.Config"]], "manager (class in cc_hardware.utils)": [[55, "cc_hardware.utils.Manager"]], "registry (class in cc_hardware.utils)": [[55, "cc_hardware.utils.Registry"]], "singletonabcmeta (class in cc_hardware.utils)": [[55, "cc_hardware.utils.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils)": [[55, "cc_hardware.utils.SingletonMeta"]], "__call__() (singletonabcmeta method)": [[55, "cc_hardware.utils.SingletonABCMeta.__call__"], [61, "cc_hardware.utils.misc.SingletonABCMeta.__call__"], [65, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__call__"]], "__call__() (singletonmeta method)": [[55, "cc_hardware.utils.SingletonMeta.__call__"], [61, "cc_hardware.utils.misc.SingletonMeta.__call__"], [65, "cc_hardware.utils.misc.singleton.SingletonMeta.__call__"]], "__enter__() (manager method)": [[55, "cc_hardware.utils.Manager.__enter__"], [57, "cc_hardware.utils.manager.Manager.__enter__"]], "__exit__() (manager method)": [[55, "cc_hardware.utils.Manager.__exit__"], [57, "cc_hardware.utils.manager.Manager.__exit__"]], "__getattr__() (blockingdeque method)": [[55, "cc_hardware.utils.BlockingDeque.__getattr__"], [60, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__getattr__"], [61, "cc_hardware.utils.misc.BlockingDeque.__getattr__"]], "__getitem__() (blockingdeque method)": [[55, "cc_hardware.utils.BlockingDeque.__getitem__"], [60, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__getitem__"], [61, "cc_hardware.utils.misc.BlockingDeque.__getitem__"]], "__getstate__() (config method)": [[55, "cc_hardware.utils.Config.__getstate__"], [57, "cc_hardware.utils.manager.Config.__getstate__"]], "__instancecheck__() (singletonabcmeta method)": [[55, "cc_hardware.utils.SingletonABCMeta.__instancecheck__"], [61, "cc_hardware.utils.misc.SingletonABCMeta.__instancecheck__"], [65, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__instancecheck__"]], "__len__() (blockingdeque method)": [[55, "cc_hardware.utils.BlockingDeque.__len__"], [60, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__len__"], [61, "cc_hardware.utils.misc.BlockingDeque.__len__"]], "__repr__() (blockingdeque method)": [[55, "cc_hardware.utils.BlockingDeque.__repr__"], [60, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__repr__"], [61, "cc_hardware.utils.misc.BlockingDeque.__repr__"]], "__setstate__() (config method)": [[55, "cc_hardware.utils.Config.__setstate__"], [57, "cc_hardware.utils.manager.Config.__setstate__"]], "__str__() (config method)": [[55, "cc_hardware.utils.Config.__str__"], [57, "cc_hardware.utils.manager.Config.__str__"]], "__subclasscheck__() (singletonabcmeta method)": [[55, "cc_hardware.utils.SingletonABCMeta.__subclasscheck__"], [61, "cc_hardware.utils.misc.SingletonABCMeta.__subclasscheck__"], [65, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__subclasscheck__"]], "add() (manager method)": [[55, "cc_hardware.utils.Manager.add"], [57, "cc_hardware.utils.manager.Manager.add"]], "append() (blockingdeque method)": [[55, "cc_hardware.utils.BlockingDeque.append"], [60, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.append"], [61, "cc_hardware.utils.misc.BlockingDeque.append"]], "arduino_upload() (in module cc_hardware.utils)": [[55, "cc_hardware.utils.arduino_upload"]], "call_async() (in module cc_hardware.utils)": [[55, "cc_hardware.utils.call_async"]], "call_async_gather() (in module cc_hardware.utils)": [[55, "cc_hardware.utils.call_async_gather"]], "call_async_value() (in module cc_hardware.utils)": [[55, "cc_hardware.utils.call_async_value"]], "cc_hardware.utils": [[55, "module-cc_hardware.utils"]], "close() (component method)": [[55, "cc_hardware.utils.Component.close"], [57, "cc_hardware.utils.manager.Component.close"]], "close() (manager method)": [[55, "cc_hardware.utils.Manager.close"], [57, "cc_hardware.utils.manager.Manager.close"]], "components (manager property)": [[55, "cc_hardware.utils.Manager.components"], [57, "cc_hardware.utils.manager.Manager.components"]], "compose() (config class method)": [[55, "cc_hardware.utils.Config.compose"], [57, "cc_hardware.utils.manager.Config.compose"]], "config (component property)": [[55, "cc_hardware.utils.Component.config"], [57, "cc_hardware.utils.manager.Component.config"]], "config (config attribute)": [[55, "cc_hardware.utils.Config.config"], [57, "cc_hardware.utils.manager.Config.config"]], "copy() (config method)": [[55, "cc_hardware.utils.Config.copy"], [57, "cc_hardware.utils.manager.Config.copy"]], "create() (config class method)": [[55, "cc_hardware.utils.Config.create"], [57, "cc_hardware.utils.manager.Config.create"]], "create_from_config() (component class method)": [[55, "cc_hardware.utils.Component.create_from_config"], [57, "cc_hardware.utils.manager.Component.create_from_config"]], "create_from_registry() (component class method)": [[55, "cc_hardware.utils.Component.create_from_registry"], [57, "cc_hardware.utils.manager.Component.create_from_registry"]], "create_from_registry() (config class method)": [[55, "cc_hardware.utils.Config.create_from_registry"], [57, "cc_hardware.utils.manager.Config.create_from_registry"]], "custom (config attribute)": [[55, "cc_hardware.utils.Config.custom"], [57, "cc_hardware.utils.manager.Config.custom"]], "find_device_by_label() (in module cc_hardware.utils)": [[55, "cc_hardware.utils.find_device_by_label"]], "find_ports() (in module cc_hardware.utils)": [[55, "cc_hardware.utils.find_ports"]], "get_object() (in module cc_hardware.utils)": [[55, "cc_hardware.utils.get_object"]], "instance() (singletonabcmeta class method)": [[55, "cc_hardware.utils.SingletonABCMeta.instance"], [61, "cc_hardware.utils.misc.SingletonABCMeta.instance"], [65, "cc_hardware.utils.misc.singleton.SingletonABCMeta.instance"]], "instance() (singletonmeta class method)": [[55, "cc_hardware.utils.SingletonMeta.instance"], [61, "cc_hardware.utils.misc.SingletonMeta.instance"], [65, "cc_hardware.utils.misc.singleton.SingletonMeta.instance"]], "instantiate() (config class method)": [[55, "cc_hardware.utils.Config.instantiate"], [57, "cc_hardware.utils.manager.Config.instantiate"]], "is_okay (component property)": [[55, "cc_hardware.utils.Component.is_okay"], [57, "cc_hardware.utils.manager.Component.is_okay"]], "is_okay (manager property)": [[55, "cc_hardware.utils.Manager.is_okay"], [57, "cc_hardware.utils.manager.Manager.is_okay"]], "load() (config class method)": [[55, "cc_hardware.utils.Config.load"], [57, "cc_hardware.utils.manager.Config.load"]], "merge_with() (config method)": [[55, "cc_hardware.utils.Config.merge_with"], [57, "cc_hardware.utils.manager.Config.merge_with"]], "register() (component class method)": [[55, "cc_hardware.utils.Component.register"], [57, "cc_hardware.utils.manager.Component.register"]], "register() (config class method)": [[55, "cc_hardware.utils.Config.register"], [57, "cc_hardware.utils.manager.Config.register"]], "register() (singletonabcmeta method)": [[55, "cc_hardware.utils.SingletonABCMeta.register"], [61, "cc_hardware.utils.misc.SingletonABCMeta.register"], [65, "cc_hardware.utils.misc.singleton.SingletonABCMeta.register"]], "register() (in module cc_hardware.utils)": [[55, "cc_hardware.utils.register"]], "registered() (component method)": [[55, "cc_hardware.utils.Component.registered"], [57, "cc_hardware.utils.manager.Component.registered"]], "registered() (config method)": [[55, "cc_hardware.utils.Config.registered"], [57, "cc_hardware.utils.manager.Config.registered"]], "registry() (component method)": [[55, "cc_hardware.utils.Component.registry"], [57, "cc_hardware.utils.manager.Component.registry"]], "registry() (config method)": [[55, "cc_hardware.utils.Config.registry"], [57, "cc_hardware.utils.manager.Config.registry"]], "run() (manager method)": [[55, "cc_hardware.utils.Manager.run"], [57, "cc_hardware.utils.manager.Manager.run"]], "save() (config method)": [[55, "cc_hardware.utils.Config.save"], [57, "cc_hardware.utils.manager.Config.save"]], "to_yaml() (config method)": [[55, "cc_hardware.utils.Config.to_yaml"], [57, "cc_hardware.utils.manager.Config.to_yaml"]], "filehandler (class in cc_hardware.utils.logger)": [[56, "cc_hardware.utils.logger.FileHandler"]], "loggermaxlevelfilter (class in cc_hardware.utils.logger)": [[56, "cc_hardware.utils.logger.LoggerMaxLevelFilter"]], "tqdmstreamhandler (class in cc_hardware.utils.logger)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler"]], "__repr__() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.__repr__"]], "__repr__() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.__repr__"]], "acquire() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.acquire"]], "acquire() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.acquire"]], "addfilter() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.addFilter"]], "addfilter() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.addFilter"]], "cc_hardware.utils.logger": [[56, "module-cc_hardware.utils.logger"]], "close() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.close"]], "close() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.close"]], "createlock() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.createLock"]], "createlock() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.createLock"]], "emit() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.emit"]], "emit() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.emit"]], "filter() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.filter"]], "filter() (loggermaxlevelfilter method)": [[56, "cc_hardware.utils.logger.LoggerMaxLevelFilter.filter"]], "filter() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.filter"]], "flush() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.flush"]], "flush() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.flush"]], "format() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.format"]], "format() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.format"]], "handle() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.handle"]], "handle() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.handle"]], "handleerror() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.handleError"]], "handleerror() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.handleError"]], "release() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.release"]], "release() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.release"]], "removefilter() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.removeFilter"]], "removefilter() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.removeFilter"]], "setformatter() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.setFormatter"]], "setformatter() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.setFormatter"]], "setlevel() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.setLevel"]], "setlevel() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.setLevel"]], "setstream() (filehandler method)": [[56, "cc_hardware.utils.logger.FileHandler.setStream"]], "setstream() (tqdmstreamhandler method)": [[56, "cc_hardware.utils.logger.TqdmStreamHandler.setStream"]], "component (class in cc_hardware.utils.manager)": [[57, "cc_hardware.utils.manager.Component"]], "config (class in cc_hardware.utils.manager)": [[57, "cc_hardware.utils.manager.Config"]], "manager (class in cc_hardware.utils.manager)": [[57, "cc_hardware.utils.manager.Manager"]], "cc_hardware.utils.manager": [[57, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.matplotlib": [[58, "module-cc_hardware.utils.matplotlib"]], "set_matplotlib_style() (in module cc_hardware.utils.matplotlib)": [[58, "cc_hardware.utils.matplotlib.set_matplotlib_style"]], "call_async() (in module cc_hardware.utils.misc.asyncio_utils)": [[59, "cc_hardware.utils.misc.asyncio_utils.call_async"]], "call_async_gather() (in module cc_hardware.utils.misc.asyncio_utils)": [[59, "cc_hardware.utils.misc.asyncio_utils.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.misc.asyncio_utils)": [[59, "cc_hardware.utils.misc.asyncio_utils.call_async_value"]], "cc_hardware.utils.misc.asyncio_utils": [[59, "module-cc_hardware.utils.misc.asyncio_utils"]], "blockingdeque (class in cc_hardware.utils.misc.blocking_deque)": [[60, "cc_hardware.utils.misc.blocking_deque.BlockingDeque"]], "cc_hardware.utils.misc.blocking_deque": [[60, "module-cc_hardware.utils.misc.blocking_deque"]], "blockingdeque (class in cc_hardware.utils.misc)": [[61, "cc_hardware.utils.misc.BlockingDeque"]], "singletonabcmeta (class in cc_hardware.utils.misc)": [[61, "cc_hardware.utils.misc.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.misc)": [[61, "cc_hardware.utils.misc.SingletonMeta"]], "arduino_upload() (in module cc_hardware.utils.misc)": [[61, "cc_hardware.utils.misc.arduino_upload"]], "call_async() (in module cc_hardware.utils.misc)": [[61, "cc_hardware.utils.misc.call_async"]], "call_async_gather() (in module cc_hardware.utils.misc)": [[61, "cc_hardware.utils.misc.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.misc)": [[61, "cc_hardware.utils.misc.call_async_value"]], "cc_hardware.utils.misc": [[61, "module-cc_hardware.utils.misc"]], "find_device_by_label() (in module cc_hardware.utils.misc)": [[61, "cc_hardware.utils.misc.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.misc)": [[61, "cc_hardware.utils.misc.find_ports"]], "get_object() (in module cc_hardware.utils.misc)": [[61, "cc_hardware.utils.misc.get_object"]], "cc_hardware.utils.misc.misc": [[62, "module-cc_hardware.utils.misc.misc"]], "get_object() (in module cc_hardware.utils.misc.misc)": [[62, "cc_hardware.utils.misc.misc.get_object"]], "cc_hardware.utils.misc.multiprocessing_deque": [[63, "module-cc_hardware.utils.misc.multiprocessing_deque"]], "arduino_upload() (in module cc_hardware.utils.misc.serial_utils)": [[64, "cc_hardware.utils.misc.serial_utils.arduino_upload"]], "cc_hardware.utils.misc.serial_utils": [[64, "module-cc_hardware.utils.misc.serial_utils"]], "find_device_by_label() (in module cc_hardware.utils.misc.serial_utils)": [[64, "cc_hardware.utils.misc.serial_utils.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.misc.serial_utils)": [[64, "cc_hardware.utils.misc.serial_utils.find_ports"]], "singletonabcmeta (class in cc_hardware.utils.misc.singleton)": [[65, "cc_hardware.utils.misc.singleton.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.misc.singleton)": [[65, "cc_hardware.utils.misc.singleton.SingletonMeta"]], "cc_hardware.utils.misc.singleton": [[65, "module-cc_hardware.utils.misc.singleton"]], "registry (class in cc_hardware.utils.registry)": [[66, "cc_hardware.utils.registry.Registry"]], "cc_hardware.utils.registry": [[66, "module-cc_hardware.utils.registry"]], "register() (in module cc_hardware.utils.registry)": [[66, "cc_hardware.utils.registry.register"]], "boolsetting (class in cc_hardware.utils.setting)": [[67, "cc_hardware.utils.setting.BoolSetting"]], "optionsetting (class in cc_hardware.utils.setting)": [[67, "cc_hardware.utils.setting.OptionSetting"]], "rangesetting (class in cc_hardware.utils.setting)": [[67, "cc_hardware.utils.setting.RangeSetting"]], "setting (class in cc_hardware.utils.setting)": [[67, "cc_hardware.utils.setting.Setting"]], "__getstate__() (boolsetting method)": [[67, "cc_hardware.utils.setting.BoolSetting.__getstate__"]], "__getstate__() (optionsetting method)": [[67, "cc_hardware.utils.setting.OptionSetting.__getstate__"]], "__getstate__() (rangesetting method)": [[67, "cc_hardware.utils.setting.RangeSetting.__getstate__"]], "__getstate__() (setting method)": [[67, "cc_hardware.utils.setting.Setting.__getstate__"]], "__setstate__() (boolsetting method)": [[67, "cc_hardware.utils.setting.BoolSetting.__setstate__"]], "__setstate__() (optionsetting method)": [[67, "cc_hardware.utils.setting.OptionSetting.__setstate__"]], "__setstate__() (rangesetting method)": [[67, "cc_hardware.utils.setting.RangeSetting.__setstate__"]], "__setstate__() (setting method)": [[67, "cc_hardware.utils.setting.Setting.__setstate__"]], "__str__() (boolsetting method)": [[67, "cc_hardware.utils.setting.BoolSetting.__str__"]], "__str__() (optionsetting method)": [[67, "cc_hardware.utils.setting.OptionSetting.__str__"]], "__str__() (rangesetting method)": [[67, "cc_hardware.utils.setting.RangeSetting.__str__"]], "__str__() (setting method)": [[67, "cc_hardware.utils.setting.Setting.__str__"]], "cc_hardware.utils.setting": [[67, "module-cc_hardware.utils.setting"]], "compose() (boolsetting class method)": [[67, "cc_hardware.utils.setting.BoolSetting.compose"]], "compose() (optionsetting class method)": [[67, "cc_hardware.utils.setting.OptionSetting.compose"]], "compose() (rangesetting class method)": [[67, "cc_hardware.utils.setting.RangeSetting.compose"]], "compose() (setting class method)": [[67, "cc_hardware.utils.setting.Setting.compose"]], "config (boolsetting attribute)": [[67, "cc_hardware.utils.setting.BoolSetting.config"]], "config (optionsetting attribute)": [[67, "cc_hardware.utils.setting.OptionSetting.config"]], "config (rangesetting attribute)": [[67, "cc_hardware.utils.setting.RangeSetting.config"]], "config (setting attribute)": [[67, "cc_hardware.utils.setting.Setting.config"]], "copy() (boolsetting method)": [[67, "cc_hardware.utils.setting.BoolSetting.copy"]], "copy() (optionsetting method)": [[67, "cc_hardware.utils.setting.OptionSetting.copy"]], "copy() (rangesetting method)": [[67, "cc_hardware.utils.setting.RangeSetting.copy"]], "copy() (setting method)": [[67, "cc_hardware.utils.setting.Setting.copy"]], "create() (boolsetting class method)": [[67, "cc_hardware.utils.setting.BoolSetting.create"]], "create() (optionsetting class method)": [[67, "cc_hardware.utils.setting.OptionSetting.create"]], "create() (rangesetting class method)": [[67, "cc_hardware.utils.setting.RangeSetting.create"]], "create() (setting class method)": [[67, "cc_hardware.utils.setting.Setting.create"]], "create_from_registry() (boolsetting class method)": [[67, "cc_hardware.utils.setting.BoolSetting.create_from_registry"]], "create_from_registry() (optionsetting class method)": [[67, "cc_hardware.utils.setting.OptionSetting.create_from_registry"]], "create_from_registry() (rangesetting class method)": [[67, "cc_hardware.utils.setting.RangeSetting.create_from_registry"]], "create_from_registry() (setting class method)": [[67, "cc_hardware.utils.setting.Setting.create_from_registry"]], "custom (boolsetting attribute)": [[67, "cc_hardware.utils.setting.BoolSetting.custom"]], "custom (optionsetting attribute)": [[67, "cc_hardware.utils.setting.OptionSetting.custom"]], "custom (rangesetting attribute)": [[67, "cc_hardware.utils.setting.RangeSetting.custom"]], "custom (setting attribute)": [[67, "cc_hardware.utils.setting.Setting.custom"]], "default_factory() (boolsetting class method)": [[67, "cc_hardware.utils.setting.BoolSetting.default_factory"]], "default_factory() (optionsetting class method)": [[67, "cc_hardware.utils.setting.OptionSetting.default_factory"]], "default_factory() (rangesetting class method)": [[67, "cc_hardware.utils.setting.RangeSetting.default_factory"]], "default_factory() (setting class method)": [[67, "cc_hardware.utils.setting.Setting.default_factory"]], "from_enum() (optionsetting class method)": [[67, "cc_hardware.utils.setting.OptionSetting.from_enum"]], "instantiate() (boolsetting class method)": [[67, "cc_hardware.utils.setting.BoolSetting.instantiate"]], "instantiate() (optionsetting class method)": [[67, "cc_hardware.utils.setting.OptionSetting.instantiate"]], "instantiate() (rangesetting class method)": [[67, "cc_hardware.utils.setting.RangeSetting.instantiate"]], "instantiate() (setting class method)": [[67, "cc_hardware.utils.setting.Setting.instantiate"]], "load() (boolsetting class method)": [[67, "cc_hardware.utils.setting.BoolSetting.load"]], "load() (optionsetting class method)": [[67, "cc_hardware.utils.setting.OptionSetting.load"]], "load() (rangesetting class method)": [[67, "cc_hardware.utils.setting.RangeSetting.load"]], "load() (setting class method)": [[67, "cc_hardware.utils.setting.Setting.load"]], "merge_with() (boolsetting method)": [[67, "cc_hardware.utils.setting.BoolSetting.merge_with"]], "merge_with() (optionsetting method)": [[67, "cc_hardware.utils.setting.OptionSetting.merge_with"]], "merge_with() (rangesetting method)": [[67, "cc_hardware.utils.setting.RangeSetting.merge_with"]], "merge_with() (setting method)": [[67, "cc_hardware.utils.setting.Setting.merge_with"]], "register() (boolsetting class method)": [[67, "cc_hardware.utils.setting.BoolSetting.register"]], "register() (optionsetting class method)": [[67, "cc_hardware.utils.setting.OptionSetting.register"]], "register() (rangesetting class method)": [[67, "cc_hardware.utils.setting.RangeSetting.register"]], "register() (setting class method)": [[67, "cc_hardware.utils.setting.Setting.register"]], "registered() (boolsetting method)": [[67, "cc_hardware.utils.setting.BoolSetting.registered"]], "registered() (optionsetting method)": [[67, "cc_hardware.utils.setting.OptionSetting.registered"]], "registered() (rangesetting method)": [[67, "cc_hardware.utils.setting.RangeSetting.registered"]], "registered() (setting method)": [[67, "cc_hardware.utils.setting.Setting.registered"]], "registry() (boolsetting method)": [[67, "cc_hardware.utils.setting.BoolSetting.registry"]], "registry() (optionsetting method)": [[67, "cc_hardware.utils.setting.OptionSetting.registry"]], "registry() (rangesetting method)": [[67, "cc_hardware.utils.setting.RangeSetting.registry"]], "registry() (setting method)": [[67, "cc_hardware.utils.setting.Setting.registry"]], "save() (boolsetting method)": [[67, "cc_hardware.utils.setting.BoolSetting.save"]], "save() (optionsetting method)": [[67, "cc_hardware.utils.setting.OptionSetting.save"]], "save() (rangesetting method)": [[67, "cc_hardware.utils.setting.RangeSetting.save"]], "save() (setting method)": [[67, "cc_hardware.utils.setting.Setting.save"]], "to_yaml() (boolsetting method)": [[67, "cc_hardware.utils.setting.BoolSetting.to_yaml"]], "to_yaml() (optionsetting method)": [[67, "cc_hardware.utils.setting.OptionSetting.to_yaml"]], "to_yaml() (rangesetting method)": [[67, "cc_hardware.utils.setting.RangeSetting.to_yaml"]], "to_yaml() (setting method)": [[67, "cc_hardware.utils.setting.Setting.to_yaml"]], "update() (boolsetting method)": [[67, "cc_hardware.utils.setting.BoolSetting.update"]], "update() (optionsetting method)": [[67, "cc_hardware.utils.setting.OptionSetting.update"]], "update() (rangesetting method)": [[67, "cc_hardware.utils.setting.RangeSetting.update"]], "cc_hardware.utils.transformations": [[68, "module-cc_hardware.utils.transformations"]]}})