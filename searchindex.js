Search.setIndex({"docnames": ["contributing", "examples/algo_nlos", "examples/camera_viewer", "examples/index", "examples/spad_dashboard", "examples/spad_gantry_capture", "examples/stepper_motor_controller", "index", "usage/api", "usage/api/cc_hardware/algos/algorithm/index", "usage/api/cc_hardware/algos/aruco/index", "usage/api/cc_hardware/algos/backprojection/index", "usage/api/cc_hardware/algos/datasets/index", "usage/api/cc_hardware/algos/index", "usage/api/cc_hardware/algos/models/index", "usage/api/cc_hardware/drivers/cameras/camera/index", "usage/api/cc_hardware/drivers/cameras/flir/index", "usage/api/cc_hardware/drivers/cameras/index", "usage/api/cc_hardware/drivers/cameras/pkl/index", "usage/api/cc_hardware/drivers/cameras/realsense/index", "usage/api/cc_hardware/drivers/cameras/usb/index", "usage/api/cc_hardware/drivers/index", "usage/api/cc_hardware/drivers/mocap/index", "usage/api/cc_hardware/drivers/mocap/mocap/index", "usage/api/cc_hardware/drivers/mocap/vive/index", "usage/api/cc_hardware/drivers/safe_serial/index", "usage/api/cc_hardware/drivers/sensor/index", "usage/api/cc_hardware/drivers/spads/index", "usage/api/cc_hardware/drivers/spads/pkl/index", "usage/api/cc_hardware/drivers/spads/spad/index", "usage/api/cc_hardware/drivers/spads/spad_wrappers/index", "usage/api/cc_hardware/drivers/spads/tmf8828/index", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index", "usage/api/cc_hardware/drivers/stepper_motors/index", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index", "usage/api/cc_hardware/index", "usage/api/cc_hardware/tools/calibration/index", "usage/api/cc_hardware/tools/camera_viewer/index", "usage/api/cc_hardware/tools/dashboard/dashboard/index", "usage/api/cc_hardware/tools/dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/dash/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/mocap_dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/pyqtgraph/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/pyqtgraph/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/spad_dashboard/index", "usage/api/cc_hardware/tools/flash/index", "usage/api/cc_hardware/tools/index", "usage/api/cc_hardware/tools/jogger/index", "usage/api/cc_hardware/utils/constants/index", "usage/api/cc_hardware/utils/file_handlers/index", "usage/api/cc_hardware/utils/index", "usage/api/cc_hardware/utils/logger/index", "usage/api/cc_hardware/utils/manager/index", "usage/api/cc_hardware/utils/matplotlib/index", "usage/api/cc_hardware/utils/misc/asyncio_utils/index", "usage/api/cc_hardware/utils/misc/blocking_deque/index", "usage/api/cc_hardware/utils/misc/index", "usage/api/cc_hardware/utils/misc/misc/index", "usage/api/cc_hardware/utils/misc/multiprocessing_deque/index", "usage/api/cc_hardware/utils/misc/serial_utils/index", "usage/api/cc_hardware/utils/misc/singleton/index", "usage/api/cc_hardware/utils/registry/index", "usage/api/cc_hardware/utils/setting/index", "usage/api/cc_hardware/utils/transformations/index", "usage/index"], "filenames": ["contributing.md", "examples/algo_nlos.md", "examples/camera_viewer.md", "examples/index.md", "examples/spad_dashboard.md", "examples/spad_gantry_capture.md", "examples/stepper_motor_controller.md", "index.md", "usage/api.md", "usage/api/cc_hardware/algos/algorithm/index.rst", "usage/api/cc_hardware/algos/aruco/index.rst", "usage/api/cc_hardware/algos/backprojection/index.rst", "usage/api/cc_hardware/algos/datasets/index.rst", "usage/api/cc_hardware/algos/index.rst", "usage/api/cc_hardware/algos/models/index.rst", "usage/api/cc_hardware/drivers/cameras/camera/index.rst", "usage/api/cc_hardware/drivers/cameras/flir/index.rst", "usage/api/cc_hardware/drivers/cameras/index.rst", "usage/api/cc_hardware/drivers/cameras/pkl/index.rst", "usage/api/cc_hardware/drivers/cameras/realsense/index.rst", "usage/api/cc_hardware/drivers/cameras/usb/index.rst", "usage/api/cc_hardware/drivers/index.rst", "usage/api/cc_hardware/drivers/mocap/index.rst", "usage/api/cc_hardware/drivers/mocap/mocap/index.rst", "usage/api/cc_hardware/drivers/mocap/vive/index.rst", "usage/api/cc_hardware/drivers/safe_serial/index.rst", "usage/api/cc_hardware/drivers/sensor/index.rst", "usage/api/cc_hardware/drivers/spads/index.rst", "usage/api/cc_hardware/drivers/spads/pkl/index.rst", "usage/api/cc_hardware/drivers/spads/spad/index.rst", "usage/api/cc_hardware/drivers/spads/spad_wrappers/index.rst", "usage/api/cc_hardware/drivers/spads/tmf8828/index.rst", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index.rst", "usage/api/cc_hardware/index.rst", "usage/api/cc_hardware/tools/calibration/index.rst", "usage/api/cc_hardware/tools/camera_viewer/index.rst", "usage/api/cc_hardware/tools/dashboard/dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/dash/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/mocap_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/pyqtgraph/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/pyqtgraph/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/spad_dashboard/index.rst", "usage/api/cc_hardware/tools/flash/index.rst", "usage/api/cc_hardware/tools/index.rst", "usage/api/cc_hardware/tools/jogger/index.rst", "usage/api/cc_hardware/utils/constants/index.rst", "usage/api/cc_hardware/utils/file_handlers/index.rst", "usage/api/cc_hardware/utils/index.rst", "usage/api/cc_hardware/utils/logger/index.rst", "usage/api/cc_hardware/utils/manager/index.rst", "usage/api/cc_hardware/utils/matplotlib/index.rst", "usage/api/cc_hardware/utils/misc/asyncio_utils/index.rst", "usage/api/cc_hardware/utils/misc/blocking_deque/index.rst", "usage/api/cc_hardware/utils/misc/index.rst", "usage/api/cc_hardware/utils/misc/misc/index.rst", "usage/api/cc_hardware/utils/misc/multiprocessing_deque/index.rst", "usage/api/cc_hardware/utils/misc/serial_utils/index.rst", "usage/api/cc_hardware/utils/misc/singleton/index.rst", "usage/api/cc_hardware/utils/registry/index.rst", "usage/api/cc_hardware/utils/setting/index.rst", "usage/api/cc_hardware/utils/transformations/index.rst", "usage/index.md"], "titles": ["Contributing", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Camera Culture Hardware Repo", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.aruco</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.backprojection</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.camera</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.flir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.realsense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.usb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap.mocap</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap.vive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.safe_serial</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.sensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.tmf8828</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.vl53l8ch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.kinesis_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_controller</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_motor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_system</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.telemetrix_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.camera_viewer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.dash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.flash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.jogger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.file_handlers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.matplotlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.asyncio_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.blocking_deque</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.multiprocessing_deque</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.serial_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.registry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.setting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.transformations</span></code>", "Reference"], "terms": {"repositori": [0, 7], "i": [0, 7, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 61, 62, 63, 66, 67, 68], "fairli": [0, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "easi": 0, "so": [0, 16, 53], "pleas": 0, "see": [0, 21, 31, 33, 37, 57], "below": 0, "instruct": [0, 16], "how": [0, 3, 21, 31, 33, 37, 57], "actual": [0, 21, 26, 28, 53, 57], "make": [0, 56, 60, 61, 62], "thi": [0, 7, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 66, 67, 68, 69], "project": 0, "There": [0, 50], "ar": [0, 7, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 50, 53, 55, 56, 57, 58, 62, 65], "two": [0, 12], "form": 0, "simpl": [0, 16, 19, 34, 47], "ad": [0, 21, 31, 33, 37, 53, 57], "content": 0, "within": [0, 7, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "doc": 0, "folder": 0, "all": [0, 7, 9, 12, 15, 17, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 57, 58, 60, 62, 65, 67, 68], "written": [0, 21, 25, 55, 57], "markdown": 0, "convert": [0, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "html": 0, "through": [0, 28, 38], "myst_pars": 0, "sphinx": 0, "To": [0, 16], "well": [0, 15, 17, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "you": [0, 7, 15, 16, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 53, 56, 57, 58, 68], "want": [0, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 53, 56, 57, 58, 68], "packag": [0, 3, 16, 57], "symlink": 0, "A": [0, 9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 57, 58, 61, 62, 65, 66, 67, 68], "conda": 0, "virtualenv": 0, "add": [0, 9, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 56, 57, 58, 68], "isol": 0, "python": [0, 16], "environ": [0, 56, 61, 62], "reduc": 0, "conflict": 0, "amongst": 0, "It": [0, 16, 19, 21, 25, 31, 32, 33, 34, 36, 42, 43, 55, 56, 57, 58, 66], "highli": 0, "recommend": 0, "us": [0, 3, 7, 10, 12, 14, 15, 16, 17, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 56, 57, 58, 61, 62, 65, 66, 67, 68], "one": [0, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 62, 66, 67, 68], "normal": 0, "git": [0, 7], "http": 0, "github": [0, 7], "com": [0, 7], "camera": [0, 10, 21, 41, 58], "cultur": 0, "cc": [0, 7, 17, 22, 27, 32, 33, 56, 58], "hardwar": [0, 17, 22, 27, 28, 32, 33, 40, 51, 56, 58], "cd": [0, 7], "sinc": [0, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "organ": 0, "monorepo": [0, 7], "need": [0, 16, 47, 56, 62, 66], "poetri": [0, 7], "The": [0, 7, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 61, 62, 65, 66, 67, 68], "develop": [0, 31], "mode": [0, 31, 32, 40, 49, 57], "e": [0, 7, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "symbol": 0, "link": 0, "immedi": 0, "reflect": 0, "pip": [0, 7, 16], "action": 0, "automat": [0, 7], "site": [0, 16], "page": 0, "host": 0, "static": [0, 55], "updat": [0, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 42, 43, 44, 45, 46, 47, 48, 49, 50, 68], "have": [0, 7, 21, 31, 33, 36, 37, 53, 57], "push": 0, "main": [0, 32, 42, 43, 44, 45, 46, 48, 50], "branch": 0, "onc": [0, 20], "rebuild": 0, "ensur": [0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 36, 53, 55, 56, 57, 58, 61, 62, 66, 67], "error": [0, 9, 21, 25, 53, 57], "befor": [0, 21, 25, 34, 56, 57, 58], "do": [0, 16, 32, 53, 57], "mai": [0, 9, 16, 21, 22, 23, 27, 29, 33, 36, 53, 57], "get": [0, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 61, 62, 67, 68], "an": [0, 9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68], "email": 0, "from": [0, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 61, 62, 63, 66, 67, 68], "someth": [0, 21, 25], "bad": 0, "happen": [0, 21, 25], "tag": 0, "exampl": [0, 16, 21, 24, 31, 33, 37, 50, 52, 55, 56, 57, 58, 66, 67], "v3": 0, "0": [0, 12, 16, 20, 27, 28, 29, 32, 34, 54, 56, 58], "1": [0, 10, 12, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 34, 37, 42, 43, 44, 55], "follow": [0, 7, 16], "pkg": [0, 7], "algo": [0, 7, 8], "contain": [0, 7, 9, 10, 12, 15, 16, 17, 18, 21, 28, 31, 38, 58], "algorithm": [0, 7, 10, 13], "process": [0, 7, 10, 12, 24, 26, 27, 29, 31, 32, 42, 43, 53, 57], "data": [0, 7, 12, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 58, 59, 68], "driver": [0, 7, 8, 43, 44, 45, 46, 47, 48, 50], "interfac": [0, 7, 9, 16, 19, 21, 25, 31, 32, 33, 34, 36, 38, 49, 52, 53], "util": [0, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44, 45, 47, 48, 49, 50, 52], "function": [0, 7, 10, 30, 32, 42, 43, 55, 58, 66], "class": [0, 7, 63, 65, 69], "tool": [0, 7, 8, 39], "work": [0, 7, 65, 69], "calibr": [0, 7, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 39, 52], "visual": [0, 7, 47, 49, 50, 59], "script": [0, 7, 31, 32, 56, 62, 65], "addit": [0, 9, 15, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 62, 65, 66, 68], "licens": 0, "pyproject": [0, 7], "toml": [0, 7], "descript": 0, "If": [0, 9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 62, 65, 67, 68], "plan": 0, "visit": 0, "correspond": [0, 12, 24, 31], "under": [0, 49], "each": [0, 7, 9, 15, 17, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 50, 55, 56, 58, 68], "should": [0, 7, 9, 21, 24, 26, 33, 35, 36, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 57, 68], "readm": [0, 7], "md": [0, 7], "cc_hardwar": [0, 3, 7, 8], "__init__": [0, 7, 66, 67], "py": [0, 7], "googl": 0, "": [0, 9, 15, 16, 17, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 54, 56, 57, 58, 68], "style": [0, 49, 59], "These": [0, 21, 26, 38], "also": [0, 21, 25, 33, 36, 38, 52, 55, 56, 57, 62, 66, 67], "gener": [0, 12, 20, 68], "tutori": 0, "fix": [0, 49], "exist": [0, 30, 49, 55, 56, 57, 62, 66], "_static": 0, "persist": 0, "css": 0, "custom": [0, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 56, 57, 58, 68], "differ": [0, 21, 25, 31, 34, 50, 57, 68], "default": [0, 9, 10, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 57, 58, 59, 68], "furo": 0, "theme": 0, "imag": [0, 10, 16, 18, 19, 49], "favicon": 0, "etc": 0, "usag": [0, 56, 62, 66], "refer": [0, 21, 27, 28, 29, 32, 33, 34, 36, 38], "guid": 0, "eyesofcambrian": 0, "conf": 0, "set": [0, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 56, 57, 58, 59], "relat": [0, 21, 27, 29], "extens": 0, "index": [0, 12, 20, 28, 31, 32, 35, 55, 56, 60, 61, 62], "home": [0, 21, 33, 34, 36, 38], "try": 0, "maintain": [0, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "describ": [0, 7], "abov": 0, "tab": 0, "onli": [0, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 62, 65, 66, 67, 68], "singl": [0, 20, 21, 25, 27, 29, 35, 37, 55, 56, 62, 66], "background": [0, 16, 19, 20, 31, 32], "ha": [0, 9, 16, 21, 27, 29, 32, 33, 34, 36, 53, 57, 68], "multipl": [0, 7, 21, 25, 31, 33, 34, 37, 38, 55, 56, 60, 62], "creat": [0, 9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 62, 66, 67, 68], "titl": [0, 68], "same": [0, 12, 21, 27, 29, 33, 36, 56, 62, 66], "insert": 0, "name": [0, 9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 56, 57, 58, 61, 62, 65, 67, 68], "without": [0, 12, 24, 28, 55], "tabl": 0, "insid": 0, "restructuredtext": 0, "which": [0, 21, 33, 34, 35, 36, 37, 38, 53, 56, 57, 58], "both": [0, 10, 19, 31, 32, 52, 56, 66, 67], "advantag": 0, "disadvantag": 0, "allow": [0, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 56, 57, 58, 62, 66, 68], "u": 0, "understand": 0, "languag": 0, "compil": 0, "down": [0, 21, 33, 36, 38], "featur": [0, 34, 50], "librari": [0, 16, 19, 34, 38], "websit": 0, "wai": [0, 7, 68], "easiest": 0, "makefil": [0, 32], "bat": 0, "provid": [0, 3, 9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 38, 49, 50, 52, 55, 56, 57, 60, 61, 66, 67, 68, 69], "directli": [0, 20, 38, 52, 56, 67], "necessari": [0, 9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 62, 66, 67, 68], "depend": [0, 21, 22, 23, 27, 29, 33, 36, 53, 57], "run": [0, 7, 9, 10, 16, 20, 31, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 58], "command": [0, 7, 16, 21, 33, 36, 52], "dev": 0, "clean": [0, 47], "view": [0, 31, 41, 47], "go": [0, 16], "browser": 0, "open": [0, 10, 18, 47, 57], "locat": [0, 21, 33, 36], "autobuild": 0, "extrem": 0, "when": [0, 7, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 57, 58, 61, 68], "made": [0, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 31], "pypi": 0, "tl": 0, "dr": 0, "we": [3, 7, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "few": [3, 25], "can": [7, 9, 12, 16, 20, 21, 25, 27, 28, 29, 31, 32, 33, 36, 37, 38, 47, 50, 52, 53, 56, 57, 58, 67], "instal": 7, "clone": 7, "publish": 7, "io": 7, "subdirectori": 7, "directori": [7, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 57, 58, 68], "separ": 7, "done": [7, 47], "current": [7, 20, 21, 33, 34, 35, 36, 38, 42, 43, 44, 45, 46, 48, 50, 57, 68], "support": [7, 16, 20, 31, 34, 43, 48, 50, 52, 55, 56, 66, 67, 68], "package_nam": 7, "In": [7, 32], "import": [7, 50, 57, 58, 66, 67], "path": [7, 9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 58, 62, 63, 67, 68], "module_nam": 7, "implement": [9, 16, 19, 20, 21, 25, 31, 33, 36, 40, 49, 50, 53, 56, 62, 66], "registri": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 58, 68], "abc": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44, 45, 47, 48, 49, 50, 56, 58, 62, 66, 68], "abstract": [9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 62, 66], "return": [9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 60, 61, 62, 65, 66, 67, 68], "result": [9, 10, 56, 60, 62], "subclass": [9, 21, 26, 33, 36, 43, 44, 45, 46, 48, 50, 52, 53, 56, 57, 62, 66, 67], "paramet": [9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 58, 61, 62, 65, 66, 67, 68], "method": [9, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 60, 62, 67, 68], "specifi": [9, 10, 15, 16, 17, 18, 21, 22, 23, 25, 27, 28, 29, 33, 34, 36, 37, 38, 50, 53, 55, 56, 57, 61, 62], "type": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 62, 63, 67, 68], "properti": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58], "is_okai": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58], "bool": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 58, 68], "true": [9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 62, 63, 68], "okai": [9, 10, 33, 35, 56, 58], "fals": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 57, 58, 68], "otherwis": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 56, 57, 58, 67, 68], "either": [9, 21, 25], "been": [9, 53, 57, 68], "initi": [9, 14, 16, 19, 20, 24, 26, 27, 28, 29, 32, 34, 38, 49], "properli": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 36, 55, 56, 58], "encount": [9, 53, 57], "close": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 57, 58], "releas": [9, 10, 15, 17, 20, 21, 22, 23, 26, 27, 29, 33, 36, 37, 42, 43, 44, 45, 46, 48, 50, 53, 56, 57, 58], "ani": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 61, 62, 63, 67, 68], "resourc": [9, 10, 15, 17, 18, 20, 21, 22, 23, 26, 27, 29, 33, 36, 37, 42, 43, 44, 45, 46, 48, 50, 53, 56, 57, 58], "here": [9, 38], "overrid": [9, 15, 16, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 62, 66, 68], "own": [9, 16, 21, 31, 33, 37], "classmethod": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 62, 66, 67, 68], "regist": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 62, 66, 67, 68], "class_typ": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "class_nam": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "str": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 61, 62, 67, 68], "module_path": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "none": [9, 10, 12, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 62, 65, 67, 68], "friend": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "self": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 57, 58, 62, 66, 67, 68], "object": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 58, 61, 67, 68], "lazi": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "load": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 58, 67, 68], "string": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 61, 62, 67, 68], "anoth": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "associ": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "create_from_registri": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "arg": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 57, 58, 61, 62, 66, 67, 68], "kwarg": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 57, 58, 61, 62, 65, 66, 67, 68], "instanc": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 56, 57, 58, 62, 66, 67, 68], "perform": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 62, 63, 67, 68], "instanti": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "posit": [9, 10, 12, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 58, 62, 66, 67, 68], "argument": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 58, 62, 65, 66, 67, 68], "pass": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 56, 57, 58, 62, 65, 67, 68], "constructor": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 57, 58, 62, 66, 67, 68], "keyword": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 50, 52, 55, 56, 58, 62, 65, 66, 67, 68], "request": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 61, 62, 67, 68], "dictionari": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "map": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 56, 57, 58, 67, 68], "enumer": [9, 10, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "local": 10, "marker": 10, "arucolocalizationalgorithm": 10, "sensor": [10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 40, 43, 44, 45, 46, 47, 48, 50, 59, 68], "aruco_dict": 10, "marker_s": 10, "origin_id": 10, "num_sampl": [10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 31, 32], "marker_id": 10, "detect": [10, 38], "comput": [10, 21, 33, 36], "pose": [10, 21, 22, 23], "rel": [10, 21, 33, 34, 36, 38], "origin": [10, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 53, 56, 57, 58, 68], "show": 10, "save": [10, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 58, 68], "filenam": [10, 40, 57], "return_imag": 10, "option": [10, 15, 16, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 55, 56, 58, 68], "whether": [10, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 58, 68], "displai": [10, 42, 43, 44, 45, 46, 48, 49, 50], "video": [10, 55], "dict": [10, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "list": [10, 12, 15, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 55, 56, 58, 60, 62, 65, 68], "check": [10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 62, 63, 65], "writer": [10, 55], "model": [12, 13, 16], "histogramdataset": 12, "pkl_path": [12, 18, 28], "rolling_window": 12, "histogram": [12, 14, 21, 27, 28, 29, 30, 31, 32, 43, 48, 49, 50], "train": 12, "analysi": 12, "input": [12, 14, 38, 55], "target": [12, 21, 31, 32, 33, 34, 36, 38], "manipul": 12, "affect": 12, "raw": 12, "set_start_bin": 12, "start_bin": 12, "start": [12, 20, 21, 25, 32, 33, 36, 55, 58], "bin": [12, 21, 27, 28, 29, 31, 32, 43, 48, 50], "set_end_bin": 12, "end_bin": 12, "end": [12, 28], "get_raw_bin_num": 12, "number": [12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 50, 55, 56, 61, 62, 68], "transform": [12, 47, 56], "appli": [12, 21, 25], "int": [12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 42, 43, 44, 45, 46, 48, 50, 53, 55, 56, 57, 58, 61, 62], "get_bin_num": 12, "augment": 12, "factor": [12, 34], "std_multipli": 12, "group_by_target": 12, "repeat": 12, "given": [12, 15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 40, 56, 62, 65], "time": [12, 20, 21, 25, 31, 32, 38, 49, 50, 68], "float": [12, 21, 25, 31, 33, 34, 35, 36, 37, 38, 43, 48, 50], "standard": 12, "deviat": 12, "sampl": [12, 15, 16, 17, 18, 19, 21, 22, 23, 27, 28, 29, 31, 32, 35], "get_mean_captur": 12, "mean": [12, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "captur": [12, 16, 19, 20, 21, 22, 23, 44, 45, 46, 47, 53], "torch": 12, "tensor": 12, "set_zero": 12, "zero": [12, 21, 33, 34, 36, 38], "empti": [12, 21, 27, 29, 31, 32, 33, 35, 37, 56, 61, 62], "subtract": 12, "clip_neg": 12, "clip": [12, 34], "neg": 12, "valu": [12, 20, 21, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 43, 48, 50, 53, 55, 56, 57, 58, 60, 61, 62, 66, 67, 68], "reset_transform": 12, "reset": [12, 21, 24, 25, 26, 27, 29, 32], "__len__": [12, 55, 56, 61, 62], "__getitem__": [12, 56, 61, 62], "idx": [12, 56, 60, 62], "item": [12, 56, 61, 62], "__add__": 12, "other": [12, 15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 53, 56, 57, 58, 68], "join": 12, "confirm": 12, "dimens": [12, 21, 27, 28, 29, 32], "aruco": 13, "dataset": 13, "neural": 14, "network": 14, "architectur": 14, "deeplocation8": 14, "height": [14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 29, 31, 32], "8": 14, "width": [14, 15, 16, 17, 18, 19, 20, 21, 27, 28, 29, 31, 32], "num_bin": [14, 21, 27, 28, 29, 32], "16": 14, "out_dim": 14, "2": [14, 21, 25, 31, 33, 35, 37, 53, 56, 57, 60, 62], "layer": 14, "convolut": 14, "design": [14, 21, 27, 29, 30], "8x8": [14, 31, 32], "initialize_weight": 14, "m": [14, 54], "weight": 14, "kaim": 14, "uniform": 14, "base": [15, 16, 17, 21, 22, 23, 24, 26, 27, 28, 29, 31, 33, 35, 36, 42, 43, 44, 45, 46, 48, 49, 50, 52, 55, 56, 58, 62, 63, 66, 67, 68], "cameraconfig": [15, 17, 19, 20, 21], "sensorconfig": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32], "manag": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44, 45, 47, 48, 49, 50, 56, 68], "config": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 58, 68], "hydra_config": [15, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 43, 44, 45, 47, 48, 49, 50, 56, 58, 68], "hydracontainerconfig": [15, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 58, 68], "configur": [15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 58], "retriev": [15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 61, 62, 66], "omegaconf": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "dictconfig": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "uninstanti": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "nest": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "proper": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "serial": [15, 17, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 53, 56, 57, 58, 62, 65, 68], "deseri": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "print": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 55, 56, 58, 67, 68], "yaml": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "code": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "specif": [15, 16, 17, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 50, 55, 56, 58, 60, 62, 68], "logic": [15, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "file": [15, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 33, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 68], "where": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 55, 56, 58, 61, 62, 68], "store": [15, 16, 17, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 58, 68], "necessarili": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 52, 56, 58, 67, 68], "defin": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "_convert_": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "listconfig": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "convers": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "structur": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "dataclass": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "equival": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "compos": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "config_dir": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "config_nam": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "return_hydra_config": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "hydra": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 62, 63, 68], "api": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68, 70], "hydraconfig": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "pattern": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 62, 66, 68], "instantiate_kwarg": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "wrapper": [15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 60, 61, 62, 68], "around": [15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 61, 68], "select": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "merge_with": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "merg": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 30, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "copi": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "new": [15, 16, 17, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "deepcopi": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "__getstate__": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "__setstate__": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "call": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 53, 56, 57, 58, 62, 66, 68], "slow": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "pickl": [15, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 55, 56, 58, 68], "unpickl": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "header": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "top": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "to_yaml": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "some": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "represent": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 61, 62, 68], "attribut": [15, 17, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 57, 58, 61, 62, 68], "ll": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "state": [15, 17, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "__str__": [15, 17, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58, 68], "compon": [15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 58], "extend": [15, 17, 21], "accumul": [15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 31, 32, 47], "averag": [15, 16, 17, 21, 22, 23, 27, 29, 30, 31], "np": [15, 16, 17, 18, 19, 20, 21, 27, 29, 31, 32, 55], "ndarrai": [15, 16, 17, 18, 19, 20, 21, 27, 29, 31, 32, 55], "arrai": [15, 16, 17, 18, 21], "distortion_coeffici": [15, 16, 17, 18, 19, 20, 21], "numpi": [15, 16, 17, 18, 19, 20, 21], "distort": [15, 16, 17, 18, 19, 20, 21], "coeffici": [15, 16, 17, 18, 19, 20, 21], "repres": [15, 16, 17, 18, 21, 27, 28, 29, 31, 32, 33, 36], "intrinsic_matrix": [15, 16, 17, 18, 19, 20, 21], "intrins": [15, 16, 17, 18, 19, 20, 21], "matrix": [15, 16, 17, 18, 19, 20, 21], "3x3": [15, 16, 17, 18, 21, 31], "resolut": [15, 16, 17, 18, 19, 20, 21, 27, 28, 29, 31, 32], "tupl": [15, 16, 17, 18, 19, 20, 21, 25, 27, 28, 29, 31, 32, 35], "chang": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 53, 57], "via": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 34], "sent": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32], "kei": [15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 35, 38, 49, 55, 68], "must": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 53, 56, 57, 58], "match": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32], "field": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 47], "wa": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 53, 57, 68], "were": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29], "oper": [15, 17, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 42, 43, 44, 45, 46, 48, 50, 56, 58], "__del__": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 55], "destructor": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32], "t": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 57, 58], "create_from_config": [15, 16, 17, 18, 20, 21, 22, 23, 26, 27, 28, 29, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58], "flircamera": 16, "singleton": [16, 19, 56, 62], "grasshopperflircamera": 16, "special": 16, "grasshopp": 16, "inherit": [16, 18, 21, 27, 28, 29, 31, 32, 52, 56, 67], "036": 16, "145": 16, "001": 16, "155": 16, "1815": 16, "5": 16, "1817": 16, "753": 16, "721": 16, "299": 16, "531": 16, "352": 16, "def": [16, 58, 66, 67], "spinnak": 16, "usual": [16, 38], "As": 16, "write": [16, 21, 25, 55, 57], "2024": 16, "09": 16, "21": 16, "3": [16, 21, 27, 29, 31, 32, 33, 37, 49, 53, 57], "10": [16, 21, 25, 27, 29, 32, 55, 66], "newer": 16, "version": [16, 53, 57], "step": [16, 21, 33, 36, 38, 44, 47, 49], "after": [16, 56, 58], "re": 16, "tar": 16, "xvzf": 16, "spinnaker_python": 16, "cp": 16, "o": [16, 53, 57], "arch": 16, "gz": 16, "whl": 16, "But": 16, "fail": 16, "replac": [16, 53, 57], "your": 16, "For": [16, 24], "11": 16, "m2": 16, "mac": 16, "would": [16, 68], "turn": 16, "4": 16, "172": 16, "cp310": 16, "macosx_13_0_arm64": 16, "mv": 16, "cp311": 16, "And": 16, "_pyspin": 16, "cpython": 16, "310": 16, "darwin": 16, "311": 16, "offici": 16, "caus": 16, "issu": [16, 57], "risk": 16, "camera_index": [16, 20], "thread": [16, 19, 20, 21, 25, 42, 43, 44, 45, 46, 48, 50, 53, 56, 57, 61, 62], "them": [16, 19, 20, 21, 31, 32, 33, 34, 36, 37, 68], "queue": [16, 19, 20], "avail": [16, 18, 21, 24, 25, 26, 27, 29, 32, 50, 56, 62, 65], "stream": [16, 19, 57], "stop": [16, 19, 20, 21, 25, 31, 32, 56, 58], "deiniti": [16, 19], "flir": [17, 21], "pkl": [17, 21, 27, 55], "realsens": [17, 21], "modul": [17, 21, 22, 27, 33, 43, 45, 48, 52, 56, 69], "pre": [18, 28, 32], "record": [18, 28, 53, 55, 57], "pklcamera": 18, "read": [18, 21, 25, 55, 68], "iter": [18, 21, 31, 33, 35, 37, 56, 58], "exhaust": 18, "still": [18, 47], "activ": [18, 31], "placehold": 18, "potenti": 18, "cleanup": [18, 56, 58], "intel": 19, "devic": [19, 21, 25, 32, 34, 40, 51, 56, 62, 65], "realsensecamera": 19, "pyrealsens": 19, "d435i": 19, "color": [19, 21, 31, 33, 37], "depth": [19, 20, 31, 49], "return_depth": [19, 20], "realsenseconfig": 19, "rgb": [19, 20], "r": 19, "return_rgb": [19, 20], "return_ir": 19, "readi": 19, "rais": [19, 20, 21, 25, 27, 29, 31, 32, 33, 37, 53], "notimplementederror": [19, 20, 53], "yet": [19, 20], "usbcameraconfig": 20, "variabl": [20, 21, 26, 27, 28, 29, 31, 32, 33, 35, 37, 38, 42, 43, 48, 50, 68], "identifi": [20, 35], "g": [20, 21, 33, 36, 47], "start_capture_onc": 20, "keep": [20, 31, 32], "until": [20, 21, 25, 33, 36, 42, 43, 44, 45, 46, 48, 50, 56, 58], "exposur": 20, "desir": 20, "note": [20, 35, 38], "vari": [20, 21, 22, 23, 27, 29], "platform": 20, "force_autoexposur": 20, "attempt": [20, 21, 25, 38, 61], "enabl": [20, 31, 32, 38], "auto": [20, 38], "Not": 20, "usbcamera": 20, "frame": [20, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55], "ignor": [20, 30, 53, 57], "don": [20, 21, 33, 36], "known": [20, 21, 33, 36], "fallback": 20, "mocap": [21, 44, 45, 46, 47], "spad": [21, 22, 23, 43, 48, 49, 50], "tmf8828": [21, 27, 40], "vl53l8ch": [21, 27, 31], "stepper_motor": 21, "kinesis_stepp": [21, 33], "stepper_control": [21, 33], "stepper_system": [21, 33, 34, 38], "telemetrix_stepp": [21, 33], "safe_seri": 21, "motioncapturesensor": [21, 22, 23, 44, 45, 46, 47], "motion": [21, 22, 23, 33, 36, 38, 44, 45, 46, 47], "sum": [21, 22, 23, 27, 29], "motioncapturesensorconfig": [21, 22, 23, 24], "safeseri": [21, 25], "lock_typ": [21, 25], "multiprocess": [21, 25], "safe": [21, 25, 33, 36, 38, 56, 61, 62], "synchron": [21, 25, 42, 43, 44, 45, 46, 48, 50, 56, 60, 61, 62], "lock": [21, 25, 53, 57], "handl": [21, 24, 25, 26, 27, 29, 31, 32, 49, 53, 56, 57, 58], "format": [21, 25, 27, 29, 53, 57], "port": [21, 25, 31, 32, 34, 38, 40, 56, 62, 65], "wait": [21, 25, 33, 34, 36, 38, 56, 61, 62], "establish": [21, 25, 33, 36], "connect": [21, 25, 28, 31, 32, 33, 34, 36, 38], "second": [21, 25, 31, 38], "forc": [21, 25], "found": [21, 25], "invalid": [21, 25], "warn": [21, 25], "log": [21, 25, 53, 57], "size": [21, 25, 27, 29, 30, 32, 43, 48, 50], "byte": [21, 25, 32], "wait_for_start_talk": [21, 25], "timeout": [21, 25, 31], "talk": [21, 25], "success": [21, 25], "maximum": [21, 25, 34, 43, 48, 50, 57, 68], "give": [21, 25], "up": [21, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 56, 57, 62, 63], "receiv": [21, 25], "wait_for_stop_talk": [21, 25], "write_and_wait_for_start_talk": [21, 25], "tri": [21, 25], "resend": [21, 25], "write_and_wait_for_stop_talk": [21, 25], "return_data": [21, 25], "upon": [21, 25], "statu": [21, 25, 33, 36], "write_and_wait_for_start_and_stop_talk": [21, 25], "event": [21, 25, 47, 49, 53, 57], "__getattr__": [21, 25, 33, 37, 38, 56, 61, 62], "forward": [21, 25], "access": [21, 25, 31, 33, 34, 37, 38, 53, 55, 56, 57, 61, 62], "parent": [21, 25, 47, 49], "prevent": [21, 25], "concurr": [21, 25], "stepper": [21, 26, 33, 34, 35, 36, 37, 38], "motor": [21, 26, 33, 34, 35, 36, 37, 38], "ui": [21, 26, 47, 68], "element": [21, 26], "spadsensor": [21, 27, 28, 29, 30, 31, 32, 43, 48, 50], "photon": [21, 27, 29], "avalanch": [21, 27, 29], "diod": [21, 27, 29], "measur": [21, 27, 28, 29, 31, 32], "collect": [21, 27, 29, 30, 31, 33, 37], "analyz": [21, 27, 29], "system": [21, 27, 29, 33, 34, 37, 38, 50, 53, 57], "spaddatatyp": [21, 27, 29], "indic": [21, 27, 28, 29, 31, 32], "discret": [21, 27, 28, 29, 32], "rang": [21, 27, 28, 29, 31, 32, 35, 40, 68], "total": [21, 27, 28, 29, 32, 35], "distanc": [21, 27, 28, 29, 32], "equal": [21, 27, 28, 29, 32], "multipli": [21, 27, 28, 29, 32], "spatial": [21, 27, 28, 29, 32], "pixel": [21, 27, 28, 29, 31, 32], "point": [21, 27, 28, 29, 32, 33, 36], "respect": [21, 27, 28, 29, 32], "spadsensorconfig": [21, 27, 28, 29, 30, 31, 32], "data_typ": [21, 27, 29], "num_pixel": [21, 27, 28, 29, 32], "dummysteppermotor": [21, 33, 36], "dummi": [21, 33, 36, 37, 50], "doe": [21, 33, 36, 37, 50, 53, 56, 62, 63, 68], "noth": [21, 33, 36, 37, 53], "test": [21, 28, 33, 36, 50], "ax": [21, 33, 34, 35, 36, 37], "attach": [21, 33, 34, 36, 37, 53, 57], "steppermotor": [21, 33, 34, 36, 37, 38], "control": [21, 33, 34, 35, 36, 37, 38, 53], "unifi": [21, 33, 36, 38], "common": [21, 28, 31, 32, 33, 36], "move": [21, 30, 33, 34, 35, 36, 37, 38], "includ": [21, 32, 33, 36, 66], "compat": [21, 33, 36, 68], "expect": [21, 33, 36], "behavior": [21, 28, 33, 36, 56, 61, 62], "shut": [21, 33, 36, 38], "power": [21, 33, 36], "avoid": [21, 33, 36], "damag": [21, 33, 36], "memori": [21, 33, 36, 55], "leak": [21, 33, 36], "its": [21, 24, 26, 27, 29, 32, 33, 34, 36, 38, 52, 56, 62, 65, 67], "predefin": [21, 33, 34, 36], "could": [21, 33, 36, 53, 57], "involv": [21, 33, 36], "limit": [21, 33, 34, 36, 43, 48, 50], "switch": [21, 33, 36], "trigger": [21, 33, 36], "move_to": [21, 33, 34, 36, 37, 38], "absolut": [21, 33, 34, 36, 38], "interpret": [21, 33, 36], "characterist": [21, 33, 36], "angl": [21, 33, 36], "move_bi": [21, 33, 34, 36, 37, 38], "relative_posit": [21, 33, 34, 36, 38], "amount": [21, 33, 34, 36, 38], "degre": [21, 31, 33, 36], "unit": [21, 33, 36, 37], "wait_for_mov": [21, 33, 34, 36, 38], "complet": [21, 33, 34, 36, 38], "block": [21, 33, 36, 37, 42, 43, 44, 45, 46, 48, 50, 56, 61, 62], "execut": [21, 33, 36, 49, 50], "reach": [21, 28, 33, 36], "is_mov": [21, 33, 36, 37, 38], "steppermotorsystem": [21, 33, 34, 37, 38], "whole": [21, 33, 34, 37], "gantri": [21, 33, 37, 53], "multi": [21, 31, 33, 34, 37, 56, 61, 62], "axi": [21, 33, 34, 35, 37, 43, 48, 50], "rotat": [21, 33, 37], "stage": [21, 33, 37], "passthrough": [21, 33, 37, 38], "underli": [21, 33, 37, 38, 53, 56, 57, 61, 62], "steppermotorsystemaxi": [21, 33, 34, 37], "kwd": [21, 27, 29, 31, 32, 33, 37], "pair": [21, 31, 33, 37], "enum": [21, 27, 29, 31, 32, 33, 37, 68], "red": [21, 31, 33, 37], "blue": [21, 31, 33, 37], "green": [21, 31, 33, 37], "lookup": [21, 31, 33, 37, 53, 57], "over": [21, 31, 33, 37], "know": [21, 31, 33, 37], "mani": [21, 31, 33, 37, 52, 56, 67], "member": [21, 27, 29, 31, 32, 33, 37], "thei": [21, 31, 33, 37, 53, 57], "len": [21, 31, 33, 37], "document": [21, 31, 33, 37], "detail": [21, 31, 33, 37], "__repr__": [21, 27, 29, 31, 32, 33, 37, 53, 56, 57, 61, 62], "repr": [21, 27, 29, 31, 32, 33, 37, 53, 57], "__dir__": [21, 27, 29, 31, 32, 33, 37], "public": [21, 27, 29, 31, 32, 33, 37], "interest": [21, 27, 29, 31, 32, 33, 37, 53, 57], "__format__": [21, 27, 29, 31, 32, 33, 37], "format_spec": [21, 27, 29, 31, 32, 33, 37], "formatt": [21, 27, 29, 31, 32, 33, 37, 53, 57], "typeerror": [21, 27, 29, 31, 32, 33, 37], "__hash__": [21, 27, 29, 31, 32, 33, 37], "hash": [21, 27, 29, 31, 32, 33, 37], "__reduce_ex__": [21, 27, 29, 31, 32, 33, 37], "proto": [21, 27, 29, 31, 32, 33, 37], "helper": [21, 27, 29, 31, 32, 33, 37, 68], "vivetrackersensorconfig": 24, "vivetrack": 24, "cfg": 24, "json": 24, "additional_arg": 24, "pysurv": 24, "simplecontext": 24, "lead": 24, "poser": 24, "mpfit": 24, "vivetrackerpos": 24, "sensordata": [24, 26, 27, 29, 31, 32], "row": [24, 26, 30, 31, 32], "get_data": [24, 26, 27, 29, 32], "has_data": [24, 26, 27, 29, 32], "commun": [25, 31, 32], "conveni": 25, "verify_has_data": [26, 27, 29, 32], "flag": [27, 29, 32], "__contains__": [27, 29], "least": [27, 29], "__iter__": [27, 29], "definit": [27, 29], "order": [27, 29], "spadsensordata": [27, 29, 31, 32], "incom": [27, 29], "appropri": [27, 29, 57], "calculate_point_cloud": [27, 29, 32], "subpixel_sampl": [27, 29, 32], "bilinear_interpol": [27, 29, 32], "calcul": [27, 29, 32], "cloud": [27, 29, 32], "precomput": [27, 29, 32], "mm": [27, 29, 32], "per": [27, 29, 31, 32, 38], "interpol": [27, 29, 32], "n": [27, 29, 32], "meter": [27, 29, 32], "calculate_dist": [27, 29, 32], "window": [27, 29, 30, 32, 34, 47, 49], "threshold": [27, 29, 32], "pklspadsensorconfig": 28, "pklspadsensor": 28, "loop": [28, 42, 43, 44, 45, 46, 47, 48, 50, 56, 58], "fake": 28, "simul": 28, "op": 28, "spadwrapperconfig": 30, "wrap": [30, 53, 56, 57, 60, 61, 62], "spadwrapp": 30, "expos": 30, "simplifi": 30, "spadmergewrapperconfig": 30, "merge_row": 30, "merge_col": 30, "column": [30, 32], "merge_al": 30, "spadmergewrapp": 30, "spadmovingaveragewrapperconfig": 30, "window_s": 30, "spadmovingaveragewrapp": 30, "zone": 31, "flight": [31, 32], "am": 31, "wide": 31, "vcsel": 31, "4x4": [31, 32], "3x6": 31, "multizon": 31, "output": [31, 32, 49, 53, 55, 57], "tmf8828sensor": 31, "tmf882x": [31, 40], "arduino": [31, 38, 56, 62, 65], "shield": 31, "spadid": [31, 40], "num_channel": 31, "channel": [31, 34, 43, 48, 50], "id": [31, 38], "active_channels_per_subcaptur": 31, "subcaptur": 31, "fov": 31, "fovx": 31, "fovi": 31, "rangemod": [31, 40], "timing_resolut": 31, "tmf8828config": 31, "spad_id": [31, 40], "range_mod": [31, 40], "long": [31, 40], "short": [31, 40], "tmf8828data": 31, "inform": [31, 32, 57], "align": [31, 32], "rout": [31, 32], "handler": [31, 32, 53, 55, 57], "succe": [31, 32], "across": [31, 66], "high": 31, "baudrat": [31, 32], "baud": [31, 32], "rate": [31, 32], "framework": 32, "rangingmod": 32, "vl53l8chconfig": 32, "uint16_t": 32, "ranging_mod": 32, "ranging_frequency_hz": 32, "frequenc": 32, "hz": 32, "integration_time_m": 32, "integr": [32, 50], "millisecond": 32, "cnh_start_bin": 32, "cnh": 32, "cnh_num_bin": 32, "cnh_subsampl": 32, "subsampl": 32, "agg_start_x": 32, "aggreg": 32, "x": 32, "coordin": 32, "agg_start_i": 32, "y": [32, 43, 48, 50], "agg_merge_x": 32, "agg_merge_i": 32, "agg_col": 32, "agg_row": 32, "add_back_ambi": 32, "back": 32, "ambient": 32, "light": [32, 54], "preprocess": 32, "remov": [32, 53, 57], "user": [32, 42, 43, 49, 50, 53, 57], "never": 32, "pack": 32, "vl53l8chsharedconfig": 32, "share": [32, 56, 61, 62, 66], "vl53l8chconfig4x4": 32, "vl53l8chconfig8x8": 32, "vl53l8chdata": 32, "vl53l8chsensor": 32, "acquisit": [32, 53, 57], "steppercontrol": [33, 35], "get_posit": [33, 35], "steppercontrollerconfig": [33, 35], "steppermotorconfig": [33, 36, 38], "steppermotorsystemconfig": [33, 37, 38], "kinesi": 34, "kinesissteppermotor": 34, "thorlab": 34, "c": [34, 54], "pylablib": 34, "throlab": 34, "kinesismotor": 34, "linux": 34, "is_rack_system": 34, "scale": 34, "movement": 34, "part": 34, "rack": 34, "max_veloc": 34, "acceler": 34, "lower_limit": 34, "upper_limit": 34, "clip_at_limit": 34, "initial_posit": 34, "reference_posit": 34, "check_hom": 34, "veloc": 34, "lower": 34, "upper": 34, "dure": [34, 53, 57], "opposit": [34, 38], "successfulli": 34, "healthi": [34, 38], "kinesisrotationstag": 34, "kinesissteppermotorsystem": 34, "azimuthelevationsystem": 34, "azimuth": 34, "elev": 34, "setup": [34, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 58], "controlleraxisconfig": 35, "flip": 35, "snakecontrolleraxisconfig": 35, "min": [35, 68], "max": [35, 68], "along": 35, "snakesteppercontrollerconfig": 35, "uniqu": 35, "snakesteppercontrollerconfigxi": 35, "snakesteppercontrol": 35, "exce": 35, "dummysteppersystem": 37, "telemetrixsteppermotor": 38, "telemetrixsteppermotorsystem": 38, "telemetrix": 38, "cncshield": 38, "telemetrixsteppermotorconfig": 38, "board": 38, "distance_pin": 38, "pin": 38, "direction_pin": 38, "enable_pin": 38, "cm_per_rev": 38, "centimet": 38, "revolut": 38, "steps_per_rev": 38, "speed": [38, 54], "cm": 38, "flip_direct": 38, "direct": [38, 52, 56, 67], "effect": 38, "set_current_posit": 38, "explicitli": 38, "set_target_position_cm": 38, "relative_cm": 38, "set_absolute_target_position_cm": 38, "position_cm": 38, "cm_to_rev": 38, "revs_to_cm": 38, "rev": 38, "stepper_": 38, "motorx": 38, "target_posit": 38, "equat": 38, "_board": 38, "stepper_target_posit": 38, "requir": [38, 56, 61, 62], "telemetrixsteppermotorsystemconfig": 38, "arduino_wait": 38, "telemetrixsteppermotorxconfig": 38, "telemetrixsteppermotoryconfig": 38, "telemetrixsteppermotorzconfig": 38, "dualdrive2axisgantryxconfig": 38, "dualdrive2axisgantryy1config": 38, "dualdrive2axisgantryy2config": 38, "dualdrive2axisgantryconfig": 38, "singledrive1axisgantryxconfig": 38, "singledrive1axisgantryyconfig": 38, "singledrive1axisgantryconfig": 38, "camera_view": [39, 52], "flash": [39, 52], "jogger": [39, 52], "tmf8828_calibr": 40, "id6": 40, "id15": 40, "four": 40, "legaci": 40, "twice": 40, "feed": 41, "dashboardconfig": [42, 43, 44, 45, 47, 48, 49, 50], "gui": [42, 43], "num_fram": [42, 43], "000": [42, 43], "user_callback": [42, 43, 50], "callabl": [42, 43, 53, 55, 56, 57, 58], "callback": [42, 43, 50, 56, 60, 62], "accept": [42, 43, 56, 58], "independ": [42, 43, 44, 45, 46, 47, 48, 50], "capabl": [42, 43, 44, 45, 46, 48, 50], "being": [42, 43, 44, 45, 46, 48, 50, 53, 56, 57, 62, 66], "non": [42, 43, 44, 45, 46, 48, 50], "mocap_dashboard": 43, "spad_dashboard": 43, "pyqtgraph": [43, 48, 50], "spaddashboard": [43, 48, 49, 50], "spaddashboardconfig": [43, 48, 49, 50], "min_bin": [43, 48, 50], "minimum": [43, 48, 50, 68], "max_bin": [43, 48, 50], "autoscal": [43, 48, 50], "ylim": [43, 48, 50], "channel_mask": [43, 48, 50], "dashmotioncapturedashboardconfig": 44, "motioncapturedashboardconfig": [44, 45, 46, 47], "dashmotioncapturedashboard": 44, "motioncapturedashboard": [44, 45, 46, 47], "motioncaptur": [44, 45, 46, 47], "fig": 44, "pyqtgraphmotioncapturedashboardconfig": 47, "3d": [47, 69], "more": [47, 53, 57], "dashboardwindow": [47, 49], "qwidget": 47, "hold": 47, "opengl": 47, "glviewwidget": 47, "keypressev": [47, 49], "quit": 47, "q": 47, "esc": 47, "pyqtgraphmotioncapturedashboard": 47, "enter": 47, "qt": 47, "period": [47, 55], "timer": 47, "send": 47, "applic": [47, 49, 53, 57, 66], "real": [49, 50], "pyqtgraphdashboardconfig": 49, "panel": 49, "right": 49, "init_ui": 49, "plot": [49, 59], "enable_point_cloud_view": 49, "resiz": 49, "d": 49, "pane": 49, "grid": 49, "enable_depth_view": 49, "press": 49, "exit": 49, "pyqtgraphdashboard": [49, 50], "layout": 49, "fullscreen": 49, "headless": 49, "three": 50, "matplotlibdashboard": 50, "matplotlib": [50, 56], "dashdashboard": 50, "dash": 50, "plotli": 50, "web": 50, "my_callback": 50, "dummyspaddashboardconfig": 50, "dummyspaddashboard": 50, "purpos": 50, "firmwar": 51, "line": 52, "plu": [52, 56, 67], "factori": [52, 56, 67, 68], "registr": [52, 56, 67], "myregistri": [52, 56, 67], "foo": [52, 56, 67], "bar": [52, 56, 67], "my_modul": [52, 56, 67], "toolregistri": 52, "joystick": 53, "like": 53, "outputcaptur": 53, "buffer": [53, 55], "stdout": 53, "stderr": 53, "logbufferhandl": 53, "filter": [53, 55, 57], "emit": [53, 57], "whatev": 53, "take": [53, 55], "intend": 53, "createlock": [53, 57], "acquir": [53, 57], "setlevel": [53, 57], "level": [53, 57], "condition": [53, 57], "emiss": [53, 57], "setformatt": [53, 57], "fmt": [53, 57], "flush": [53, 55, 57], "tidi": [53, 57], "intern": [53, 57], "_handler": [53, 57], "overridden": [53, 57, 68], "handleerror": [53, 57], "occur": [53, 57], "except": [53, 57], "raiseexcept": [53, 57], "silent": [53, 57], "what": [53, 57], "mostli": [53, 57], "most": [53, 57], "care": [53, 57], "about": [53, 57], "howev": [53, 57], "wish": [53, 57], "addfilt": [53, 57], "removefilt": [53, 57], "determin": [53, 57], "loggabl": [53, 57], "consult": [53, 57], "veto": [53, 57], "place": [53, 57], "further": [53, 57], "just": [53, 56, 57, 58], "12": [53, 57], "logrecord": [53, 57], "instead": [53, 57], "modifi": [53, 57, 68], "300000000": 54, "pklhandler": 55, "overwrit": 55, "update_index_kwarg": 55, "append": [55, 56, 57, 61, 62], "random": 55, "entir": 55, "another_kei": 55, "another_valu": 55, "update_index": 55, "prune_fn": 55, "lambda": 55, "_": [55, 56, 58], "build": 55, "scan": 55, "_index": 55, "exclud": 55, "first": 55, "load_al": 55, "extract": 55, "pklreader": 55, "videowrit": 55, "fp": 55, "flush_interv": 55, "interv": 55, "mp4": 55, "30": 55, "remain": 55, "delet": 55, "constant": 56, "file_handl": 56, "logger": 56, "cleanup_on_keyboard_interrupt": [56, 58], "essenti": [56, 58], "context": [56, 58], "counter": [56, 58], "begin": [56, 58], "continu": [56, 58], "__enter__": [56, 58], "__exit__": [56, 58], "__": [56, 58], "call_async": [56, 60, 62], "fn": [56, 60, 62], "asynchron": [56, 60, 62], "call_async_gath": [56, 60, 62], "call_async_valu": [56, 60, 62], "singletonabcmeta": [56, 62, 66], "metaclass": [56, 62, 66], "combin": [56, 62, 66], "enforc": [56, 62, 66], "while": [56, 62, 66], "virtual": [56, 62, 66], "decor": [56, 62, 66, 67], "__instancecheck__": [56, 62, 66], "isinst": [56, 62, 66], "cl": [56, 62, 65, 66], "__subclasscheck__": [56, 62, 66], "issubclass": [56, 62, 66], "__call__": [56, 62, 66], "singletonmeta": [56, 62, 66], "blockingdequ": [56, 61, 62], "dequ": [56, 61, 62], "condit": [56, 61, 62], "suitabl": [56, 61, 62], "notifi": [56, 61, 62], "manner": [56, 61, 62], "find_device_by_label": [56, 62, 65], "label": [56, 62, 65], "find": [56, 62, 65], "volum": [56, 62, 65], "search": [56, 62, 65], "find_port": [56, 62, 65], "arduino_upload": [56, 62, 65], "upload": [56, 62, 65], "sketch": [56, 62, 65], "get_object": [56, 62, 63], "verbos": [56, 62, 63], "look": [56, 62, 63], "entiti": [56, 62, 63], "dotpath": [56, 62, 63], "lift": [56, 62, 63], "recurs": [56, 67], "approach": [56, 67], "ancestor": [56, 67], "tqdm": 57, "messag": 57, "consol": 57, "get_logg": 57, "info": 57, "filehandl": 57, "streamhandl": 57, "doesn": 57, "becaus": 57, "delai": 57, "superclass": 57, "w": 57, "_close": 57, "42378": 57, "setstream": 57, "old": 57, "wasn": 57, "tqdmstreamhandl": 57, "trail": 57, "newlin": 57, "present": 57, "traceback": 57, "print_except": 57, "encod": 57, "loggermaxlevelfilt": 57, "max_level": 57, "deem": 57, "100": 58, "set_matplotlib_styl": 59, "use_scienceplot": 59, "asyncio_util": 62, "blocking_dequ": 62, "serial_util": 62, "_py_abc": [62, 66], "abcmeta": [62, 66], "miscellan": 63, "singleton_meta": 66, "mysingleton": 66, "instance1": 66, "instance2": 66, "assert": 66, "my_registri": 67, "myclass": 67, "hello": 67, "lazili": 67, "myotherclass": 67, "other_inst": 67, "some_arg": 67, "submodul": 67, "individu": 68, "dirti": 68, "last": 68, "ideal": 68, "731": 68, "default_factori": 68, "sensorset": 68, "rangeset": 68, "valid": 68, "optionset": 68, "from_enum": 68, "boolset": 68, "boolean": 68, "space": 69}, "objects": {"": [[39, 0, 0, "-", "cc_hardware"]], "cc_hardware": [[13, 0, 0, "-", "algos"], [21, 0, 0, "-", "drivers"], [52, 0, 0, "-", "tools"], [56, 0, 0, "-", "utils"]], "cc_hardware.algos": [[9, 0, 0, "-", "algorithm"], [10, 0, 0, "-", "aruco"], [11, 0, 0, "-", "backprojection"], [12, 0, 0, "-", "datasets"], [14, 0, 0, "-", "models"]], "cc_hardware.algos.algorithm": [[9, 1, 1, "", "Algorithm"]], "cc_hardware.algos.algorithm.Algorithm": [[9, 2, 1, "", "close"], [9, 2, 1, "", "create_from_registry"], [9, 3, 1, "", "is_okay"], [9, 2, 1, "", "register"], [9, 2, 1, "", "registered"], [9, 2, 1, "", "registry"], [9, 2, 1, "", "run"]], "cc_hardware.algos.aruco": [[10, 1, 1, "", "ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm": [[10, 2, 1, "", "close"], [10, 2, 1, "", "create_from_registry"], [10, 3, 1, "", "is_okay"], [10, 2, 1, "", "register"], [10, 2, 1, "", "registered"], [10, 2, 1, "", "registry"], [10, 2, 1, "", "run"]], "cc_hardware.algos.datasets": [[12, 1, 1, "", "HistogramDataset"]], "cc_hardware.algos.datasets.HistogramDataset": [[12, 2, 1, "", "__add__"], [12, 2, 1, "", "__getitem__"], [12, 2, 1, "", "__len__"], [12, 2, 1, "", "augment"], [12, 2, 1, "", "clip_negative"], [12, 2, 1, "", "get_bin_num"], [12, 2, 1, "", "get_mean_capture"], [12, 2, 1, "", "get_raw_bin_num"], [12, 2, 1, "", "reset_transformations"], [12, 2, 1, "", "set_end_bin"], [12, 2, 1, "", "set_start_bin"], [12, 2, 1, "", "set_zero"]], "cc_hardware.algos.models": [[14, 1, 1, "", "DeepLocation8"], [14, 4, 1, "", "initialize_weights"]], "cc_hardware.drivers": [[21, 1, 1, "", "Camera"], [21, 1, 1, "", "CameraConfig"], [21, 1, 1, "", "DummyStepperMotor"], [21, 1, 1, "", "MotionCaptureSensor"], [21, 1, 1, "", "MotionCaptureSensorConfig"], [21, 1, 1, "", "SPADSensor"], [21, 1, 1, "", "SPADSensorConfig"], [21, 1, 1, "", "SafeSerial"], [21, 1, 1, "", "Sensor"], [21, 1, 1, "", "SensorConfig"], [21, 1, 1, "", "StepperMotor"], [21, 1, 1, "", "StepperMotorSystem"], [21, 1, 1, "", "StepperMotorSystemAxis"], [17, 0, 0, "-", "cameras"], [22, 0, 0, "-", "mocap"], [25, 0, 0, "-", "safe_serial"], [26, 0, 0, "-", "sensor"], [27, 0, 0, "-", "spads"], [33, 0, 0, "-", "stepper_motors"]], "cc_hardware.drivers.Camera": [[21, 2, 1, "", "__del__"], [21, 2, 1, "", "accumulate"], [21, 2, 1, "", "calibrate"], [21, 2, 1, "", "close"], [21, 3, 1, "", "config"], [21, 2, 1, "", "create_from_config"], [21, 2, 1, "", "create_from_registry"], [21, 3, 1, "", "distortion_coefficients"], [21, 3, 1, "", "intrinsic_matrix"], [21, 3, 1, "", "is_okay"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 3, 1, "", "resolution"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "update"]], "cc_hardware.drivers.CameraConfig": [[21, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__setstate__"], [21, 2, 1, "", "__str__"], [21, 2, 1, "", "compose"], [21, 5, 1, "", "config"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "create"], [21, 2, 1, "", "create_from_registry"], [21, 5, 1, "", "custom"], [21, 2, 1, "", "instantiate"], [21, 2, 1, "", "load"], [21, 2, 1, "", "merge_with"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 2, 1, "", "save"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.MotionCaptureSensor": [[21, 2, 1, "", "__del__"], [21, 2, 1, "", "accumulate"], [21, 2, 1, "", "calibrate"], [21, 2, 1, "", "close"], [21, 3, 1, "", "config"], [21, 2, 1, "", "create_from_config"], [21, 2, 1, "", "create_from_registry"], [21, 3, 1, "", "is_okay"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "update"]], "cc_hardware.drivers.MotionCaptureSensorConfig": [[21, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__setstate__"], [21, 2, 1, "", "__str__"], [21, 2, 1, "", "compose"], [21, 5, 1, "", "config"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "create"], [21, 2, 1, "", "create_from_registry"], [21, 5, 1, "", "custom"], [21, 2, 1, "", "instantiate"], [21, 2, 1, "", "load"], [21, 2, 1, "", "merge_with"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 2, 1, "", "save"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.SPADSensor": [[21, 2, 1, "", "__del__"], [21, 2, 1, "", "accumulate"], [21, 2, 1, "", "calibrate"], [21, 2, 1, "", "close"], [21, 3, 1, "", "config"], [21, 2, 1, "", "create_from_config"], [21, 2, 1, "", "create_from_registry"], [21, 3, 1, "", "is_okay"], [21, 3, 1, "", "num_bins"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 3, 1, "", "resolution"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "update"]], "cc_hardware.drivers.SPADSensorConfig": [[21, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__setstate__"], [21, 2, 1, "", "__str__"], [21, 2, 1, "", "compose"], [21, 5, 1, "", "config"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "create"], [21, 2, 1, "", "create_from_registry"], [21, 5, 1, "", "custom"], [21, 2, 1, "", "instantiate"], [21, 2, 1, "", "load"], [21, 2, 1, "", "merge_with"], [21, 3, 1, "", "num_pixels"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 2, 1, "", "save"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.SafeSerial": [[21, 2, 1, "", "__getattr__"], [21, 2, 1, "", "create"], [21, 2, 1, "", "read"], [21, 2, 1, "", "wait_for_start_talk"], [21, 2, 1, "", "wait_for_stop_talk"], [21, 2, 1, "", "write"], [21, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [21, 2, 1, "", "write_and_wait_for_start_talk"], [21, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.Sensor": [[21, 2, 1, "", "__del__"], [21, 2, 1, "", "calibrate"], [21, 2, 1, "", "close"], [21, 3, 1, "", "config"], [21, 2, 1, "", "create_from_config"], [21, 2, 1, "", "create_from_registry"], [21, 3, 1, "", "is_okay"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "update"]], "cc_hardware.drivers.SensorConfig": [[21, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__setstate__"], [21, 2, 1, "", "__str__"], [21, 2, 1, "", "compose"], [21, 5, 1, "", "config"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "create"], [21, 2, 1, "", "create_from_registry"], [21, 5, 1, "", "custom"], [21, 2, 1, "", "instantiate"], [21, 2, 1, "", "load"], [21, 2, 1, "", "merge_with"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 2, 1, "", "save"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.StepperMotor": [[21, 2, 1, "", "close"], [21, 3, 1, "", "config"], [21, 2, 1, "", "create_from_config"], [21, 2, 1, "", "create_from_registry"], [21, 2, 1, "", "home"], [21, 3, 1, "", "is_moving"], [21, 3, 1, "", "is_okay"], [21, 2, 1, "", "move_by"], [21, 2, 1, "", "move_to"], [21, 3, 1, "", "position"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.StepperMotorSystem": [[21, 2, 1, "", "__getattr__"], [21, 3, 1, "", "axes"], [21, 2, 1, "", "close"], [21, 3, 1, "", "config"], [21, 2, 1, "", "create_from_config"], [21, 2, 1, "", "create_from_registry"], [21, 3, 1, "", "is_moving"], [21, 3, 1, "", "is_okay"], [21, 2, 1, "", "move_by"], [21, 2, 1, "", "move_to"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"]], "cc_hardware.drivers.StepperMotorSystemAxis": [[21, 2, 1, "", "__dir__"], [21, 2, 1, "", "__format__"], [21, 2, 1, "", "__hash__"], [21, 2, 1, "", "__reduce_ex__"], [21, 2, 1, "", "__repr__"], [21, 2, 1, "", "__str__"], [21, 2, 1, "", "name"], [21, 2, 1, "", "value"]], "cc_hardware.drivers.cameras": [[17, 1, 1, "", "Camera"], [17, 1, 1, "", "CameraConfig"], [15, 0, 0, "-", "camera"], [16, 0, 0, "-", "flir"], [18, 0, 0, "-", "pkl"], [19, 0, 0, "-", "realsense"], [20, 0, 0, "-", "usb"]], "cc_hardware.drivers.cameras.Camera": [[17, 2, 1, "", "__del__"], [17, 2, 1, "", "accumulate"], [17, 2, 1, "", "calibrate"], [17, 2, 1, "", "close"], [17, 3, 1, "", "config"], [17, 2, 1, "", "create_from_config"], [17, 2, 1, "", "create_from_registry"], [17, 3, 1, "", "distortion_coefficients"], [17, 3, 1, "", "intrinsic_matrix"], [17, 3, 1, "", "is_okay"], [17, 2, 1, "", "register"], [17, 2, 1, "", "registered"], [17, 2, 1, "", "registry"], [17, 3, 1, "", "resolution"], [17, 3, 1, "", "settings"], [17, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.CameraConfig": [[17, 2, 1, "", "__getstate__"], [17, 2, 1, "", "__setstate__"], [17, 2, 1, "", "__str__"], [17, 2, 1, "", "compose"], [17, 5, 1, "", "config"], [17, 2, 1, "", "copy"], [17, 2, 1, "", "create"], [17, 2, 1, "", "create_from_registry"], [17, 5, 1, "", "custom"], [17, 2, 1, "", "instantiate"], [17, 2, 1, "", "load"], [17, 2, 1, "", "merge_with"], [17, 2, 1, "", "register"], [17, 2, 1, "", "registered"], [17, 2, 1, "", "registry"], [17, 2, 1, "", "save"], [17, 3, 1, "", "settings"], [17, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.cameras.camera": [[15, 1, 1, "", "Camera"], [15, 1, 1, "", "CameraConfig"]], "cc_hardware.drivers.cameras.camera.Camera": [[15, 2, 1, "", "__del__"], [15, 2, 1, "", "accumulate"], [15, 2, 1, "", "calibrate"], [15, 2, 1, "", "close"], [15, 3, 1, "", "config"], [15, 2, 1, "", "create_from_config"], [15, 2, 1, "", "create_from_registry"], [15, 3, 1, "", "distortion_coefficients"], [15, 3, 1, "", "intrinsic_matrix"], [15, 3, 1, "", "is_okay"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 3, 1, "", "resolution"], [15, 3, 1, "", "settings"], [15, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.camera.CameraConfig": [[15, 2, 1, "", "__getstate__"], [15, 2, 1, "", "__setstate__"], [15, 2, 1, "", "__str__"], [15, 2, 1, "", "compose"], [15, 5, 1, "", "config"], [15, 2, 1, "", "copy"], [15, 2, 1, "", "create"], [15, 2, 1, "", "create_from_registry"], [15, 5, 1, "", "custom"], [15, 2, 1, "", "instantiate"], [15, 2, 1, "", "load"], [15, 2, 1, "", "merge_with"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 2, 1, "", "save"], [15, 3, 1, "", "settings"], [15, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.cameras.flir": [[16, 1, 1, "", "FlirCamera"], [16, 1, 1, "", "GrasshopperFlirCamera"]], "cc_hardware.drivers.cameras.flir.FlirCamera": [[16, 2, 1, "", "__del__"], [16, 2, 1, "", "accumulate"], [16, 2, 1, "", "calibrate"], [16, 2, 1, "", "close"], [16, 3, 1, "", "config"], [16, 2, 1, "", "create_from_config"], [16, 2, 1, "", "create_from_registry"], [16, 3, 1, "", "distortion_coefficients"], [16, 3, 1, "", "intrinsic_matrix"], [16, 3, 1, "", "is_okay"], [16, 2, 1, "", "register"], [16, 2, 1, "", "registered"], [16, 2, 1, "", "registry"], [16, 3, 1, "", "resolution"], [16, 3, 1, "", "settings"], [16, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera": [[16, 2, 1, "", "__del__"], [16, 2, 1, "", "accumulate"], [16, 2, 1, "", "calibrate"], [16, 2, 1, "", "close"], [16, 3, 1, "", "config"], [16, 2, 1, "", "create_from_config"], [16, 2, 1, "", "create_from_registry"], [16, 3, 1, "", "distortion_coefficients"], [16, 3, 1, "", "intrinsic_matrix"], [16, 3, 1, "", "is_okay"], [16, 2, 1, "", "register"], [16, 2, 1, "", "registered"], [16, 2, 1, "", "registry"], [16, 3, 1, "", "resolution"], [16, 3, 1, "", "settings"], [16, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.pkl": [[18, 1, 1, "", "PklCamera"]], "cc_hardware.drivers.cameras.pkl.PklCamera": [[18, 2, 1, "", "__del__"], [18, 2, 1, "", "accumulate"], [18, 2, 1, "", "calibrate"], [18, 2, 1, "", "close"], [18, 3, 1, "", "config"], [18, 2, 1, "", "create_from_config"], [18, 2, 1, "", "create_from_registry"], [18, 3, 1, "", "distortion_coefficients"], [18, 3, 1, "", "intrinsic_matrix"], [18, 3, 1, "", "is_okay"], [18, 2, 1, "", "register"], [18, 2, 1, "", "registered"], [18, 2, 1, "", "registry"], [18, 3, 1, "", "resolution"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.realsense": [[19, 1, 1, "", "RealsenseCamera"], [19, 1, 1, "", "RealsenseConfig"]], "cc_hardware.drivers.cameras.realsense.RealsenseCamera": [[19, 2, 1, "", "accumulate"], [19, 2, 1, "", "close"], [19, 3, 1, "", "config"], [19, 3, 1, "", "distortion_coefficients"], [19, 3, 1, "", "intrinsic_matrix"], [19, 3, 1, "", "is_okay"], [19, 3, 1, "", "resolution"]], "cc_hardware.drivers.cameras.usb": [[20, 1, 1, "", "USBCamera"], [20, 1, 1, "", "USBCameraConfig"]], "cc_hardware.drivers.cameras.usb.USBCamera": [[20, 2, 1, "", "__del__"], [20, 2, 1, "", "accumulate"], [20, 2, 1, "", "calibrate"], [20, 2, 1, "", "close"], [20, 3, 1, "", "config"], [20, 2, 1, "", "create_from_config"], [20, 2, 1, "", "create_from_registry"], [20, 3, 1, "", "distortion_coefficients"], [20, 3, 1, "", "intrinsic_matrix"], [20, 3, 1, "", "is_okay"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 3, 1, "", "resolution"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.usb.USBCameraConfig": [[20, 2, 1, "", "__getstate__"], [20, 2, 1, "", "__setstate__"], [20, 2, 1, "", "__str__"], [20, 2, 1, "", "compose"], [20, 5, 1, "", "config"], [20, 2, 1, "", "copy"], [20, 2, 1, "", "create"], [20, 2, 1, "", "create_from_registry"], [20, 5, 1, "", "custom"], [20, 2, 1, "", "instantiate"], [20, 2, 1, "", "load"], [20, 2, 1, "", "merge_with"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 2, 1, "", "save"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.mocap": [[22, 1, 1, "", "MotionCaptureSensor"], [22, 1, 1, "", "MotionCaptureSensorConfig"], [23, 0, 0, "-", "mocap"], [24, 0, 0, "-", "vive"]], "cc_hardware.drivers.mocap.MotionCaptureSensor": [[22, 2, 1, "", "__del__"], [22, 2, 1, "", "accumulate"], [22, 2, 1, "", "calibrate"], [22, 2, 1, "", "close"], [22, 3, 1, "", "config"], [22, 2, 1, "", "create_from_config"], [22, 2, 1, "", "create_from_registry"], [22, 3, 1, "", "is_okay"], [22, 2, 1, "", "register"], [22, 2, 1, "", "registered"], [22, 2, 1, "", "registry"], [22, 3, 1, "", "settings"], [22, 2, 1, "", "update"]], "cc_hardware.drivers.mocap.MotionCaptureSensorConfig": [[22, 2, 1, "", "__getstate__"], [22, 2, 1, "", "__setstate__"], [22, 2, 1, "", "__str__"], [22, 2, 1, "", "compose"], [22, 5, 1, "", "config"], [22, 2, 1, "", "copy"], [22, 2, 1, "", "create"], [22, 2, 1, "", "create_from_registry"], [22, 5, 1, "", "custom"], [22, 2, 1, "", "instantiate"], [22, 2, 1, "", "load"], [22, 2, 1, "", "merge_with"], [22, 2, 1, "", "register"], [22, 2, 1, "", "registered"], [22, 2, 1, "", "registry"], [22, 2, 1, "", "save"], [22, 3, 1, "", "settings"], [22, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.mocap.mocap": [[23, 1, 1, "", "MotionCaptureSensor"], [23, 1, 1, "", "MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor": [[23, 2, 1, "", "__del__"], [23, 2, 1, "", "accumulate"], [23, 2, 1, "", "calibrate"], [23, 2, 1, "", "close"], [23, 3, 1, "", "config"], [23, 2, 1, "", "create_from_config"], [23, 2, 1, "", "create_from_registry"], [23, 3, 1, "", "is_okay"], [23, 2, 1, "", "register"], [23, 2, 1, "", "registered"], [23, 2, 1, "", "registry"], [23, 3, 1, "", "settings"], [23, 2, 1, "", "update"]], "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig": [[23, 2, 1, "", "__getstate__"], [23, 2, 1, "", "__setstate__"], [23, 2, 1, "", "__str__"], [23, 2, 1, "", "compose"], [23, 5, 1, "", "config"], [23, 2, 1, "", "copy"], [23, 2, 1, "", "create"], [23, 2, 1, "", "create_from_registry"], [23, 5, 1, "", "custom"], [23, 2, 1, "", "instantiate"], [23, 2, 1, "", "load"], [23, 2, 1, "", "merge_with"], [23, 2, 1, "", "register"], [23, 2, 1, "", "registered"], [23, 2, 1, "", "registry"], [23, 2, 1, "", "save"], [23, 3, 1, "", "settings"], [23, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.mocap.vive": [[24, 1, 1, "", "ViveTrackerPose"], [24, 1, 1, "", "ViveTrackerSensorConfig"]], "cc_hardware.drivers.mocap.vive.ViveTrackerPose": [[24, 2, 1, "", "get_data"], [24, 3, 1, "", "has_data"], [24, 2, 1, "", "process"], [24, 2, 1, "", "reset"]], "cc_hardware.drivers.safe_serial": [[25, 1, 1, "", "SafeSerial"]], "cc_hardware.drivers.safe_serial.SafeSerial": [[25, 2, 1, "", "__getattr__"], [25, 2, 1, "", "create"], [25, 2, 1, "", "read"], [25, 2, 1, "", "wait_for_start_talk"], [25, 2, 1, "", "wait_for_stop_talk"], [25, 2, 1, "", "write"], [25, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [25, 2, 1, "", "write_and_wait_for_start_talk"], [25, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.sensor": [[26, 1, 1, "", "Sensor"], [26, 1, 1, "", "SensorConfig"], [26, 1, 1, "", "SensorData"]], "cc_hardware.drivers.sensor.Sensor": [[26, 2, 1, "", "__del__"], [26, 2, 1, "", "calibrate"], [26, 2, 1, "", "close"], [26, 3, 1, "", "config"], [26, 2, 1, "", "create_from_config"], [26, 2, 1, "", "create_from_registry"], [26, 3, 1, "", "is_okay"], [26, 2, 1, "", "register"], [26, 2, 1, "", "registered"], [26, 2, 1, "", "registry"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "update"]], "cc_hardware.drivers.sensor.SensorConfig": [[26, 2, 1, "", "__getstate__"], [26, 2, 1, "", "__setstate__"], [26, 2, 1, "", "__str__"], [26, 2, 1, "", "compose"], [26, 5, 1, "", "config"], [26, 2, 1, "", "copy"], [26, 2, 1, "", "create"], [26, 2, 1, "", "create_from_registry"], [26, 5, 1, "", "custom"], [26, 2, 1, "", "instantiate"], [26, 2, 1, "", "load"], [26, 2, 1, "", "merge_with"], [26, 2, 1, "", "register"], [26, 2, 1, "", "registered"], [26, 2, 1, "", "registry"], [26, 2, 1, "", "save"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.sensor.SensorData": [[26, 2, 1, "", "get_data"], [26, 3, 1, "", "has_data"], [26, 2, 1, "", "process"], [26, 2, 1, "", "reset"]], "cc_hardware.drivers.spads": [[27, 1, 1, "", "SPADDataType"], [27, 1, 1, "", "SPADSensor"], [27, 1, 1, "", "SPADSensorConfig"], [27, 1, 1, "", "SPADSensorData"], [28, 0, 0, "-", "pkl"], [29, 0, 0, "-", "spad"], [30, 0, 0, "-", "spad_wrappers"], [31, 0, 0, "-", "tmf8828"], [32, 0, 0, "-", "vl53l8ch"]], "cc_hardware.drivers.spads.SPADDataType": [[27, 2, 1, "", "__contains__"], [27, 2, 1, "", "__dir__"], [27, 2, 1, "", "__format__"], [27, 2, 1, "", "__hash__"], [27, 2, 1, "", "__iter__"], [27, 2, 1, "", "__reduce_ex__"], [27, 2, 1, "", "__repr__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "name"], [27, 2, 1, "", "value"]], "cc_hardware.drivers.spads.SPADSensor": [[27, 2, 1, "", "__del__"], [27, 2, 1, "", "accumulate"], [27, 2, 1, "", "calibrate"], [27, 2, 1, "", "close"], [27, 3, 1, "", "config"], [27, 2, 1, "", "create_from_config"], [27, 2, 1, "", "create_from_registry"], [27, 3, 1, "", "is_okay"], [27, 3, 1, "", "num_bins"], [27, 2, 1, "", "register"], [27, 2, 1, "", "registered"], [27, 2, 1, "", "registry"], [27, 3, 1, "", "resolution"], [27, 3, 1, "", "settings"], [27, 2, 1, "", "update"]], "cc_hardware.drivers.spads.SPADSensorConfig": [[27, 2, 1, "", "__getstate__"], [27, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "compose"], [27, 5, 1, "", "config"], [27, 2, 1, "", "copy"], [27, 2, 1, "", "create"], [27, 2, 1, "", "create_from_registry"], [27, 5, 1, "", "custom"], [27, 2, 1, "", "instantiate"], [27, 2, 1, "", "load"], [27, 2, 1, "", "merge_with"], [27, 3, 1, "", "num_pixels"], [27, 2, 1, "", "register"], [27, 2, 1, "", "registered"], [27, 2, 1, "", "registry"], [27, 2, 1, "", "save"], [27, 3, 1, "", "settings"], [27, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.SPADSensorData": [[27, 2, 1, "", "calculate_distance"], [27, 2, 1, "", "calculate_point_cloud"], [27, 2, 1, "", "get_data"], [27, 3, 1, "", "has_data"], [27, 2, 1, "", "process"], [27, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.pkl": [[28, 1, 1, "", "PklSPADSensor"], [28, 1, 1, "", "PklSPADSensorConfig"]], "cc_hardware.drivers.spads.pkl.PklSPADSensor": [[28, 2, 1, "", "__del__"], [28, 2, 1, "", "accumulate"], [28, 2, 1, "", "calibrate"], [28, 2, 1, "", "close"], [28, 3, 1, "", "config"], [28, 2, 1, "", "create_from_config"], [28, 2, 1, "", "create_from_registry"], [28, 3, 1, "", "is_okay"], [28, 3, 1, "", "num_bins"], [28, 2, 1, "", "register"], [28, 2, 1, "", "registered"], [28, 2, 1, "", "registry"], [28, 3, 1, "", "resolution"], [28, 3, 1, "", "settings"], [28, 2, 1, "", "update"]], "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig": [[28, 2, 1, "", "__getstate__"], [28, 2, 1, "", "__setstate__"], [28, 2, 1, "", "__str__"], [28, 2, 1, "", "compose"], [28, 5, 1, "", "config"], [28, 2, 1, "", "copy"], [28, 2, 1, "", "create"], [28, 2, 1, "", "create_from_registry"], [28, 5, 1, "", "custom"], [28, 2, 1, "", "instantiate"], [28, 2, 1, "", "load"], [28, 2, 1, "", "merge_with"], [28, 3, 1, "", "num_pixels"], [28, 2, 1, "", "register"], [28, 2, 1, "", "registered"], [28, 2, 1, "", "registry"], [28, 2, 1, "", "save"], [28, 3, 1, "", "settings"], [28, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.spad": [[29, 1, 1, "", "SPADDataType"], [29, 1, 1, "", "SPADSensor"], [29, 1, 1, "", "SPADSensorConfig"], [29, 1, 1, "", "SPADSensorData"]], "cc_hardware.drivers.spads.spad.SPADDataType": [[29, 2, 1, "", "__contains__"], [29, 2, 1, "", "__dir__"], [29, 2, 1, "", "__format__"], [29, 2, 1, "", "__hash__"], [29, 2, 1, "", "__iter__"], [29, 2, 1, "", "__reduce_ex__"], [29, 2, 1, "", "__repr__"], [29, 2, 1, "", "__str__"], [29, 2, 1, "", "name"], [29, 2, 1, "", "value"]], "cc_hardware.drivers.spads.spad.SPADSensor": [[29, 2, 1, "", "__del__"], [29, 2, 1, "", "accumulate"], [29, 2, 1, "", "calibrate"], [29, 2, 1, "", "close"], [29, 3, 1, "", "config"], [29, 2, 1, "", "create_from_config"], [29, 2, 1, "", "create_from_registry"], [29, 3, 1, "", "is_okay"], [29, 3, 1, "", "num_bins"], [29, 2, 1, "", "register"], [29, 2, 1, "", "registered"], [29, 2, 1, "", "registry"], [29, 3, 1, "", "resolution"], [29, 3, 1, "", "settings"], [29, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad.SPADSensorConfig": [[29, 2, 1, "", "__getstate__"], [29, 2, 1, "", "__setstate__"], [29, 2, 1, "", "__str__"], [29, 2, 1, "", "compose"], [29, 5, 1, "", "config"], [29, 2, 1, "", "copy"], [29, 2, 1, "", "create"], [29, 2, 1, "", "create_from_registry"], [29, 5, 1, "", "custom"], [29, 2, 1, "", "instantiate"], [29, 2, 1, "", "load"], [29, 2, 1, "", "merge_with"], [29, 3, 1, "", "num_pixels"], [29, 2, 1, "", "register"], [29, 2, 1, "", "registered"], [29, 2, 1, "", "registry"], [29, 2, 1, "", "save"], [29, 3, 1, "", "settings"], [29, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.spad.SPADSensorData": [[29, 2, 1, "", "calculate_distance"], [29, 2, 1, "", "calculate_point_cloud"], [29, 2, 1, "", "get_data"], [29, 3, 1, "", "has_data"], [29, 2, 1, "", "process"], [29, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.spad_wrappers": [[30, 1, 1, "", "SPADMergeWrapper"], [30, 1, 1, "", "SPADMergeWrapperConfig"], [30, 1, 1, "", "SPADMovingAverageWrapper"], [30, 1, 1, "", "SPADMovingAverageWrapperConfig"], [30, 1, 1, "", "SPADWrapper"], [30, 1, 1, "", "SPADWrapperConfig"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig": [[30, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig": [[30, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig": [[30, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.tmf8828": [[31, 1, 1, "", "RangeMode"], [31, 1, 1, "", "SPADID"], [31, 1, 1, "", "TMF8828Config"], [31, 1, 1, "", "TMF8828Data"], [31, 1, 1, "", "TMF8828Sensor"]], "cc_hardware.drivers.spads.tmf8828.RangeMode": [[31, 2, 1, "", "__dir__"], [31, 2, 1, "", "__format__"], [31, 2, 1, "", "__hash__"], [31, 2, 1, "", "__reduce_ex__"], [31, 2, 1, "", "__repr__"], [31, 2, 1, "", "__str__"], [31, 2, 1, "", "name"], [31, 3, 1, "", "timing_resolution"], [31, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.SPADID": [[31, 2, 1, "", "__dir__"], [31, 2, 1, "", "__format__"], [31, 2, 1, "", "__hash__"], [31, 2, 1, "", "__reduce_ex__"], [31, 2, 1, "", "__repr__"], [31, 2, 1, "", "__str__"], [31, 3, 1, "", "active_channels_per_subcapture"], [31, 3, 1, "", "fov"], [31, 2, 1, "", "name"], [31, 3, 1, "", "num_channels"], [31, 3, 1, "", "resolution"], [31, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Data": [[31, 2, 1, "", "process"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor": [[31, 2, 1, "", "accumulate"], [31, 2, 1, "", "calibrate"], [31, 2, 1, "", "close"], [31, 3, 1, "", "config"], [31, 3, 1, "", "is_okay"]], "cc_hardware.drivers.spads.vl53l8ch": [[32, 1, 1, "", "RangingMode"], [32, 1, 1, "", "VL53L8CHConfig"], [32, 1, 1, "", "VL53L8CHConfig4x4"], [32, 1, 1, "", "VL53L8CHConfig8x8"], [32, 1, 1, "", "VL53L8CHData"], [32, 1, 1, "", "VL53L8CHSensor"], [32, 1, 1, "", "VL53L8CHSharedConfig"]], "cc_hardware.drivers.spads.vl53l8ch.RangingMode": [[32, 2, 1, "", "__dir__"], [32, 2, 1, "", "__format__"], [32, 2, 1, "", "__hash__"], [32, 2, 1, "", "__reduce_ex__"], [32, 2, 1, "", "__repr__"], [32, 2, 1, "", "__str__"], [32, 2, 1, "", "name"], [32, 2, 1, "", "value"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig": [[32, 2, 1, "", "__getstate__"], [32, 2, 1, "", "__setstate__"], [32, 2, 1, "", "__str__"], [32, 2, 1, "", "compose"], [32, 5, 1, "", "config"], [32, 2, 1, "", "copy"], [32, 2, 1, "", "create"], [32, 2, 1, "", "create_from_registry"], [32, 5, 1, "", "custom"], [32, 2, 1, "", "instantiate"], [32, 2, 1, "", "load"], [32, 2, 1, "", "merge_with"], [32, 3, 1, "", "num_pixels"], [32, 2, 1, "", "pack"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"], [32, 2, 1, "", "save"], [32, 3, 1, "", "settings"], [32, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4": [[32, 2, 1, "", "__getstate__"], [32, 2, 1, "", "__setstate__"], [32, 2, 1, "", "__str__"], [32, 2, 1, "", "compose"], [32, 5, 1, "", "config"], [32, 2, 1, "", "copy"], [32, 2, 1, "", "create"], [32, 2, 1, "", "create_from_registry"], [32, 5, 1, "", "custom"], [32, 2, 1, "", "instantiate"], [32, 2, 1, "", "load"], [32, 2, 1, "", "merge_with"], [32, 3, 1, "", "num_pixels"], [32, 2, 1, "", "pack"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"], [32, 2, 1, "", "save"], [32, 3, 1, "", "settings"], [32, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8": [[32, 2, 1, "", "__getstate__"], [32, 2, 1, "", "__setstate__"], [32, 2, 1, "", "__str__"], [32, 2, 1, "", "compose"], [32, 5, 1, "", "config"], [32, 2, 1, "", "copy"], [32, 2, 1, "", "create"], [32, 2, 1, "", "create_from_registry"], [32, 5, 1, "", "custom"], [32, 2, 1, "", "instantiate"], [32, 2, 1, "", "load"], [32, 2, 1, "", "merge_with"], [32, 3, 1, "", "num_pixels"], [32, 2, 1, "", "pack"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"], [32, 2, 1, "", "save"], [32, 3, 1, "", "settings"], [32, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData": [[32, 2, 1, "", "calculate_distance"], [32, 2, 1, "", "calculate_point_cloud"], [32, 2, 1, "", "get_data"], [32, 3, 1, "", "has_data"], [32, 2, 1, "", "process"], [32, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor": [[32, 2, 1, "", "__del__"], [32, 2, 1, "", "accumulate"], [32, 2, 1, "", "calibrate"], [32, 2, 1, "", "close"], [32, 3, 1, "", "config"], [32, 2, 1, "", "create_from_config"], [32, 2, 1, "", "create_from_registry"], [32, 3, 1, "", "is_okay"], [32, 3, 1, "", "num_bins"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"], [32, 3, 1, "", "resolution"], [32, 3, 1, "", "settings"], [32, 2, 1, "", "update"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig": [[32, 2, 1, "", "__getstate__"], [32, 2, 1, "", "__setstate__"], [32, 2, 1, "", "__str__"], [32, 2, 1, "", "compose"], [32, 5, 1, "", "config"], [32, 2, 1, "", "copy"], [32, 2, 1, "", "create"], [32, 2, 1, "", "create_from_registry"], [32, 5, 1, "", "custom"], [32, 2, 1, "", "instantiate"], [32, 2, 1, "", "load"], [32, 2, 1, "", "merge_with"], [32, 3, 1, "", "num_pixels"], [32, 2, 1, "", "pack"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"], [32, 2, 1, "", "save"], [32, 3, 1, "", "settings"], [32, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors": [[33, 1, 1, "", "DummyStepperMotor"], [33, 1, 1, "", "StepperController"], [33, 1, 1, "", "StepperControllerConfig"], [33, 1, 1, "", "StepperMotor"], [33, 1, 1, "", "StepperMotorConfig"], [33, 1, 1, "", "StepperMotorSystem"], [33, 1, 1, "", "StepperMotorSystemAxis"], [33, 1, 1, "", "StepperMotorSystemConfig"], [34, 0, 0, "-", "kinesis_stepper"], [35, 0, 0, "-", "stepper_controller"], [36, 0, 0, "-", "stepper_motor"], [37, 0, 0, "-", "stepper_system"], [38, 0, 0, "-", "telemetrix_stepper"]], "cc_hardware.drivers.stepper_motors.StepperController": [[33, 2, 1, "", "close"], [33, 3, 1, "", "config"], [33, 2, 1, "", "create_from_config"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "get_position"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.StepperControllerConfig": [[33, 2, 1, "", "__getstate__"], [33, 2, 1, "", "__setstate__"], [33, 2, 1, "", "__str__"], [33, 2, 1, "", "compose"], [33, 5, 1, "", "config"], [33, 2, 1, "", "copy"], [33, 2, 1, "", "create"], [33, 2, 1, "", "create_from_registry"], [33, 5, 1, "", "custom"], [33, 2, 1, "", "instantiate"], [33, 2, 1, "", "load"], [33, 2, 1, "", "merge_with"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "save"], [33, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.StepperMotor": [[33, 2, 1, "", "close"], [33, 3, 1, "", "config"], [33, 2, 1, "", "create_from_config"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "is_moving"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.StepperMotorConfig": [[33, 2, 1, "", "__getstate__"], [33, 2, 1, "", "__setstate__"], [33, 2, 1, "", "__str__"], [33, 2, 1, "", "compose"], [33, 5, 1, "", "config"], [33, 2, 1, "", "copy"], [33, 2, 1, "", "create"], [33, 2, 1, "", "create_from_registry"], [33, 5, 1, "", "custom"], [33, 2, 1, "", "instantiate"], [33, 2, 1, "", "load"], [33, 2, 1, "", "merge_with"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "save"], [33, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystem": [[33, 2, 1, "", "__getattr__"], [33, 3, 1, "", "axes"], [33, 2, 1, "", "close"], [33, 3, 1, "", "config"], [33, 2, 1, "", "create_from_config"], [33, 2, 1, "", "create_from_registry"], [33, 3, 1, "", "is_moving"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis": [[33, 2, 1, "", "__dir__"], [33, 2, 1, "", "__format__"], [33, 2, 1, "", "__hash__"], [33, 2, 1, "", "__reduce_ex__"], [33, 2, 1, "", "__repr__"], [33, 2, 1, "", "__str__"], [33, 2, 1, "", "name"], [33, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig": [[33, 2, 1, "", "__getstate__"], [33, 2, 1, "", "__setstate__"], [33, 2, 1, "", "__str__"], [33, 2, 1, "", "compose"], [33, 5, 1, "", "config"], [33, 2, 1, "", "copy"], [33, 2, 1, "", "create"], [33, 2, 1, "", "create_from_registry"], [33, 5, 1, "", "custom"], [33, 2, 1, "", "instantiate"], [33, 2, 1, "", "load"], [33, 2, 1, "", "merge_with"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "save"], [33, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[34, 1, 1, "", "AzimuthElevationSystem"], [34, 1, 1, "", "KinesisRotationStage"], [34, 1, 1, "", "KinesisStepperMotor"], [34, 1, 1, "", "KinesisStepperMotorSystem"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage": [[34, 2, 1, "", "close"], [34, 2, 1, "", "home"], [34, 2, 1, "", "initialize"], [34, 3, 1, "", "is_okay"], [34, 3, 1, "", "lower_limit"], [34, 2, 1, "", "move_by"], [34, 2, 1, "", "move_to"], [34, 3, 1, "", "position"], [34, 3, 1, "", "upper_limit"], [34, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor": [[34, 2, 1, "", "close"], [34, 2, 1, "", "home"], [34, 2, 1, "", "initialize"], [34, 3, 1, "", "is_okay"], [34, 3, 1, "", "lower_limit"], [34, 2, 1, "", "move_by"], [34, 2, 1, "", "move_to"], [34, 3, 1, "", "position"], [34, 3, 1, "", "upper_limit"], [34, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[35, 1, 1, "", "ControllerAxisConfig"], [35, 1, 1, "", "SnakeControllerAxisConfig"], [35, 1, 1, "", "SnakeStepperController"], [35, 1, 1, "", "SnakeStepperControllerConfig"], [35, 1, 1, "", "SnakeStepperControllerConfigXY"], [35, 1, 1, "", "StepperController"], [35, 1, 1, "", "StepperControllerConfig"]], "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig": [[35, 2, 1, "", "__getstate__"], [35, 2, 1, "", "__setstate__"], [35, 2, 1, "", "__str__"], [35, 2, 1, "", "compose"], [35, 5, 1, "", "config"], [35, 2, 1, "", "copy"], [35, 2, 1, "", "create"], [35, 2, 1, "", "create_from_registry"], [35, 5, 1, "", "custom"], [35, 2, 1, "", "instantiate"], [35, 2, 1, "", "load"], [35, 2, 1, "", "merge_with"], [35, 2, 1, "", "register"], [35, 2, 1, "", "registered"], [35, 2, 1, "", "registry"], [35, 2, 1, "", "save"], [35, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig": [[35, 2, 1, "", "__getstate__"], [35, 2, 1, "", "__setstate__"], [35, 2, 1, "", "__str__"], [35, 2, 1, "", "compose"], [35, 5, 1, "", "config"], [35, 2, 1, "", "copy"], [35, 2, 1, "", "create"], [35, 2, 1, "", "create_from_registry"], [35, 5, 1, "", "custom"], [35, 2, 1, "", "instantiate"], [35, 2, 1, "", "load"], [35, 2, 1, "", "merge_with"], [35, 2, 1, "", "register"], [35, 2, 1, "", "registered"], [35, 2, 1, "", "registry"], [35, 2, 1, "", "save"], [35, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController": [[35, 2, 1, "", "close"], [35, 3, 1, "", "config"], [35, 2, 1, "", "create_from_config"], [35, 2, 1, "", "create_from_registry"], [35, 2, 1, "", "get_position"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "register"], [35, 2, 1, "", "registered"], [35, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig": [[35, 2, 1, "", "__getstate__"], [35, 2, 1, "", "__setstate__"], [35, 2, 1, "", "__str__"], [35, 2, 1, "", "compose"], [35, 5, 1, "", "config"], [35, 2, 1, "", "copy"], [35, 2, 1, "", "create"], [35, 2, 1, "", "create_from_registry"], [35, 5, 1, "", "custom"], [35, 2, 1, "", "instantiate"], [35, 2, 1, "", "load"], [35, 2, 1, "", "merge_with"], [35, 2, 1, "", "register"], [35, 2, 1, "", "registered"], [35, 2, 1, "", "registry"], [35, 2, 1, "", "save"], [35, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY": [[35, 2, 1, "", "__getstate__"], [35, 2, 1, "", "__setstate__"], [35, 2, 1, "", "__str__"], [35, 2, 1, "", "compose"], [35, 5, 1, "", "config"], [35, 2, 1, "", "copy"], [35, 2, 1, "", "create"], [35, 2, 1, "", "create_from_registry"], [35, 5, 1, "", "custom"], [35, 2, 1, "", "instantiate"], [35, 2, 1, "", "load"], [35, 2, 1, "", "merge_with"], [35, 2, 1, "", "register"], [35, 2, 1, "", "registered"], [35, 2, 1, "", "registry"], [35, 2, 1, "", "save"], [35, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController": [[35, 2, 1, "", "close"], [35, 3, 1, "", "config"], [35, 2, 1, "", "create_from_config"], [35, 2, 1, "", "create_from_registry"], [35, 2, 1, "", "get_position"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "register"], [35, 2, 1, "", "registered"], [35, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig": [[35, 2, 1, "", "__getstate__"], [35, 2, 1, "", "__setstate__"], [35, 2, 1, "", "__str__"], [35, 2, 1, "", "compose"], [35, 5, 1, "", "config"], [35, 2, 1, "", "copy"], [35, 2, 1, "", "create"], [35, 2, 1, "", "create_from_registry"], [35, 5, 1, "", "custom"], [35, 2, 1, "", "instantiate"], [35, 2, 1, "", "load"], [35, 2, 1, "", "merge_with"], [35, 2, 1, "", "register"], [35, 2, 1, "", "registered"], [35, 2, 1, "", "registry"], [35, 2, 1, "", "save"], [35, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[36, 1, 1, "", "DummyStepperMotor"], [36, 1, 1, "", "StepperMotor"], [36, 1, 1, "", "StepperMotorConfig"]], "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor": [[36, 2, 1, "", "close"], [36, 3, 1, "", "config"], [36, 2, 1, "", "create_from_config"], [36, 2, 1, "", "create_from_registry"], [36, 2, 1, "", "home"], [36, 3, 1, "", "is_moving"], [36, 3, 1, "", "is_okay"], [36, 2, 1, "", "move_by"], [36, 2, 1, "", "move_to"], [36, 3, 1, "", "position"], [36, 2, 1, "", "register"], [36, 2, 1, "", "registered"], [36, 2, 1, "", "registry"], [36, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig": [[36, 2, 1, "", "__getstate__"], [36, 2, 1, "", "__setstate__"], [36, 2, 1, "", "__str__"], [36, 2, 1, "", "compose"], [36, 5, 1, "", "config"], [36, 2, 1, "", "copy"], [36, 2, 1, "", "create"], [36, 2, 1, "", "create_from_registry"], [36, 5, 1, "", "custom"], [36, 2, 1, "", "instantiate"], [36, 2, 1, "", "load"], [36, 2, 1, "", "merge_with"], [36, 2, 1, "", "register"], [36, 2, 1, "", "registered"], [36, 2, 1, "", "registry"], [36, 2, 1, "", "save"], [36, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[37, 1, 1, "", "DummyStepperSystem"], [37, 1, 1, "", "StepperMotorSystem"], [37, 1, 1, "", "StepperMotorSystemAxis"], [37, 1, 1, "", "StepperMotorSystemConfig"]], "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem": [[37, 2, 1, "", "__getattr__"], [37, 3, 1, "", "axes"], [37, 2, 1, "", "close"], [37, 3, 1, "", "config"], [37, 2, 1, "", "create_from_config"], [37, 2, 1, "", "create_from_registry"], [37, 3, 1, "", "is_moving"], [37, 3, 1, "", "is_okay"], [37, 2, 1, "", "move_by"], [37, 2, 1, "", "move_to"], [37, 2, 1, "", "register"], [37, 2, 1, "", "registered"], [37, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem": [[37, 2, 1, "", "__getattr__"], [37, 3, 1, "", "axes"], [37, 2, 1, "", "close"], [37, 3, 1, "", "config"], [37, 2, 1, "", "create_from_config"], [37, 2, 1, "", "create_from_registry"], [37, 3, 1, "", "is_moving"], [37, 3, 1, "", "is_okay"], [37, 2, 1, "", "move_by"], [37, 2, 1, "", "move_to"], [37, 2, 1, "", "register"], [37, 2, 1, "", "registered"], [37, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis": [[37, 2, 1, "", "__dir__"], [37, 2, 1, "", "__format__"], [37, 2, 1, "", "__hash__"], [37, 2, 1, "", "__reduce_ex__"], [37, 2, 1, "", "__repr__"], [37, 2, 1, "", "__str__"], [37, 2, 1, "", "name"], [37, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig": [[37, 2, 1, "", "__getstate__"], [37, 2, 1, "", "__setstate__"], [37, 2, 1, "", "__str__"], [37, 2, 1, "", "compose"], [37, 5, 1, "", "config"], [37, 2, 1, "", "copy"], [37, 2, 1, "", "create"], [37, 2, 1, "", "create_from_registry"], [37, 5, 1, "", "custom"], [37, 2, 1, "", "instantiate"], [37, 2, 1, "", "load"], [37, 2, 1, "", "merge_with"], [37, 2, 1, "", "register"], [37, 2, 1, "", "registered"], [37, 2, 1, "", "registry"], [37, 2, 1, "", "save"], [37, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[38, 1, 1, "", "DualDrive2AxisGantryConfig"], [38, 1, 1, "", "DualDrive2AxisGantryXConfig"], [38, 1, 1, "", "DualDrive2AxisGantryY1Config"], [38, 1, 1, "", "DualDrive2AxisGantryY2Config"], [38, 1, 1, "", "SingleDrive1AxisGantryConfig"], [38, 1, 1, "", "SingleDrive1AxisGantryXConfig"], [38, 1, 1, "", "SingleDrive1AxisGantryYConfig"], [38, 1, 1, "", "TelemetrixStepperMotor"], [38, 1, 1, "", "TelemetrixStepperMotorConfig"], [38, 1, 1, "", "TelemetrixStepperMotorSystem"], [38, 1, 1, "", "TelemetrixStepperMotorSystemConfig"], [38, 1, 1, "", "TelemetrixStepperMotorXConfig"], [38, 1, 1, "", "TelemetrixStepperMotorYConfig"], [38, 1, 1, "", "TelemetrixStepperMotorZConfig"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor": [[38, 2, 1, "", "__getattr__"], [38, 2, 1, "", "close"], [38, 2, 1, "", "cm_to_revs"], [38, 2, 1, "", "home"], [38, 3, 1, "", "id"], [38, 3, 1, "", "is_moving"], [38, 3, 1, "", "is_okay"], [38, 2, 1, "", "move_by"], [38, 2, 1, "", "move_to"], [38, 3, 1, "", "position"], [38, 2, 1, "", "revs_to_cm"], [38, 2, 1, "", "set_absolute_target_position_cm"], [38, 2, 1, "", "set_target_position_cm"], [38, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem": [[38, 2, 1, "", "close"]], "cc_hardware.tools": [[52, 1, 1, "", "Registry"], [52, 1, 1, "", "ToolRegistry"], [40, 0, 0, "-", "calibration"], [41, 0, 0, "-", "camera_viewer"], [43, 0, 0, "-", "dashboard"], [51, 0, 0, "-", "flash"], [53, 0, 0, "-", "jogger"]], "cc_hardware.tools.Registry": [[52, 2, 1, "", "create_from_registry"], [52, 2, 1, "", "register"], [52, 2, 1, "", "registered"], [52, 2, 1, "", "registry"]], "cc_hardware.tools.ToolRegistry": [[52, 2, 1, "", "create_from_registry"], [52, 2, 1, "", "register"], [52, 2, 1, "", "registered"], [52, 2, 1, "", "registry"]], "cc_hardware.tools.calibration": [[40, 4, 1, "", "calibrate"], [40, 4, 1, "", "tmf8828_calibrate"]], "cc_hardware.tools.dashboard": [[43, 1, 1, "", "Dashboard"], [43, 1, 1, "", "DashboardConfig"], [43, 1, 1, "", "SPADDashboard"], [43, 1, 1, "", "SPADDashboardConfig"], [42, 0, 0, "-", "dashboard"], [45, 0, 0, "-", "mocap_dashboard"], [48, 0, 0, "-", "spad_dashboard"]], "cc_hardware.tools.dashboard.Dashboard": [[43, 2, 1, "", "close"], [43, 3, 1, "", "config"], [43, 2, 1, "", "create_from_config"], [43, 2, 1, "", "create_from_registry"], [43, 3, 1, "", "is_okay"], [43, 2, 1, "", "register"], [43, 2, 1, "", "registered"], [43, 2, 1, "", "registry"], [43, 2, 1, "", "run"], [43, 2, 1, "", "setup"], [43, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.DashboardConfig": [[43, 2, 1, "", "__getstate__"], [43, 2, 1, "", "__setstate__"], [43, 2, 1, "", "__str__"], [43, 2, 1, "", "compose"], [43, 5, 1, "", "config"], [43, 2, 1, "", "copy"], [43, 2, 1, "", "create"], [43, 2, 1, "", "create_from_registry"], [43, 5, 1, "", "custom"], [43, 2, 1, "", "instantiate"], [43, 2, 1, "", "load"], [43, 2, 1, "", "merge_with"], [43, 2, 1, "", "register"], [43, 2, 1, "", "registered"], [43, 2, 1, "", "registry"], [43, 2, 1, "", "save"], [43, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.SPADDashboard": [[43, 2, 1, "", "close"], [43, 3, 1, "", "config"], [43, 2, 1, "", "create_from_config"], [43, 2, 1, "", "create_from_registry"], [43, 3, 1, "", "is_okay"], [43, 3, 1, "", "max_bin"], [43, 3, 1, "", "min_bin"], [43, 2, 1, "", "register"], [43, 2, 1, "", "registered"], [43, 2, 1, "", "registry"], [43, 2, 1, "", "run"], [43, 3, 1, "", "sensor"], [43, 2, 1, "", "setup"], [43, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.SPADDashboardConfig": [[43, 2, 1, "", "__getstate__"], [43, 2, 1, "", "__setstate__"], [43, 2, 1, "", "__str__"], [43, 2, 1, "", "compose"], [43, 5, 1, "", "config"], [43, 2, 1, "", "copy"], [43, 2, 1, "", "create"], [43, 2, 1, "", "create_from_registry"], [43, 5, 1, "", "custom"], [43, 2, 1, "", "instantiate"], [43, 2, 1, "", "load"], [43, 2, 1, "", "merge_with"], [43, 2, 1, "", "register"], [43, 2, 1, "", "registered"], [43, 2, 1, "", "registry"], [43, 2, 1, "", "save"], [43, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.dashboard": [[42, 1, 1, "", "Dashboard"], [42, 1, 1, "", "DashboardConfig"]], "cc_hardware.tools.dashboard.dashboard.Dashboard": [[42, 2, 1, "", "close"], [42, 3, 1, "", "config"], [42, 2, 1, "", "create_from_config"], [42, 2, 1, "", "create_from_registry"], [42, 3, 1, "", "is_okay"], [42, 2, 1, "", "register"], [42, 2, 1, "", "registered"], [42, 2, 1, "", "registry"], [42, 2, 1, "", "run"], [42, 2, 1, "", "setup"], [42, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.dashboard.DashboardConfig": [[42, 2, 1, "", "__getstate__"], [42, 2, 1, "", "__setstate__"], [42, 2, 1, "", "__str__"], [42, 2, 1, "", "compose"], [42, 5, 1, "", "config"], [42, 2, 1, "", "copy"], [42, 2, 1, "", "create"], [42, 2, 1, "", "create_from_registry"], [42, 5, 1, "", "custom"], [42, 2, 1, "", "instantiate"], [42, 2, 1, "", "load"], [42, 2, 1, "", "merge_with"], [42, 2, 1, "", "register"], [42, 2, 1, "", "registered"], [42, 2, 1, "", "registry"], [42, 2, 1, "", "save"], [42, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[45, 1, 1, "", "MotionCaptureDashboard"], [45, 1, 1, "", "MotionCaptureDashboardConfig"], [44, 0, 0, "-", "dash"], [46, 0, 0, "-", "mocap_dashboard"], [47, 0, 0, "-", "pyqtgraph"]], "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard": [[45, 2, 1, "", "close"], [45, 3, 1, "", "config"], [45, 2, 1, "", "create_from_config"], [45, 2, 1, "", "create_from_registry"], [45, 3, 1, "", "is_okay"], [45, 2, 1, "", "register"], [45, 2, 1, "", "registered"], [45, 2, 1, "", "registry"], [45, 2, 1, "", "run"], [45, 3, 1, "", "sensor"], [45, 2, 1, "", "setup"], [45, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig": [[45, 2, 1, "", "__getstate__"], [45, 2, 1, "", "__setstate__"], [45, 2, 1, "", "__str__"], [45, 2, 1, "", "compose"], [45, 5, 1, "", "config"], [45, 2, 1, "", "copy"], [45, 2, 1, "", "create"], [45, 2, 1, "", "create_from_registry"], [45, 5, 1, "", "custom"], [45, 2, 1, "", "instantiate"], [45, 2, 1, "", "load"], [45, 2, 1, "", "merge_with"], [45, 2, 1, "", "register"], [45, 2, 1, "", "registered"], [45, 2, 1, "", "registry"], [45, 2, 1, "", "save"], [45, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[44, 1, 1, "", "DashMotionCaptureDashboard"], [44, 1, 1, "", "DashMotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard": [[44, 2, 1, "", "close"], [44, 3, 1, "", "config"], [44, 2, 1, "", "create_from_config"], [44, 2, 1, "", "create_from_registry"], [44, 3, 1, "", "is_okay"], [44, 2, 1, "", "register"], [44, 2, 1, "", "registered"], [44, 2, 1, "", "registry"], [44, 2, 1, "", "run"], [44, 3, 1, "", "sensor"], [44, 2, 1, "", "setup"], [44, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig": [[44, 2, 1, "", "__getstate__"], [44, 2, 1, "", "__setstate__"], [44, 2, 1, "", "__str__"], [44, 2, 1, "", "compose"], [44, 5, 1, "", "config"], [44, 2, 1, "", "copy"], [44, 2, 1, "", "create"], [44, 2, 1, "", "create_from_registry"], [44, 5, 1, "", "custom"], [44, 2, 1, "", "instantiate"], [44, 2, 1, "", "load"], [44, 2, 1, "", "merge_with"], [44, 2, 1, "", "register"], [44, 2, 1, "", "registered"], [44, 2, 1, "", "registry"], [44, 2, 1, "", "save"], [44, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[46, 1, 1, "", "MotionCaptureDashboard"], [46, 1, 1, "", "MotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard": [[46, 2, 1, "", "close"], [46, 3, 1, "", "config"], [46, 2, 1, "", "create_from_config"], [46, 2, 1, "", "create_from_registry"], [46, 3, 1, "", "is_okay"], [46, 2, 1, "", "register"], [46, 2, 1, "", "registered"], [46, 2, 1, "", "registry"], [46, 2, 1, "", "run"], [46, 3, 1, "", "sensor"], [46, 2, 1, "", "setup"], [46, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig": [[46, 2, 1, "", "__getstate__"], [46, 2, 1, "", "__setstate__"], [46, 2, 1, "", "__str__"], [46, 2, 1, "", "compose"], [46, 5, 1, "", "config"], [46, 2, 1, "", "copy"], [46, 2, 1, "", "create"], [46, 2, 1, "", "create_from_registry"], [46, 5, 1, "", "custom"], [46, 2, 1, "", "instantiate"], [46, 2, 1, "", "load"], [46, 2, 1, "", "merge_with"], [46, 2, 1, "", "register"], [46, 2, 1, "", "registered"], [46, 2, 1, "", "registry"], [46, 2, 1, "", "save"], [46, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[47, 1, 1, "", "DashboardWindow"], [47, 1, 1, "", "PyQtGraphMotionCaptureDashboard"], [47, 1, 1, "", "PyQtGraphMotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow": [[47, 2, 1, "", "keyPressEvent"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard": [[47, 2, 1, "", "close"], [47, 3, 1, "", "config"], [47, 2, 1, "", "create_from_config"], [47, 2, 1, "", "create_from_registry"], [47, 3, 1, "", "is_okay"], [47, 2, 1, "", "register"], [47, 2, 1, "", "registered"], [47, 2, 1, "", "registry"], [47, 2, 1, "", "run"], [47, 3, 1, "", "sensor"], [47, 2, 1, "", "setup"], [47, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig": [[47, 2, 1, "", "__getstate__"], [47, 2, 1, "", "__setstate__"], [47, 2, 1, "", "__str__"], [47, 2, 1, "", "compose"], [47, 5, 1, "", "config"], [47, 2, 1, "", "copy"], [47, 2, 1, "", "create"], [47, 2, 1, "", "create_from_registry"], [47, 5, 1, "", "custom"], [47, 2, 1, "", "instantiate"], [47, 2, 1, "", "load"], [47, 2, 1, "", "merge_with"], [47, 2, 1, "", "register"], [47, 2, 1, "", "registered"], [47, 2, 1, "", "registry"], [47, 2, 1, "", "save"], [47, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.spad_dashboard": [[48, 1, 1, "", "SPADDashboard"], [48, 1, 1, "", "SPADDashboardConfig"], [49, 0, 0, "-", "pyqtgraph"], [50, 0, 0, "-", "spad_dashboard"]], "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard": [[48, 2, 1, "", "close"], [48, 3, 1, "", "config"], [48, 2, 1, "", "create_from_config"], [48, 2, 1, "", "create_from_registry"], [48, 3, 1, "", "is_okay"], [48, 3, 1, "", "max_bin"], [48, 3, 1, "", "min_bin"], [48, 2, 1, "", "register"], [48, 2, 1, "", "registered"], [48, 2, 1, "", "registry"], [48, 2, 1, "", "run"], [48, 3, 1, "", "sensor"], [48, 2, 1, "", "setup"], [48, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig": [[48, 2, 1, "", "__getstate__"], [48, 2, 1, "", "__setstate__"], [48, 2, 1, "", "__str__"], [48, 2, 1, "", "compose"], [48, 5, 1, "", "config"], [48, 2, 1, "", "copy"], [48, 2, 1, "", "create"], [48, 2, 1, "", "create_from_registry"], [48, 5, 1, "", "custom"], [48, 2, 1, "", "instantiate"], [48, 2, 1, "", "load"], [48, 2, 1, "", "merge_with"], [48, 2, 1, "", "register"], [48, 2, 1, "", "registered"], [48, 2, 1, "", "registry"], [48, 2, 1, "", "save"], [48, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[49, 1, 1, "", "DashboardWindow"], [49, 1, 1, "", "PyQtGraphDashboard"], [49, 1, 1, "", "PyQtGraphDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow": [[49, 2, 1, "", "enable_depth_view"], [49, 2, 1, "", "enable_point_cloud_view"], [49, 2, 1, "", "init_ui"], [49, 2, 1, "", "keyPressEvent"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard": [[49, 2, 1, "", "run"], [49, 2, 1, "", "setup"], [49, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[50, 1, 1, "", "DummySPADDashboard"], [50, 1, 1, "", "DummySPADDashboardConfig"], [50, 1, 1, "", "SPADDashboard"], [50, 1, 1, "", "SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard": [[50, 2, 1, "", "close"], [50, 3, 1, "", "config"], [50, 2, 1, "", "create_from_config"], [50, 2, 1, "", "create_from_registry"], [50, 3, 1, "", "is_okay"], [50, 3, 1, "", "max_bin"], [50, 3, 1, "", "min_bin"], [50, 2, 1, "", "register"], [50, 2, 1, "", "registered"], [50, 2, 1, "", "registry"], [50, 2, 1, "", "run"], [50, 3, 1, "", "sensor"], [50, 2, 1, "", "setup"], [50, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig": [[50, 2, 1, "", "__getstate__"], [50, 2, 1, "", "__setstate__"], [50, 2, 1, "", "__str__"], [50, 2, 1, "", "compose"], [50, 5, 1, "", "config"], [50, 2, 1, "", "copy"], [50, 2, 1, "", "create"], [50, 2, 1, "", "create_from_registry"], [50, 5, 1, "", "custom"], [50, 2, 1, "", "instantiate"], [50, 2, 1, "", "load"], [50, 2, 1, "", "merge_with"], [50, 2, 1, "", "register"], [50, 2, 1, "", "registered"], [50, 2, 1, "", "registry"], [50, 2, 1, "", "save"], [50, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard": [[50, 2, 1, "", "close"], [50, 3, 1, "", "config"], [50, 2, 1, "", "create_from_config"], [50, 2, 1, "", "create_from_registry"], [50, 3, 1, "", "is_okay"], [50, 3, 1, "", "max_bin"], [50, 3, 1, "", "min_bin"], [50, 2, 1, "", "register"], [50, 2, 1, "", "registered"], [50, 2, 1, "", "registry"], [50, 2, 1, "", "run"], [50, 3, 1, "", "sensor"], [50, 2, 1, "", "setup"], [50, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig": [[50, 2, 1, "", "__getstate__"], [50, 2, 1, "", "__setstate__"], [50, 2, 1, "", "__str__"], [50, 2, 1, "", "compose"], [50, 5, 1, "", "config"], [50, 2, 1, "", "copy"], [50, 2, 1, "", "create"], [50, 2, 1, "", "create_from_registry"], [50, 5, 1, "", "custom"], [50, 2, 1, "", "instantiate"], [50, 2, 1, "", "load"], [50, 2, 1, "", "merge_with"], [50, 2, 1, "", "register"], [50, 2, 1, "", "registered"], [50, 2, 1, "", "registry"], [50, 2, 1, "", "save"], [50, 2, 1, "", "to_yaml"]], "cc_hardware.tools.jogger": [[53, 1, 1, "", "LogBufferHandler"], [53, 1, 1, "", "OutputCapture"]], "cc_hardware.tools.jogger.LogBufferHandler": [[53, 2, 1, "", "__repr__"], [53, 2, 1, "", "acquire"], [53, 2, 1, "", "addFilter"], [53, 2, 1, "", "close"], [53, 2, 1, "", "createLock"], [53, 2, 1, "", "emit"], [53, 2, 1, "", "filter"], [53, 2, 1, "", "flush"], [53, 2, 1, "", "format"], [53, 2, 1, "", "handle"], [53, 2, 1, "", "handleError"], [53, 2, 1, "", "release"], [53, 2, 1, "", "removeFilter"], [53, 2, 1, "", "setFormatter"], [53, 2, 1, "", "setLevel"]], "cc_hardware.utils": [[56, 1, 1, "", "BlockingDeque"], [56, 1, 1, "", "Component"], [56, 1, 1, "", "Config"], [56, 1, 1, "", "Manager"], [56, 1, 1, "", "Registry"], [56, 1, 1, "", "SingletonABCMeta"], [56, 1, 1, "", "SingletonMeta"], [56, 4, 1, "", "arduino_upload"], [56, 4, 1, "", "call_async"], [56, 4, 1, "", "call_async_gather"], [56, 4, 1, "", "call_async_value"], [54, 0, 0, "-", "constants"], [55, 0, 0, "-", "file_handlers"], [56, 4, 1, "", "find_device_by_label"], [56, 4, 1, "", "find_ports"], [56, 4, 1, "", "get_object"], [57, 0, 0, "-", "logger"], [58, 0, 0, "-", "manager"], [59, 0, 0, "-", "matplotlib"], [62, 0, 0, "-", "misc"], [56, 4, 1, "", "register"], [67, 0, 0, "-", "registry"], [68, 0, 0, "-", "setting"], [69, 0, 0, "-", "transformations"]], "cc_hardware.utils.BlockingDeque": [[56, 2, 1, "", "__getattr__"], [56, 2, 1, "", "__getitem__"], [56, 2, 1, "", "__len__"], [56, 2, 1, "", "__repr__"], [56, 2, 1, "", "append"]], "cc_hardware.utils.Component": [[56, 2, 1, "", "close"], [56, 3, 1, "", "config"], [56, 2, 1, "", "create_from_config"], [56, 2, 1, "", "create_from_registry"], [56, 3, 1, "", "is_okay"], [56, 2, 1, "", "register"], [56, 2, 1, "", "registered"], [56, 2, 1, "", "registry"]], "cc_hardware.utils.Config": [[56, 2, 1, "", "__getstate__"], [56, 2, 1, "", "__setstate__"], [56, 2, 1, "", "__str__"], [56, 2, 1, "", "compose"], [56, 5, 1, "", "config"], [56, 2, 1, "", "copy"], [56, 2, 1, "", "create"], [56, 2, 1, "", "create_from_registry"], [56, 5, 1, "", "custom"], [56, 2, 1, "", "instantiate"], [56, 2, 1, "", "load"], [56, 2, 1, "", "merge_with"], [56, 2, 1, "", "register"], [56, 2, 1, "", "registered"], [56, 2, 1, "", "registry"], [56, 2, 1, "", "save"], [56, 2, 1, "", "to_yaml"]], "cc_hardware.utils.Manager": [[56, 2, 1, "", "__enter__"], [56, 2, 1, "", "__exit__"], [56, 2, 1, "", "add"], [56, 2, 1, "", "close"], [56, 3, 1, "", "components"], [56, 3, 1, "", "is_okay"], [56, 2, 1, "", "run"]], "cc_hardware.utils.Registry": [[56, 2, 1, "", "create_from_registry"], [56, 2, 1, "", "register"], [56, 2, 1, "", "registered"], [56, 2, 1, "", "registry"]], "cc_hardware.utils.SingletonABCMeta": [[56, 2, 1, "", "__call__"], [56, 2, 1, "", "__instancecheck__"], [56, 2, 1, "", "__subclasscheck__"], [56, 2, 1, "", "instance"], [56, 2, 1, "", "register"]], "cc_hardware.utils.SingletonMeta": [[56, 2, 1, "", "__call__"], [56, 2, 1, "", "instance"]], "cc_hardware.utils.constants": [[54, 6, 1, "", "C"]], "cc_hardware.utils.file_handlers": [[55, 1, 1, "", "PklHandler"], [55, 1, 1, "", "PklReader"], [55, 1, 1, "", "VideoWriter"]], "cc_hardware.utils.file_handlers.PklHandler": [[55, 2, 1, "", "__len__"], [55, 2, 1, "", "append"], [55, 2, 1, "", "load"], [55, 2, 1, "", "load_all"], [55, 2, 1, "", "update_index"], [55, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.PklReader": [[55, 2, 1, "", "__len__"], [55, 2, 1, "", "append"], [55, 2, 1, "", "load"], [55, 2, 1, "", "load_all"], [55, 2, 1, "", "update_index"], [55, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.VideoWriter": [[55, 2, 1, "", "__del__"], [55, 2, 1, "", "append"], [55, 2, 1, "", "close"]], "cc_hardware.utils.logger": [[57, 1, 1, "", "FileHandler"], [57, 1, 1, "", "LoggerMaxLevelFilter"], [57, 1, 1, "", "TqdmStreamHandler"]], "cc_hardware.utils.logger.FileHandler": [[57, 2, 1, "", "__repr__"], [57, 2, 1, "", "acquire"], [57, 2, 1, "", "addFilter"], [57, 2, 1, "", "close"], [57, 2, 1, "", "createLock"], [57, 2, 1, "", "emit"], [57, 2, 1, "", "filter"], [57, 2, 1, "", "flush"], [57, 2, 1, "", "format"], [57, 2, 1, "", "handle"], [57, 2, 1, "", "handleError"], [57, 2, 1, "", "release"], [57, 2, 1, "", "removeFilter"], [57, 2, 1, "", "setFormatter"], [57, 2, 1, "", "setLevel"], [57, 2, 1, "", "setStream"]], "cc_hardware.utils.logger.LoggerMaxLevelFilter": [[57, 2, 1, "", "filter"]], "cc_hardware.utils.logger.TqdmStreamHandler": [[57, 2, 1, "", "__repr__"], [57, 2, 1, "", "acquire"], [57, 2, 1, "", "addFilter"], [57, 2, 1, "", "close"], [57, 2, 1, "", "createLock"], [57, 2, 1, "", "emit"], [57, 2, 1, "", "filter"], [57, 2, 1, "", "flush"], [57, 2, 1, "", "format"], [57, 2, 1, "", "handle"], [57, 2, 1, "", "handleError"], [57, 2, 1, "", "release"], [57, 2, 1, "", "removeFilter"], [57, 2, 1, "", "setFormatter"], [57, 2, 1, "", "setLevel"], [57, 2, 1, "", "setStream"]], "cc_hardware.utils.manager": [[58, 1, 1, "", "Component"], [58, 1, 1, "", "Config"], [58, 1, 1, "", "Manager"]], "cc_hardware.utils.manager.Component": [[58, 2, 1, "", "close"], [58, 3, 1, "", "config"], [58, 2, 1, "", "create_from_config"], [58, 2, 1, "", "create_from_registry"], [58, 3, 1, "", "is_okay"], [58, 2, 1, "", "register"], [58, 2, 1, "", "registered"], [58, 2, 1, "", "registry"]], "cc_hardware.utils.manager.Config": [[58, 2, 1, "", "__getstate__"], [58, 2, 1, "", "__setstate__"], [58, 2, 1, "", "__str__"], [58, 2, 1, "", "compose"], [58, 5, 1, "", "config"], [58, 2, 1, "", "copy"], [58, 2, 1, "", "create"], [58, 2, 1, "", "create_from_registry"], [58, 5, 1, "", "custom"], [58, 2, 1, "", "instantiate"], [58, 2, 1, "", "load"], [58, 2, 1, "", "merge_with"], [58, 2, 1, "", "register"], [58, 2, 1, "", "registered"], [58, 2, 1, "", "registry"], [58, 2, 1, "", "save"], [58, 2, 1, "", "to_yaml"]], "cc_hardware.utils.manager.Manager": [[58, 2, 1, "", "__enter__"], [58, 2, 1, "", "__exit__"], [58, 2, 1, "", "add"], [58, 2, 1, "", "close"], [58, 3, 1, "", "components"], [58, 3, 1, "", "is_okay"], [58, 2, 1, "", "run"]], "cc_hardware.utils.matplotlib": [[59, 4, 1, "", "set_matplotlib_style"]], "cc_hardware.utils.misc": [[62, 1, 1, "", "BlockingDeque"], [62, 1, 1, "", "SingletonABCMeta"], [62, 1, 1, "", "SingletonMeta"], [62, 4, 1, "", "arduino_upload"], [60, 0, 0, "-", "asyncio_utils"], [61, 0, 0, "-", "blocking_deque"], [62, 4, 1, "", "call_async"], [62, 4, 1, "", "call_async_gather"], [62, 4, 1, "", "call_async_value"], [62, 4, 1, "", "find_device_by_label"], [62, 4, 1, "", "find_ports"], [62, 4, 1, "", "get_object"], [63, 0, 0, "-", "misc"], [64, 0, 0, "-", "multiprocessing_deque"], [65, 0, 0, "-", "serial_utils"], [66, 0, 0, "-", "singleton"]], "cc_hardware.utils.misc.BlockingDeque": [[62, 2, 1, "", "__getattr__"], [62, 2, 1, "", "__getitem__"], [62, 2, 1, "", "__len__"], [62, 2, 1, "", "__repr__"], [62, 2, 1, "", "append"]], "cc_hardware.utils.misc.SingletonABCMeta": [[62, 2, 1, "", "__call__"], [62, 2, 1, "", "__instancecheck__"], [62, 2, 1, "", "__subclasscheck__"], [62, 2, 1, "", "instance"], [62, 2, 1, "", "register"]], "cc_hardware.utils.misc.SingletonMeta": [[62, 2, 1, "", "__call__"], [62, 2, 1, "", "instance"]], "cc_hardware.utils.misc.asyncio_utils": [[60, 4, 1, "", "call_async"], [60, 4, 1, "", "call_async_gather"], [60, 4, 1, "", "call_async_value"]], "cc_hardware.utils.misc.blocking_deque": [[61, 1, 1, "", "BlockingDeque"]], "cc_hardware.utils.misc.blocking_deque.BlockingDeque": [[61, 2, 1, "", "__getattr__"], [61, 2, 1, "", "__getitem__"], [61, 2, 1, "", "__len__"], [61, 2, 1, "", "__repr__"], [61, 2, 1, "", "append"]], "cc_hardware.utils.misc.misc": [[63, 4, 1, "", "get_object"]], "cc_hardware.utils.misc.serial_utils": [[65, 4, 1, "", "arduino_upload"], [65, 4, 1, "", "find_device_by_label"], [65, 4, 1, "", "find_ports"]], "cc_hardware.utils.misc.singleton": [[66, 1, 1, "", "SingletonABCMeta"], [66, 1, 1, "", "SingletonMeta"]], "cc_hardware.utils.misc.singleton.SingletonABCMeta": [[66, 2, 1, "", "__call__"], [66, 2, 1, "", "__instancecheck__"], [66, 2, 1, "", "__subclasscheck__"], [66, 2, 1, "", "instance"], [66, 2, 1, "", "register"]], "cc_hardware.utils.misc.singleton.SingletonMeta": [[66, 2, 1, "", "__call__"], [66, 2, 1, "", "instance"]], "cc_hardware.utils.registry": [[67, 1, 1, "", "Registry"], [67, 4, 1, "", "register"]], "cc_hardware.utils.registry.Registry": [[67, 2, 1, "", "create_from_registry"], [67, 2, 1, "", "register"], [67, 2, 1, "", "registered"], [67, 2, 1, "", "registry"]], "cc_hardware.utils.setting": [[68, 1, 1, "", "BoolSetting"], [68, 1, 1, "", "OptionSetting"], [68, 1, 1, "", "RangeSetting"], [68, 1, 1, "", "Setting"]], "cc_hardware.utils.setting.BoolSetting": [[68, 2, 1, "", "__getstate__"], [68, 2, 1, "", "__setstate__"], [68, 2, 1, "", "__str__"], [68, 2, 1, "", "compose"], [68, 5, 1, "", "config"], [68, 2, 1, "", "copy"], [68, 2, 1, "", "create"], [68, 2, 1, "", "create_from_registry"], [68, 5, 1, "", "custom"], [68, 2, 1, "", "default_factory"], [68, 2, 1, "", "instantiate"], [68, 2, 1, "", "load"], [68, 2, 1, "", "merge_with"], [68, 2, 1, "", "register"], [68, 2, 1, "", "registered"], [68, 2, 1, "", "registry"], [68, 2, 1, "", "save"], [68, 2, 1, "", "to_yaml"], [68, 2, 1, "", "update"]], "cc_hardware.utils.setting.OptionSetting": [[68, 2, 1, "", "__getstate__"], [68, 2, 1, "", "__setstate__"], [68, 2, 1, "", "__str__"], [68, 2, 1, "", "compose"], [68, 5, 1, "", "config"], [68, 2, 1, "", "copy"], [68, 2, 1, "", "create"], [68, 2, 1, "", "create_from_registry"], [68, 5, 1, "", "custom"], [68, 2, 1, "", "default_factory"], [68, 2, 1, "", "from_enum"], [68, 2, 1, "", "instantiate"], [68, 2, 1, "", "load"], [68, 2, 1, "", "merge_with"], [68, 2, 1, "", "register"], [68, 2, 1, "", "registered"], [68, 2, 1, "", "registry"], [68, 2, 1, "", "save"], [68, 2, 1, "", "to_yaml"], [68, 2, 1, "", "update"]], "cc_hardware.utils.setting.RangeSetting": [[68, 2, 1, "", "__getstate__"], [68, 2, 1, "", "__setstate__"], [68, 2, 1, "", "__str__"], [68, 2, 1, "", "compose"], [68, 5, 1, "", "config"], [68, 2, 1, "", "copy"], [68, 2, 1, "", "create"], [68, 2, 1, "", "create_from_registry"], [68, 5, 1, "", "custom"], [68, 2, 1, "", "default_factory"], [68, 2, 1, "", "instantiate"], [68, 2, 1, "", "load"], [68, 2, 1, "", "merge_with"], [68, 2, 1, "", "register"], [68, 2, 1, "", "registered"], [68, 2, 1, "", "registry"], [68, 2, 1, "", "save"], [68, 2, 1, "", "to_yaml"], [68, 2, 1, "", "update"]], "cc_hardware.utils.setting.Setting": [[68, 2, 1, "", "__getstate__"], [68, 2, 1, "", "__setstate__"], [68, 2, 1, "", "__str__"], [68, 2, 1, "", "compose"], [68, 5, 1, "", "config"], [68, 2, 1, "", "copy"], [68, 2, 1, "", "create"], [68, 2, 1, "", "create_from_registry"], [68, 5, 1, "", "custom"], [68, 2, 1, "", "default_factory"], [68, 2, 1, "", "instantiate"], [68, 2, 1, "", "load"], [68, 2, 1, "", "merge_with"], [68, 2, 1, "", "register"], [68, 2, 1, "", "registered"], [68, 2, 1, "", "registry"], [68, 2, 1, "", "save"], [68, 2, 1, "", "to_yaml"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"]}, "titleterms": {"contribut": 0, "setup": 0, "clone": 0, "repo": [0, 7], "instal": [0, 16], "deploi": 0, "your": 0, "chang": 0, "guidelin": 0, "file": 0, "structur": [0, 7], "edit": 0, "sourc": 0, "code": 0, "comment": 0, "document": [0, 7], "build": 0, "exampl": 3, "avail": 3, "camera": [7, 15, 16, 17, 18, 19, 20], "cultur": 7, "hardwar": 7, "get": 7, "start": 7, "websit": 7, "other": 7, "detail": 7, "packag": [7, 8, 17, 21, 22, 27, 33, 43, 45, 48, 52, 56, 62], "api": 8, "refer": [8, 70], "cc_hardwar": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "algo": [9, 10, 11, 12, 13, 14], "algorithm": 9, "modul": [9, 10, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 42, 44, 46, 47, 49, 50, 53, 54, 55, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68], "content": [9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68], "class": [9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 61, 62, 66, 67, 68], "aruco": 10, "backproject": 11, "dataset": 12, "submodul": [13, 17, 21, 27, 33, 45, 48, 52, 56, 62], "model": 14, "function": [14, 40, 56, 59, 60, 62, 63, 65, 67], "driver": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "flir": 16, "pyspin": 16, "pkl": [18, 28], "realsens": 19, "usb": 20, "subpackag": [21, 39, 43], "mocap": [22, 23, 24], "vive": 24, "safe_seri": 25, "sensor": 26, "spad": [27, 28, 29, 30, 31, 32], "spad_wrapp": 30, "tmf8828": 31, "vl53l8ch": 32, "stepper_motor": [33, 34, 35, 36, 37, 38], "kinesis_stepp": 34, "stepper_control": 35, "stepper_system": 37, "telemetrix_stepp": 38, "tool": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "calibr": 40, "camera_view": 41, "dashboard": [42, 43, 44, 45, 46, 47, 48, 49, 50], "mocap_dashboard": [44, 45, 46, 47], "dash": 44, "pyqtgraph": [47, 49], "spad_dashboard": [48, 49, 50], "flash": 51, "jogger": 53, "util": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69], "constant": 54, "file_handl": 55, "logger": 57, "manag": 58, "matplotlib": 59, "misc": [60, 61, 62, 63, 64, 65, 66], "asyncio_util": 60, "blocking_dequ": 61, "multiprocessing_dequ": 64, "serial_util": 65, "singleton": 66, "registri": 67, "set": 68, "transform": 69}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Setup": [[0, "setup"]], "Cloning the Repo": [[0, "cloning-the-repo"]], "Installing": [[0, "installing"]], "Deploy your Changes": [[0, "deploy-your-changes"]], "Guidelines": [[0, "guidelines"]], "File Structure": [[0, "file-structure"]], "Editing the Source Code": [[0, "editing-the-source-code"]], "Commenting": [[0, "commenting"]], "Editing the Documentation": [[0, "editing-the-documentation"]], "Building the Documentation": [[0, "building-the-documentation"]], "Examples": [[3, "examples"]], "Available Examples": [[3, "available-examples"]], "Camera Culture Hardware Repo": [[7, "camera-culture-hardware-repo"]], "Getting Started": [[7, "getting-started"]], "Documentation Website": [[7, "documentation-website"]], "Other Details": [[7, "other-details"]], "Repo Structure": [[7, "repo-structure"]], "Package Structure": [[7, "package-structure"]], "API Reference": [[8, "api-reference"]], "Packages": [[8, "packages"]], "cc_hardware.algos.algorithm": [[9, "module-cc_hardware.algos.algorithm"]], "Module Contents": [[9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [40, "module-contents"], [42, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [63, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"]], "Classes": [[9, "classes"], [10, "classes"], [12, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [61, "classes"], [62, "classes"], [66, "classes"], [67, "classes"], [68, "classes"]], "cc_hardware.algos.aruco": [[10, "module-cc_hardware.algos.aruco"]], "cc_hardware.algos.backprojection": [[11, "module-cc_hardware.algos.backprojection"]], "cc_hardware.algos.datasets": [[12, "module-cc_hardware.algos.datasets"]], "cc_hardware.algos": [[13, "module-cc_hardware.algos"]], "Submodules": [[13, "submodules"], [17, "submodules"], [21, "submodules"], [27, "submodules"], [33, "submodules"], [45, "submodules"], [48, "submodules"], [52, "submodules"], [56, "submodules"], [62, "submodules"]], "cc_hardware.algos.models": [[14, "module-cc_hardware.algos.models"]], "Functions": [[14, "functions"], [40, "functions"], [56, "functions"], [59, "functions"], [60, "functions"], [62, "functions"], [63, "functions"], [65, "functions"], [67, "functions"]], "cc_hardware.drivers.cameras.camera": [[15, "module-cc_hardware.drivers.cameras.camera"]], "cc_hardware.drivers.cameras.flir": [[16, "module-cc_hardware.drivers.cameras.flir"]], "PySpin Installation": [[16, "pyspin-installation"]], "cc_hardware.drivers.cameras": [[17, "module-cc_hardware.drivers.cameras"]], "Package Contents": [[17, "package-contents"], [21, "package-contents"], [22, "package-contents"], [27, "package-contents"], [33, "package-contents"], [43, "package-contents"], [45, "package-contents"], [48, "package-contents"], [52, "package-contents"], [56, "package-contents"], [62, "package-contents"]], "cc_hardware.drivers.cameras.pkl": [[18, "module-cc_hardware.drivers.cameras.pkl"]], "cc_hardware.drivers.cameras.realsense": [[19, "module-cc_hardware.drivers.cameras.realsense"]], "cc_hardware.drivers.cameras.usb": [[20, "module-cc_hardware.drivers.cameras.usb"]], "cc_hardware.drivers": [[21, "module-cc_hardware.drivers"]], "Subpackages": [[21, "subpackages"], [39, "subpackages"], [43, "subpackages"]], "cc_hardware.drivers.mocap": [[22, "module-cc_hardware.drivers.mocap"]], "cc_hardware.drivers.mocap.mocap": [[23, "module-cc_hardware.drivers.mocap.mocap"]], "cc_hardware.drivers.mocap.vive": [[24, "module-cc_hardware.drivers.mocap.vive"]], "cc_hardware.drivers.safe_serial": [[25, "module-cc_hardware.drivers.safe_serial"]], "cc_hardware.drivers.sensor": [[26, "module-cc_hardware.drivers.sensor"]], "cc_hardware.drivers.spads": [[27, "module-cc_hardware.drivers.spads"]], "cc_hardware.drivers.spads.pkl": [[28, "module-cc_hardware.drivers.spads.pkl"]], "cc_hardware.drivers.spads.spad": [[29, "module-cc_hardware.drivers.spads.spad"]], "cc_hardware.drivers.spads.spad_wrappers": [[30, "module-cc_hardware.drivers.spads.spad_wrappers"]], "cc_hardware.drivers.spads.tmf8828": [[31, "module-cc_hardware.drivers.spads.tmf8828"]], "cc_hardware.drivers.spads.vl53l8ch": [[32, "module-cc_hardware.drivers.spads.vl53l8ch"]], "cc_hardware.drivers.stepper_motors": [[33, "module-cc_hardware.drivers.stepper_motors"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[34, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[35, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[36, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[37, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[38, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "cc_hardware": [[39, "module-cc_hardware"]], "cc_hardware.tools.calibration": [[40, "module-cc_hardware.tools.calibration"]], "cc_hardware.tools.camera_viewer": [[41, "module-cc_hardware.tools.camera_viewer"]], "cc_hardware.tools.dashboard.dashboard": [[42, "module-cc_hardware.tools.dashboard.dashboard"]], "cc_hardware.tools.dashboard": [[43, "module-cc_hardware.tools.dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[44, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[45, "module-cc_hardware.tools.dashboard.mocap_dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[46, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[47, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"]], "cc_hardware.tools.dashboard.spad_dashboard": [[48, "module-cc_hardware.tools.dashboard.spad_dashboard"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[49, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[50, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"]], "cc_hardware.tools.flash": [[51, "module-cc_hardware.tools.flash"]], "cc_hardware.tools": [[52, "module-cc_hardware.tools"]], "cc_hardware.tools.jogger": [[53, "module-cc_hardware.tools.jogger"]], "cc_hardware.utils.constants": [[54, "module-cc_hardware.utils.constants"]], "cc_hardware.utils.file_handlers": [[55, "module-cc_hardware.utils.file_handlers"]], "cc_hardware.utils": [[56, "module-cc_hardware.utils"]], "cc_hardware.utils.logger": [[57, "module-cc_hardware.utils.logger"]], "cc_hardware.utils.manager": [[58, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.matplotlib": [[59, "module-cc_hardware.utils.matplotlib"]], "cc_hardware.utils.misc.asyncio_utils": [[60, "module-cc_hardware.utils.misc.asyncio_utils"]], "cc_hardware.utils.misc.blocking_deque": [[61, "module-cc_hardware.utils.misc.blocking_deque"]], "cc_hardware.utils.misc": [[62, "module-cc_hardware.utils.misc"]], "cc_hardware.utils.misc.misc": [[63, "module-cc_hardware.utils.misc.misc"]], "cc_hardware.utils.misc.multiprocessing_deque": [[64, "module-cc_hardware.utils.misc.multiprocessing_deque"]], "cc_hardware.utils.misc.serial_utils": [[65, "module-cc_hardware.utils.misc.serial_utils"]], "cc_hardware.utils.misc.singleton": [[66, "module-cc_hardware.utils.misc.singleton"]], "cc_hardware.utils.registry": [[67, "module-cc_hardware.utils.registry"]], "cc_hardware.utils.setting": [[68, "module-cc_hardware.utils.setting"]], "cc_hardware.utils.transformations": [[69, "module-cc_hardware.utils.transformations"]], "Reference": [[70, "reference"]]}, "indexentries": {"algorithm (class in cc_hardware.algos.algorithm)": [[9, "cc_hardware.algos.algorithm.Algorithm"]], "cc_hardware.algos.algorithm": [[9, "module-cc_hardware.algos.algorithm"]], "close() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.close"]], "create_from_registry() (algorithm class method)": [[9, "cc_hardware.algos.algorithm.Algorithm.create_from_registry"]], "is_okay (algorithm property)": [[9, "cc_hardware.algos.algorithm.Algorithm.is_okay"]], "module": [[9, "module-cc_hardware.algos.algorithm"], [10, "module-cc_hardware.algos.aruco"], [11, "module-cc_hardware.algos.backprojection"], [12, "module-cc_hardware.algos.datasets"], [13, "module-cc_hardware.algos"], [14, "module-cc_hardware.algos.models"], [15, "module-cc_hardware.drivers.cameras.camera"], [16, "module-cc_hardware.drivers.cameras.flir"], [17, "module-cc_hardware.drivers.cameras"], [18, "module-cc_hardware.drivers.cameras.pkl"], [19, "module-cc_hardware.drivers.cameras.realsense"], [20, "module-cc_hardware.drivers.cameras.usb"], [21, "module-cc_hardware.drivers"], [22, "module-cc_hardware.drivers.mocap"], [23, "module-cc_hardware.drivers.mocap.mocap"], [24, "module-cc_hardware.drivers.mocap.vive"], [25, "module-cc_hardware.drivers.safe_serial"], [26, "module-cc_hardware.drivers.sensor"], [27, "module-cc_hardware.drivers.spads"], [28, "module-cc_hardware.drivers.spads.pkl"], [29, "module-cc_hardware.drivers.spads.spad"], [30, "module-cc_hardware.drivers.spads.spad_wrappers"], [31, "module-cc_hardware.drivers.spads.tmf8828"], [32, "module-cc_hardware.drivers.spads.vl53l8ch"], [33, "module-cc_hardware.drivers.stepper_motors"], [34, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"], [35, "module-cc_hardware.drivers.stepper_motors.stepper_controller"], [36, "module-cc_hardware.drivers.stepper_motors.stepper_motor"], [37, "module-cc_hardware.drivers.stepper_motors.stepper_system"], [38, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"], [39, "module-cc_hardware"], [40, "module-cc_hardware.tools.calibration"], [41, "module-cc_hardware.tools.camera_viewer"], [42, "module-cc_hardware.tools.dashboard.dashboard"], [43, "module-cc_hardware.tools.dashboard"], [44, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"], [45, "module-cc_hardware.tools.dashboard.mocap_dashboard"], [46, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"], [47, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"], [48, "module-cc_hardware.tools.dashboard.spad_dashboard"], [49, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"], [50, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"], [51, "module-cc_hardware.tools.flash"], [52, "module-cc_hardware.tools"], [53, "module-cc_hardware.tools.jogger"], [54, "module-cc_hardware.utils.constants"], [55, "module-cc_hardware.utils.file_handlers"], [56, "module-cc_hardware.utils"], [57, "module-cc_hardware.utils.logger"], [58, "module-cc_hardware.utils.manager"], [59, "module-cc_hardware.utils.matplotlib"], [60, "module-cc_hardware.utils.misc.asyncio_utils"], [61, "module-cc_hardware.utils.misc.blocking_deque"], [62, "module-cc_hardware.utils.misc"], [63, "module-cc_hardware.utils.misc.misc"], [64, "module-cc_hardware.utils.misc.multiprocessing_deque"], [65, "module-cc_hardware.utils.misc.serial_utils"], [66, "module-cc_hardware.utils.misc.singleton"], [67, "module-cc_hardware.utils.registry"], [68, "module-cc_hardware.utils.setting"], [69, "module-cc_hardware.utils.transformations"]], "register() (algorithm class method)": [[9, "cc_hardware.algos.algorithm.Algorithm.register"]], "registered() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.registered"]], "registry() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.registry"]], "run() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.run"]], "arucolocalizationalgorithm (class in cc_hardware.algos.aruco)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco": [[10, "module-cc_hardware.algos.aruco"]], "close() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.close"]], "create_from_registry() (arucolocalizationalgorithm class method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.create_from_registry"]], "is_okay (arucolocalizationalgorithm property)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.is_okay"]], "register() (arucolocalizationalgorithm class method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.register"]], "registered() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.registered"]], "registry() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.registry"]], "run() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.run"]], "cc_hardware.algos.backprojection": [[11, "module-cc_hardware.algos.backprojection"]], "histogramdataset (class in cc_hardware.algos.datasets)": [[12, "cc_hardware.algos.datasets.HistogramDataset"]], "__add__() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.__add__"]], "__getitem__() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.__getitem__"]], "__len__() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.__len__"]], "augment() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.augment"]], "cc_hardware.algos.datasets": [[12, "module-cc_hardware.algos.datasets"]], "clip_negative() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.clip_negative"]], "get_bin_num() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.get_bin_num"]], "get_mean_capture() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.get_mean_capture"]], "get_raw_bin_num() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.get_raw_bin_num"]], "reset_transformations() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.reset_transformations"]], "set_end_bin() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.set_end_bin"]], "set_start_bin() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.set_start_bin"]], "set_zero() (histogramdataset method)": [[12, "cc_hardware.algos.datasets.HistogramDataset.set_zero"]], "cc_hardware.algos": [[13, "module-cc_hardware.algos"]], "deeplocation8 (class in cc_hardware.algos.models)": [[14, "cc_hardware.algos.models.DeepLocation8"]], "cc_hardware.algos.models": [[14, "module-cc_hardware.algos.models"]], "initialize_weights() (in module cc_hardware.algos.models)": [[14, "cc_hardware.algos.models.initialize_weights"]], "camera (class in cc_hardware.drivers.cameras.camera)": [[15, "cc_hardware.drivers.cameras.camera.Camera"]], "cameraconfig (class in cc_hardware.drivers.cameras.camera)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig"]], "__del__() (camera method)": [[15, "cc_hardware.drivers.cameras.camera.Camera.__del__"], [17, "cc_hardware.drivers.cameras.Camera.__del__"], [21, "cc_hardware.drivers.Camera.__del__"]], "__getstate__() (cameraconfig method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.__getstate__"], [17, "cc_hardware.drivers.cameras.CameraConfig.__getstate__"], [21, "cc_hardware.drivers.CameraConfig.__getstate__"]], "__setstate__() (cameraconfig method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.__setstate__"], [17, "cc_hardware.drivers.cameras.CameraConfig.__setstate__"], [21, "cc_hardware.drivers.CameraConfig.__setstate__"]], "__str__() (cameraconfig method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.__str__"], [17, "cc_hardware.drivers.cameras.CameraConfig.__str__"], [21, "cc_hardware.drivers.CameraConfig.__str__"]], "accumulate() (camera method)": [[15, "cc_hardware.drivers.cameras.camera.Camera.accumulate"], [17, "cc_hardware.drivers.cameras.Camera.accumulate"], [21, "cc_hardware.drivers.Camera.accumulate"]], "calibrate() (camera method)": [[15, "cc_hardware.drivers.cameras.camera.Camera.calibrate"], [17, "cc_hardware.drivers.cameras.Camera.calibrate"], [21, "cc_hardware.drivers.Camera.calibrate"]], "cc_hardware.drivers.cameras.camera": [[15, "module-cc_hardware.drivers.cameras.camera"]], "close() (camera method)": [[15, "cc_hardware.drivers.cameras.camera.Camera.close"], [17, "cc_hardware.drivers.cameras.Camera.close"], [21, "cc_hardware.drivers.Camera.close"]], "compose() (cameraconfig class method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.compose"], [17, "cc_hardware.drivers.cameras.CameraConfig.compose"], [21, "cc_hardware.drivers.CameraConfig.compose"]], "config (camera property)": [[15, "cc_hardware.drivers.cameras.camera.Camera.config"], [17, "cc_hardware.drivers.cameras.Camera.config"], [21, "cc_hardware.drivers.Camera.config"]], "config (cameraconfig attribute)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.config"], [17, "cc_hardware.drivers.cameras.CameraConfig.config"], [21, "cc_hardware.drivers.CameraConfig.config"]], "copy() (cameraconfig method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.copy"], [17, "cc_hardware.drivers.cameras.CameraConfig.copy"], [21, "cc_hardware.drivers.CameraConfig.copy"]], "create() (cameraconfig class method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.create"], [17, "cc_hardware.drivers.cameras.CameraConfig.create"], [21, "cc_hardware.drivers.CameraConfig.create"]], "create_from_config() (camera class method)": [[15, "cc_hardware.drivers.cameras.camera.Camera.create_from_config"], [17, "cc_hardware.drivers.cameras.Camera.create_from_config"], [21, "cc_hardware.drivers.Camera.create_from_config"]], "create_from_registry() (camera class method)": [[15, "cc_hardware.drivers.cameras.camera.Camera.create_from_registry"], [17, "cc_hardware.drivers.cameras.Camera.create_from_registry"], [21, "cc_hardware.drivers.Camera.create_from_registry"]], "create_from_registry() (cameraconfig class method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.create_from_registry"], [17, "cc_hardware.drivers.cameras.CameraConfig.create_from_registry"], [21, "cc_hardware.drivers.CameraConfig.create_from_registry"]], "custom (cameraconfig attribute)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.custom"], [17, "cc_hardware.drivers.cameras.CameraConfig.custom"], [21, "cc_hardware.drivers.CameraConfig.custom"]], "distortion_coefficients (camera property)": [[15, "cc_hardware.drivers.cameras.camera.Camera.distortion_coefficients"], [17, "cc_hardware.drivers.cameras.Camera.distortion_coefficients"], [21, "cc_hardware.drivers.Camera.distortion_coefficients"]], "instantiate() (cameraconfig class method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.instantiate"], [17, "cc_hardware.drivers.cameras.CameraConfig.instantiate"], [21, "cc_hardware.drivers.CameraConfig.instantiate"]], "intrinsic_matrix (camera property)": [[15, "cc_hardware.drivers.cameras.camera.Camera.intrinsic_matrix"], [17, "cc_hardware.drivers.cameras.Camera.intrinsic_matrix"], [21, "cc_hardware.drivers.Camera.intrinsic_matrix"]], "is_okay (camera property)": [[15, "cc_hardware.drivers.cameras.camera.Camera.is_okay"], [17, "cc_hardware.drivers.cameras.Camera.is_okay"], [21, "cc_hardware.drivers.Camera.is_okay"]], "load() (cameraconfig class method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.load"], [17, "cc_hardware.drivers.cameras.CameraConfig.load"], [21, "cc_hardware.drivers.CameraConfig.load"]], "merge_with() (cameraconfig method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.merge_with"], [17, "cc_hardware.drivers.cameras.CameraConfig.merge_with"], [21, "cc_hardware.drivers.CameraConfig.merge_with"]], "register() (camera class method)": [[15, "cc_hardware.drivers.cameras.camera.Camera.register"], [17, "cc_hardware.drivers.cameras.Camera.register"], [21, "cc_hardware.drivers.Camera.register"]], "register() (cameraconfig class method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.register"], [17, "cc_hardware.drivers.cameras.CameraConfig.register"], [21, "cc_hardware.drivers.CameraConfig.register"]], "registered() (camera method)": [[15, "cc_hardware.drivers.cameras.camera.Camera.registered"], [17, "cc_hardware.drivers.cameras.Camera.registered"], [21, "cc_hardware.drivers.Camera.registered"]], "registered() (cameraconfig method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.registered"], [17, "cc_hardware.drivers.cameras.CameraConfig.registered"], [21, "cc_hardware.drivers.CameraConfig.registered"]], "registry() (camera method)": [[15, "cc_hardware.drivers.cameras.camera.Camera.registry"], [17, "cc_hardware.drivers.cameras.Camera.registry"], [21, "cc_hardware.drivers.Camera.registry"]], "registry() (cameraconfig method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.registry"], [17, "cc_hardware.drivers.cameras.CameraConfig.registry"], [21, "cc_hardware.drivers.CameraConfig.registry"]], "resolution (camera property)": [[15, "cc_hardware.drivers.cameras.camera.Camera.resolution"], [17, "cc_hardware.drivers.cameras.Camera.resolution"], [21, "cc_hardware.drivers.Camera.resolution"]], "save() (cameraconfig method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.save"], [17, "cc_hardware.drivers.cameras.CameraConfig.save"], [21, "cc_hardware.drivers.CameraConfig.save"]], "settings (camera property)": [[15, "cc_hardware.drivers.cameras.camera.Camera.settings"], [17, "cc_hardware.drivers.cameras.Camera.settings"], [21, "cc_hardware.drivers.Camera.settings"]], "settings (cameraconfig property)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.settings"], [17, "cc_hardware.drivers.cameras.CameraConfig.settings"], [21, "cc_hardware.drivers.CameraConfig.settings"]], "to_yaml() (cameraconfig method)": [[15, "cc_hardware.drivers.cameras.camera.CameraConfig.to_yaml"], [17, "cc_hardware.drivers.cameras.CameraConfig.to_yaml"], [21, "cc_hardware.drivers.CameraConfig.to_yaml"]], "update() (camera method)": [[15, "cc_hardware.drivers.cameras.camera.Camera.update"], [17, "cc_hardware.drivers.cameras.Camera.update"], [21, "cc_hardware.drivers.Camera.update"]], "flircamera (class in cc_hardware.drivers.cameras.flir)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera"]], "grasshopperflircamera (class in cc_hardware.drivers.cameras.flir)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera"]], "__del__() (flircamera method)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.__del__"]], "__del__() (grasshopperflircamera method)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.__del__"]], "accumulate() (flircamera method)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.accumulate"]], "accumulate() (grasshopperflircamera method)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.accumulate"]], "calibrate() (flircamera method)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.calibrate"]], "calibrate() (grasshopperflircamera method)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.calibrate"]], "cc_hardware.drivers.cameras.flir": [[16, "module-cc_hardware.drivers.cameras.flir"]], "close() (flircamera method)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.close"]], "close() (grasshopperflircamera method)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.close"]], "config (flircamera property)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.config"]], "config (grasshopperflircamera property)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.config"]], "create_from_config() (flircamera class method)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.create_from_config"]], "create_from_config() (grasshopperflircamera class method)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.create_from_config"]], "create_from_registry() (flircamera class method)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.create_from_registry"]], "create_from_registry() (grasshopperflircamera class method)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.create_from_registry"]], "distortion_coefficients (flircamera property)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.distortion_coefficients"]], "distortion_coefficients (grasshopperflircamera property)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.distortion_coefficients"]], "intrinsic_matrix (flircamera property)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.intrinsic_matrix"]], "intrinsic_matrix (grasshopperflircamera property)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.intrinsic_matrix"]], "is_okay (flircamera property)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.is_okay"]], "is_okay (grasshopperflircamera property)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.is_okay"]], "register() (flircamera class method)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.register"]], "register() (grasshopperflircamera class method)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.register"]], "registered() (flircamera method)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.registered"]], "registered() (grasshopperflircamera method)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.registered"]], "registry() (flircamera method)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.registry"]], "registry() (grasshopperflircamera method)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.registry"]], "resolution (flircamera property)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.resolution"]], "resolution (grasshopperflircamera property)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.resolution"]], "settings (flircamera property)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.settings"]], "settings (grasshopperflircamera property)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.settings"]], "update() (flircamera method)": [[16, "cc_hardware.drivers.cameras.flir.FlirCamera.update"]], "update() (grasshopperflircamera method)": [[16, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.update"]], "camera (class in cc_hardware.drivers.cameras)": [[17, "cc_hardware.drivers.cameras.Camera"]], "cameraconfig (class in cc_hardware.drivers.cameras)": [[17, "cc_hardware.drivers.cameras.CameraConfig"]], "cc_hardware.drivers.cameras": [[17, "module-cc_hardware.drivers.cameras"]], "pklcamera (class in cc_hardware.drivers.cameras.pkl)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera"]], "__del__() (pklcamera method)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.__del__"]], "accumulate() (pklcamera method)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.accumulate"]], "calibrate() (pklcamera method)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.calibrate"]], "cc_hardware.drivers.cameras.pkl": [[18, "module-cc_hardware.drivers.cameras.pkl"]], "close() (pklcamera method)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.close"]], "config (pklcamera property)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.config"]], "create_from_config() (pklcamera class method)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.create_from_config"]], "create_from_registry() (pklcamera class method)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.create_from_registry"]], "distortion_coefficients (pklcamera property)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.distortion_coefficients"]], "intrinsic_matrix (pklcamera property)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.intrinsic_matrix"]], "is_okay (pklcamera property)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.is_okay"]], "register() (pklcamera class method)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.register"]], "registered() (pklcamera method)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.registered"]], "registry() (pklcamera method)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.registry"]], "resolution (pklcamera property)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.resolution"]], "settings (pklcamera property)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.settings"]], "update() (pklcamera method)": [[18, "cc_hardware.drivers.cameras.pkl.PklCamera.update"]], "realsensecamera (class in cc_hardware.drivers.cameras.realsense)": [[19, "cc_hardware.drivers.cameras.realsense.RealsenseCamera"]], "realsenseconfig (class in cc_hardware.drivers.cameras.realsense)": [[19, "cc_hardware.drivers.cameras.realsense.RealsenseConfig"]], "accumulate() (realsensecamera method)": [[19, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.accumulate"]], "cc_hardware.drivers.cameras.realsense": [[19, "module-cc_hardware.drivers.cameras.realsense"]], "close() (realsensecamera method)": [[19, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.close"]], "config (realsensecamera property)": [[19, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.config"]], "distortion_coefficients (realsensecamera property)": [[19, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.distortion_coefficients"]], "intrinsic_matrix (realsensecamera property)": [[19, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.intrinsic_matrix"]], "is_okay (realsensecamera property)": [[19, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.is_okay"]], "resolution (realsensecamera property)": [[19, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.resolution"]], "usbcamera (class in cc_hardware.drivers.cameras.usb)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera"]], "usbcameraconfig (class in cc_hardware.drivers.cameras.usb)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig"]], "__del__() (usbcamera method)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.__del__"]], "__getstate__() (usbcameraconfig method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.__getstate__"]], "__setstate__() (usbcameraconfig method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.__setstate__"]], "__str__() (usbcameraconfig method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.__str__"]], "accumulate() (usbcamera method)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.accumulate"]], "calibrate() (usbcamera method)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.calibrate"]], "cc_hardware.drivers.cameras.usb": [[20, "module-cc_hardware.drivers.cameras.usb"]], "close() (usbcamera method)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.close"]], "compose() (usbcameraconfig class method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.compose"]], "config (usbcamera property)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.config"]], "config (usbcameraconfig attribute)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.config"]], "copy() (usbcameraconfig method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.copy"]], "create() (usbcameraconfig class method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.create"]], "create_from_config() (usbcamera class method)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.create_from_config"]], "create_from_registry() (usbcamera class method)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.create_from_registry"]], "create_from_registry() (usbcameraconfig class method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.create_from_registry"]], "custom (usbcameraconfig attribute)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.custom"]], "distortion_coefficients (usbcamera property)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.distortion_coefficients"]], "instantiate() (usbcameraconfig class method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.instantiate"]], "intrinsic_matrix (usbcamera property)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.intrinsic_matrix"]], "is_okay (usbcamera property)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.is_okay"]], "load() (usbcameraconfig class method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.load"]], "merge_with() (usbcameraconfig method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.merge_with"]], "register() (usbcamera class method)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.register"]], "register() (usbcameraconfig class method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.register"]], "registered() (usbcamera method)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.registered"]], "registered() (usbcameraconfig method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.registered"]], "registry() (usbcamera method)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.registry"]], "registry() (usbcameraconfig method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.registry"]], "resolution (usbcamera property)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.resolution"]], "save() (usbcameraconfig method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.save"]], "settings (usbcamera property)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.settings"]], "settings (usbcameraconfig property)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.settings"]], "to_yaml() (usbcameraconfig method)": [[20, "cc_hardware.drivers.cameras.usb.USBCameraConfig.to_yaml"]], "update() (usbcamera method)": [[20, "cc_hardware.drivers.cameras.usb.USBCamera.update"]], "camera (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.Camera"]], "cameraconfig (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.CameraConfig"]], "dummysteppermotor (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.DummyStepperMotor"]], "motioncapturesensor (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig"]], "spadsensor (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.SPADSensorConfig"]], "safeserial (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.SafeSerial"]], "sensor (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.Sensor"]], "sensorconfig (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.SensorConfig"]], "steppermotor (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.StepperMotor"]], "steppermotorsystem (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers)": [[21, "cc_hardware.drivers.StepperMotorSystemAxis"]], "__del__() (motioncapturesensor method)": [[21, "cc_hardware.drivers.MotionCaptureSensor.__del__"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.__del__"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.__del__"]], "__del__() (spadsensor method)": [[21, "cc_hardware.drivers.SPADSensor.__del__"], [27, "cc_hardware.drivers.spads.SPADSensor.__del__"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.__del__"]], "__del__() (sensor method)": [[21, "cc_hardware.drivers.Sensor.__del__"], [26, "cc_hardware.drivers.sensor.Sensor.__del__"]], "__dir__() (steppermotorsystemaxis method)": [[21, "cc_hardware.drivers.StepperMotorSystemAxis.__dir__"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__dir__"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__dir__"]], "__format__() (steppermotorsystemaxis method)": [[21, "cc_hardware.drivers.StepperMotorSystemAxis.__format__"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__format__"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__format__"]], "__getattr__() (safeserial method)": [[21, "cc_hardware.drivers.SafeSerial.__getattr__"], [25, "cc_hardware.drivers.safe_serial.SafeSerial.__getattr__"]], "__getattr__() (steppermotorsystem method)": [[21, "cc_hardware.drivers.StepperMotorSystem.__getattr__"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.__getattr__"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.__getattr__"]], "__getstate__() (motioncapturesensorconfig method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.__getstate__"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.__getstate__"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.__getstate__"]], "__getstate__() (spadsensorconfig method)": [[21, "cc_hardware.drivers.SPADSensorConfig.__getstate__"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.__getstate__"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__getstate__"]], "__getstate__() (sensorconfig method)": [[21, "cc_hardware.drivers.SensorConfig.__getstate__"], [26, "cc_hardware.drivers.sensor.SensorConfig.__getstate__"]], "__hash__() (steppermotorsystemaxis method)": [[21, "cc_hardware.drivers.StepperMotorSystemAxis.__hash__"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__hash__"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__hash__"]], "__reduce_ex__() (steppermotorsystemaxis method)": [[21, "cc_hardware.drivers.StepperMotorSystemAxis.__reduce_ex__"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__reduce_ex__"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__reduce_ex__"]], "__repr__() (steppermotorsystemaxis method)": [[21, "cc_hardware.drivers.StepperMotorSystemAxis.__repr__"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__repr__"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__repr__"]], "__setstate__() (motioncapturesensorconfig method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.__setstate__"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.__setstate__"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.__setstate__"]], "__setstate__() (spadsensorconfig method)": [[21, "cc_hardware.drivers.SPADSensorConfig.__setstate__"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.__setstate__"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__setstate__"]], "__setstate__() (sensorconfig method)": [[21, "cc_hardware.drivers.SensorConfig.__setstate__"], [26, "cc_hardware.drivers.sensor.SensorConfig.__setstate__"]], "__str__() (motioncapturesensorconfig method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.__str__"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.__str__"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.__str__"]], "__str__() (spadsensorconfig method)": [[21, "cc_hardware.drivers.SPADSensorConfig.__str__"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.__str__"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__str__"]], "__str__() (sensorconfig method)": [[21, "cc_hardware.drivers.SensorConfig.__str__"], [26, "cc_hardware.drivers.sensor.SensorConfig.__str__"]], "__str__() (steppermotorsystemaxis method)": [[21, "cc_hardware.drivers.StepperMotorSystemAxis.__str__"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__str__"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__str__"]], "accumulate() (motioncapturesensor method)": [[21, "cc_hardware.drivers.MotionCaptureSensor.accumulate"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.accumulate"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.accumulate"]], "accumulate() (spadsensor method)": [[21, "cc_hardware.drivers.SPADSensor.accumulate"], [27, "cc_hardware.drivers.spads.SPADSensor.accumulate"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.accumulate"]], "axes (steppermotorsystem property)": [[21, "cc_hardware.drivers.StepperMotorSystem.axes"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.axes"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.axes"]], "calibrate() (motioncapturesensor method)": [[21, "cc_hardware.drivers.MotionCaptureSensor.calibrate"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.calibrate"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.calibrate"]], "calibrate() (spadsensor method)": [[21, "cc_hardware.drivers.SPADSensor.calibrate"], [27, "cc_hardware.drivers.spads.SPADSensor.calibrate"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.calibrate"]], "calibrate() (sensor method)": [[21, "cc_hardware.drivers.Sensor.calibrate"], [26, "cc_hardware.drivers.sensor.Sensor.calibrate"]], "cc_hardware.drivers": [[21, "module-cc_hardware.drivers"]], "close() (motioncapturesensor method)": [[21, "cc_hardware.drivers.MotionCaptureSensor.close"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.close"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.close"]], "close() (spadsensor method)": [[21, "cc_hardware.drivers.SPADSensor.close"], [27, "cc_hardware.drivers.spads.SPADSensor.close"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.close"]], "close() (sensor method)": [[21, "cc_hardware.drivers.Sensor.close"], [26, "cc_hardware.drivers.sensor.Sensor.close"]], "close() (steppermotor method)": [[21, "cc_hardware.drivers.StepperMotor.close"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.close"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.close"]], "close() (steppermotorsystem method)": [[21, "cc_hardware.drivers.StepperMotorSystem.close"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.close"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.close"]], "compose() (motioncapturesensorconfig class method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.compose"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.compose"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.compose"]], "compose() (spadsensorconfig class method)": [[21, "cc_hardware.drivers.SPADSensorConfig.compose"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.compose"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.compose"]], "compose() (sensorconfig class method)": [[21, "cc_hardware.drivers.SensorConfig.compose"], [26, "cc_hardware.drivers.sensor.SensorConfig.compose"]], "config (motioncapturesensor property)": [[21, "cc_hardware.drivers.MotionCaptureSensor.config"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.config"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.config"]], "config (motioncapturesensorconfig attribute)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.config"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.config"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.config"]], "config (spadsensor property)": [[21, "cc_hardware.drivers.SPADSensor.config"], [27, "cc_hardware.drivers.spads.SPADSensor.config"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.config"]], "config (spadsensorconfig attribute)": [[21, "cc_hardware.drivers.SPADSensorConfig.config"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.config"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.config"]], "config (sensor property)": [[21, "cc_hardware.drivers.Sensor.config"], [26, "cc_hardware.drivers.sensor.Sensor.config"]], "config (sensorconfig attribute)": [[21, "cc_hardware.drivers.SensorConfig.config"], [26, "cc_hardware.drivers.sensor.SensorConfig.config"]], "config (steppermotor property)": [[21, "cc_hardware.drivers.StepperMotor.config"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.config"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.config"]], "config (steppermotorsystem property)": [[21, "cc_hardware.drivers.StepperMotorSystem.config"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.config"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.config"]], "copy() (motioncapturesensorconfig method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.copy"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.copy"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.copy"]], "copy() (spadsensorconfig method)": [[21, "cc_hardware.drivers.SPADSensorConfig.copy"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.copy"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.copy"]], "copy() (sensorconfig method)": [[21, "cc_hardware.drivers.SensorConfig.copy"], [26, "cc_hardware.drivers.sensor.SensorConfig.copy"]], "create() (motioncapturesensorconfig class method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.create"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.create"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.create"]], "create() (spadsensorconfig class method)": [[21, "cc_hardware.drivers.SPADSensorConfig.create"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.create"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.create"]], "create() (safeserial class method)": [[21, "cc_hardware.drivers.SafeSerial.create"], [25, "cc_hardware.drivers.safe_serial.SafeSerial.create"]], "create() (sensorconfig class method)": [[21, "cc_hardware.drivers.SensorConfig.create"], [26, "cc_hardware.drivers.sensor.SensorConfig.create"]], "create_from_config() (motioncapturesensor class method)": [[21, "cc_hardware.drivers.MotionCaptureSensor.create_from_config"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.create_from_config"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.create_from_config"]], "create_from_config() (spadsensor class method)": [[21, "cc_hardware.drivers.SPADSensor.create_from_config"], [27, "cc_hardware.drivers.spads.SPADSensor.create_from_config"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.create_from_config"]], "create_from_config() (sensor class method)": [[21, "cc_hardware.drivers.Sensor.create_from_config"], [26, "cc_hardware.drivers.sensor.Sensor.create_from_config"]], "create_from_config() (steppermotor class method)": [[21, "cc_hardware.drivers.StepperMotor.create_from_config"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.create_from_config"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.create_from_config"]], "create_from_config() (steppermotorsystem class method)": [[21, "cc_hardware.drivers.StepperMotorSystem.create_from_config"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.create_from_config"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.create_from_config"]], "create_from_registry() (motioncapturesensor class method)": [[21, "cc_hardware.drivers.MotionCaptureSensor.create_from_registry"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.create_from_registry"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.create_from_registry"]], "create_from_registry() (motioncapturesensorconfig class method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.create_from_registry"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.create_from_registry"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.create_from_registry"]], "create_from_registry() (spadsensor class method)": [[21, "cc_hardware.drivers.SPADSensor.create_from_registry"], [27, "cc_hardware.drivers.spads.SPADSensor.create_from_registry"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.create_from_registry"]], "create_from_registry() (spadsensorconfig class method)": [[21, "cc_hardware.drivers.SPADSensorConfig.create_from_registry"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.create_from_registry"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.create_from_registry"]], "create_from_registry() (sensor class method)": [[21, "cc_hardware.drivers.Sensor.create_from_registry"], [26, "cc_hardware.drivers.sensor.Sensor.create_from_registry"]], "create_from_registry() (sensorconfig class method)": [[21, "cc_hardware.drivers.SensorConfig.create_from_registry"], [26, "cc_hardware.drivers.sensor.SensorConfig.create_from_registry"]], "create_from_registry() (steppermotor class method)": [[21, "cc_hardware.drivers.StepperMotor.create_from_registry"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.create_from_registry"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.create_from_registry"]], "create_from_registry() (steppermotorsystem class method)": [[21, "cc_hardware.drivers.StepperMotorSystem.create_from_registry"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.create_from_registry"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.create_from_registry"]], "custom (motioncapturesensorconfig attribute)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.custom"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.custom"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.custom"]], "custom (spadsensorconfig attribute)": [[21, "cc_hardware.drivers.SPADSensorConfig.custom"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.custom"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.custom"]], "custom (sensorconfig attribute)": [[21, "cc_hardware.drivers.SensorConfig.custom"], [26, "cc_hardware.drivers.sensor.SensorConfig.custom"]], "home() (steppermotor method)": [[21, "cc_hardware.drivers.StepperMotor.home"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.home"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.home"]], "instantiate() (motioncapturesensorconfig class method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.instantiate"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.instantiate"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.instantiate"]], "instantiate() (spadsensorconfig class method)": [[21, "cc_hardware.drivers.SPADSensorConfig.instantiate"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.instantiate"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.instantiate"]], "instantiate() (sensorconfig class method)": [[21, "cc_hardware.drivers.SensorConfig.instantiate"], [26, "cc_hardware.drivers.sensor.SensorConfig.instantiate"]], "is_moving (steppermotor property)": [[21, "cc_hardware.drivers.StepperMotor.is_moving"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.is_moving"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.is_moving"]], "is_moving (steppermotorsystem property)": [[21, "cc_hardware.drivers.StepperMotorSystem.is_moving"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.is_moving"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.is_moving"]], "is_okay (motioncapturesensor property)": [[21, "cc_hardware.drivers.MotionCaptureSensor.is_okay"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.is_okay"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.is_okay"]], "is_okay (spadsensor property)": [[21, "cc_hardware.drivers.SPADSensor.is_okay"], [27, "cc_hardware.drivers.spads.SPADSensor.is_okay"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.is_okay"]], "is_okay (sensor property)": [[21, "cc_hardware.drivers.Sensor.is_okay"], [26, "cc_hardware.drivers.sensor.Sensor.is_okay"]], "is_okay (steppermotor property)": [[21, "cc_hardware.drivers.StepperMotor.is_okay"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.is_okay"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.is_okay"]], "is_okay (steppermotorsystem property)": [[21, "cc_hardware.drivers.StepperMotorSystem.is_okay"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.is_okay"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.is_okay"]], "load() (motioncapturesensorconfig class method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.load"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.load"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.load"]], "load() (spadsensorconfig class method)": [[21, "cc_hardware.drivers.SPADSensorConfig.load"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.load"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.load"]], "load() (sensorconfig class method)": [[21, "cc_hardware.drivers.SensorConfig.load"], [26, "cc_hardware.drivers.sensor.SensorConfig.load"]], "merge_with() (motioncapturesensorconfig method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.merge_with"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.merge_with"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.merge_with"]], "merge_with() (spadsensorconfig method)": [[21, "cc_hardware.drivers.SPADSensorConfig.merge_with"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.merge_with"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.merge_with"]], "merge_with() (sensorconfig method)": [[21, "cc_hardware.drivers.SensorConfig.merge_with"], [26, "cc_hardware.drivers.sensor.SensorConfig.merge_with"]], "move_by() (steppermotor method)": [[21, "cc_hardware.drivers.StepperMotor.move_by"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.move_by"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_by"]], "move_by() (steppermotorsystem method)": [[21, "cc_hardware.drivers.StepperMotorSystem.move_by"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_by"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_by"]], "move_to() (steppermotor method)": [[21, "cc_hardware.drivers.StepperMotor.move_to"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.move_to"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_to"]], "move_to() (steppermotorsystem method)": [[21, "cc_hardware.drivers.StepperMotorSystem.move_to"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_to"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_to"]], "name() (steppermotorsystemaxis method)": [[21, "cc_hardware.drivers.StepperMotorSystemAxis.name"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.name"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.name"]], "num_bins (spadsensor property)": [[21, "cc_hardware.drivers.SPADSensor.num_bins"], [27, "cc_hardware.drivers.spads.SPADSensor.num_bins"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.num_bins"]], "num_pixels (spadsensorconfig property)": [[21, "cc_hardware.drivers.SPADSensorConfig.num_pixels"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.num_pixels"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.num_pixels"]], "position (steppermotor property)": [[21, "cc_hardware.drivers.StepperMotor.position"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.position"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.position"]], "read() (safeserial method)": [[21, "cc_hardware.drivers.SafeSerial.read"], [25, "cc_hardware.drivers.safe_serial.SafeSerial.read"]], "register() (motioncapturesensor class method)": [[21, "cc_hardware.drivers.MotionCaptureSensor.register"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.register"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.register"]], "register() (motioncapturesensorconfig class method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.register"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.register"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.register"]], "register() (spadsensor class method)": [[21, "cc_hardware.drivers.SPADSensor.register"], [27, "cc_hardware.drivers.spads.SPADSensor.register"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.register"]], "register() (spadsensorconfig class method)": [[21, "cc_hardware.drivers.SPADSensorConfig.register"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.register"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.register"]], "register() (sensor class method)": [[21, "cc_hardware.drivers.Sensor.register"], [26, "cc_hardware.drivers.sensor.Sensor.register"]], "register() (sensorconfig class method)": [[21, "cc_hardware.drivers.SensorConfig.register"], [26, "cc_hardware.drivers.sensor.SensorConfig.register"]], "register() (steppermotor class method)": [[21, "cc_hardware.drivers.StepperMotor.register"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.register"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.register"]], "register() (steppermotorsystem class method)": [[21, "cc_hardware.drivers.StepperMotorSystem.register"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.register"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.register"]], "registered() (motioncapturesensor method)": [[21, "cc_hardware.drivers.MotionCaptureSensor.registered"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.registered"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.registered"]], "registered() (motioncapturesensorconfig method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.registered"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.registered"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.registered"]], "registered() (spadsensor method)": [[21, "cc_hardware.drivers.SPADSensor.registered"], [27, "cc_hardware.drivers.spads.SPADSensor.registered"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.registered"]], "registered() (spadsensorconfig method)": [[21, "cc_hardware.drivers.SPADSensorConfig.registered"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.registered"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.registered"]], "registered() (sensor method)": [[21, "cc_hardware.drivers.Sensor.registered"], [26, "cc_hardware.drivers.sensor.Sensor.registered"]], "registered() (sensorconfig method)": [[21, "cc_hardware.drivers.SensorConfig.registered"], [26, "cc_hardware.drivers.sensor.SensorConfig.registered"]], "registered() (steppermotor method)": [[21, "cc_hardware.drivers.StepperMotor.registered"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.registered"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.registered"]], "registered() (steppermotorsystem method)": [[21, "cc_hardware.drivers.StepperMotorSystem.registered"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.registered"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.registered"]], "registry() (motioncapturesensor method)": [[21, "cc_hardware.drivers.MotionCaptureSensor.registry"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.registry"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.registry"]], "registry() (motioncapturesensorconfig method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.registry"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.registry"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.registry"]], "registry() (spadsensor method)": [[21, "cc_hardware.drivers.SPADSensor.registry"], [27, "cc_hardware.drivers.spads.SPADSensor.registry"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.registry"]], "registry() (spadsensorconfig method)": [[21, "cc_hardware.drivers.SPADSensorConfig.registry"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.registry"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.registry"]], "registry() (sensor method)": [[21, "cc_hardware.drivers.Sensor.registry"], [26, "cc_hardware.drivers.sensor.Sensor.registry"]], "registry() (sensorconfig method)": [[21, "cc_hardware.drivers.SensorConfig.registry"], [26, "cc_hardware.drivers.sensor.SensorConfig.registry"]], "registry() (steppermotor method)": [[21, "cc_hardware.drivers.StepperMotor.registry"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.registry"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.registry"]], "registry() (steppermotorsystem method)": [[21, "cc_hardware.drivers.StepperMotorSystem.registry"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.registry"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.registry"]], "resolution (spadsensor property)": [[21, "cc_hardware.drivers.SPADSensor.resolution"], [27, "cc_hardware.drivers.spads.SPADSensor.resolution"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.resolution"]], "save() (motioncapturesensorconfig method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.save"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.save"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.save"]], "save() (spadsensorconfig method)": [[21, "cc_hardware.drivers.SPADSensorConfig.save"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.save"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.save"]], "save() (sensorconfig method)": [[21, "cc_hardware.drivers.SensorConfig.save"], [26, "cc_hardware.drivers.sensor.SensorConfig.save"]], "settings (motioncapturesensor property)": [[21, "cc_hardware.drivers.MotionCaptureSensor.settings"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.settings"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.settings"]], "settings (motioncapturesensorconfig property)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.settings"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.settings"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.settings"]], "settings (spadsensor property)": [[21, "cc_hardware.drivers.SPADSensor.settings"], [27, "cc_hardware.drivers.spads.SPADSensor.settings"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.settings"]], "settings (spadsensorconfig property)": [[21, "cc_hardware.drivers.SPADSensorConfig.settings"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.settings"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.settings"]], "settings (sensor property)": [[21, "cc_hardware.drivers.Sensor.settings"], [26, "cc_hardware.drivers.sensor.Sensor.settings"]], "settings (sensorconfig property)": [[21, "cc_hardware.drivers.SensorConfig.settings"], [26, "cc_hardware.drivers.sensor.SensorConfig.settings"]], "to_yaml() (motioncapturesensorconfig method)": [[21, "cc_hardware.drivers.MotionCaptureSensorConfig.to_yaml"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.to_yaml"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.to_yaml"]], "to_yaml() (spadsensorconfig method)": [[21, "cc_hardware.drivers.SPADSensorConfig.to_yaml"], [27, "cc_hardware.drivers.spads.SPADSensorConfig.to_yaml"], [29, "cc_hardware.drivers.spads.spad.SPADSensorConfig.to_yaml"]], "to_yaml() (sensorconfig method)": [[21, "cc_hardware.drivers.SensorConfig.to_yaml"], [26, "cc_hardware.drivers.sensor.SensorConfig.to_yaml"]], "update() (motioncapturesensor method)": [[21, "cc_hardware.drivers.MotionCaptureSensor.update"], [22, "cc_hardware.drivers.mocap.MotionCaptureSensor.update"], [23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.update"]], "update() (spadsensor method)": [[21, "cc_hardware.drivers.SPADSensor.update"], [27, "cc_hardware.drivers.spads.SPADSensor.update"], [29, "cc_hardware.drivers.spads.spad.SPADSensor.update"]], "update() (sensor method)": [[21, "cc_hardware.drivers.Sensor.update"], [26, "cc_hardware.drivers.sensor.Sensor.update"]], "value() (steppermotorsystemaxis method)": [[21, "cc_hardware.drivers.StepperMotorSystemAxis.value"], [33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.value"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.value"]], "wait_for_move() (steppermotor method)": [[21, "cc_hardware.drivers.StepperMotor.wait_for_move"], [33, "cc_hardware.drivers.stepper_motors.StepperMotor.wait_for_move"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.wait_for_move"]], "wait_for_start_talk() (safeserial method)": [[21, "cc_hardware.drivers.SafeSerial.wait_for_start_talk"], [25, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_start_talk"]], "wait_for_stop_talk() (safeserial method)": [[21, "cc_hardware.drivers.SafeSerial.wait_for_stop_talk"], [25, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_stop_talk"]], "write() (safeserial method)": [[21, "cc_hardware.drivers.SafeSerial.write"], [25, "cc_hardware.drivers.safe_serial.SafeSerial.write"]], "write_and_wait_for_start_and_stop_talk() (safeserial method)": [[21, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_and_stop_talk"], [25, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_and_stop_talk"]], "write_and_wait_for_start_talk() (safeserial method)": [[21, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_talk"], [25, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_talk"]], "write_and_wait_for_stop_talk() (safeserial method)": [[21, "cc_hardware.drivers.SafeSerial.write_and_wait_for_stop_talk"], [25, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_stop_talk"]], "motioncapturesensor (class in cc_hardware.drivers.mocap)": [[22, "cc_hardware.drivers.mocap.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers.mocap)": [[22, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap": [[22, "module-cc_hardware.drivers.mocap"]], "motioncapturesensor (class in cc_hardware.drivers.mocap.mocap)": [[23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers.mocap.mocap)": [[23, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap.mocap": [[23, "module-cc_hardware.drivers.mocap.mocap"]], "vivetrackerpose (class in cc_hardware.drivers.mocap.vive)": [[24, "cc_hardware.drivers.mocap.vive.ViveTrackerPose"]], "vivetrackersensorconfig (class in cc_hardware.drivers.mocap.vive)": [[24, "cc_hardware.drivers.mocap.vive.ViveTrackerSensorConfig"]], "cc_hardware.drivers.mocap.vive": [[24, "module-cc_hardware.drivers.mocap.vive"]], "get_data() (vivetrackerpose method)": [[24, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.get_data"]], "has_data (vivetrackerpose property)": [[24, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.has_data"]], "process() (vivetrackerpose method)": [[24, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.process"]], "reset() (vivetrackerpose method)": [[24, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.reset"]], "safeserial (class in cc_hardware.drivers.safe_serial)": [[25, "cc_hardware.drivers.safe_serial.SafeSerial"]], "cc_hardware.drivers.safe_serial": [[25, "module-cc_hardware.drivers.safe_serial"]], "sensor (class in cc_hardware.drivers.sensor)": [[26, "cc_hardware.drivers.sensor.Sensor"]], "sensorconfig (class in cc_hardware.drivers.sensor)": [[26, "cc_hardware.drivers.sensor.SensorConfig"]], "sensordata (class in cc_hardware.drivers.sensor)": [[26, "cc_hardware.drivers.sensor.SensorData"]], "cc_hardware.drivers.sensor": [[26, "module-cc_hardware.drivers.sensor"]], "get_data() (sensordata method)": [[26, "cc_hardware.drivers.sensor.SensorData.get_data"]], "has_data (sensordata property)": [[26, "cc_hardware.drivers.sensor.SensorData.has_data"]], "process() (sensordata method)": [[26, "cc_hardware.drivers.sensor.SensorData.process"]], "reset() (sensordata method)": [[26, "cc_hardware.drivers.sensor.SensorData.reset"]], "spaddatatype (class in cc_hardware.drivers.spads)": [[27, "cc_hardware.drivers.spads.SPADDataType"]], "spadsensor (class in cc_hardware.drivers.spads)": [[27, "cc_hardware.drivers.spads.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads)": [[27, "cc_hardware.drivers.spads.SPADSensorConfig"]], "spadsensordata (class in cc_hardware.drivers.spads)": [[27, "cc_hardware.drivers.spads.SPADSensorData"]], "__contains__() (spaddatatype method)": [[27, "cc_hardware.drivers.spads.SPADDataType.__contains__"], [29, "cc_hardware.drivers.spads.spad.SPADDataType.__contains__"]], "__dir__() (spaddatatype method)": [[27, "cc_hardware.drivers.spads.SPADDataType.__dir__"], [29, "cc_hardware.drivers.spads.spad.SPADDataType.__dir__"]], "__format__() (spaddatatype method)": [[27, "cc_hardware.drivers.spads.SPADDataType.__format__"], [29, "cc_hardware.drivers.spads.spad.SPADDataType.__format__"]], "__hash__() (spaddatatype method)": [[27, "cc_hardware.drivers.spads.SPADDataType.__hash__"], [29, "cc_hardware.drivers.spads.spad.SPADDataType.__hash__"]], "__iter__() (spaddatatype method)": [[27, "cc_hardware.drivers.spads.SPADDataType.__iter__"], [29, "cc_hardware.drivers.spads.spad.SPADDataType.__iter__"]], "__reduce_ex__() (spaddatatype method)": [[27, "cc_hardware.drivers.spads.SPADDataType.__reduce_ex__"], [29, "cc_hardware.drivers.spads.spad.SPADDataType.__reduce_ex__"]], "__repr__() (spaddatatype method)": [[27, "cc_hardware.drivers.spads.SPADDataType.__repr__"], [29, "cc_hardware.drivers.spads.spad.SPADDataType.__repr__"]], "__str__() (spaddatatype method)": [[27, "cc_hardware.drivers.spads.SPADDataType.__str__"], [29, "cc_hardware.drivers.spads.spad.SPADDataType.__str__"]], "calculate_distance() (spadsensordata method)": [[27, "cc_hardware.drivers.spads.SPADSensorData.calculate_distance"], [29, "cc_hardware.drivers.spads.spad.SPADSensorData.calculate_distance"]], "calculate_point_cloud() (spadsensordata method)": [[27, "cc_hardware.drivers.spads.SPADSensorData.calculate_point_cloud"], [29, "cc_hardware.drivers.spads.spad.SPADSensorData.calculate_point_cloud"]], "cc_hardware.drivers.spads": [[27, "module-cc_hardware.drivers.spads"]], "get_data() (spadsensordata method)": [[27, "cc_hardware.drivers.spads.SPADSensorData.get_data"], [29, "cc_hardware.drivers.spads.spad.SPADSensorData.get_data"]], "has_data (spadsensordata property)": [[27, "cc_hardware.drivers.spads.SPADSensorData.has_data"], [29, "cc_hardware.drivers.spads.spad.SPADSensorData.has_data"]], "name() (spaddatatype method)": [[27, "cc_hardware.drivers.spads.SPADDataType.name"], [29, "cc_hardware.drivers.spads.spad.SPADDataType.name"]], "process() (spadsensordata method)": [[27, "cc_hardware.drivers.spads.SPADSensorData.process"], [29, "cc_hardware.drivers.spads.spad.SPADSensorData.process"]], "reset() (spadsensordata method)": [[27, "cc_hardware.drivers.spads.SPADSensorData.reset"], [29, "cc_hardware.drivers.spads.spad.SPADSensorData.reset"]], "value() (spaddatatype method)": [[27, "cc_hardware.drivers.spads.SPADDataType.value"], [29, "cc_hardware.drivers.spads.spad.SPADDataType.value"]], "pklspadsensor (class in cc_hardware.drivers.spads.pkl)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor"]], "pklspadsensorconfig (class in cc_hardware.drivers.spads.pkl)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig"]], "__del__() (pklspadsensor method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.__del__"]], "__getstate__() (pklspadsensorconfig method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.__getstate__"]], "__setstate__() (pklspadsensorconfig method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.__setstate__"]], "__str__() (pklspadsensorconfig method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.__str__"]], "accumulate() (pklspadsensor method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.accumulate"]], "calibrate() (pklspadsensor method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.calibrate"]], "cc_hardware.drivers.spads.pkl": [[28, "module-cc_hardware.drivers.spads.pkl"]], "close() (pklspadsensor method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.close"]], "compose() (pklspadsensorconfig class method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.compose"]], "config (pklspadsensor property)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.config"]], "config (pklspadsensorconfig attribute)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.config"]], "copy() (pklspadsensorconfig method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.copy"]], "create() (pklspadsensorconfig class method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.create"]], "create_from_config() (pklspadsensor class method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.create_from_config"]], "create_from_registry() (pklspadsensor class method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.create_from_registry"]], "create_from_registry() (pklspadsensorconfig class method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.create_from_registry"]], "custom (pklspadsensorconfig attribute)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.custom"]], "instantiate() (pklspadsensorconfig class method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.instantiate"]], "is_okay (pklspadsensor property)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.is_okay"]], "load() (pklspadsensorconfig class method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.load"]], "merge_with() (pklspadsensorconfig method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.merge_with"]], "num_bins (pklspadsensor property)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.num_bins"]], "num_pixels (pklspadsensorconfig property)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.num_pixels"]], "register() (pklspadsensor class method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.register"]], "register() (pklspadsensorconfig class method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.register"]], "registered() (pklspadsensor method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.registered"]], "registered() (pklspadsensorconfig method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.registered"]], "registry() (pklspadsensor method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.registry"]], "registry() (pklspadsensorconfig method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.registry"]], "resolution (pklspadsensor property)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.resolution"]], "save() (pklspadsensorconfig method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.save"]], "settings (pklspadsensor property)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.settings"]], "settings (pklspadsensorconfig property)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.settings"]], "to_yaml() (pklspadsensorconfig method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.to_yaml"]], "update() (pklspadsensor method)": [[28, "cc_hardware.drivers.spads.pkl.PklSPADSensor.update"]], "spaddatatype (class in cc_hardware.drivers.spads.spad)": [[29, "cc_hardware.drivers.spads.spad.SPADDataType"]], "spadsensor (class in cc_hardware.drivers.spads.spad)": [[29, "cc_hardware.drivers.spads.spad.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads.spad)": [[29, "cc_hardware.drivers.spads.spad.SPADSensorConfig"]], "spadsensordata (class in cc_hardware.drivers.spads.spad)": [[29, "cc_hardware.drivers.spads.spad.SPADSensorData"]], "cc_hardware.drivers.spads.spad": [[29, "module-cc_hardware.drivers.spads.spad"]], "spadmergewrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[30, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper"]], "spadmergewrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[30, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig"]], "spadmovingaveragewrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[30, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper"]], "spadmovingaveragewrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[30, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig"]], "spadwrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[30, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper"]], "spadwrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[30, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig"]], "cc_hardware.drivers.spads.spad_wrappers": [[30, "module-cc_hardware.drivers.spads.spad_wrappers"]], "settings (spadmergewrapperconfig property)": [[30, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.settings"]], "settings (spadmovingaveragewrapperconfig property)": [[30, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.settings"]], "settings (spadwrapperconfig property)": [[30, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.settings"]], "rangemode (class in cc_hardware.drivers.spads.tmf8828)": [[31, "cc_hardware.drivers.spads.tmf8828.RangeMode"]], "spadid (class in cc_hardware.drivers.spads.tmf8828)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID"]], "tmf8828config (class in cc_hardware.drivers.spads.tmf8828)": [[31, "cc_hardware.drivers.spads.tmf8828.TMF8828Config"]], "tmf8828data (class in cc_hardware.drivers.spads.tmf8828)": [[31, "cc_hardware.drivers.spads.tmf8828.TMF8828Data"]], "tmf8828sensor (class in cc_hardware.drivers.spads.tmf8828)": [[31, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor"]], "__dir__() (rangemode method)": [[31, "cc_hardware.drivers.spads.tmf8828.RangeMode.__dir__"]], "__dir__() (spadid method)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.__dir__"]], "__format__() (rangemode method)": [[31, "cc_hardware.drivers.spads.tmf8828.RangeMode.__format__"]], "__format__() (spadid method)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.__format__"]], "__hash__() (rangemode method)": [[31, "cc_hardware.drivers.spads.tmf8828.RangeMode.__hash__"]], "__hash__() (spadid method)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.__hash__"]], "__reduce_ex__() (rangemode method)": [[31, "cc_hardware.drivers.spads.tmf8828.RangeMode.__reduce_ex__"]], "__reduce_ex__() (spadid method)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.__reduce_ex__"]], "__repr__() (rangemode method)": [[31, "cc_hardware.drivers.spads.tmf8828.RangeMode.__repr__"]], "__repr__() (spadid method)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.__repr__"]], "__str__() (rangemode method)": [[31, "cc_hardware.drivers.spads.tmf8828.RangeMode.__str__"]], "__str__() (spadid method)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.__str__"]], "accumulate() (tmf8828sensor method)": [[31, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.accumulate"]], "active_channels_per_subcapture (spadid property)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.active_channels_per_subcapture"]], "calibrate() (tmf8828sensor method)": [[31, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.calibrate"]], "cc_hardware.drivers.spads.tmf8828": [[31, "module-cc_hardware.drivers.spads.tmf8828"]], "close() (tmf8828sensor method)": [[31, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.close"]], "config (tmf8828sensor property)": [[31, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.config"]], "fov (spadid property)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.fov"]], "is_okay (tmf8828sensor property)": [[31, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.is_okay"]], "name() (rangemode method)": [[31, "cc_hardware.drivers.spads.tmf8828.RangeMode.name"]], "name() (spadid method)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.name"]], "num_channels (spadid property)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.num_channels"]], "process() (tmf8828data method)": [[31, "cc_hardware.drivers.spads.tmf8828.TMF8828Data.process"]], "resolution (spadid property)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.resolution"]], "timing_resolution (rangemode property)": [[31, "cc_hardware.drivers.spads.tmf8828.RangeMode.timing_resolution"]], "value() (rangemode method)": [[31, "cc_hardware.drivers.spads.tmf8828.RangeMode.value"]], "value() (spadid method)": [[31, "cc_hardware.drivers.spads.tmf8828.SPADID.value"]], "rangingmode (class in cc_hardware.drivers.spads.vl53l8ch)": [[32, "cc_hardware.drivers.spads.vl53l8ch.RangingMode"]], "vl53l8chconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig"]], "vl53l8chconfig4x4 (class in cc_hardware.drivers.spads.vl53l8ch)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4"]], "vl53l8chconfig8x8 (class in cc_hardware.drivers.spads.vl53l8ch)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8"]], "vl53l8chdata (class in cc_hardware.drivers.spads.vl53l8ch)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData"]], "vl53l8chsensor (class in cc_hardware.drivers.spads.vl53l8ch)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor"]], "vl53l8chsharedconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig"]], "__del__() (vl53l8chsensor method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.__del__"]], "__dir__() (rangingmode method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__dir__"]], "__format__() (rangingmode method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__format__"]], "__getstate__() (vl53l8chconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__getstate__"]], "__getstate__() (vl53l8chconfig4x4 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__getstate__"]], "__getstate__() (vl53l8chconfig8x8 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__getstate__"]], "__getstate__() (vl53l8chsharedconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__getstate__"]], "__hash__() (rangingmode method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__hash__"]], "__reduce_ex__() (rangingmode method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__reduce_ex__"]], "__repr__() (rangingmode method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__repr__"]], "__setstate__() (vl53l8chconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__setstate__"]], "__setstate__() (vl53l8chconfig4x4 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__setstate__"]], "__setstate__() (vl53l8chconfig8x8 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__setstate__"]], "__setstate__() (vl53l8chsharedconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__setstate__"]], "__str__() (rangingmode method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__str__"]], "__str__() (vl53l8chconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__str__"]], "__str__() (vl53l8chconfig4x4 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__str__"]], "__str__() (vl53l8chconfig8x8 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__str__"]], "__str__() (vl53l8chsharedconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__str__"]], "accumulate() (vl53l8chsensor method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.accumulate"]], "calculate_distance() (vl53l8chdata method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.calculate_distance"]], "calculate_point_cloud() (vl53l8chdata method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.calculate_point_cloud"]], "calibrate() (vl53l8chsensor method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.calibrate"]], "cc_hardware.drivers.spads.vl53l8ch": [[32, "module-cc_hardware.drivers.spads.vl53l8ch"]], "close() (vl53l8chsensor method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.close"]], "compose() (vl53l8chconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.compose"]], "compose() (vl53l8chconfig4x4 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.compose"]], "compose() (vl53l8chconfig8x8 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.compose"]], "compose() (vl53l8chsharedconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.compose"]], "config (vl53l8chconfig attribute)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.config"]], "config (vl53l8chconfig4x4 attribute)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.config"]], "config (vl53l8chconfig8x8 attribute)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.config"]], "config (vl53l8chsensor property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.config"]], "config (vl53l8chsharedconfig attribute)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.config"]], "copy() (vl53l8chconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.copy"]], "copy() (vl53l8chconfig4x4 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.copy"]], "copy() (vl53l8chconfig8x8 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.copy"]], "copy() (vl53l8chsharedconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.copy"]], "create() (vl53l8chconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.create"]], "create() (vl53l8chconfig4x4 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.create"]], "create() (vl53l8chconfig8x8 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.create"]], "create() (vl53l8chsharedconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.create"]], "create_from_config() (vl53l8chsensor class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.create_from_config"]], "create_from_registry() (vl53l8chconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.create_from_registry"]], "create_from_registry() (vl53l8chconfig4x4 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.create_from_registry"]], "create_from_registry() (vl53l8chconfig8x8 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.create_from_registry"]], "create_from_registry() (vl53l8chsensor class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.create_from_registry"]], "create_from_registry() (vl53l8chsharedconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.create_from_registry"]], "custom (vl53l8chconfig attribute)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.custom"]], "custom (vl53l8chconfig4x4 attribute)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.custom"]], "custom (vl53l8chconfig8x8 attribute)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.custom"]], "custom (vl53l8chsharedconfig attribute)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.custom"]], "get_data() (vl53l8chdata method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.get_data"]], "has_data (vl53l8chdata property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.has_data"]], "instantiate() (vl53l8chconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.instantiate"]], "instantiate() (vl53l8chconfig4x4 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.instantiate"]], "instantiate() (vl53l8chconfig8x8 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.instantiate"]], "instantiate() (vl53l8chsharedconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.instantiate"]], "is_okay (vl53l8chsensor property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.is_okay"]], "load() (vl53l8chconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.load"]], "load() (vl53l8chconfig4x4 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.load"]], "load() (vl53l8chconfig8x8 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.load"]], "load() (vl53l8chsharedconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.load"]], "merge_with() (vl53l8chconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.merge_with"]], "merge_with() (vl53l8chconfig4x4 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.merge_with"]], "merge_with() (vl53l8chconfig8x8 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.merge_with"]], "merge_with() (vl53l8chsharedconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.merge_with"]], "name() (rangingmode method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.name"]], "num_bins (vl53l8chsensor property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.num_bins"]], "num_pixels (vl53l8chconfig property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.num_pixels"]], "num_pixels (vl53l8chconfig4x4 property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.num_pixels"]], "num_pixels (vl53l8chconfig8x8 property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.num_pixels"]], "num_pixels (vl53l8chsharedconfig property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.num_pixels"]], "pack() (vl53l8chconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.pack"]], "pack() (vl53l8chconfig4x4 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.pack"]], "pack() (vl53l8chconfig8x8 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.pack"]], "pack() (vl53l8chsharedconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.pack"]], "process() (vl53l8chdata method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.process"]], "register() (vl53l8chconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.register"]], "register() (vl53l8chconfig4x4 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.register"]], "register() (vl53l8chconfig8x8 class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.register"]], "register() (vl53l8chsensor class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.register"]], "register() (vl53l8chsharedconfig class method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.register"]], "registered() (vl53l8chconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.registered"]], "registered() (vl53l8chconfig4x4 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.registered"]], "registered() (vl53l8chconfig8x8 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.registered"]], "registered() (vl53l8chsensor method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.registered"]], "registered() (vl53l8chsharedconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.registered"]], "registry() (vl53l8chconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.registry"]], "registry() (vl53l8chconfig4x4 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.registry"]], "registry() (vl53l8chconfig8x8 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.registry"]], "registry() (vl53l8chsensor method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.registry"]], "registry() (vl53l8chsharedconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.registry"]], "reset() (vl53l8chdata method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.reset"]], "resolution (vl53l8chsensor property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.resolution"]], "save() (vl53l8chconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.save"]], "save() (vl53l8chconfig4x4 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.save"]], "save() (vl53l8chconfig8x8 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.save"]], "save() (vl53l8chsharedconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.save"]], "settings (vl53l8chconfig property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.settings"]], "settings (vl53l8chconfig4x4 property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.settings"]], "settings (vl53l8chconfig8x8 property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.settings"]], "settings (vl53l8chsensor property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.settings"]], "settings (vl53l8chsharedconfig property)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.settings"]], "to_yaml() (vl53l8chconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.to_yaml"]], "to_yaml() (vl53l8chconfig4x4 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.to_yaml"]], "to_yaml() (vl53l8chconfig8x8 method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.to_yaml"]], "to_yaml() (vl53l8chsharedconfig method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.to_yaml"]], "update() (vl53l8chsensor method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.update"]], "value() (rangingmode method)": [[32, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.value"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors)": [[33, "cc_hardware.drivers.stepper_motors.DummyStepperMotor"]], "steppercontroller (class in cc_hardware.drivers.stepper_motors)": [[33, "cc_hardware.drivers.stepper_motors.StepperController"]], "steppercontrollerconfig (class in cc_hardware.drivers.stepper_motors)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig"]], "steppermotor (class in cc_hardware.drivers.stepper_motors)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotor"]], "steppermotorconfig (class in cc_hardware.drivers.stepper_motors)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis"]], "steppermotorsystemconfig (class in cc_hardware.drivers.stepper_motors)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig"]], "__getstate__() (steppercontrollerconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.__getstate__"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.__getstate__"]], "__getstate__() (steppermotorconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.__getstate__"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.__getstate__"]], "__getstate__() (steppermotorsystemconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.__getstate__"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.__getstate__"]], "__setstate__() (steppercontrollerconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.__setstate__"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.__setstate__"]], "__setstate__() (steppermotorconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.__setstate__"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.__setstate__"]], "__setstate__() (steppermotorsystemconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.__setstate__"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.__setstate__"]], "__str__() (steppercontrollerconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.__str__"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.__str__"]], "__str__() (steppermotorconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.__str__"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.__str__"]], "__str__() (steppermotorsystemconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.__str__"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.__str__"]], "cc_hardware.drivers.stepper_motors": [[33, "module-cc_hardware.drivers.stepper_motors"]], "close() (steppercontroller method)": [[33, "cc_hardware.drivers.stepper_motors.StepperController.close"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.close"]], "compose() (steppercontrollerconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.compose"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.compose"]], "compose() (steppermotorconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.compose"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.compose"]], "compose() (steppermotorsystemconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.compose"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.compose"]], "config (steppercontroller property)": [[33, "cc_hardware.drivers.stepper_motors.StepperController.config"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.config"]], "config (steppercontrollerconfig attribute)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.config"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.config"]], "config (steppermotorconfig attribute)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.config"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.config"]], "config (steppermotorsystemconfig attribute)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.config"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.config"]], "copy() (steppercontrollerconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.copy"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.copy"]], "copy() (steppermotorconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.copy"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.copy"]], "copy() (steppermotorsystemconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.copy"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.copy"]], "create() (steppercontrollerconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.create"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.create"]], "create() (steppermotorconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.create"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.create"]], "create() (steppermotorsystemconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.create"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.create"]], "create_from_config() (steppercontroller class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperController.create_from_config"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.create_from_config"]], "create_from_registry() (steppercontroller class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperController.create_from_registry"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.create_from_registry"]], "create_from_registry() (steppercontrollerconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.create_from_registry"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.create_from_registry"]], "create_from_registry() (steppermotorconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.create_from_registry"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.create_from_registry"]], "create_from_registry() (steppermotorsystemconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.create_from_registry"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.create_from_registry"]], "custom (steppercontrollerconfig attribute)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.custom"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.custom"]], "custom (steppermotorconfig attribute)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.custom"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.custom"]], "custom (steppermotorsystemconfig attribute)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.custom"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.custom"]], "get_position() (steppercontroller method)": [[33, "cc_hardware.drivers.stepper_motors.StepperController.get_position"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.get_position"]], "instantiate() (steppercontrollerconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.instantiate"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.instantiate"]], "instantiate() (steppermotorconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.instantiate"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.instantiate"]], "instantiate() (steppermotorsystemconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.instantiate"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.instantiate"]], "is_okay (steppercontroller property)": [[33, "cc_hardware.drivers.stepper_motors.StepperController.is_okay"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.is_okay"]], "load() (steppercontrollerconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.load"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.load"]], "load() (steppermotorconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.load"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.load"]], "load() (steppermotorsystemconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.load"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.load"]], "merge_with() (steppercontrollerconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.merge_with"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.merge_with"]], "merge_with() (steppermotorconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.merge_with"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.merge_with"]], "merge_with() (steppermotorsystemconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.merge_with"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.merge_with"]], "register() (steppercontroller class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperController.register"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.register"]], "register() (steppercontrollerconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.register"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.register"]], "register() (steppermotorconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.register"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.register"]], "register() (steppermotorsystemconfig class method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.register"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.register"]], "registered() (steppercontroller method)": [[33, "cc_hardware.drivers.stepper_motors.StepperController.registered"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.registered"]], "registered() (steppercontrollerconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.registered"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.registered"]], "registered() (steppermotorconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.registered"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.registered"]], "registered() (steppermotorsystemconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.registered"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.registered"]], "registry() (steppercontroller method)": [[33, "cc_hardware.drivers.stepper_motors.StepperController.registry"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.registry"]], "registry() (steppercontrollerconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.registry"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.registry"]], "registry() (steppermotorconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.registry"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.registry"]], "registry() (steppermotorsystemconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.registry"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.registry"]], "save() (steppercontrollerconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.save"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.save"]], "save() (steppermotorconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.save"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.save"]], "save() (steppermotorsystemconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.save"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.save"]], "to_yaml() (steppercontrollerconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperControllerConfig.to_yaml"], [35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig.to_yaml"]], "to_yaml() (steppermotorconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.to_yaml"], [36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.to_yaml"]], "to_yaml() (steppermotorsystemconfig method)": [[33, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.to_yaml"], [37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.to_yaml"]], "azimuthelevationsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem"]], "kinesisrotationstage (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage"]], "kinesissteppermotor (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor"]], "kinesissteppermotorsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[34, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "close() (kinesisrotationstage method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.close"]], "close() (kinesissteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.close"]], "home() (kinesisrotationstage method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.home"]], "home() (kinesissteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.home"]], "initialize() (kinesisrotationstage method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.initialize"]], "initialize() (kinesissteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.initialize"]], "is_okay (kinesisrotationstage property)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.is_okay"]], "is_okay (kinesissteppermotor property)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.is_okay"]], "lower_limit (kinesisrotationstage property)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.lower_limit"]], "lower_limit (kinesissteppermotor property)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.lower_limit"]], "move_by() (kinesisrotationstage method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_by"]], "move_by() (kinesissteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_by"]], "move_to() (kinesisrotationstage method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_to"]], "move_to() (kinesissteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_to"]], "position (kinesisrotationstage property)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.position"]], "position (kinesissteppermotor property)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.position"]], "upper_limit (kinesisrotationstage property)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.upper_limit"]], "upper_limit (kinesissteppermotor property)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.upper_limit"]], "wait_for_move() (kinesisrotationstage method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.wait_for_move"]], "wait_for_move() (kinesissteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.wait_for_move"]], "controlleraxisconfig (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig"]], "snakecontrolleraxisconfig (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig"]], "snakesteppercontroller (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController"]], "snakesteppercontrollerconfig (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig"]], "snakesteppercontrollerconfigxy (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY"]], "steppercontroller (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController"]], "steppercontrollerconfig (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig"]], "__getstate__() (controlleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.__getstate__"]], "__getstate__() (snakecontrolleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.__getstate__"]], "__getstate__() (snakesteppercontrollerconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.__getstate__"]], "__getstate__() (snakesteppercontrollerconfigxy method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.__getstate__"]], "__setstate__() (controlleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.__setstate__"]], "__setstate__() (snakecontrolleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.__setstate__"]], "__setstate__() (snakesteppercontrollerconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.__setstate__"]], "__setstate__() (snakesteppercontrollerconfigxy method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.__setstate__"]], "__str__() (controlleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.__str__"]], "__str__() (snakecontrolleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.__str__"]], "__str__() (snakesteppercontrollerconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.__str__"]], "__str__() (snakesteppercontrollerconfigxy method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.__str__"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[35, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "close() (snakesteppercontroller method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.close"]], "compose() (controlleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.compose"]], "compose() (snakecontrolleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.compose"]], "compose() (snakesteppercontrollerconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.compose"]], "compose() (snakesteppercontrollerconfigxy class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.compose"]], "config (controlleraxisconfig attribute)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.config"]], "config (snakecontrolleraxisconfig attribute)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.config"]], "config (snakesteppercontroller property)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.config"]], "config (snakesteppercontrollerconfig attribute)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.config"]], "config (snakesteppercontrollerconfigxy attribute)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.config"]], "copy() (controlleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.copy"]], "copy() (snakecontrolleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.copy"]], "copy() (snakesteppercontrollerconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.copy"]], "copy() (snakesteppercontrollerconfigxy method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.copy"]], "create() (controlleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.create"]], "create() (snakecontrolleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.create"]], "create() (snakesteppercontrollerconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.create"]], "create() (snakesteppercontrollerconfigxy class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.create"]], "create_from_config() (snakesteppercontroller class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.create_from_config"]], "create_from_registry() (controlleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.create_from_registry"]], "create_from_registry() (snakecontrolleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.create_from_registry"]], "create_from_registry() (snakesteppercontroller class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.create_from_registry"]], "create_from_registry() (snakesteppercontrollerconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.create_from_registry"]], "create_from_registry() (snakesteppercontrollerconfigxy class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.create_from_registry"]], "custom (controlleraxisconfig attribute)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.custom"]], "custom (snakecontrolleraxisconfig attribute)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.custom"]], "custom (snakesteppercontrollerconfig attribute)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.custom"]], "custom (snakesteppercontrollerconfigxy attribute)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.custom"]], "get_position() (snakesteppercontroller method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.get_position"]], "instantiate() (controlleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.instantiate"]], "instantiate() (snakecontrolleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.instantiate"]], "instantiate() (snakesteppercontrollerconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.instantiate"]], "instantiate() (snakesteppercontrollerconfigxy class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.instantiate"]], "is_okay (snakesteppercontroller property)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.is_okay"]], "load() (controlleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.load"]], "load() (snakecontrolleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.load"]], "load() (snakesteppercontrollerconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.load"]], "load() (snakesteppercontrollerconfigxy class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.load"]], "merge_with() (controlleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.merge_with"]], "merge_with() (snakecontrolleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.merge_with"]], "merge_with() (snakesteppercontrollerconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.merge_with"]], "merge_with() (snakesteppercontrollerconfigxy method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.merge_with"]], "register() (controlleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.register"]], "register() (snakecontrolleraxisconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.register"]], "register() (snakesteppercontroller class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.register"]], "register() (snakesteppercontrollerconfig class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.register"]], "register() (snakesteppercontrollerconfigxy class method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.register"]], "registered() (controlleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.registered"]], "registered() (snakecontrolleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.registered"]], "registered() (snakesteppercontroller method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.registered"]], "registered() (snakesteppercontrollerconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.registered"]], "registered() (snakesteppercontrollerconfigxy method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.registered"]], "registry() (controlleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.registry"]], "registry() (snakecontrolleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.registry"]], "registry() (snakesteppercontroller method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.registry"]], "registry() (snakesteppercontrollerconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.registry"]], "registry() (snakesteppercontrollerconfigxy method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.registry"]], "save() (controlleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.save"]], "save() (snakecontrolleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.save"]], "save() (snakesteppercontrollerconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.save"]], "save() (snakesteppercontrollerconfigxy method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.save"]], "to_yaml() (controlleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig.to_yaml"]], "to_yaml() (snakecontrolleraxisconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig.to_yaml"]], "to_yaml() (snakesteppercontrollerconfig method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig.to_yaml"]], "to_yaml() (snakesteppercontrollerconfigxy method)": [[35, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY.to_yaml"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[36, "cc_hardware.drivers.stepper_motors.stepper_motor.DummyStepperMotor"]], "steppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor"]], "steppermotorconfig (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[36, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[36, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "dummysteppersystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis"]], "steppermotorsystemconfig (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig"]], "__getattr__() (dummysteppersystem method)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.__getattr__"]], "axes (dummysteppersystem property)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.axes"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[37, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "close() (dummysteppersystem method)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.close"]], "config (dummysteppersystem property)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.config"]], "create_from_config() (dummysteppersystem class method)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.create_from_config"]], "create_from_registry() (dummysteppersystem class method)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.create_from_registry"]], "is_moving (dummysteppersystem property)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.is_moving"]], "is_okay (dummysteppersystem property)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.is_okay"]], "move_by() (dummysteppersystem method)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_by"]], "move_to() (dummysteppersystem method)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_to"]], "register() (dummysteppersystem class method)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.register"]], "registered() (dummysteppersystem method)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.registered"]], "registry() (dummysteppersystem method)": [[37, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.registry"]], "dualdrive2axisgantryconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryConfig"]], "dualdrive2axisgantryxconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryXConfig"]], "dualdrive2axisgantryy1config (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryY1Config"]], "dualdrive2axisgantryy2config (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryY2Config"]], "singledrive1axisgantryconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryConfig"]], "singledrive1axisgantryxconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryXConfig"]], "singledrive1axisgantryyconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryYConfig"]], "telemetrixsteppermotor (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor"]], "telemetrixsteppermotorconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorConfig"]], "telemetrixsteppermotorsystem (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem"]], "telemetrixsteppermotorsystemconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystemConfig"]], "telemetrixsteppermotorxconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXConfig"]], "telemetrixsteppermotoryconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYConfig"]], "telemetrixsteppermotorzconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZConfig"]], "__getattr__() (telemetrixsteppermotor method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.__getattr__"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[38, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "close() (telemetrixsteppermotor method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.close"]], "close() (telemetrixsteppermotorsystem method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.close"]], "cm_to_revs() (telemetrixsteppermotor method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.cm_to_revs"]], "home() (telemetrixsteppermotor method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.home"]], "id (telemetrixsteppermotor property)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.id"]], "is_moving (telemetrixsteppermotor property)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.is_moving"]], "is_okay (telemetrixsteppermotor property)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.is_okay"]], "move_by() (telemetrixsteppermotor method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_by"]], "move_to() (telemetrixsteppermotor method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_to"]], "position (telemetrixsteppermotor property)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.position"]], "revs_to_cm() (telemetrixsteppermotor method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.revs_to_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotor method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_absolute_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotor method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_target_position_cm"]], "wait_for_move() (telemetrixsteppermotor method)": [[38, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.wait_for_move"]], "cc_hardware": [[39, "module-cc_hardware"]], "calibrate() (in module cc_hardware.tools.calibration)": [[40, "cc_hardware.tools.calibration.calibrate"]], "cc_hardware.tools.calibration": [[40, "module-cc_hardware.tools.calibration"]], "tmf8828_calibrate() (in module cc_hardware.tools.calibration)": [[40, "cc_hardware.tools.calibration.tmf8828_calibrate"]], "cc_hardware.tools.camera_viewer": [[41, "module-cc_hardware.tools.camera_viewer"]], "dashboard (class in cc_hardware.tools.dashboard.dashboard)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard"]], "dashboardconfig (class in cc_hardware.tools.dashboard.dashboard)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig"]], "__getstate__() (dashboardconfig method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.__getstate__"], [43, "cc_hardware.tools.dashboard.DashboardConfig.__getstate__"]], "__setstate__() (dashboardconfig method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.__setstate__"], [43, "cc_hardware.tools.dashboard.DashboardConfig.__setstate__"]], "__str__() (dashboardconfig method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.__str__"], [43, "cc_hardware.tools.dashboard.DashboardConfig.__str__"]], "cc_hardware.tools.dashboard.dashboard": [[42, "module-cc_hardware.tools.dashboard.dashboard"]], "close() (dashboard method)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.close"], [43, "cc_hardware.tools.dashboard.Dashboard.close"]], "compose() (dashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.compose"], [43, "cc_hardware.tools.dashboard.DashboardConfig.compose"]], "config (dashboard property)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.config"], [43, "cc_hardware.tools.dashboard.Dashboard.config"]], "config (dashboardconfig attribute)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.config"], [43, "cc_hardware.tools.dashboard.DashboardConfig.config"]], "copy() (dashboardconfig method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.copy"], [43, "cc_hardware.tools.dashboard.DashboardConfig.copy"]], "create() (dashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.create"], [43, "cc_hardware.tools.dashboard.DashboardConfig.create"]], "create_from_config() (dashboard class method)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.create_from_config"], [43, "cc_hardware.tools.dashboard.Dashboard.create_from_config"]], "create_from_registry() (dashboard class method)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.create_from_registry"], [43, "cc_hardware.tools.dashboard.Dashboard.create_from_registry"]], "create_from_registry() (dashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.create_from_registry"], [43, "cc_hardware.tools.dashboard.DashboardConfig.create_from_registry"]], "custom (dashboardconfig attribute)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.custom"], [43, "cc_hardware.tools.dashboard.DashboardConfig.custom"]], "instantiate() (dashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.instantiate"], [43, "cc_hardware.tools.dashboard.DashboardConfig.instantiate"]], "is_okay (dashboard property)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.is_okay"], [43, "cc_hardware.tools.dashboard.Dashboard.is_okay"]], "load() (dashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.load"], [43, "cc_hardware.tools.dashboard.DashboardConfig.load"]], "merge_with() (dashboardconfig method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.merge_with"], [43, "cc_hardware.tools.dashboard.DashboardConfig.merge_with"]], "register() (dashboard class method)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.register"], [43, "cc_hardware.tools.dashboard.Dashboard.register"]], "register() (dashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.register"], [43, "cc_hardware.tools.dashboard.DashboardConfig.register"]], "registered() (dashboard method)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.registered"], [43, "cc_hardware.tools.dashboard.Dashboard.registered"]], "registered() (dashboardconfig method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.registered"], [43, "cc_hardware.tools.dashboard.DashboardConfig.registered"]], "registry() (dashboard method)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.registry"], [43, "cc_hardware.tools.dashboard.Dashboard.registry"]], "registry() (dashboardconfig method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.registry"], [43, "cc_hardware.tools.dashboard.DashboardConfig.registry"]], "run() (dashboard method)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.run"], [43, "cc_hardware.tools.dashboard.Dashboard.run"]], "save() (dashboardconfig method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.save"], [43, "cc_hardware.tools.dashboard.DashboardConfig.save"]], "setup() (dashboard method)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.setup"], [43, "cc_hardware.tools.dashboard.Dashboard.setup"]], "to_yaml() (dashboardconfig method)": [[42, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.to_yaml"], [43, "cc_hardware.tools.dashboard.DashboardConfig.to_yaml"]], "update() (dashboard method)": [[42, "cc_hardware.tools.dashboard.dashboard.Dashboard.update"], [43, "cc_hardware.tools.dashboard.Dashboard.update"]], "dashboard (class in cc_hardware.tools.dashboard)": [[43, "cc_hardware.tools.dashboard.Dashboard"]], "dashboardconfig (class in cc_hardware.tools.dashboard)": [[43, "cc_hardware.tools.dashboard.DashboardConfig"]], "spaddashboard (class in cc_hardware.tools.dashboard)": [[43, "cc_hardware.tools.dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig"]], "__getstate__() (spaddashboardconfig method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.__getstate__"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.__getstate__"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.__getstate__"]], "__setstate__() (spaddashboardconfig method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.__setstate__"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.__setstate__"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.__setstate__"]], "__str__() (spaddashboardconfig method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.__str__"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.__str__"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.__str__"]], "cc_hardware.tools.dashboard": [[43, "module-cc_hardware.tools.dashboard"]], "close() (spaddashboard method)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.close"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.close"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.close"]], "compose() (spaddashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.compose"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.compose"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.compose"]], "config (spaddashboard property)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.config"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.config"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.config"]], "config (spaddashboardconfig attribute)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.config"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.config"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.config"]], "copy() (spaddashboardconfig method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.copy"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.copy"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.copy"]], "create() (spaddashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.create"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.create"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.create"]], "create_from_config() (spaddashboard class method)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.create_from_config"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.create_from_config"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.create_from_config"]], "create_from_registry() (spaddashboard class method)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.create_from_registry"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.create_from_registry"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.create_from_registry"]], "create_from_registry() (spaddashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.create_from_registry"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.create_from_registry"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.create_from_registry"]], "custom (spaddashboardconfig attribute)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.custom"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.custom"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.custom"]], "instantiate() (spaddashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.instantiate"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.instantiate"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.instantiate"]], "is_okay (spaddashboard property)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.is_okay"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.is_okay"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.is_okay"]], "load() (spaddashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.load"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.load"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.load"]], "max_bin (spaddashboard property)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.max_bin"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.max_bin"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.max_bin"]], "merge_with() (spaddashboardconfig method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.merge_with"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.merge_with"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.merge_with"]], "min_bin (spaddashboard property)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.min_bin"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.min_bin"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.min_bin"]], "register() (spaddashboard class method)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.register"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.register"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.register"]], "register() (spaddashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.register"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.register"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.register"]], "registered() (spaddashboard method)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.registered"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.registered"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.registered"]], "registered() (spaddashboardconfig method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.registered"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.registered"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.registered"]], "registry() (spaddashboard method)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.registry"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.registry"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.registry"]], "registry() (spaddashboardconfig method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.registry"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.registry"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.registry"]], "run() (spaddashboard method)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.run"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.run"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.run"]], "save() (spaddashboardconfig method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.save"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.save"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.save"]], "sensor (spaddashboard property)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.sensor"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.sensor"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.sensor"]], "setup() (spaddashboard method)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.setup"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.setup"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.setup"]], "to_yaml() (spaddashboardconfig method)": [[43, "cc_hardware.tools.dashboard.SPADDashboardConfig.to_yaml"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.to_yaml"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.to_yaml"]], "update() (spaddashboard method)": [[43, "cc_hardware.tools.dashboard.SPADDashboard.update"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.update"], [50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.update"]], "dashmotioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.dash)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard"]], "dashmotioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.dash)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig"]], "__getstate__() (dashmotioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.__getstate__"]], "__setstate__() (dashmotioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.__setstate__"]], "__str__() (dashmotioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.__str__"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[44, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"]], "close() (dashmotioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.close"]], "compose() (dashmotioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.compose"]], "config (dashmotioncapturedashboard property)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.config"]], "config (dashmotioncapturedashboardconfig attribute)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.config"]], "copy() (dashmotioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.copy"]], "create() (dashmotioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.create"]], "create_from_config() (dashmotioncapturedashboard class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.create_from_config"]], "create_from_registry() (dashmotioncapturedashboard class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.create_from_registry"]], "create_from_registry() (dashmotioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.create_from_registry"]], "custom (dashmotioncapturedashboardconfig attribute)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.custom"]], "instantiate() (dashmotioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.instantiate"]], "is_okay (dashmotioncapturedashboard property)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.is_okay"]], "load() (dashmotioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.load"]], "merge_with() (dashmotioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.merge_with"]], "register() (dashmotioncapturedashboard class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.register"]], "register() (dashmotioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.register"]], "registered() (dashmotioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.registered"]], "registered() (dashmotioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.registered"]], "registry() (dashmotioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.registry"]], "registry() (dashmotioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.registry"]], "run() (dashmotioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.run"]], "save() (dashmotioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.save"]], "sensor (dashmotioncapturedashboard property)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.sensor"]], "setup() (dashmotioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.setup"]], "to_yaml() (dashmotioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.to_yaml"]], "update() (dashmotioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.update"]], "motioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard"]], "motioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig"]], "__getstate__() (motioncapturedashboardconfig method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__getstate__"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__getstate__"]], "__setstate__() (motioncapturedashboardconfig method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__setstate__"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__setstate__"]], "__str__() (motioncapturedashboardconfig method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__str__"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__str__"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[45, "module-cc_hardware.tools.dashboard.mocap_dashboard"]], "close() (motioncapturedashboard method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.close"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.close"]], "compose() (motioncapturedashboardconfig class method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.compose"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.compose"]], "config (motioncapturedashboard property)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.config"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.config"]], "config (motioncapturedashboardconfig attribute)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.config"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.config"]], "copy() (motioncapturedashboardconfig method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.copy"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.copy"]], "create() (motioncapturedashboardconfig class method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.create"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.create"]], "create_from_config() (motioncapturedashboard class method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.create_from_config"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.create_from_config"]], "create_from_registry() (motioncapturedashboard class method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.create_from_registry"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.create_from_registry"]], "create_from_registry() (motioncapturedashboardconfig class method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.create_from_registry"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.create_from_registry"]], "custom (motioncapturedashboardconfig attribute)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.custom"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.custom"]], "instantiate() (motioncapturedashboardconfig class method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.instantiate"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.instantiate"]], "is_okay (motioncapturedashboard property)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.is_okay"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.is_okay"]], "load() (motioncapturedashboardconfig class method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.load"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.load"]], "merge_with() (motioncapturedashboardconfig method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.merge_with"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.merge_with"]], "register() (motioncapturedashboard class method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.register"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.register"]], "register() (motioncapturedashboardconfig class method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.register"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.register"]], "registered() (motioncapturedashboard method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.registered"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.registered"]], "registered() (motioncapturedashboardconfig method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.registered"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.registered"]], "registry() (motioncapturedashboard method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.registry"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.registry"]], "registry() (motioncapturedashboardconfig method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.registry"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.registry"]], "run() (motioncapturedashboard method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.run"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.run"]], "save() (motioncapturedashboardconfig method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.save"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.save"]], "sensor (motioncapturedashboard property)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.sensor"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.sensor"]], "setup() (motioncapturedashboard method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.setup"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.setup"]], "to_yaml() (motioncapturedashboardconfig method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.to_yaml"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.to_yaml"]], "update() (motioncapturedashboard method)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.update"], [46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.update"]], "motioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard"]], "motioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[46, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"]], "dashboardwindow (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow"]], "pyqtgraphmotioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard"]], "pyqtgraphmotioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig"]], "__getstate__() (pyqtgraphmotioncapturedashboardconfig method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.__getstate__"]], "__setstate__() (pyqtgraphmotioncapturedashboardconfig method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.__setstate__"]], "__str__() (pyqtgraphmotioncapturedashboardconfig method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.__str__"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[47, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"]], "close() (pyqtgraphmotioncapturedashboard method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.close"]], "compose() (pyqtgraphmotioncapturedashboardconfig class method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.compose"]], "config (pyqtgraphmotioncapturedashboard property)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.config"]], "config (pyqtgraphmotioncapturedashboardconfig attribute)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.config"]], "copy() (pyqtgraphmotioncapturedashboardconfig method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.copy"]], "create() (pyqtgraphmotioncapturedashboardconfig class method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.create"]], "create_from_config() (pyqtgraphmotioncapturedashboard class method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.create_from_config"]], "create_from_registry() (pyqtgraphmotioncapturedashboard class method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.create_from_registry"]], "create_from_registry() (pyqtgraphmotioncapturedashboardconfig class method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.create_from_registry"]], "custom (pyqtgraphmotioncapturedashboardconfig attribute)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.custom"]], "instantiate() (pyqtgraphmotioncapturedashboardconfig class method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.instantiate"]], "is_okay (pyqtgraphmotioncapturedashboard property)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.is_okay"]], "keypressevent() (dashboardwindow method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow.keyPressEvent"], [49, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.keyPressEvent"]], "load() (pyqtgraphmotioncapturedashboardconfig class method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.load"]], "merge_with() (pyqtgraphmotioncapturedashboardconfig method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.merge_with"]], "register() (pyqtgraphmotioncapturedashboard class method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.register"]], "register() (pyqtgraphmotioncapturedashboardconfig class method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.register"]], "registered() (pyqtgraphmotioncapturedashboard method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.registered"]], "registered() (pyqtgraphmotioncapturedashboardconfig method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.registered"]], "registry() (pyqtgraphmotioncapturedashboard method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.registry"]], "registry() (pyqtgraphmotioncapturedashboardconfig method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.registry"]], "run() (pyqtgraphmotioncapturedashboard method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.run"]], "save() (pyqtgraphmotioncapturedashboardconfig method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.save"]], "sensor (pyqtgraphmotioncapturedashboard property)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.sensor"]], "setup() (pyqtgraphmotioncapturedashboard method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.setup"]], "to_yaml() (pyqtgraphmotioncapturedashboardconfig method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.to_yaml"]], "update() (pyqtgraphmotioncapturedashboard method)": [[47, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.update"]], "spaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard": [[48, "module-cc_hardware.tools.dashboard.spad_dashboard"]], "dashboardwindow (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow"]], "pyqtgraphdashboard (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard"]], "pyqtgraphdashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[49, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"]], "enable_depth_view() (dashboardwindow method)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.enable_depth_view"]], "enable_point_cloud_view() (dashboardwindow method)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.enable_point_cloud_view"]], "init_ui() (dashboardwindow method)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.init_ui"]], "run() (pyqtgraphdashboard method)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.run"]], "setup() (pyqtgraphdashboard method)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.setup"]], "update() (pyqtgraphdashboard method)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.update"]], "dummyspaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard"]], "dummyspaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig"]], "spaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig"]], "__getstate__() (dummyspaddashboardconfig method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.__getstate__"]], "__setstate__() (dummyspaddashboardconfig method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.__setstate__"]], "__str__() (dummyspaddashboardconfig method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.__str__"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[50, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"]], "close() (dummyspaddashboard method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.close"]], "compose() (dummyspaddashboardconfig class method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.compose"]], "config (dummyspaddashboard property)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.config"]], "config (dummyspaddashboardconfig attribute)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.config"]], "copy() (dummyspaddashboardconfig method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.copy"]], "create() (dummyspaddashboardconfig class method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.create"]], "create_from_config() (dummyspaddashboard class method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.create_from_config"]], "create_from_registry() (dummyspaddashboard class method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.create_from_registry"]], "create_from_registry() (dummyspaddashboardconfig class method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.create_from_registry"]], "custom (dummyspaddashboardconfig attribute)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.custom"]], "instantiate() (dummyspaddashboardconfig class method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.instantiate"]], "is_okay (dummyspaddashboard property)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.is_okay"]], "load() (dummyspaddashboardconfig class method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.load"]], "max_bin (dummyspaddashboard property)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.max_bin"]], "merge_with() (dummyspaddashboardconfig method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.merge_with"]], "min_bin (dummyspaddashboard property)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.min_bin"]], "register() (dummyspaddashboard class method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.register"]], "register() (dummyspaddashboardconfig class method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.register"]], "registered() (dummyspaddashboard method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.registered"]], "registered() (dummyspaddashboardconfig method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.registered"]], "registry() (dummyspaddashboard method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.registry"]], "registry() (dummyspaddashboardconfig method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.registry"]], "run() (dummyspaddashboard method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.run"]], "save() (dummyspaddashboardconfig method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.save"]], "sensor (dummyspaddashboard property)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.sensor"]], "setup() (dummyspaddashboard method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.setup"]], "to_yaml() (dummyspaddashboardconfig method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig.to_yaml"]], "update() (dummyspaddashboard method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.update"]], "cc_hardware.tools.flash": [[51, "module-cc_hardware.tools.flash"]], "registry (class in cc_hardware.tools)": [[52, "cc_hardware.tools.Registry"]], "toolregistry (class in cc_hardware.tools)": [[52, "cc_hardware.tools.ToolRegistry"]], "cc_hardware.tools": [[52, "module-cc_hardware.tools"]], "create_from_registry() (registry class method)": [[52, "cc_hardware.tools.Registry.create_from_registry"], [56, "cc_hardware.utils.Registry.create_from_registry"], [67, "cc_hardware.utils.registry.Registry.create_from_registry"]], "create_from_registry() (toolregistry class method)": [[52, "cc_hardware.tools.ToolRegistry.create_from_registry"]], "register() (registry class method)": [[52, "cc_hardware.tools.Registry.register"], [56, "cc_hardware.utils.Registry.register"], [67, "cc_hardware.utils.registry.Registry.register"]], "register() (toolregistry class method)": [[52, "cc_hardware.tools.ToolRegistry.register"]], "registered() (registry method)": [[52, "cc_hardware.tools.Registry.registered"], [56, "cc_hardware.utils.Registry.registered"], [67, "cc_hardware.utils.registry.Registry.registered"]], "registered() (toolregistry method)": [[52, "cc_hardware.tools.ToolRegistry.registered"]], "registry() (registry method)": [[52, "cc_hardware.tools.Registry.registry"], [56, "cc_hardware.utils.Registry.registry"], [67, "cc_hardware.utils.registry.Registry.registry"]], "registry() (toolregistry method)": [[52, "cc_hardware.tools.ToolRegistry.registry"]], "logbufferhandler (class in cc_hardware.tools.jogger)": [[53, "cc_hardware.tools.jogger.LogBufferHandler"]], "outputcapture (class in cc_hardware.tools.jogger)": [[53, "cc_hardware.tools.jogger.OutputCapture"]], "__repr__() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.__repr__"]], "acquire() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.acquire"]], "addfilter() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.addFilter"]], "cc_hardware.tools.jogger": [[53, "module-cc_hardware.tools.jogger"]], "close() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.close"]], "createlock() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.createLock"]], "emit() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.emit"]], "filter() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.filter"]], "flush() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.flush"]], "format() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.format"]], "handle() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.handle"]], "handleerror() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.handleError"]], "release() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.release"]], "removefilter() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.removeFilter"]], "setformatter() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.setFormatter"]], "setlevel() (logbufferhandler method)": [[53, "cc_hardware.tools.jogger.LogBufferHandler.setLevel"]], "c (in module cc_hardware.utils.constants)": [[54, "cc_hardware.utils.constants.C"]], "cc_hardware.utils.constants": [[54, "module-cc_hardware.utils.constants"]], "pklhandler (class in cc_hardware.utils.file_handlers)": [[55, "cc_hardware.utils.file_handlers.PklHandler"]], "pklreader (class in cc_hardware.utils.file_handlers)": [[55, "cc_hardware.utils.file_handlers.PklReader"]], "videowriter (class in cc_hardware.utils.file_handlers)": [[55, "cc_hardware.utils.file_handlers.VideoWriter"]], "__del__() (videowriter method)": [[55, "cc_hardware.utils.file_handlers.VideoWriter.__del__"]], "__len__() (pklhandler method)": [[55, "cc_hardware.utils.file_handlers.PklHandler.__len__"]], "__len__() (pklreader method)": [[55, "cc_hardware.utils.file_handlers.PklReader.__len__"]], "append() (pklhandler method)": [[55, "cc_hardware.utils.file_handlers.PklHandler.append"]], "append() (pklreader method)": [[55, "cc_hardware.utils.file_handlers.PklReader.append"]], "append() (videowriter method)": [[55, "cc_hardware.utils.file_handlers.VideoWriter.append"]], "cc_hardware.utils.file_handlers": [[55, "module-cc_hardware.utils.file_handlers"]], "close() (videowriter method)": [[55, "cc_hardware.utils.file_handlers.VideoWriter.close"]], "load() (pklhandler method)": [[55, "cc_hardware.utils.file_handlers.PklHandler.load"]], "load() (pklreader method)": [[55, "cc_hardware.utils.file_handlers.PklReader.load"]], "load_all() (pklhandler static method)": [[55, "cc_hardware.utils.file_handlers.PklHandler.load_all"]], "load_all() (pklreader static method)": [[55, "cc_hardware.utils.file_handlers.PklReader.load_all"]], "update_index() (pklhandler method)": [[55, "cc_hardware.utils.file_handlers.PklHandler.update_index"]], "update_index() (pklreader method)": [[55, "cc_hardware.utils.file_handlers.PklReader.update_index"]], "write() (pklhandler method)": [[55, "cc_hardware.utils.file_handlers.PklHandler.write"]], "write() (pklreader method)": [[55, "cc_hardware.utils.file_handlers.PklReader.write"]], "blockingdeque (class in cc_hardware.utils)": [[56, "cc_hardware.utils.BlockingDeque"]], "component (class in cc_hardware.utils)": [[56, "cc_hardware.utils.Component"]], "config (class in cc_hardware.utils)": [[56, "cc_hardware.utils.Config"]], "manager (class in cc_hardware.utils)": [[56, "cc_hardware.utils.Manager"]], "registry (class in cc_hardware.utils)": [[56, "cc_hardware.utils.Registry"]], "singletonabcmeta (class in cc_hardware.utils)": [[56, "cc_hardware.utils.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils)": [[56, "cc_hardware.utils.SingletonMeta"]], "__call__() (singletonabcmeta method)": [[56, "cc_hardware.utils.SingletonABCMeta.__call__"], [62, "cc_hardware.utils.misc.SingletonABCMeta.__call__"], [66, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__call__"]], "__call__() (singletonmeta method)": [[56, "cc_hardware.utils.SingletonMeta.__call__"], [62, "cc_hardware.utils.misc.SingletonMeta.__call__"], [66, "cc_hardware.utils.misc.singleton.SingletonMeta.__call__"]], "__enter__() (manager method)": [[56, "cc_hardware.utils.Manager.__enter__"], [58, "cc_hardware.utils.manager.Manager.__enter__"]], "__exit__() (manager method)": [[56, "cc_hardware.utils.Manager.__exit__"], [58, "cc_hardware.utils.manager.Manager.__exit__"]], "__getattr__() (blockingdeque method)": [[56, "cc_hardware.utils.BlockingDeque.__getattr__"], [61, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__getattr__"], [62, "cc_hardware.utils.misc.BlockingDeque.__getattr__"]], "__getitem__() (blockingdeque method)": [[56, "cc_hardware.utils.BlockingDeque.__getitem__"], [61, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__getitem__"], [62, "cc_hardware.utils.misc.BlockingDeque.__getitem__"]], "__getstate__() (config method)": [[56, "cc_hardware.utils.Config.__getstate__"], [58, "cc_hardware.utils.manager.Config.__getstate__"]], "__instancecheck__() (singletonabcmeta method)": [[56, "cc_hardware.utils.SingletonABCMeta.__instancecheck__"], [62, "cc_hardware.utils.misc.SingletonABCMeta.__instancecheck__"], [66, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__instancecheck__"]], "__len__() (blockingdeque method)": [[56, "cc_hardware.utils.BlockingDeque.__len__"], [61, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__len__"], [62, "cc_hardware.utils.misc.BlockingDeque.__len__"]], "__repr__() (blockingdeque method)": [[56, "cc_hardware.utils.BlockingDeque.__repr__"], [61, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__repr__"], [62, "cc_hardware.utils.misc.BlockingDeque.__repr__"]], "__setstate__() (config method)": [[56, "cc_hardware.utils.Config.__setstate__"], [58, "cc_hardware.utils.manager.Config.__setstate__"]], "__str__() (config method)": [[56, "cc_hardware.utils.Config.__str__"], [58, "cc_hardware.utils.manager.Config.__str__"]], "__subclasscheck__() (singletonabcmeta method)": [[56, "cc_hardware.utils.SingletonABCMeta.__subclasscheck__"], [62, "cc_hardware.utils.misc.SingletonABCMeta.__subclasscheck__"], [66, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__subclasscheck__"]], "add() (manager method)": [[56, "cc_hardware.utils.Manager.add"], [58, "cc_hardware.utils.manager.Manager.add"]], "append() (blockingdeque method)": [[56, "cc_hardware.utils.BlockingDeque.append"], [61, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.append"], [62, "cc_hardware.utils.misc.BlockingDeque.append"]], "arduino_upload() (in module cc_hardware.utils)": [[56, "cc_hardware.utils.arduino_upload"]], "call_async() (in module cc_hardware.utils)": [[56, "cc_hardware.utils.call_async"]], "call_async_gather() (in module cc_hardware.utils)": [[56, "cc_hardware.utils.call_async_gather"]], "call_async_value() (in module cc_hardware.utils)": [[56, "cc_hardware.utils.call_async_value"]], "cc_hardware.utils": [[56, "module-cc_hardware.utils"]], "close() (component method)": [[56, "cc_hardware.utils.Component.close"], [58, "cc_hardware.utils.manager.Component.close"]], "close() (manager method)": [[56, "cc_hardware.utils.Manager.close"], [58, "cc_hardware.utils.manager.Manager.close"]], "components (manager property)": [[56, "cc_hardware.utils.Manager.components"], [58, "cc_hardware.utils.manager.Manager.components"]], "compose() (config class method)": [[56, "cc_hardware.utils.Config.compose"], [58, "cc_hardware.utils.manager.Config.compose"]], "config (component property)": [[56, "cc_hardware.utils.Component.config"], [58, "cc_hardware.utils.manager.Component.config"]], "config (config attribute)": [[56, "cc_hardware.utils.Config.config"], [58, "cc_hardware.utils.manager.Config.config"]], "copy() (config method)": [[56, "cc_hardware.utils.Config.copy"], [58, "cc_hardware.utils.manager.Config.copy"]], "create() (config class method)": [[56, "cc_hardware.utils.Config.create"], [58, "cc_hardware.utils.manager.Config.create"]], "create_from_config() (component class method)": [[56, "cc_hardware.utils.Component.create_from_config"], [58, "cc_hardware.utils.manager.Component.create_from_config"]], "create_from_registry() (component class method)": [[56, "cc_hardware.utils.Component.create_from_registry"], [58, "cc_hardware.utils.manager.Component.create_from_registry"]], "create_from_registry() (config class method)": [[56, "cc_hardware.utils.Config.create_from_registry"], [58, "cc_hardware.utils.manager.Config.create_from_registry"]], "custom (config attribute)": [[56, "cc_hardware.utils.Config.custom"], [58, "cc_hardware.utils.manager.Config.custom"]], "find_device_by_label() (in module cc_hardware.utils)": [[56, "cc_hardware.utils.find_device_by_label"]], "find_ports() (in module cc_hardware.utils)": [[56, "cc_hardware.utils.find_ports"]], "get_object() (in module cc_hardware.utils)": [[56, "cc_hardware.utils.get_object"]], "instance() (singletonabcmeta class method)": [[56, "cc_hardware.utils.SingletonABCMeta.instance"], [62, "cc_hardware.utils.misc.SingletonABCMeta.instance"], [66, "cc_hardware.utils.misc.singleton.SingletonABCMeta.instance"]], "instance() (singletonmeta class method)": [[56, "cc_hardware.utils.SingletonMeta.instance"], [62, "cc_hardware.utils.misc.SingletonMeta.instance"], [66, "cc_hardware.utils.misc.singleton.SingletonMeta.instance"]], "instantiate() (config class method)": [[56, "cc_hardware.utils.Config.instantiate"], [58, "cc_hardware.utils.manager.Config.instantiate"]], "is_okay (component property)": [[56, "cc_hardware.utils.Component.is_okay"], [58, "cc_hardware.utils.manager.Component.is_okay"]], "is_okay (manager property)": [[56, "cc_hardware.utils.Manager.is_okay"], [58, "cc_hardware.utils.manager.Manager.is_okay"]], "load() (config class method)": [[56, "cc_hardware.utils.Config.load"], [58, "cc_hardware.utils.manager.Config.load"]], "merge_with() (config method)": [[56, "cc_hardware.utils.Config.merge_with"], [58, "cc_hardware.utils.manager.Config.merge_with"]], "register() (component class method)": [[56, "cc_hardware.utils.Component.register"], [58, "cc_hardware.utils.manager.Component.register"]], "register() (config class method)": [[56, "cc_hardware.utils.Config.register"], [58, "cc_hardware.utils.manager.Config.register"]], "register() (singletonabcmeta method)": [[56, "cc_hardware.utils.SingletonABCMeta.register"], [62, "cc_hardware.utils.misc.SingletonABCMeta.register"], [66, "cc_hardware.utils.misc.singleton.SingletonABCMeta.register"]], "register() (in module cc_hardware.utils)": [[56, "cc_hardware.utils.register"]], "registered() (component method)": [[56, "cc_hardware.utils.Component.registered"], [58, "cc_hardware.utils.manager.Component.registered"]], "registered() (config method)": [[56, "cc_hardware.utils.Config.registered"], [58, "cc_hardware.utils.manager.Config.registered"]], "registry() (component method)": [[56, "cc_hardware.utils.Component.registry"], [58, "cc_hardware.utils.manager.Component.registry"]], "registry() (config method)": [[56, "cc_hardware.utils.Config.registry"], [58, "cc_hardware.utils.manager.Config.registry"]], "run() (manager method)": [[56, "cc_hardware.utils.Manager.run"], [58, "cc_hardware.utils.manager.Manager.run"]], "save() (config method)": [[56, "cc_hardware.utils.Config.save"], [58, "cc_hardware.utils.manager.Config.save"]], "to_yaml() (config method)": [[56, "cc_hardware.utils.Config.to_yaml"], [58, "cc_hardware.utils.manager.Config.to_yaml"]], "filehandler (class in cc_hardware.utils.logger)": [[57, "cc_hardware.utils.logger.FileHandler"]], "loggermaxlevelfilter (class in cc_hardware.utils.logger)": [[57, "cc_hardware.utils.logger.LoggerMaxLevelFilter"]], "tqdmstreamhandler (class in cc_hardware.utils.logger)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler"]], "__repr__() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.__repr__"]], "__repr__() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.__repr__"]], "acquire() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.acquire"]], "acquire() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.acquire"]], "addfilter() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.addFilter"]], "addfilter() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.addFilter"]], "cc_hardware.utils.logger": [[57, "module-cc_hardware.utils.logger"]], "close() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.close"]], "close() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.close"]], "createlock() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.createLock"]], "createlock() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.createLock"]], "emit() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.emit"]], "emit() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.emit"]], "filter() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.filter"]], "filter() (loggermaxlevelfilter method)": [[57, "cc_hardware.utils.logger.LoggerMaxLevelFilter.filter"]], "filter() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.filter"]], "flush() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.flush"]], "flush() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.flush"]], "format() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.format"]], "format() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.format"]], "handle() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.handle"]], "handle() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.handle"]], "handleerror() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.handleError"]], "handleerror() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.handleError"]], "release() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.release"]], "release() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.release"]], "removefilter() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.removeFilter"]], "removefilter() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.removeFilter"]], "setformatter() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.setFormatter"]], "setformatter() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.setFormatter"]], "setlevel() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.setLevel"]], "setlevel() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.setLevel"]], "setstream() (filehandler method)": [[57, "cc_hardware.utils.logger.FileHandler.setStream"]], "setstream() (tqdmstreamhandler method)": [[57, "cc_hardware.utils.logger.TqdmStreamHandler.setStream"]], "component (class in cc_hardware.utils.manager)": [[58, "cc_hardware.utils.manager.Component"]], "config (class in cc_hardware.utils.manager)": [[58, "cc_hardware.utils.manager.Config"]], "manager (class in cc_hardware.utils.manager)": [[58, "cc_hardware.utils.manager.Manager"]], "cc_hardware.utils.manager": [[58, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.matplotlib": [[59, "module-cc_hardware.utils.matplotlib"]], "set_matplotlib_style() (in module cc_hardware.utils.matplotlib)": [[59, "cc_hardware.utils.matplotlib.set_matplotlib_style"]], "call_async() (in module cc_hardware.utils.misc.asyncio_utils)": [[60, "cc_hardware.utils.misc.asyncio_utils.call_async"]], "call_async_gather() (in module cc_hardware.utils.misc.asyncio_utils)": [[60, "cc_hardware.utils.misc.asyncio_utils.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.misc.asyncio_utils)": [[60, "cc_hardware.utils.misc.asyncio_utils.call_async_value"]], "cc_hardware.utils.misc.asyncio_utils": [[60, "module-cc_hardware.utils.misc.asyncio_utils"]], "blockingdeque (class in cc_hardware.utils.misc.blocking_deque)": [[61, "cc_hardware.utils.misc.blocking_deque.BlockingDeque"]], "cc_hardware.utils.misc.blocking_deque": [[61, "module-cc_hardware.utils.misc.blocking_deque"]], "blockingdeque (class in cc_hardware.utils.misc)": [[62, "cc_hardware.utils.misc.BlockingDeque"]], "singletonabcmeta (class in cc_hardware.utils.misc)": [[62, "cc_hardware.utils.misc.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.misc)": [[62, "cc_hardware.utils.misc.SingletonMeta"]], "arduino_upload() (in module cc_hardware.utils.misc)": [[62, "cc_hardware.utils.misc.arduino_upload"]], "call_async() (in module cc_hardware.utils.misc)": [[62, "cc_hardware.utils.misc.call_async"]], "call_async_gather() (in module cc_hardware.utils.misc)": [[62, "cc_hardware.utils.misc.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.misc)": [[62, "cc_hardware.utils.misc.call_async_value"]], "cc_hardware.utils.misc": [[62, "module-cc_hardware.utils.misc"]], "find_device_by_label() (in module cc_hardware.utils.misc)": [[62, "cc_hardware.utils.misc.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.misc)": [[62, "cc_hardware.utils.misc.find_ports"]], "get_object() (in module cc_hardware.utils.misc)": [[62, "cc_hardware.utils.misc.get_object"]], "cc_hardware.utils.misc.misc": [[63, "module-cc_hardware.utils.misc.misc"]], "get_object() (in module cc_hardware.utils.misc.misc)": [[63, "cc_hardware.utils.misc.misc.get_object"]], "cc_hardware.utils.misc.multiprocessing_deque": [[64, "module-cc_hardware.utils.misc.multiprocessing_deque"]], "arduino_upload() (in module cc_hardware.utils.misc.serial_utils)": [[65, "cc_hardware.utils.misc.serial_utils.arduino_upload"]], "cc_hardware.utils.misc.serial_utils": [[65, "module-cc_hardware.utils.misc.serial_utils"]], "find_device_by_label() (in module cc_hardware.utils.misc.serial_utils)": [[65, "cc_hardware.utils.misc.serial_utils.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.misc.serial_utils)": [[65, "cc_hardware.utils.misc.serial_utils.find_ports"]], "singletonabcmeta (class in cc_hardware.utils.misc.singleton)": [[66, "cc_hardware.utils.misc.singleton.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.misc.singleton)": [[66, "cc_hardware.utils.misc.singleton.SingletonMeta"]], "cc_hardware.utils.misc.singleton": [[66, "module-cc_hardware.utils.misc.singleton"]], "registry (class in cc_hardware.utils.registry)": [[67, "cc_hardware.utils.registry.Registry"]], "cc_hardware.utils.registry": [[67, "module-cc_hardware.utils.registry"]], "register() (in module cc_hardware.utils.registry)": [[67, "cc_hardware.utils.registry.register"]], "boolsetting (class in cc_hardware.utils.setting)": [[68, "cc_hardware.utils.setting.BoolSetting"]], "optionsetting (class in cc_hardware.utils.setting)": [[68, "cc_hardware.utils.setting.OptionSetting"]], "rangesetting (class in cc_hardware.utils.setting)": [[68, "cc_hardware.utils.setting.RangeSetting"]], "setting (class in cc_hardware.utils.setting)": [[68, "cc_hardware.utils.setting.Setting"]], "__getstate__() (boolsetting method)": [[68, "cc_hardware.utils.setting.BoolSetting.__getstate__"]], "__getstate__() (optionsetting method)": [[68, "cc_hardware.utils.setting.OptionSetting.__getstate__"]], "__getstate__() (rangesetting method)": [[68, "cc_hardware.utils.setting.RangeSetting.__getstate__"]], "__getstate__() (setting method)": [[68, "cc_hardware.utils.setting.Setting.__getstate__"]], "__setstate__() (boolsetting method)": [[68, "cc_hardware.utils.setting.BoolSetting.__setstate__"]], "__setstate__() (optionsetting method)": [[68, "cc_hardware.utils.setting.OptionSetting.__setstate__"]], "__setstate__() (rangesetting method)": [[68, "cc_hardware.utils.setting.RangeSetting.__setstate__"]], "__setstate__() (setting method)": [[68, "cc_hardware.utils.setting.Setting.__setstate__"]], "__str__() (boolsetting method)": [[68, "cc_hardware.utils.setting.BoolSetting.__str__"]], "__str__() (optionsetting method)": [[68, "cc_hardware.utils.setting.OptionSetting.__str__"]], "__str__() (rangesetting method)": [[68, "cc_hardware.utils.setting.RangeSetting.__str__"]], "__str__() (setting method)": [[68, "cc_hardware.utils.setting.Setting.__str__"]], "cc_hardware.utils.setting": [[68, "module-cc_hardware.utils.setting"]], "compose() (boolsetting class method)": [[68, "cc_hardware.utils.setting.BoolSetting.compose"]], "compose() (optionsetting class method)": [[68, "cc_hardware.utils.setting.OptionSetting.compose"]], "compose() (rangesetting class method)": [[68, "cc_hardware.utils.setting.RangeSetting.compose"]], "compose() (setting class method)": [[68, "cc_hardware.utils.setting.Setting.compose"]], "config (boolsetting attribute)": [[68, "cc_hardware.utils.setting.BoolSetting.config"]], "config (optionsetting attribute)": [[68, "cc_hardware.utils.setting.OptionSetting.config"]], "config (rangesetting attribute)": [[68, "cc_hardware.utils.setting.RangeSetting.config"]], "config (setting attribute)": [[68, "cc_hardware.utils.setting.Setting.config"]], "copy() (boolsetting method)": [[68, "cc_hardware.utils.setting.BoolSetting.copy"]], "copy() (optionsetting method)": [[68, "cc_hardware.utils.setting.OptionSetting.copy"]], "copy() (rangesetting method)": [[68, "cc_hardware.utils.setting.RangeSetting.copy"]], "copy() (setting method)": [[68, "cc_hardware.utils.setting.Setting.copy"]], "create() (boolsetting class method)": [[68, "cc_hardware.utils.setting.BoolSetting.create"]], "create() (optionsetting class method)": [[68, "cc_hardware.utils.setting.OptionSetting.create"]], "create() (rangesetting class method)": [[68, "cc_hardware.utils.setting.RangeSetting.create"]], "create() (setting class method)": [[68, "cc_hardware.utils.setting.Setting.create"]], "create_from_registry() (boolsetting class method)": [[68, "cc_hardware.utils.setting.BoolSetting.create_from_registry"]], "create_from_registry() (optionsetting class method)": [[68, "cc_hardware.utils.setting.OptionSetting.create_from_registry"]], "create_from_registry() (rangesetting class method)": [[68, "cc_hardware.utils.setting.RangeSetting.create_from_registry"]], "create_from_registry() (setting class method)": [[68, "cc_hardware.utils.setting.Setting.create_from_registry"]], "custom (boolsetting attribute)": [[68, "cc_hardware.utils.setting.BoolSetting.custom"]], "custom (optionsetting attribute)": [[68, "cc_hardware.utils.setting.OptionSetting.custom"]], "custom (rangesetting attribute)": [[68, "cc_hardware.utils.setting.RangeSetting.custom"]], "custom (setting attribute)": [[68, "cc_hardware.utils.setting.Setting.custom"]], "default_factory() (boolsetting class method)": [[68, "cc_hardware.utils.setting.BoolSetting.default_factory"]], "default_factory() (optionsetting class method)": [[68, "cc_hardware.utils.setting.OptionSetting.default_factory"]], "default_factory() (rangesetting class method)": [[68, "cc_hardware.utils.setting.RangeSetting.default_factory"]], "default_factory() (setting class method)": [[68, "cc_hardware.utils.setting.Setting.default_factory"]], "from_enum() (optionsetting class method)": [[68, "cc_hardware.utils.setting.OptionSetting.from_enum"]], "instantiate() (boolsetting class method)": [[68, "cc_hardware.utils.setting.BoolSetting.instantiate"]], "instantiate() (optionsetting class method)": [[68, "cc_hardware.utils.setting.OptionSetting.instantiate"]], "instantiate() (rangesetting class method)": [[68, "cc_hardware.utils.setting.RangeSetting.instantiate"]], "instantiate() (setting class method)": [[68, "cc_hardware.utils.setting.Setting.instantiate"]], "load() (boolsetting class method)": [[68, "cc_hardware.utils.setting.BoolSetting.load"]], "load() (optionsetting class method)": [[68, "cc_hardware.utils.setting.OptionSetting.load"]], "load() (rangesetting class method)": [[68, "cc_hardware.utils.setting.RangeSetting.load"]], "load() (setting class method)": [[68, "cc_hardware.utils.setting.Setting.load"]], "merge_with() (boolsetting method)": [[68, "cc_hardware.utils.setting.BoolSetting.merge_with"]], "merge_with() (optionsetting method)": [[68, "cc_hardware.utils.setting.OptionSetting.merge_with"]], "merge_with() (rangesetting method)": [[68, "cc_hardware.utils.setting.RangeSetting.merge_with"]], "merge_with() (setting method)": [[68, "cc_hardware.utils.setting.Setting.merge_with"]], "register() (boolsetting class method)": [[68, "cc_hardware.utils.setting.BoolSetting.register"]], "register() (optionsetting class method)": [[68, "cc_hardware.utils.setting.OptionSetting.register"]], "register() (rangesetting class method)": [[68, "cc_hardware.utils.setting.RangeSetting.register"]], "register() (setting class method)": [[68, "cc_hardware.utils.setting.Setting.register"]], "registered() (boolsetting method)": [[68, "cc_hardware.utils.setting.BoolSetting.registered"]], "registered() (optionsetting method)": [[68, "cc_hardware.utils.setting.OptionSetting.registered"]], "registered() (rangesetting method)": [[68, "cc_hardware.utils.setting.RangeSetting.registered"]], "registered() (setting method)": [[68, "cc_hardware.utils.setting.Setting.registered"]], "registry() (boolsetting method)": [[68, "cc_hardware.utils.setting.BoolSetting.registry"]], "registry() (optionsetting method)": [[68, "cc_hardware.utils.setting.OptionSetting.registry"]], "registry() (rangesetting method)": [[68, "cc_hardware.utils.setting.RangeSetting.registry"]], "registry() (setting method)": [[68, "cc_hardware.utils.setting.Setting.registry"]], "save() (boolsetting method)": [[68, "cc_hardware.utils.setting.BoolSetting.save"]], "save() (optionsetting method)": [[68, "cc_hardware.utils.setting.OptionSetting.save"]], "save() (rangesetting method)": [[68, "cc_hardware.utils.setting.RangeSetting.save"]], "save() (setting method)": [[68, "cc_hardware.utils.setting.Setting.save"]], "to_yaml() (boolsetting method)": [[68, "cc_hardware.utils.setting.BoolSetting.to_yaml"]], "to_yaml() (optionsetting method)": [[68, "cc_hardware.utils.setting.OptionSetting.to_yaml"]], "to_yaml() (rangesetting method)": [[68, "cc_hardware.utils.setting.RangeSetting.to_yaml"]], "to_yaml() (setting method)": [[68, "cc_hardware.utils.setting.Setting.to_yaml"]], "update() (boolsetting method)": [[68, "cc_hardware.utils.setting.BoolSetting.update"]], "update() (optionsetting method)": [[68, "cc_hardware.utils.setting.OptionSetting.update"]], "update() (rangesetting method)": [[68, "cc_hardware.utils.setting.RangeSetting.update"]], "cc_hardware.utils.transformations": [[69, "module-cc_hardware.utils.transformations"]]}})