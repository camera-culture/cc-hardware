Search.setIndex({"docnames": ["contributing", "examples/index", "examples/sensors", "examples/stepper_motors", "index", "usage/api", "usage/api/cc_hardware/algos/algorithm/index", "usage/api/cc_hardware/algos/aruco/index", "usage/api/cc_hardware/algos/datasets/index", "usage/api/cc_hardware/algos/index", "usage/api/cc_hardware/algos/models/index", "usage/api/cc_hardware/drivers/cameras/camera/index", "usage/api/cc_hardware/drivers/cameras/flir/index", "usage/api/cc_hardware/drivers/cameras/index", "usage/api/cc_hardware/drivers/cameras/pkl/index", "usage/api/cc_hardware/drivers/cameras/realsense/index", "usage/api/cc_hardware/drivers/cameras/usb/index", "usage/api/cc_hardware/drivers/index", "usage/api/cc_hardware/drivers/mocap/index", "usage/api/cc_hardware/drivers/mocap/mocap/index", "usage/api/cc_hardware/drivers/mocap/vive/index", "usage/api/cc_hardware/drivers/safe_serial/index", "usage/api/cc_hardware/drivers/sensor/index", "usage/api/cc_hardware/drivers/spads/index", "usage/api/cc_hardware/drivers/spads/pkl/index", "usage/api/cc_hardware/drivers/spads/spad/index", "usage/api/cc_hardware/drivers/spads/spad_wrappers/index", "usage/api/cc_hardware/drivers/spads/tmf8828/index", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index", "usage/api/cc_hardware/drivers/stepper_motors/index", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index", "usage/api/cc_hardware/index", "usage/api/cc_hardware/tools/calibration/index", "usage/api/cc_hardware/tools/camera_viewer/index", "usage/api/cc_hardware/tools/dashboard/dashboard/index", "usage/api/cc_hardware/tools/dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/dash/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/mocap_dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/pyqtgraph/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/pyqtgraph/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/spad_dashboard/index", "usage/api/cc_hardware/tools/flash/index", "usage/api/cc_hardware/tools/index", "usage/api/cc_hardware/tools/jogger/index", "usage/api/cc_hardware/utils/constants/index", "usage/api/cc_hardware/utils/file_handlers/index", "usage/api/cc_hardware/utils/index", "usage/api/cc_hardware/utils/logger/index", "usage/api/cc_hardware/utils/manager/index", "usage/api/cc_hardware/utils/matplotlib/index", "usage/api/cc_hardware/utils/misc/asyncio_utils/index", "usage/api/cc_hardware/utils/misc/atomic/index", "usage/api/cc_hardware/utils/misc/blocking_deque/index", "usage/api/cc_hardware/utils/misc/index", "usage/api/cc_hardware/utils/misc/misc/index", "usage/api/cc_hardware/utils/misc/multiprocessing_deque/index", "usage/api/cc_hardware/utils/misc/serial_utils/index", "usage/api/cc_hardware/utils/misc/singleton/index", "usage/api/cc_hardware/utils/registry/index", "usage/api/cc_hardware/utils/setting/index", "usage/api/cc_hardware/utils/transformations/index", "usage/index"], "filenames": ["contributing.md", "examples/index.md", "examples/sensors.md", "examples/stepper_motors.md", "index.md", "usage/api.md", "usage/api/cc_hardware/algos/algorithm/index.rst", "usage/api/cc_hardware/algos/aruco/index.rst", "usage/api/cc_hardware/algos/datasets/index.rst", "usage/api/cc_hardware/algos/index.rst", "usage/api/cc_hardware/algos/models/index.rst", "usage/api/cc_hardware/drivers/cameras/camera/index.rst", "usage/api/cc_hardware/drivers/cameras/flir/index.rst", "usage/api/cc_hardware/drivers/cameras/index.rst", "usage/api/cc_hardware/drivers/cameras/pkl/index.rst", "usage/api/cc_hardware/drivers/cameras/realsense/index.rst", "usage/api/cc_hardware/drivers/cameras/usb/index.rst", "usage/api/cc_hardware/drivers/index.rst", "usage/api/cc_hardware/drivers/mocap/index.rst", "usage/api/cc_hardware/drivers/mocap/mocap/index.rst", "usage/api/cc_hardware/drivers/mocap/vive/index.rst", "usage/api/cc_hardware/drivers/safe_serial/index.rst", "usage/api/cc_hardware/drivers/sensor/index.rst", "usage/api/cc_hardware/drivers/spads/index.rst", "usage/api/cc_hardware/drivers/spads/pkl/index.rst", "usage/api/cc_hardware/drivers/spads/spad/index.rst", "usage/api/cc_hardware/drivers/spads/spad_wrappers/index.rst", "usage/api/cc_hardware/drivers/spads/tmf8828/index.rst", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index.rst", "usage/api/cc_hardware/index.rst", "usage/api/cc_hardware/tools/calibration/index.rst", "usage/api/cc_hardware/tools/camera_viewer/index.rst", "usage/api/cc_hardware/tools/dashboard/dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/dash/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/mocap_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/pyqtgraph/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/pyqtgraph/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/spad_dashboard/index.rst", "usage/api/cc_hardware/tools/flash/index.rst", "usage/api/cc_hardware/tools/index.rst", "usage/api/cc_hardware/tools/jogger/index.rst", "usage/api/cc_hardware/utils/constants/index.rst", "usage/api/cc_hardware/utils/file_handlers/index.rst", "usage/api/cc_hardware/utils/index.rst", "usage/api/cc_hardware/utils/logger/index.rst", "usage/api/cc_hardware/utils/manager/index.rst", "usage/api/cc_hardware/utils/matplotlib/index.rst", "usage/api/cc_hardware/utils/misc/asyncio_utils/index.rst", "usage/api/cc_hardware/utils/misc/atomic/index.rst", "usage/api/cc_hardware/utils/misc/blocking_deque/index.rst", "usage/api/cc_hardware/utils/misc/index.rst", "usage/api/cc_hardware/utils/misc/misc/index.rst", "usage/api/cc_hardware/utils/misc/multiprocessing_deque/index.rst", "usage/api/cc_hardware/utils/misc/serial_utils/index.rst", "usage/api/cc_hardware/utils/misc/singleton/index.rst", "usage/api/cc_hardware/utils/registry/index.rst", "usage/api/cc_hardware/utils/setting/index.rst", "usage/api/cc_hardware/utils/transformations/index.rst", "usage/index.md"], "titles": ["Contributing", "Examples", "Sensors", "Stepper Motor Controller", "Camera Culture Hardware Repo", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.aruco</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.camera</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.flir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.realsense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.usb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap.mocap</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap.vive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.safe_serial</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.sensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.tmf8828</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.vl53l8ch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.kinesis_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_controller</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_motor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_system</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.telemetrix_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.camera_viewer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.dash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.flash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.jogger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.file_handlers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.matplotlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.asyncio_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.atomic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.blocking_deque</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.multiprocessing_deque</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.serial_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.registry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.setting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.transformations</span></code>", "Reference"], "terms": {"repositori": [0, 4], "i": [0, 2, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 41, 42, 43, 44, 46, 48, 49, 51, 52, 53, 54, 58, 59, 60, 63, 64, 65], "fairli": [0, 52, 54, 65], "easi": 0, "so": [0, 2, 10, 12, 49], "pleas": [0, 2, 10], "see": [0, 10, 17, 27, 29, 33, 53], "below": [0, 10], "instruct": [0, 12], "how": [0, 1, 2, 10, 17, 27, 29, 33, 53], "actual": [0, 2, 17, 22, 24, 49, 53], "make": [0, 10, 56, 58, 59], "thi": [0, 2, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 63, 64, 65, 66], "project": 0, "There": [0, 2, 46], "ar": [0, 2, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 46, 49, 51, 52, 53, 54, 59, 62], "two": [0, 8, 10], "form": [0, 10], "simpl": [0, 2, 10, 12, 15, 30, 43], "ad": [0, 10, 17, 27, 29, 33, 49, 53], "content": 0, "within": [0, 2, 4, 10, 17, 22, 28, 52, 54, 65], "doc": [0, 10], "folder": [0, 2], "all": [0, 4, 6, 8, 10, 16, 17, 21, 23, 25, 26, 29, 32, 49, 51, 52, 53, 54, 56, 59, 62, 64, 65], "written": [0, 17, 21, 51, 53], "markdown": 0, "convert": [0, 10, 34, 52, 54, 65], "html": 0, "through": [0, 24, 34], "myst_pars": 0, "sphinx": 0, "To": [0, 10, 12], "well": [0, 10, 15, 52, 54, 65], "you": [0, 2, 4, 10, 12, 16, 17, 29, 32, 34, 46, 49, 52, 53, 54, 65], "want": [0, 49, 52, 53, 54, 65], "packag": [0, 1, 2, 12, 53], "symlink": 0, "A": [0, 6, 7, 10, 11, 12, 13, 14, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 43, 48, 51, 52, 53, 54, 58, 59, 62, 63, 64, 65], "conda": 0, "virtualenv": 0, "add": [0, 6, 10, 17, 22, 28, 29, 32, 39, 41, 42, 43, 44, 45, 46, 49, 52, 53, 54, 65], "isol": 0, "python": [0, 2, 3, 12], "environ": [0, 58, 59], "reduc": 0, "conflict": 0, "amongst": 0, "It": [0, 10, 12, 15, 17, 21, 27, 28, 29, 30, 32, 38, 39, 51, 52, 53, 54, 63], "highli": 0, "recommend": 0, "us": [0, 1, 2, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 54, 58, 59, 62, 63, 64, 65], "one": [0, 12, 15, 17, 21, 36, 48, 52, 54, 59, 63, 64, 65], "normal": 0, "git": [0, 4], "http": 0, "github": [0, 4], "com": [0, 4], "camera": [0, 2, 7, 17, 37, 54], "cultur": 0, "cc": [0, 4, 13, 18, 23, 28, 29, 52, 54], "hardwar": [0, 13, 18, 23, 24, 28, 29, 36, 47, 52, 54], "cd": [0, 4], "sinc": [0, 10, 34, 52, 54, 65], "organ": 0, "monorepo": [0, 4], "need": [0, 10, 12, 43, 59, 63], "poetri": [0, 4], "The": [0, 2, 4, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 41, 42, 44, 46, 48, 49, 51, 52, 53, 54, 58, 59, 62, 63, 64, 65], "develop": [0, 27], "mode": [0, 10, 27, 28, 36, 45, 53], "e": [0, 4, 10, 16, 17, 18, 19, 20, 23, 25, 26, 29, 32, 33, 43, 52, 54, 65], "symbol": 0, "link": 0, "immedi": [0, 10], "reflect": 0, "pip": [0, 4, 12], "action": 0, "automat": [0, 4], "site": [0, 12], "page": 0, "host": [0, 10], "static": [0, 51], "updat": [0, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 38, 39, 41, 42, 43, 44, 45, 46, 65], "have": [0, 4, 10, 17, 27, 29, 32, 33, 49, 53], "push": 0, "main": [0, 2, 15, 28, 38, 39, 41, 42, 44, 46], "branch": 0, "onc": [0, 10, 16], "rebuild": 0, "ensur": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 49, 51, 52, 53, 54, 58, 59, 63, 64], "error": [0, 6, 10, 17, 21, 49, 53], "befor": [0, 2, 10, 17, 21, 30, 52, 53, 54], "do": [0, 12, 28, 49, 53], "mai": [0, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 49, 53], "get": [0, 8, 11, 12, 13, 14, 15, 16, 17, 30, 48, 49, 51, 52, 53, 54, 58, 59, 64, 65], "an": [0, 2, 6, 7, 10, 11, 12, 13, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 32, 38, 39, 48, 49, 51, 52, 53, 54, 56, 58, 59, 60, 62, 63, 64, 65], "email": 0, "from": [0, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 34, 46, 48, 49, 51, 52, 53, 54, 58, 59, 60, 63, 64, 65], "someth": [0, 10, 17, 21], "bad": 0, "happen": [0, 17, 21], "tag": 0, "exampl": [0, 2, 3, 10, 12, 17, 20, 27, 29, 33, 46, 48, 51, 52, 53, 54, 63, 64], "v3": 0, "0": [0, 8, 10, 12, 16, 23, 24, 25, 27, 28, 30, 50, 52, 54], "1": [0, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 38, 39, 51], "follow": [0, 2, 4, 10, 12], "pkg": [0, 4], "algo": [0, 4, 5], "contain": [0, 2, 4, 6, 7, 8, 10, 11, 12, 13, 14, 17, 24, 27, 34, 54], "algorithm": [0, 4, 7, 9], "process": [0, 2, 4, 7, 8, 10, 20, 22, 23, 25, 27, 28, 38, 39, 49, 53], "data": [0, 2, 4, 8, 12, 14, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 36, 43, 44, 45, 46, 51, 52, 54, 55, 65], "driver": [0, 4, 5, 39, 41, 42, 43, 44, 45, 46], "interfac": [0, 2, 4, 6, 12, 15, 17, 21, 27, 28, 29, 30, 32, 34, 45, 48, 49], "util": [0, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "function": [0, 2, 4, 7, 26, 28, 38, 39, 51, 54, 63], "class": [0, 2, 4, 60, 62, 66], "tool": [0, 4, 5, 35], "work": [0, 4, 10, 62, 66], "calibr": [0, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 35, 48], "visual": [0, 2, 4, 43, 45, 46, 55], "script": [0, 2, 4, 27, 28, 59, 62], "addit": [0, 2, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 36, 52, 54, 59, 62, 63, 65], "licens": 0, "pyproject": [0, 4], "toml": [0, 4], "descript": 0, "If": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 45, 48, 49, 51, 52, 53, 54, 59, 62, 64, 65], "plan": 0, "visit": 0, "correspond": [0, 8, 10, 20, 27], "under": [0, 10, 45], "each": [0, 4, 6, 10, 16, 17, 21, 27, 36, 46, 51, 52, 54, 65], "should": [0, 4, 6, 10, 17, 20, 22, 29, 32, 38, 39, 41, 42, 43, 44, 46, 49, 51, 53, 65], "readm": [0, 4], "md": [0, 4], "cc_hardwar": [0, 1, 2, 4, 5], "__init__": [0, 4, 63, 64], "py": [0, 4], "googl": 0, "": [0, 6, 10, 11, 12, 13, 17, 23, 24, 25, 26, 27, 28, 29, 32, 34, 43, 50, 52, 53, 54, 65], "style": [0, 45, 55], "These": [0, 17, 22, 34], "also": [0, 2, 10, 17, 21, 29, 32, 34, 48, 51, 52, 53, 59, 63, 64], "gener": [0, 8, 16, 65], "tutori": 0, "fix": [0, 45], "exist": [0, 10, 26, 45, 51, 53, 59, 63], "_static": 0, "persist": [0, 10], "css": 0, "custom": [0, 10, 27, 45, 49, 52, 53, 54, 65], "differ": [0, 10, 17, 21, 27, 30, 46, 53, 65], "default": [0, 3, 6, 7, 10, 12, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 38, 39, 44, 46, 49, 50, 51, 52, 53, 54, 55, 65], "furo": 0, "theme": 0, "imag": [0, 7, 12, 14, 15, 45], "favicon": 0, "etc": [0, 10], "usag": [0, 59, 63], "refer": [0, 2, 10, 17, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34], "guid": 0, "eyesofcambrian": 0, "conf": 0, "set": [0, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 34, 38, 39, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55], "relat": [0, 17, 23, 25], "extens": 0, "index": [0, 8, 16, 24, 27, 28, 31, 51, 56, 58, 59], "home": [0, 17, 29, 30, 32, 34], "try": 0, "maintain": [0, 52, 54, 65], "describ": [0, 4], "abov": [0, 10], "tab": 0, "onli": [0, 8, 10, 12, 15, 26, 30, 48, 52, 54, 59, 62, 63, 64, 65], "singl": [0, 10, 16, 17, 21, 23, 25, 31, 33, 51, 59, 63], "background": [0, 12, 15, 16, 26, 27, 28], "ha": [0, 6, 10, 12, 17, 23, 25, 27, 28, 29, 30, 32, 49, 53, 65], "multipl": [0, 4, 17, 21, 27, 29, 30, 33, 34, 51, 56, 59], "creat": [0, 10, 12, 15, 17, 21, 22, 27, 29, 32, 33, 39, 41, 42, 44, 45, 46, 48, 52, 53, 54, 59, 63, 64, 65], "titl": [0, 65], "same": [0, 2, 8, 10, 17, 23, 25, 29, 32, 59, 63], "insert": 0, "name": [0, 10, 16, 17, 21, 23, 25, 27, 28, 29, 30, 33, 34, 48, 49, 52, 53, 54, 58, 59, 62, 64, 65], "without": [0, 8, 10, 15, 20, 24, 51], "tabl": 0, "insid": 0, "restructuredtext": 0, "which": [0, 2, 10, 17, 26, 29, 30, 32, 33, 34, 49, 52, 53, 54], "both": [0, 7, 10, 15, 27, 28, 48, 52, 63, 64], "advantag": 0, "disadvantag": 0, "allow": [0, 10, 16, 27, 45, 49, 52, 53, 54, 59, 63, 65], "u": 0, "understand": 0, "languag": 0, "compil": [0, 10], "down": [0, 17, 29, 32, 34], "featur": [0, 30, 46], "librari": [0, 12, 15, 30, 34], "websit": 0, "wai": [0, 4, 65], "easiest": 0, "makefil": [0, 28], "bat": 0, "provid": [0, 1, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 45, 46, 48, 51, 52, 53, 56, 58, 63, 64, 65, 66], "directli": [0, 15, 16, 34, 48, 52, 64], "necessari": [0, 17, 22, 28, 29, 32, 39, 41, 42, 44, 46, 48, 52, 54, 59, 63, 64, 65], "depend": [0, 17, 18, 19, 20, 23, 25, 26, 29, 32, 49, 53], "run": [0, 2, 4, 6, 7, 10, 12, 15, 16, 27, 38, 39, 41, 42, 43, 44, 45, 46, 52, 54], "command": [0, 2, 4, 12, 17, 29, 32, 48], "dev": 0, "clean": [0, 43], "view": [0, 10, 27, 37, 43], "go": [0, 12], "browser": 0, "open": [0, 7, 14, 43, 53], "locat": [0, 17, 29, 32], "autobuild": 0, "extrem": 0, "when": [0, 2, 4, 10, 17, 22, 24, 29, 32, 39, 41, 42, 43, 44, 46, 49, 51, 52, 53, 54, 58, 65], "made": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27], "pypi": 0, "tl": 0, "dr": 0, "we": [1, 2, 4, 10, 16, 34, 43, 52, 54, 65], "few": [1, 21], "sensor": [1, 3, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 32, 36, 39, 41, 42, 43, 44, 45, 46, 55, 65], "stepper": [1, 17, 22, 29, 30, 31, 32, 33, 34], "motor": [1, 17, 22, 29, 30, 31, 32, 33, 34], "control": [1, 17, 29, 30, 31, 32, 33, 34, 49], "variou": 2, "sens": 2, "defin": [2, 10, 11, 13, 17, 22, 23, 24, 25, 27, 29, 30, 32, 33, 38, 39, 41, 42, 44, 46, 52, 54, 65], "feed": [2, 37], "demo": 2, "show": [2, 7, 10], "can": [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 43, 44, 46, 48, 49, 52, 53, 54, 64], "spad": [2, 3, 17, 18, 19, 39, 44, 45, 46], "dashboard": [2, 3], "current": [2, 4, 10, 16, 17, 29, 30, 32, 34, 38, 39, 41, 42, 44, 46, 52, 53, 54, 65], "number": [2, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 34, 38, 39, 41, 42, 44, 46, 51, 58, 59, 65], "support": [2, 4, 12, 16, 27, 30, 39, 44, 45, 46, 48, 51, 52, 63, 64, 65], "document": [2, 10, 17, 27, 29, 33], "more": [2, 10, 43, 49, 53], "inform": [2, 10, 27, 28, 53], "exampel": 2, "regist": [2, 10, 48, 52, 54, 59, 63, 64, 65], "explicit": 2, "callback": [2, 38, 39, 46, 56, 59], "In": [2, 4, 10, 28], "case": 2, "explicitli": [2, 34], "just": [2, 49, 52, 53, 54], "call": [2, 10, 16, 34, 43, 49, 52, 53, 54, 59, 63, 65], "loop": [2, 24, 38, 39, 41, 42, 43, 44, 46, 52, 54], "becom": 2, "help": [2, 10], "block": [2, 17, 29, 30, 32, 33, 34, 38, 39, 41, 42, 44, 46, 58, 59], "spadsensor": [2, 17, 23, 24, 25, 26, 27, 39, 44, 45, 46], "spaddashboard": [2, 39, 44, 46], "wrapper": [2, 12, 15, 17, 21, 26, 29, 30, 33, 34, 52, 54, 56, 58, 59, 65], "enabl": [2, 16, 27, 28, 34], "spadwrapp": [2, 26], "return": [2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 48, 49, 51, 52, 53, 54, 56, 58, 59, 62, 63, 64, 65], "user": [2, 10, 28, 38, 39, 45, 46, 49, 53], "wrap": [2, 10, 26, 49, 52, 53, 54, 56, 58, 59], "spadmergewrapp": [2, 26], "merg": [2, 26, 28, 52, 54, 65], "neighbor": 2, "pixel": [2, 17, 23, 24, 25, 26, 27, 28], "togeth": 2, "spadmergewrapperconfig": [2, 26], "merge_al": [2, 26], "true": [2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 39, 43, 44, 45, 46, 49, 51, 52, 53, 54, 55, 59, 60, 65], "group": 2, "like": [2, 10, 49], "spadmovingaveragewrapperconfig": [2, 26], "window_s": [2, 26], "5": [2, 12], "effect": [2, 10, 34], "stepper_motor": [3, 17], "stepper_system": [3, 17, 29], "gantri": [3, 17, 29, 33, 49], "ax": [3, 17, 29, 30, 31, 32, 33, 34], "y": [3, 28, 39, 44, 46], "sampl": [3, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 31], "2": [3, 10, 17, 21, 27, 29, 31, 33, 49, 53, 56, 59], "overrid": [3, 6, 10, 12, 52, 54, 59, 63, 65], "valu": [3, 8, 10, 16, 17, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 33, 39, 44, 45, 46, 49, 51, 52, 53, 54, 56, 58, 59, 63, 64, 65], "instal": 4, "clone": 4, "publish": 4, "io": 4, "subdirectori": 4, "directori": [4, 52, 53, 54, 65], "separ": 4, "done": [4, 43], "package_nam": 4, "import": [4, 46, 53, 54, 63, 64], "path": [4, 7, 10, 20, 24, 27, 28, 45, 48, 51, 52, 54, 59, 60, 64, 65], "module_nam": 4, "implement": [6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 36, 45, 46, 49, 52, 54, 59, 63, 65], "abstract": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 32, 38, 39, 41, 42, 43, 44, 46, 52, 54, 59, 63], "result": [6, 7, 10, 56, 59], "subclass": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 32, 39, 41, 42, 44, 46, 48, 49, 52, 53, 59, 63, 64], "paramet": [6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 38, 39, 41, 42, 44, 45, 46, 48, 51, 52, 54, 58, 59, 62, 63, 64, 65], "method": [6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 36, 38, 39, 41, 42, 43, 44, 46, 48, 49, 51, 52, 53, 54, 56, 59, 64, 65], "specifi": [6, 7, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 30, 32, 33, 34, 46, 49, 51, 53, 58, 59], "type": [6, 10, 17, 21, 23, 25, 30, 36, 48, 52, 54, 59, 60, 64, 65], "properti": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 39, 41, 42, 43, 44, 45, 46, 52, 54], "is_okai": [6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 34, 43, 52, 54], "bool": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 43, 44, 45, 46, 51, 52, 54, 65], "okai": [6, 7, 52, 54], "fals": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 49, 51, 52, 53, 54, 65], "otherwis": [6, 7, 10, 12, 14, 15, 16, 17, 21, 23, 25, 27, 28, 29, 30, 32, 33, 48, 49, 50, 52, 53, 54, 64, 65], "either": [6, 10, 17, 21], "been": [6, 49, 53, 65], "initi": [6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 34, 45], "properli": [6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 51, 52, 54], "encount": [6, 49, 53], "close": [6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 38, 39, 41, 42, 43, 44, 46, 49, 51, 52, 53, 54], "releas": [6, 7, 10, 11, 13, 16, 17, 18, 19, 20, 22, 23, 25, 26, 29, 32, 49, 52, 53, 54], "ani": [6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 39, 41, 42, 44, 45, 46, 48, 49, 51, 52, 53, 54, 58, 59, 60, 64, 65], "resourc": [6, 7, 11, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 26, 29, 32, 49, 52, 53, 54], "here": [6, 34], "own": [6, 10, 12, 17, 27, 29, 33, 52, 54, 65], "local": [7, 10], "marker": 7, "arucolocalizationalgorithm": 7, "aruco_dict": 7, "marker_s": 7, "origin_id": 7, "num_sampl": [7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28], "marker_id": 7, "detect": [7, 34], "comput": [7, 10, 17, 29, 32], "pose": [7, 17, 18, 19, 20], "rel": [7, 17, 29, 30, 32, 34], "origin": [7, 49, 52, 53, 54, 65], "save": [7, 10, 36, 45, 52, 54, 65], "filenam": [7, 36, 53], "none": [7, 8, 10, 12, 14, 16, 17, 20, 21, 23, 24, 25, 27, 28, 30, 34, 36, 38, 39, 43, 45, 48, 49, 51, 52, 53, 54, 59, 62, 64, 65], "return_imag": 7, "option": [7, 10, 12, 30, 34, 38, 39, 44, 46, 51, 52, 54, 65], "whether": [7, 10, 11, 12, 13, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 30, 31, 38, 39, 41, 42, 43, 44, 45, 46, 52, 54, 65], "displai": [7, 38, 39, 41, 42, 44, 45, 46], "str": [7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 48, 49, 51, 52, 53, 54, 58, 59, 64, 65], "video": [7, 51], "dict": [7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 52, 54, 65], "list": [7, 8, 10, 15, 16, 17, 21, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 39, 44, 46, 51, 52, 54, 56, 59, 62, 65], "dictionari": [7, 10, 17, 22, 29, 30, 33, 48, 52, 54, 64, 65], "check": [7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 43, 52, 54, 59, 60, 62], "associ": [7, 10, 48, 52, 54, 64, 65], "writer": [7, 51], "model": [8, 9, 12], "histogramdataset": 8, "pkl_path": [8, 14, 24], "rolling_window": 8, "histogram": [8, 10, 17, 23, 24, 25, 26, 27, 28, 39, 44, 45, 46], "train": [8, 10], "analysi": 8, "input": [8, 10, 34, 51], "target": [8, 10, 17, 27, 28, 29, 30, 32, 34], "manipul": 8, "affect": [8, 10], "raw": 8, "set_start_bin": 8, "start_bin": 8, "start": [8, 16, 17, 21, 28, 29, 32, 51, 54], "bin": [8, 17, 23, 24, 25, 26, 27, 28, 39, 44, 45, 46], "set_end_bin": 8, "end_bin": 8, "end": [8, 10, 24], "get_raw_bin_num": 8, "transform": [8, 43, 52], "appli": [8, 10, 17, 21], "int": [8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 34, 38, 39, 41, 42, 44, 45, 46, 49, 51, 52, 53, 54, 58, 59], "get_bin_num": 8, "augment": 8, "factor": [8, 26, 30], "std_multipli": 8, "group_by_target": 8, "repeat": 8, "given": [8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 36, 59, 62], "time": [8, 10, 16, 17, 21, 27, 28, 34, 45, 46, 65], "float": [8, 10, 17, 21, 26, 27, 29, 30, 31, 32, 33, 34, 39, 44, 46], "standard": 8, "deviat": 8, "get_mean_captur": 8, "mean": [8, 52, 54, 65], "captur": [8, 12, 15, 16, 17, 18, 19, 20, 41, 42, 43, 49], "torch": [8, 10], "tensor": [8, 10], "set_zero": 8, "zero": [8, 10, 17, 26, 29, 30, 32, 34], "empti": [8, 10, 17, 23, 25, 27, 28, 29, 33, 58, 59], "subtract": 8, "clip_neg": 8, "clip": [8, 26, 30], "neg": [8, 26], "reset_transform": 8, "reset": [8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28], "__len__": [8, 51, 58, 59], "__getitem__": [8, 58, 59], "idx": [8, 10, 56, 59], "item": [8, 58, 59], "posit": [8, 10, 17, 29, 30, 31, 32, 33, 34, 48, 51, 52, 54, 59, 63, 64, 65], "__add__": 8, "other": [8, 10, 17, 23, 25, 27, 28, 29, 32, 33, 49, 52, 53, 54, 65], "join": 8, "confirm": 8, "dimens": [8, 17, 23, 24, 25, 26, 27, 28], "aruco": 9, "dataset": 9, "neural": 10, "network": 10, "architectur": 10, "deeplocation8": 10, "height": [10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28], "8": 10, "width": [10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28], "num_bin": [10, 17, 23, 24, 25, 26, 27, 28], "16": 10, "out_dim": 10, "layer": 10, "convolut": 10, "design": [10, 17, 23, 25, 26], "8x8": [10, 27, 28], "register_buff": 10, "buffer": [10, 49, 51], "typic": 10, "consid": 10, "For": [10, 12, 20], "batchnorm": 10, "running_mean": 10, "part": [10, 30], "state": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 34, 52, 54, 65], "alongsid": 10, "behavior": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 32, 58, 59], "chang": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 49, 53], "between": 10, "non": [10, 38, 39, 41, 42, 44, 46], "latter": 10, "state_dict": 10, "access": [10, 17, 21, 27, 29, 30, 33, 34, 49, 51, 53, 58, 59], "attribut": [10, 17, 21, 23, 25, 27, 28, 29, 33, 52, 53, 54, 58, 59, 65], "oper": [10, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 50, 52, 54], "cuda": [10, 50], "ignor": [10, 16, 26, 49, 53], "includ": [10, 17, 28, 29, 32, 63], "xdoctest": 10, "skip": 10, "undefin": 10, "var": 10, "self": [10, 12, 17, 23, 25, 27, 28, 29, 33, 38, 39, 48, 49, 51, 52, 53, 54, 59, 63, 64, 65], "num_featur": 10, "register_paramet": 10, "param": 10, "add_modul": 10, "child": 10, "register_modul": 10, "alia": 10, "get_submodul": 10, "submodul": [10, 64], "throw": 10, "let": 10, "sai": 10, "nn": 10, "look": [10, 59, 60], "net_b": 10, "net_c": 10, "conv": 10, "conv2d": 10, "33": 10, "kernel_s": 10, "3": [10, 12, 17, 23, 25, 27, 28, 29, 33, 45, 49, 53], "stride": 10, "linear": 10, "in_featur": 10, "100": [10, 54], "out_featur": 10, "200": 10, "bia": 10, "diagram": 10, "nest": [10, 52, 54, 65], "itself": 10, "would": [10, 12, 65], "runtim": 10, "bound": 10, "degre": [10, 17, 27, 29, 32], "queri": 10, "against": 10, "named_modul": 10, "achiev": 10, "o": [10, 12, 49, 53], "n": [10, 23, 25, 27, 28], "transit": 10, "some": [10, 28, 52, 54, 65], "alwai": 10, "fulli": 10, "qualifi": 10, "string": [10, 27, 28, 48, 52, 54, 58, 59, 64, 65], "referenc": 10, "rais": [10, 15, 16, 17, 21, 23, 25, 27, 28, 29, 33, 49], "attributeerror": 10, "point": [10, 17, 23, 24, 25, 26, 27, 28, 29, 32], "along": [10, 31], "sub": 10, "resolv": [10, 52, 54, 65], "object": [10, 15, 17, 23, 24, 25, 27, 28, 29, 30, 33, 34, 48, 51, 52, 54, 58, 64, 65], "instanc": [10, 12, 15, 16, 17, 21, 34, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 52, 53, 54, 59, 63, 64, 65], "set_submodul": 10, "strict": 10, "replac": [10, 12, 49, 53], "new": [10, 12, 17, 20, 22, 29, 32, 39, 41, 42, 43, 44, 46, 52, 54, 65], "parent": [10, 17, 21, 43, 45], "attempt": [10, 16, 17, 21, 34, 58], "doe": [10, 17, 29, 32, 33, 44, 46, 49, 59, 60, 65], "could": [10, 17, 29, 32, 49, 53], "where": [10, 17, 23, 24, 25, 26, 27, 28, 51, 52, 54, 58, 59, 65], "becaus": [10, 53], "doesn": [10, 53], "t": [10, 16, 17, 29, 32, 52, 53, 54, 65], "alreadi": 10, "valueerror": 10, "get_paramet": 10, "docstr": 10, "detail": [10, 17, 27, 29, 33], "explan": 10, "correctli": 10, "invalid": [10, 17, 21], "get_buff": 10, "get_extra_st": 10, "extra": 10, "set_extra_st": 10, "your": [10, 12], "store": [10, 12, 16, 23, 25, 27, 28, 49, 51, 52, 54, 65], "build": [10, 51], "note": [10, 16, 26, 31, 34], "picklabl": 10, "serial": [10, 17, 21, 28, 49, 52, 53, 54, 59, 62, 65], "backward": 10, "compat": [10, 17, 29, 32, 65], "guarante": 10, "break": 10, "pickl": [10, 14, 17, 23, 25, 27, 28, 29, 33, 51, 52, 54, 65], "load": [10, 14, 24, 48, 51, 52, 54, 64, 65], "load_state_dict": 10, "handl": [10, 17, 20, 21, 22, 23, 25, 27, 28, 45, 49, 52, 53, 54], "found": [10, 17, 21], "its": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 48, 52, 59, 62, 64], "fn": [10, 56, 59], "recurs": [10, 52, 64], "everi": 10, "children": 10, "init": [10, 52, 54, 65], "no_grad": 10, "def": [10, 12, 54, 63, 64], "init_weight": 10, "m": [10, 50], "print": [10, 51, 52, 54, 64, 65], "weight": 10, "fill_": 10, "net": 10, "sequenti": 10, "requires_grad": 10, "devic": [10, 15, 17, 21, 28, 30, 36, 47, 50, 59, 62], "move": [10, 17, 26, 29, 30, 32, 33, 34], "gpu": 10, "construct": 10, "optim": 10, "live": 10, "while": [10, 59, 63], "being": [10, 38, 39, 41, 42, 44, 46, 49, 53, 59, 63], "modifi": [10, 49, 53, 65], "place": [10, 49, 53], "copi": [10, 52, 54, 65], "ipu": 10, "xpu": 10, "mtia": 10, "cpu": [10, 50], "dst_type": 10, "cast": 10, "desir": [10, 16], "datatyp": 10, "doubl": 10, "half": 10, "bfloat16": 10, "to_empti": 10, "storag": 10, "dtype": 10, "non_block": 10, "typing_extens": 10, "memory_format": 10, "channels_last": 10, "Its": 10, "signatur": 10, "similar": 10, "accept": [10, 38, 39, 52, 54], "complex": 10, "integr": [10, 28, 44, 46], "unchang": 10, "tri": [10, 17, 21], "asynchron": [10, 56, 59], "respect": [10, 17, 23, 24, 25, 26, 27, 28], "possibl": 10, "g": [10, 16, 17, 29, 32, 43], "pin": [10, 34], "memori": [10, 17, 29, 32, 51], "whose": 10, "format": [10, 17, 21, 23, 25, 26, 49, 53], "4d": 10, "keyword": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 36, 48, 51, 52, 54, 59, 62, 63, 64, 65], "argument": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 36, 38, 39, 48, 51, 52, 54, 59, 62, 63, 64, 65], "ignore_w": 10, "determinist": 10, "1913": 10, "3420": 10, "5113": 10, "2325": 10, "float64": 10, "requir": [10, 34, 58, 59], "env": 10, "torch_doctest_cuda1": 10, "gpu1": 10, "1914": 10, "5112": 10, "2324": 10, "float16": 10, "cdoubl": 10, "3741": 10, "j": 10, "2382": 10, "5593": 10, "4443": 10, "complex128": 10, "ones": 10, "6122": 10, "1150": 10, "register_full_backward_pre_hook": 10, "hook": 10, "prepend": 10, "pre": [10, 14, 24, 28], "gradient": 10, "grad_output": 10, "tupl": [10, 11, 12, 13, 14, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 31], "output": [10, 27, 28, 45, 49, 51, 53], "subsequ": 10, "entri": 10, "technic": 10, "reason": [10, 52, 54, 65], "forward": [10, 17, 21], "receiv": [10, 17, 21], "pass": [10, 17, 20, 21, 34, 36, 48, 49, 52, 53, 54, 59, 62, 64, 65], "similarli": 10, "caller": 10, "inplac": 10, "callabl": [10, 38, 39, 49, 51, 52, 53, 54], "fire": 10, "backward_pr": 10, "after": [10, 12, 26, 52, 54], "global": 10, "register_module_full_backward_pre_hook": 10, "removablehandl": 10, "remov": [10, 26, 28, 49, 53], "register_backward_hook": 10, "deprec": 10, "favor": 10, "register_full_backward_hook": 10, "futur": [10, 52, 54], "version": [10, 12, 49, 53], "execut": [10, 17, 29, 32, 45, 46], "grad_input": 10, "kwarg": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 38, 39, 41, 42, 44, 46, 48, 51, 52, 53, 54, 58, 59, 62, 63, 64, 65], "register_module_full_backward_hook": 10, "register_forward_pre_hook": 10, "with_kwarg": 10, "invok": 10, "won": [10, 52, 54, 65], "unless": 10, "arg": [10, 17, 21, 23, 25, 26, 27, 28, 29, 30, 32, 33, 48, 52, 53, 54, 58, 59, 63, 64, 65], "And": [10, 12], "forward_pr": 10, "register_module_forward_pre_hook": 10, "register_forward_hook": 10, "always_cal": 10, "expect": [10, 17, 29, 32], "possibli": 10, "register_module_forward_hook": 10, "regardless": 10, "except": [10, 49, 53], "__getstate__": [10, 52, 54, 65], "helper": [10, 17, 23, 25, 27, 28, 29, 33, 65], "__setattr__": [10, 52, 54], "setattr": [10, 52, 54], "__delattr__": 10, "delattr": 10, "register_state_dict_post_hook": 10, "post": [10, 52, 54, 65], "prefix": 10, "local_metadata": 10, "register_state_dict_pre_hook": 10, "keep_var": 10, "perform": [10, 17, 21, 27, 36, 48, 52, 54, 59, 60, 64, 65], "destin": 10, "whole": [10, 17, 29, 30, 33], "averag": [10, 11, 12, 13, 17, 18, 19, 20, 23, 25, 26, 27], "kei": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 34, 45, 51, 65], "shallow": 10, "order": [10, 23, 25], "howev": [10, 49, 53], "enforc": [10, 59, 63], "avoid": [10, 17, 29, 32], "ordereddict": 10, "compos": [10, 52, 54, 65], "detach": 10, "autograd": 10, "register_load_state_dict_pre_hook": 10, "missing_kei": 10, "unexpected_kei": 10, "error_msg": 10, "noqa": 10, "b950": 10, "register_load_state_dict_post_hook": 10, "incompatible_kei": 10, "namedtupl": 10, "consist": 10, "miss": 10, "unexpect": 10, "modif": 10, "thrown": 10, "clear": 10, "out": 10, "assign": 10, "descend": 10, "must": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 49, 52, 53, 54], "exactli": 10, "match": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28], "get_swap_module_params_on_convers": 10, "strictli": 10, "preserv": 10, "wherea": 10, "field": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 43], "present": [10, 53], "runtimeerror": 10, "iter": [10, 14, 17, 27, 29, 33, 51, 52, 54], "over": [10, 17, 27, 29, 33, 51], "yield": [10, 51], "direct": [10, 34, 48, 52, 64], "member": [10, 17, 23, 25, 27, 28, 29, 33], "size": [10, 17, 21, 23, 25, 26, 27, 28, 39, 44, 45, 46], "20l": 10, "1l": 10, "5l": 10, "named_paramet": 10, "remove_dupl": 10, "duplic": 10, "buf": 10, "named_buff": 10, "running_var": 10, "named_children": 10, "conv4": 10, "conv5": 10, "l": 10, "enumer": [10, 17, 27, 28, 29, 33, 48, 52, 54, 64, 65], "memo": 10, "certain": 10, "particular": 10, "evalu": 10, "thei": [10, 17, 27, 29, 33, 49, 53], "dropout": 10, "eval": 10, "equival": [10, 52, 54, 65], "disabl": 10, "grad": 10, "comparison": 10, "sever": 10, "mechan": 10, "confus": 10, "requires_grad_": 10, "record": [10, 14, 24, 49, 51, 53], "freez": 10, "finetun": 10, "individu": [10, 65], "gan": 10, "zero_grad": 10, "set_to_non": 10, "context": [10, 52, 54], "instead": [10, 49, 53], "share_memori": 10, "share_memory_": 10, "extra_repr": 10, "represent": [10, 52, 54, 58, 59, 65], "re": [10, 12], "line": [10, 48], "multi": [10, 17, 27, 29, 30, 33, 58, 59], "__repr__": [10, 17, 23, 25, 27, 28, 29, 33, 49, 53, 58, 59], "repr": [10, 17, 23, 25, 27, 28, 29, 33, 49, 53], "__dir__": [10, 17, 23, 25, 27, 28, 29, 33], "dir": 10, "__call__": [10, 59, 63], "initialize_weight": 10, "kaim": 10, "uniform": 10, "base": [11, 12, 13, 17, 18, 19, 20, 22, 23, 24, 25, 27, 29, 32, 38, 39, 41, 42, 44, 45, 46, 48, 51, 52, 54, 59, 60, 63, 64, 65], "cameraconfig": [11, 13, 17], "configur": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 38, 39, 41, 42, 43, 44, 45, 46, 52, 54], "retriev": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 39, 41, 42, 43, 44, 45, 46, 52, 54, 58, 59, 63], "config": [11, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 38, 39, 41, 42, 43, 44, 45, 46, 52, 54, 65], "extend": [11, 13, 17], "specif": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 36, 51, 52, 54, 56, 59, 65], "accumul": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 43], "np": [11, 12, 13, 14, 15, 16, 17, 23, 25, 26, 27, 28, 51], "ndarrai": [11, 12, 13, 14, 15, 16, 17, 23, 25, 26, 27, 28, 51], "arrai": [11, 12, 13, 14, 17], "distortion_coeffici": [11, 12, 13, 14, 15, 16, 17], "numpi": [11, 12, 13, 14, 15, 16, 17], "distort": [11, 12, 13, 14, 15, 16, 17], "coeffici": [11, 12, 13, 14, 15, 16, 17], "repres": [11, 12, 13, 14, 17, 23, 24, 25, 26, 27, 28, 29, 32], "intrinsic_matrix": [11, 12, 13, 14, 15, 16, 17], "intrins": [11, 12, 13, 14, 15, 16, 17], "matrix": [11, 12, 13, 14, 15, 16, 17], "3x3": [11, 12, 13, 14, 17, 27], "resolut": [11, 12, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28], "overridden": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 49, 53, 65], "via": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30], "sent": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28], "sensorconfig": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28], "wa": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 49, 53, 65], "were": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27], "__del__": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 51, 52, 54], "destructor": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28], "flircamera": 12, "around": [12, 15, 17, 21, 29, 30, 33, 34, 52, 54, 58, 65], "singleton": [12, 15, 59], "grasshopperflircamera": 12, "special": 12, "grasshopp": 12, "inherit": [12, 14, 17, 23, 24, 25, 27, 28, 48, 51, 52, 64], "036": 12, "145": 12, "001": 12, "155": 12, "1815": 12, "1817": 12, "753": 12, "721": 12, "299": 12, "531": 12, "352": 12, "spinnak": 12, "usual": [12, 34], "As": 12, "write": [12, 17, 21, 51, 53], "2024": 12, "09": 12, "21": 12, "10": [12, 17, 21, 23, 25, 27, 28, 51, 63], "newer": 12, "step": [12, 17, 29, 32, 34, 43, 45], "tar": 12, "xvzf": 12, "spinnaker_python": 12, "cp": 12, "arch": 12, "gz": 12, "whl": 12, "But": 12, "fail": 12, "11": 12, "m2": 12, "mac": 12, "turn": 12, "4": 12, "172": 12, "cp310": 12, "macosx_13_0_arm64": 12, "mv": 12, "cp311": 12, "_pyspin": 12, "cpython": 12, "310": 12, "darwin": 12, "311": 12, "offici": 12, "caus": 12, "issu": [12, 53], "risk": 12, "camera_index": [12, 16], "thread": [12, 15, 16, 17, 21, 38, 39, 41, 42, 44, 46, 49, 53, 58, 59], "them": [12, 16, 17, 27, 28, 29, 30, 32, 33, 65], "queue": [12, 16], "avail": [12, 14, 17, 20, 21, 22, 23, 25, 27, 28, 46, 50, 59, 62], "stream": [12, 15, 53], "stop": [12, 15, 16, 17, 21, 27, 28, 52, 54], "deiniti": [12, 15], "flir": [13, 17], "pkl": [13, 17, 23, 51], "realsens": [13, 17], "file": [14, 20, 24, 36, 45, 51, 52, 53, 54, 65], "pklcamera": 14, "read": [14, 17, 21, 51, 65], "exhaust": 14, "still": [14, 43], "activ": [14, 27], "placehold": 14, "potenti": 14, "cleanup": [14, 52, 54], "logic": [14, 52, 54, 65], "intel": 15, "realsensecamera": 15, "pyrealsens": 15, "d435i": 15, "color": [15, 17, 27, 29, 33], "depth": [15, 16, 27, 45], "return_depth": [15, 16], "realsenseconfig": 15, "rgb": [15, 16], "worker": 15, "r": 15, "return_rgb": [15, 16], "return_ir": 15, "pipelin": 15, "readi": 15, "notimplementederror": [15, 16, 49], "yet": [15, 16], "usbcameraconfig": 16, "variabl": [16, 17, 22, 23, 24, 25, 27, 28, 29, 31, 33, 34, 38, 39, 44, 45, 46, 65], "identifi": [16, 31], "start_capture_onc": 16, "keep": [16, 27, 28], "until": [16, 17, 21, 29, 32, 38, 39, 41, 42, 44, 46, 52, 54], "exposur": 16, "vari": [16, 17, 18, 19, 20, 23, 25, 26], "platform": 16, "force_autoexposur": 16, "auto": [16, 34], "Not": 16, "usbcamera": 16, "frame": [16, 38, 39, 41, 42, 43, 44, 45, 46, 51], "don": [16, 17, 29, 32], "known": [16, 17, 29, 32], "fallback": 16, "mocap": [17, 41, 42, 43], "tmf8828": [17, 23, 36], "vl53l8ch": [17, 23, 27], "kinesis_stepp": [17, 29], "stepper_control": [17, 29], "telemetrix_stepp": [17, 29], "safe_seri": 17, "motioncapturesensor": [17, 18, 19, 41, 42, 43], "motion": [17, 18, 19, 20, 29, 30, 32, 34, 41, 42, 43], "sum": [17, 18, 19, 20, 23, 25, 26], "motioncapturesensorconfig": [17, 18, 19], "safeseri": [17, 21], "lock_typ": [17, 21], "multiprocess": [17, 21], "safe": [17, 21, 29, 32, 34, 58, 59], "synchron": [17, 21, 38, 39, 41, 42, 44, 46, 56, 58, 59], "lock": [17, 21, 49, 53], "classmethod": [17, 21, 48, 52, 54, 59, 63, 64, 65], "port": [17, 21, 27, 28, 30, 34, 36, 59, 62], "wait": [17, 21, 29, 30, 32, 34, 58, 59], "establish": [17, 21, 29, 32], "connect": [17, 21, 24, 27, 28, 29, 30, 32, 34], "second": [17, 21, 27, 34], "forc": [17, 21], "constructor": [17, 21, 36, 48, 52, 53, 54, 59, 63, 64, 65], "warn": [17, 21], "log": [17, 21, 49, 53], "byte": [17, 21, 28], "wait_for_start_talk": [17, 21], "timeout": [17, 21, 27], "talk": [17, 21], "success": [17, 21], "maximum": [17, 21, 30, 39, 44, 45, 46, 53, 65], "give": [17, 21], "up": [17, 21, 38, 39, 41, 42, 43, 44, 45, 46, 49, 53, 59, 60], "wait_for_stop_talk": [17, 21], "write_and_wait_for_start_talk": [17, 21], "resend": [17, 21], "write_and_wait_for_stop_talk": [17, 21], "return_data": [17, 21], "upon": [17, 21], "statu": [17, 21, 29, 32], "write_and_wait_for_start_and_stop_talk": [17, 21], "event": [17, 21, 43, 45, 49, 53], "__getattr__": [17, 21, 29, 30, 33, 34, 58, 59], "prevent": [17, 21], "concurr": [17, 21], "ui": [17, 22, 43, 65], "element": [17, 22], "photon": [17, 23, 25], "avalanch": [17, 23, 25], "diod": [17, 23, 25], "manag": [17, 23, 25, 26, 28, 52, 65], "measur": [17, 23, 24, 25, 26, 27, 28], "collect": [17, 23, 25, 26, 27, 29, 33], "analyz": [17, 23, 25], "system": [17, 23, 25, 29, 30, 33, 34, 44, 46, 49, 53], "spaddatatyp": [17, 23, 25, 26], "indic": [17, 23, 24, 25, 26, 27, 28], "discret": [17, 23, 24, 25, 26, 27, 28], "rang": [17, 23, 24, 25, 26, 27, 28, 31, 36, 65], "total": [17, 23, 24, 25, 26, 27, 28], "distanc": [17, 23, 24, 25, 26, 27, 28], "equal": [17, 23, 24, 25, 26, 27, 28], "multipli": [17, 23, 24, 25, 26, 27, 28], "spatial": [17, 23, 24, 25, 26, 27, 28], "spadsensorconfig": [17, 23, 25, 26], "data_typ": [17, 23, 25], "num_pixel": [17, 23, 24, 25, 26, 27, 28], "dummysteppermotor": [17, 29, 32], "dummi": [17, 29, 32, 33, 44, 46], "noth": [17, 29, 32, 33, 49], "test": [17, 24, 29, 32, 44, 46], "attach": [17, 29, 30, 32, 33, 49, 53], "steppermotor": [17, 29, 30, 32, 33, 34], "unifi": [17, 29, 32, 34], "common": [17, 24, 27, 28, 29, 32], "shut": [17, 29, 32, 34], "power": [17, 29, 32], "damag": [17, 29, 32], "leak": [17, 29, 32], "predefin": [17, 29, 30, 32], "involv": [17, 29, 32], "limit": [17, 29, 30, 32, 39, 44, 46], "switch": [17, 29, 32], "trigger": [17, 29, 32], "move_to": [17, 29, 30, 32, 33, 34], "absolut": [17, 29, 30, 32, 34], "interpret": [17, 29, 32], "characterist": [17, 29, 32], "angl": [17, 29, 32], "move_bi": [17, 29, 30, 32, 33, 34], "relative_posit": [17, 29, 30, 32, 34], "amount": [17, 29, 30, 32, 34], "unit": [17, 29, 32, 33], "wait_for_mov": [17, 29, 30, 32, 34], "complet": [17, 29, 30, 32, 34], "reach": [17, 24, 29, 32], "is_mov": [17, 29, 30, 32, 33, 34], "steppermotorsystem": [17, 29, 33], "axi": [17, 29, 30, 31, 33, 39, 44, 46], "rotat": [17, 29, 33], "stage": [17, 29, 33], "passthrough": [17, 29, 30, 33, 34], "underli": [17, 26, 29, 30, 33, 34, 49, 53, 58, 59], "steppermotorsystemaxi": [17, 29, 30, 33, 34], "kwd": [17, 23, 25, 27, 28, 29, 33], "pair": [17, 27, 29, 33], "enum": [17, 23, 25, 27, 28, 29, 33, 65], "red": [17, 27, 29, 33], "blue": [17, 27, 29, 33], "green": [17, 27, 29, 33], "lookup": [17, 27, 29, 33, 49, 53], "know": [17, 27, 29, 33], "mani": [17, 27, 29, 33, 48, 52, 64], "len": [17, 27, 29, 33], "__str__": [17, 23, 25, 27, 28, 29, 33, 52, 54, 65], "public": [17, 23, 25, 27, 28, 29, 33], "interest": [17, 23, 25, 27, 28, 29, 33, 49, 53], "__format__": [17, 23, 25, 27, 28, 29, 33], "format_spec": [17, 23, 25, 27, 28, 29, 33], "formatt": [17, 23, 25, 27, 28, 29, 33, 49, 53], "typeerror": [17, 23, 25, 27, 28, 29, 33], "__hash__": [17, 23, 25, 27, 28, 29, 33], "hash": [17, 23, 25, 27, 28, 29, 33], "__reduce_ex__": [17, 23, 25, 27, 28, 29, 33], "proto": [17, 23, 25, 27, 28, 29, 33], "vivetrackersensorconfig": 20, "vivetrack": 20, "cfg": 20, "json": 20, "additional_arg": 20, "pysurv": 20, "simplecontext": 20, "lead": 20, "poser": 20, "mpfit": 20, "vivetrackerpos": 20, "row": [20, 22, 26, 27, 28], "get_data": [20, 22, 23, 25, 27, 28], "has_data": [20, 22, 23, 25, 27, 28], "vivetrackersensor": 20, "commun": [21, 27, 28], "conveni": 21, "sensordata": 22, "verify_has_data": [22, 23, 25, 27, 28], "__contains__": [23, 25], "least": [23, 25], "flag": [23, 25, 28], "__iter__": [23, 25, 51], "definit": [23, 25], "spadsensordata": [23, 25], "incom": [23, 25], "appropri": [23, 25, 53], "calculate_point_cloud": [23, 25, 27, 28], "subpixel_sampl": [23, 25, 27, 28], "bilinear_interpol": [23, 25, 27, 28], "calcul": [23, 25, 27, 28], "cloud": [23, 25, 27, 28], "precomput": [23, 25, 27, 28], "mm": [23, 25, 27, 28], "per": [23, 25, 27, 28, 34], "interpol": [23, 25, 27, 28], "meter": [23, 25, 27, 28], "calculate_dist": [23, 25, 27, 28], "window": [23, 25, 26, 27, 28, 30, 43, 45], "threshold": [23, 25, 27, 28], "pklspadsensorconfig": [24, 26], "pklspadsensor": 24, "fake": 24, "simul": 24, "op": 24, "spadwrapperconfig": 26, "expos": 26, "simplifi": 26, "unwrap": 26, "merge_row": 26, "merge_col": 26, "column": [26, 28], "spadmovingaveragewrapp": 26, "spadbackgroundremovalwrapperconfig": 26, "pkl_spad": 26, "pklspad": 26, "remove_background": 26, "spadbackgroundremovalwrapp": 26, "spadscalingwrapperconfig": 26, "scale": [26, 30], "spadscalingwrapp": 26, "zone": 27, "flight": [27, 28], "am": 27, "wide": 27, "vcsel": 27, "map": [27, 48, 49, 52, 53, 54, 64, 65], "4x4": [27, 28], "3x6": 27, "multizon": 27, "tmf8828sensor": 27, "tmf882x": [27, 36], "arduino": [27, 34, 59, 62], "shield": 27, "spadid": [27, 36], "num_channel": 27, "channel": [27, 30, 39, 44, 46], "id": [27, 34], "active_channels_per_subcaptur": 27, "subcaptur": 27, "fov": 27, "fovx": 27, "fovi": 27, "rangemod": [27, 36], "timing_resolut": 27, "tmf8828config": 27, "spad_id": [27, 36], "range_mod": [27, 36], "long": [27, 36], "short": [27, 36], "tmf8828data": 27, "align": [27, 28], "rout": [27, 28], "handler": [27, 28, 49, 51, 53], "succe": [27, 28], "across": [27, 63], "high": 27, "baudrat": [27, 28], "baud": [27, 28], "rate": [27, 28], "request": [27, 48, 52, 54, 58, 59, 64, 65], "framework": 28, "rangingmod": 28, "vl53l8chconfig": 28, "uint16_t": 28, "ranging_mod": 28, "ranging_frequency_hz": 28, "frequenc": 28, "hz": 28, "integration_time_m": 28, "millisecond": 28, "cnh_start_bin": 28, "cnh": 28, "cnh_num_bin": 28, "cnh_subsampl": 28, "subsampl": 28, "agg_start_x": 28, "aggreg": 28, "x": 28, "coordin": 28, "agg_start_i": 28, "agg_merge_x": 28, "agg_merge_i": 28, "agg_col": 28, "agg_row": 28, "add_back_ambi": 28, "back": 28, "ambient": 28, "light": [28, 50], "preprocess": 28, "never": 28, "pack": 28, "structur": [28, 52, 54, 65], "vl53l8chsharedconfig": 28, "share": [28, 58, 59, 63], "vl53l8chconfig4x4": 28, "vl53l8chconfig8x8": 28, "vl53l8chdata": 28, "vl53l8chsensor": 28, "acquisit": [28, 49, 53], "steppercontrollerconfig": [29, 31], "steppermotorconfig": [29, 32], "steppermotorsystemconfig": [29, 33], "kinesi": 30, "kinesissteppermotor": 30, "thorlab": 30, "c": [30, 50], "api": [30, 52, 54, 65, 67], "pylablib": 30, "throlab": 30, "kinesismotor": 30, "linux": 30, "is_rack_system": 30, "movement": 30, "rack": 30, "max_veloc": 30, "acceler": 30, "lower_limit": 30, "upper_limit": 30, "clip_at_limit": 30, "initial_posit": 30, "reference_posit": 30, "check_hom": 30, "veloc": 30, "lower": 30, "upper": 30, "dure": [30, 49, 53], "opposit": [30, 34], "successfulli": 30, "healthi": [30, 34], "kinesisrotationstag": 30, "kinesissteppermotorsystem": 30, "instanti": [30, 48, 52, 54, 64, 65], "azimuthelevationsystem": 30, "azimuth": 30, "elev": 30, "setup": [30, 38, 39, 41, 42, 43, 44, 45, 46, 52, 54], "controlleraxisconfig": 31, "flip": 31, "snakecontrolleraxisconfig": 31, "min": [31, 65], "max": [31, 65], "snakesteppercontrollerconfig": 31, "uniqu": 31, "snakesteppercontrollerconfigxi": 31, "dummysteppersystem": 33, "telemetrixsteppermotor": 34, "telemetrixsteppermotorsystem": 34, "telemetrix": 34, "cncshield": 34, "telemetrixsteppermotorconfig": 34, "board": 34, "distance_pin": 34, "direction_pin": 34, "enable_pin": 34, "cm_per_rev": 34, "centimet": 34, "revolut": 34, "steps_per_rev": 34, "speed": [34, 50], "cm": 34, "flip_direct": 34, "set_current_posit": 34, "set_target_position_cm": 34, "relative_cm": 34, "set_absolute_target_position_cm": 34, "position_cm": 34, "cm_to_rev": 34, "revs_to_cm": 34, "rev": 34, "stepper_": 34, "motorx": 34, "target_posit": 34, "equat": 34, "_board": 34, "stepper_target_posit": 34, "ll": [34, 52, 54, 65], "telemetrixsteppermotorsystemconfig": 34, "arduino_wait": 34, "telemetrixsteppermotorxconfig": 34, "telemetrixsteppermotoryconfig": 34, "telemetrixsteppermotorzconfig": 34, "dualdrive2axisgantryxconfig": 34, "dualdrive2axisgantryy1config": 34, "dualdrive2axisgantryy2config": 34, "dualdrive2axisgantryconfig": 34, "singledrive1axisgantryxconfig": 34, "singledrive1axisgantryyconfig": 34, "singledrive1axisgantryconfig": 34, "camera_view": [35, 48], "flash": [35, 48], "jogger": [35, 48], "tmf8828_calibr": 36, "id6": 36, "id15": 36, "four": 36, "legaci": 36, "twice": 36, "dashboardconfig": [38, 39], "gui": [38, 39], "num_fram": [38, 39], "000": [38, 39], "user_callback": [38, 39, 46], "independ": [38, 39, 41, 42, 43, 44, 46], "capabl": [38, 39, 41, 42, 44, 46], "mocap_dashboard": 39, "spad_dashboard": 39, "pyqtgraph": [39, 44, 46], "spaddashboardconfig": [39, 44, 46], "min_bin": [39, 44, 45, 46], "minimum": [39, 44, 45, 46, 65], "max_bin": [39, 44, 45, 46], "autoscal": [39, 44, 46], "ylim": [39, 44, 46], "channel_mask": [39, 44, 46], "motioncapturedashboard": [41, 42], "motioncaptur": [41, 42, 43], "motioncapturedashboardconfig": [41, 42], "pyqtgraphmotioncapturedashboardconfig": 43, "3d": [43, 66], "dashboardwindow": [43, 45], "qwidget": 43, "hold": 43, "opengl": 43, "glviewwidget": 43, "keypressev": [43, 45], "quit": 43, "q": 43, "esc": 43, "pyqtgraphmotioncapturedashboard": 43, "enter": 43, "qt": 43, "period": [43, 51], "timer": 43, "send": 43, "applic": [43, 45, 49, 53, 63], "dummyspaddashboard": [44, 46], "purpos": [44, 46], "dummyspaddashboardconfig": [44, 46], "real": [45, 46], "pyqtgraphdashboardconfig": 45, "panel": 45, "right": 45, "init_ui": 45, "plot": [45, 55], "enable_point_cloud_view": 45, "resiz": 45, "d": 45, "pane": 45, "grid": 45, "enable_depth_view": 45, "press": 45, "exit": 45, "pyqtgraphdashboard": [45, 46], "layout": 45, "fullscreen": 45, "headless": 45, "three": 46, "matplotlibdashboard": 46, "matplotlib": [46, 52], "dashdashboard": 46, "dash": 46, "plotli": 46, "web": 46, "create_from_registri": [46, 48, 52, 54, 64, 65], "my_callback": 46, "firmwar": 47, "registri": [48, 52, 54, 65], "plu": [48, 52, 64], "factori": [48, 52, 64, 65], "lazi": [48, 52, 54, 64, 65], "registr": [48, 52, 64], "friend": [48, 52, 54, 64, 65], "anoth": [48, 52, 54, 64, 65], "necessarili": [48, 52, 54, 64, 65], "myregistri": [48, 52, 64], "foo": [48, 52, 64], "bar": [48, 52, 64], "my_modul": [48, 52, 64], "class_typ": [48, 52, 54, 64, 65], "class_nam": [48, 52, 54, 64, 65], "module_path": [48, 52, 54, 64, 65], "modul": [48, 52, 66], "joystick": 49, "outputcaptur": 49, "stdout": 49, "stderr": 49, "logbufferhandl": 49, "emit": [49, 53], "whatev": 49, "take": [49, 51], "intend": 49, "createlock": [49, 53], "acquir": [49, 53], "setlevel": [49, 53], "level": [49, 53], "condition": [49, 53], "emiss": [49, 53], "filter": [49, 51, 53], "setformatt": [49, 53], "fmt": [49, 53], "flush": [49, 51, 53], "tidi": [49, 53], "intern": [49, 53], "_handler": [49, 53], "handleerror": [49, 53], "occur": [49, 53], "raiseexcept": [49, 53], "silent": [49, 53], "what": [49, 53], "mostli": [49, 53], "most": [49, 53], "care": [49, 53], "about": [49, 53], "wish": [49, 53], "addfilt": [49, 53], "removefilt": [49, 53], "determin": [49, 53], "loggabl": [49, 53], "consult": [49, 53], "veto": [49, 53], "further": [49, 53], "12": [49, 53], "logrecord": [49, 53], "300000000": 50, "torch_devic": 50, "pytorch": 50, "pklhandler": 51, "overwrit": 51, "update_index_kwarg": 51, "append": [51, 53, 58, 59], "random": 51, "entir": 51, "another_kei": 51, "another_valu": 51, "update_index": 51, "prune_fn": 51, "lambda": 51, "_": [51, 52, 54], "scan": 51, "_index": 51, "exclud": 51, "first": 51, "load_al": 51, "extract": 51, "pklreader": 51, "videowrit": 51, "fp": 51, "flush_interv": 51, "interv": 51, "mp4": 51, "30": 51, "remain": 51, "delet": [51, 52, 54], "constant": 52, "file_handl": 52, "logger": 52, "compon": [52, 54], "create_from_config": [52, 54], "omegaconf": [52, 54, 65], "dictconfig": [52, 54, 65], "uninstanti": [52, 54, 65], "proper": [52, 54, 65], "deseri": [52, 54, 65], "yaml": [52, 54, 65], "code": [52, 54, 65], "__post_init__": [52, 54, 65], "deriv": [52, 54, 65], "abl": [52, 54, 65], "_convert_": [52, 54, 65], "listconfig": [52, 54, 65], "convers": [52, 54, 65], "dataclass": [52, 54, 65], "config_dir": [52, 54, 65], "config_nam": [52, 54, 65], "return_hydra_config": [52, 54, 65], "hydra": [52, 54, 59, 60, 65], "hydracontainerconfig": [52, 54, 65], "hydraconfig": [52, 54, 65], "pattern": [52, 54, 59, 63, 65], "instantiate_kwarg": [52, 54, 65], "select": [52, 54, 65], "merge_with": [52, 54, 65], "deepcopi": [52, 54, 65], "__setstate__": [52, 54, 65], "slow": [52, 54, 65], "unpickl": [52, 54, 65], "header": [52, 54, 65], "top": [52, 54, 65], "to_yaml": [52, 54, 65], "to_dict": [52, 54, 65], "throw_on_miss": [52, 54, 65], "cleanup_on_keyboard_interrupt": [52, 54], "essenti": [52, 54], "counter": [52, 54], "begin": [52, 54], "continu": [52, 54], "__enter__": [52, 54], "__exit__": [52, 54], "__": [52, 54], "set_it": [52, 54], "is_loop": [52, 54], "threadedcompon": [52, 54], "decor": [52, 59, 63, 64], "approach": [52, 64], "ancestor": [52, 64], "tqdm": 53, "messag": 53, "consol": 53, "get_logg": 53, "info": 53, "filehandl": 53, "delai": 53, "superclass": 53, "w": 53, "_close": 53, "42378": 53, "setstream": 53, "streamhandl": 53, "old": 53, "wasn": 53, "tqdmstreamhandl": 53, "trail": 53, "newlin": 53, "traceback": 53, "print_except": 53, "encod": 53, "loggermaxlevelfilt": 53, "max_level": 53, "deem": 53, "set_matplotlib_styl": 55, "use_scienceplot": 55, "call_async": [56, 59], "call_async_gath": [56, 59], "call_async_valu": [56, 59], "dequ": [58, 59], "blockingdequ": [58, 59], "condit": [58, 59], "suitabl": [58, 59], "notifi": [58, 59], "manner": [58, 59], "asyncio_util": 59, "blocking_dequ": 59, "serial_util": 59, "get_object": [59, 60], "verbos": [59, 60], "entiti": [59, 60], "dotpath": [59, 60], "lift": [59, 60], "arduino_upload": [59, 62], "upload": [59, 62], "sketch": [59, 62], "find_device_by_label": [59, 62], "label": [59, 62], "find": [59, 62], "volum": [59, 62], "search": [59, 62], "find_port": [59, 62], "cl": [59, 62, 63], "singletonabcmeta": [59, 63], "metaclass": [59, 63], "combin": [59, 63], "abc": [59, 63], "virtual": [59, 63], "__instancecheck__": [59, 63], "isinst": [59, 63], "__subclasscheck__": [59, 63], "issubclass": [59, 63], "singletonmeta": [59, 63], "miscellan": 60, "singleton_meta": 63, "mysingleton": 63, "instance1": 63, "instance2": 63, "assert": 63, "my_registri": 64, "myclass": 64, "hello": 64, "lazili": 64, "myotherclass": 64, "other_inst": 64, "some_arg": 64, "dirti": 65, "last": 65, "ideal": 65, "731": 65, "default_factori": 65, "sensorset": 65, "rangeset": 65, "valid": 65, "optionset": 65, "from_enum": 65, "boolset": 65, "boolean": 65, "space": 66}, "objects": {"": [[35, 0, 0, "-", "cc_hardware"]], "cc_hardware": [[9, 0, 0, "-", "algos"], [17, 0, 0, "-", "drivers"], [48, 0, 0, "-", "tools"], [52, 0, 0, "-", "utils"]], "cc_hardware.algos": [[6, 0, 0, "-", "algorithm"], [7, 0, 0, "-", "aruco"], [8, 0, 0, "-", "datasets"], [10, 0, 0, "-", "models"]], "cc_hardware.algos.algorithm": [[6, 1, 1, "", "Algorithm"]], "cc_hardware.algos.algorithm.Algorithm": [[6, 2, 1, "", "close"], [6, 3, 1, "", "is_okay"], [6, 2, 1, "", "run"]], "cc_hardware.algos.aruco": [[7, 1, 1, "", "ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm": [[7, 2, 1, "", "close"], [7, 3, 1, "", "is_okay"], [7, 2, 1, "", "run"]], "cc_hardware.algos.datasets": [[8, 1, 1, "", "HistogramDataset"]], "cc_hardware.algos.datasets.HistogramDataset": [[8, 2, 1, "", "__add__"], [8, 2, 1, "", "__getitem__"], [8, 2, 1, "", "__len__"], [8, 2, 1, "", "augment"], [8, 2, 1, "", "clip_negative"], [8, 2, 1, "", "get_bin_num"], [8, 2, 1, "", "get_mean_capture"], [8, 2, 1, "", "get_raw_bin_num"], [8, 2, 1, "", "reset_transformations"], [8, 2, 1, "", "set_end_bin"], [8, 2, 1, "", "set_start_bin"], [8, 2, 1, "", "set_zero"]], "cc_hardware.algos.models": [[10, 1, 1, "", "DeepLocation8"], [10, 4, 1, "", "initialize_weights"]], "cc_hardware.algos.models.DeepLocation8": [[10, 2, 1, "", "__delattr__"], [10, 2, 1, "", "__dir__"], [10, 2, 1, "", "__getstate__"], [10, 2, 1, "", "__repr__"], [10, 2, 1, "", "__setattr__"], [10, 2, 1, "", "add_module"], [10, 2, 1, "", "apply"], [10, 2, 1, "", "bfloat16"], [10, 2, 1, "", "buffers"], [10, 2, 1, "", "children"], [10, 2, 1, "", "compile"], [10, 2, 1, "", "cpu"], [10, 2, 1, "", "cuda"], [10, 2, 1, "", "double"], [10, 2, 1, "", "eval"], [10, 2, 1, "", "extra_repr"], [10, 2, 1, "", "float"], [10, 2, 1, "", "get_buffer"], [10, 2, 1, "", "get_extra_state"], [10, 2, 1, "", "get_parameter"], [10, 2, 1, "", "get_submodule"], [10, 2, 1, "", "half"], [10, 2, 1, "", "ipu"], [10, 2, 1, "", "load_state_dict"], [10, 2, 1, "", "modules"], [10, 2, 1, "", "mtia"], [10, 2, 1, "", "named_buffers"], [10, 2, 1, "", "named_children"], [10, 2, 1, "", "named_modules"], [10, 2, 1, "", "named_parameters"], [10, 2, 1, "", "parameters"], [10, 2, 1, "", "register_backward_hook"], [10, 2, 1, "", "register_buffer"], [10, 2, 1, "", "register_forward_hook"], [10, 2, 1, "", "register_forward_pre_hook"], [10, 2, 1, "", "register_full_backward_hook"], [10, 2, 1, "", "register_full_backward_pre_hook"], [10, 2, 1, "", "register_load_state_dict_post_hook"], [10, 2, 1, "", "register_load_state_dict_pre_hook"], [10, 2, 1, "", "register_module"], [10, 2, 1, "", "register_parameter"], [10, 2, 1, "", "register_state_dict_post_hook"], [10, 2, 1, "", "register_state_dict_pre_hook"], [10, 2, 1, "", "requires_grad_"], [10, 2, 1, "", "set_extra_state"], [10, 2, 1, "", "set_submodule"], [10, 2, 1, "", "share_memory"], [10, 2, 1, "", "state_dict"], [10, 2, 1, "", "to"], [10, 2, 1, "", "to_empty"], [10, 2, 1, "", "train"], [10, 2, 1, "", "type"], [10, 2, 1, "", "xpu"], [10, 2, 1, "", "zero_grad"]], "cc_hardware.drivers": [[17, 1, 1, "", "Camera"], [17, 1, 1, "", "CameraConfig"], [17, 1, 1, "", "DummyStepperMotor"], [17, 1, 1, "", "MotionCaptureSensor"], [17, 1, 1, "", "MotionCaptureSensorConfig"], [17, 1, 1, "", "SPADSensor"], [17, 1, 1, "", "SPADSensorConfig"], [17, 1, 1, "", "SafeSerial"], [17, 1, 1, "", "Sensor"], [17, 1, 1, "", "SensorConfig"], [17, 1, 1, "", "StepperMotor"], [17, 1, 1, "", "StepperMotorSystem"], [17, 1, 1, "", "StepperMotorSystemAxis"], [13, 0, 0, "-", "cameras"], [18, 0, 0, "-", "mocap"], [21, 0, 0, "-", "safe_serial"], [22, 0, 0, "-", "sensor"], [23, 0, 0, "-", "spads"], [29, 0, 0, "-", "stepper_motors"]], "cc_hardware.drivers.Camera": [[17, 2, 1, "", "__del__"], [17, 2, 1, "", "accumulate"], [17, 2, 1, "", "calibrate"], [17, 2, 1, "", "close"], [17, 3, 1, "", "distortion_coefficients"], [17, 3, 1, "", "intrinsic_matrix"], [17, 3, 1, "", "is_okay"], [17, 2, 1, "", "reset"], [17, 3, 1, "", "resolution"], [17, 3, 1, "", "settings"], [17, 2, 1, "", "update"]], "cc_hardware.drivers.CameraConfig": [[17, 3, 1, "", "settings"]], "cc_hardware.drivers.MotionCaptureSensor": [[17, 2, 1, "", "__del__"], [17, 2, 1, "", "accumulate"], [17, 2, 1, "", "calibrate"], [17, 2, 1, "", "close"], [17, 3, 1, "", "is_okay"], [17, 2, 1, "", "reset"], [17, 3, 1, "", "settings"], [17, 2, 1, "", "update"]], "cc_hardware.drivers.MotionCaptureSensorConfig": [[17, 3, 1, "", "settings"]], "cc_hardware.drivers.SPADSensor": [[17, 2, 1, "", "__del__"], [17, 2, 1, "", "accumulate"], [17, 2, 1, "", "calibrate"], [17, 2, 1, "", "close"], [17, 3, 1, "", "is_okay"], [17, 3, 1, "", "num_bins"], [17, 2, 1, "", "reset"], [17, 3, 1, "", "resolution"], [17, 3, 1, "", "settings"], [17, 2, 1, "", "update"]], "cc_hardware.drivers.SPADSensorConfig": [[17, 3, 1, "", "num_pixels"], [17, 3, 1, "", "settings"]], "cc_hardware.drivers.SafeSerial": [[17, 2, 1, "", "__getattr__"], [17, 2, 1, "", "create"], [17, 2, 1, "", "read"], [17, 2, 1, "", "wait_for_start_talk"], [17, 2, 1, "", "wait_for_stop_talk"], [17, 2, 1, "", "write"], [17, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [17, 2, 1, "", "write_and_wait_for_start_talk"], [17, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.Sensor": [[17, 2, 1, "", "__del__"], [17, 2, 1, "", "calibrate"], [17, 2, 1, "", "close"], [17, 3, 1, "", "is_okay"], [17, 2, 1, "", "reset"], [17, 3, 1, "", "settings"], [17, 2, 1, "", "update"]], "cc_hardware.drivers.SensorConfig": [[17, 3, 1, "", "settings"]], "cc_hardware.drivers.StepperMotor": [[17, 2, 1, "", "close"], [17, 2, 1, "", "home"], [17, 3, 1, "", "is_moving"], [17, 2, 1, "", "move_by"], [17, 2, 1, "", "move_to"], [17, 3, 1, "", "position"], [17, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.StepperMotorSystem": [[17, 2, 1, "", "__getattr__"], [17, 3, 1, "", "axes"], [17, 3, 1, "", "is_moving"], [17, 2, 1, "", "move_by"], [17, 2, 1, "", "move_to"]], "cc_hardware.drivers.StepperMotorSystemAxis": [[17, 2, 1, "", "__dir__"], [17, 2, 1, "", "__format__"], [17, 2, 1, "", "__hash__"], [17, 2, 1, "", "__reduce_ex__"], [17, 2, 1, "", "__repr__"], [17, 2, 1, "", "__str__"], [17, 2, 1, "", "name"], [17, 2, 1, "", "value"]], "cc_hardware.drivers.cameras": [[13, 1, 1, "", "Camera"], [13, 1, 1, "", "CameraConfig"], [11, 0, 0, "-", "camera"], [12, 0, 0, "-", "flir"], [14, 0, 0, "-", "pkl"], [15, 0, 0, "-", "realsense"], [16, 0, 0, "-", "usb"]], "cc_hardware.drivers.cameras.Camera": [[13, 2, 1, "", "__del__"], [13, 2, 1, "", "accumulate"], [13, 2, 1, "", "calibrate"], [13, 2, 1, "", "close"], [13, 3, 1, "", "distortion_coefficients"], [13, 3, 1, "", "intrinsic_matrix"], [13, 3, 1, "", "is_okay"], [13, 2, 1, "", "reset"], [13, 3, 1, "", "resolution"], [13, 3, 1, "", "settings"], [13, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.CameraConfig": [[13, 3, 1, "", "settings"]], "cc_hardware.drivers.cameras.camera": [[11, 1, 1, "", "Camera"], [11, 1, 1, "", "CameraConfig"]], "cc_hardware.drivers.cameras.camera.Camera": [[11, 2, 1, "", "__del__"], [11, 2, 1, "", "accumulate"], [11, 2, 1, "", "calibrate"], [11, 2, 1, "", "close"], [11, 3, 1, "", "distortion_coefficients"], [11, 3, 1, "", "intrinsic_matrix"], [11, 3, 1, "", "is_okay"], [11, 2, 1, "", "reset"], [11, 3, 1, "", "resolution"], [11, 3, 1, "", "settings"], [11, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.camera.CameraConfig": [[11, 3, 1, "", "settings"]], "cc_hardware.drivers.cameras.flir": [[12, 1, 1, "", "FlirCamera"], [12, 1, 1, "", "GrasshopperFlirCamera"]], "cc_hardware.drivers.cameras.flir.FlirCamera": [[12, 2, 1, "", "__del__"], [12, 2, 1, "", "accumulate"], [12, 2, 1, "", "calibrate"], [12, 2, 1, "", "close"], [12, 3, 1, "", "distortion_coefficients"], [12, 3, 1, "", "intrinsic_matrix"], [12, 3, 1, "", "is_okay"], [12, 2, 1, "", "reset"], [12, 3, 1, "", "resolution"], [12, 3, 1, "", "settings"], [12, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera": [[12, 2, 1, "", "__del__"], [12, 2, 1, "", "accumulate"], [12, 2, 1, "", "calibrate"], [12, 2, 1, "", "close"], [12, 3, 1, "", "distortion_coefficients"], [12, 3, 1, "", "intrinsic_matrix"], [12, 3, 1, "", "is_okay"], [12, 2, 1, "", "reset"], [12, 3, 1, "", "resolution"], [12, 3, 1, "", "settings"], [12, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.pkl": [[14, 1, 1, "", "PklCamera"]], "cc_hardware.drivers.cameras.pkl.PklCamera": [[14, 2, 1, "", "__del__"], [14, 2, 1, "", "accumulate"], [14, 2, 1, "", "calibrate"], [14, 2, 1, "", "close"], [14, 3, 1, "", "distortion_coefficients"], [14, 3, 1, "", "intrinsic_matrix"], [14, 3, 1, "", "is_okay"], [14, 2, 1, "", "reset"], [14, 3, 1, "", "resolution"], [14, 3, 1, "", "settings"], [14, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.realsense": [[15, 1, 1, "", "RealsenseCamera"], [15, 1, 1, "", "RealsenseConfig"]], "cc_hardware.drivers.cameras.realsense.RealsenseCamera": [[15, 2, 1, "", "__del__"], [15, 2, 1, "", "accumulate"], [15, 2, 1, "", "calibrate"], [15, 2, 1, "", "close"], [15, 3, 1, "", "config"], [15, 3, 1, "", "distortion_coefficients"], [15, 3, 1, "", "intrinsic_matrix"], [15, 3, 1, "", "is_okay"], [15, 2, 1, "", "reset"], [15, 3, 1, "", "resolution"], [15, 3, 1, "", "settings"], [15, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.realsense.RealsenseConfig": [[15, 3, 1, "", "settings"]], "cc_hardware.drivers.cameras.usb": [[16, 1, 1, "", "USBCamera"], [16, 1, 1, "", "USBCameraConfig"]], "cc_hardware.drivers.cameras.usb.USBCamera": [[16, 2, 1, "", "__del__"], [16, 2, 1, "", "accumulate"], [16, 2, 1, "", "calibrate"], [16, 2, 1, "", "close"], [16, 3, 1, "", "distortion_coefficients"], [16, 3, 1, "", "intrinsic_matrix"], [16, 3, 1, "", "is_okay"], [16, 2, 1, "", "reset"], [16, 3, 1, "", "resolution"], [16, 3, 1, "", "settings"], [16, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.usb.USBCameraConfig": [[16, 3, 1, "", "settings"]], "cc_hardware.drivers.mocap": [[18, 1, 1, "", "MotionCaptureSensor"], [18, 1, 1, "", "MotionCaptureSensorConfig"], [19, 0, 0, "-", "mocap"], [20, 0, 0, "-", "vive"]], "cc_hardware.drivers.mocap.MotionCaptureSensor": [[18, 2, 1, "", "__del__"], [18, 2, 1, "", "accumulate"], [18, 2, 1, "", "calibrate"], [18, 2, 1, "", "close"], [18, 3, 1, "", "is_okay"], [18, 2, 1, "", "reset"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "update"]], "cc_hardware.drivers.mocap.MotionCaptureSensorConfig": [[18, 3, 1, "", "settings"]], "cc_hardware.drivers.mocap.mocap": [[19, 1, 1, "", "MotionCaptureSensor"], [19, 1, 1, "", "MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor": [[19, 2, 1, "", "__del__"], [19, 2, 1, "", "accumulate"], [19, 2, 1, "", "calibrate"], [19, 2, 1, "", "close"], [19, 3, 1, "", "is_okay"], [19, 2, 1, "", "reset"], [19, 3, 1, "", "settings"], [19, 2, 1, "", "update"]], "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig": [[19, 3, 1, "", "settings"]], "cc_hardware.drivers.mocap.vive": [[20, 1, 1, "", "ViveTrackerPose"], [20, 1, 1, "", "ViveTrackerSensor"], [20, 1, 1, "", "ViveTrackerSensorConfig"]], "cc_hardware.drivers.mocap.vive.ViveTrackerPose": [[20, 2, 1, "", "get_data"], [20, 3, 1, "", "has_data"], [20, 2, 1, "", "process"], [20, 2, 1, "", "reset"]], "cc_hardware.drivers.mocap.vive.ViveTrackerSensor": [[20, 2, 1, "", "__del__"], [20, 2, 1, "", "accumulate"], [20, 2, 1, "", "calibrate"], [20, 2, 1, "", "close"], [20, 3, 1, "", "is_okay"], [20, 2, 1, "", "reset"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "update"]], "cc_hardware.drivers.mocap.vive.ViveTrackerSensorConfig": [[20, 3, 1, "", "settings"]], "cc_hardware.drivers.safe_serial": [[21, 1, 1, "", "SafeSerial"]], "cc_hardware.drivers.safe_serial.SafeSerial": [[21, 2, 1, "", "__getattr__"], [21, 2, 1, "", "create"], [21, 2, 1, "", "read"], [21, 2, 1, "", "wait_for_start_talk"], [21, 2, 1, "", "wait_for_stop_talk"], [21, 2, 1, "", "write"], [21, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [21, 2, 1, "", "write_and_wait_for_start_talk"], [21, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.sensor": [[22, 1, 1, "", "Sensor"], [22, 1, 1, "", "SensorConfig"], [22, 1, 1, "", "SensorData"]], "cc_hardware.drivers.sensor.Sensor": [[22, 2, 1, "", "__del__"], [22, 2, 1, "", "calibrate"], [22, 2, 1, "", "close"], [22, 3, 1, "", "is_okay"], [22, 2, 1, "", "reset"], [22, 3, 1, "", "settings"], [22, 2, 1, "", "update"]], "cc_hardware.drivers.sensor.SensorConfig": [[22, 3, 1, "", "settings"]], "cc_hardware.drivers.sensor.SensorData": [[22, 2, 1, "", "get_data"], [22, 3, 1, "", "has_data"], [22, 2, 1, "", "process"], [22, 2, 1, "", "reset"]], "cc_hardware.drivers.spads": [[23, 1, 1, "", "SPADDataType"], [23, 1, 1, "", "SPADSensor"], [23, 1, 1, "", "SPADSensorConfig"], [23, 1, 1, "", "SPADSensorData"], [24, 0, 0, "-", "pkl"], [25, 0, 0, "-", "spad"], [26, 0, 0, "-", "spad_wrappers"], [27, 0, 0, "-", "tmf8828"], [28, 0, 0, "-", "vl53l8ch"]], "cc_hardware.drivers.spads.SPADDataType": [[23, 2, 1, "", "__contains__"], [23, 2, 1, "", "__dir__"], [23, 2, 1, "", "__format__"], [23, 2, 1, "", "__hash__"], [23, 2, 1, "", "__iter__"], [23, 2, 1, "", "__reduce_ex__"], [23, 2, 1, "", "__repr__"], [23, 2, 1, "", "__str__"], [23, 2, 1, "", "name"], [23, 2, 1, "", "value"]], "cc_hardware.drivers.spads.SPADSensor": [[23, 2, 1, "", "__del__"], [23, 2, 1, "", "accumulate"], [23, 2, 1, "", "calibrate"], [23, 2, 1, "", "close"], [23, 3, 1, "", "is_okay"], [23, 3, 1, "", "num_bins"], [23, 2, 1, "", "reset"], [23, 3, 1, "", "resolution"], [23, 3, 1, "", "settings"], [23, 2, 1, "", "update"]], "cc_hardware.drivers.spads.SPADSensorConfig": [[23, 3, 1, "", "num_pixels"], [23, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.SPADSensorData": [[23, 2, 1, "", "calculate_distance"], [23, 2, 1, "", "calculate_point_cloud"], [23, 2, 1, "", "get_data"], [23, 3, 1, "", "has_data"], [23, 2, 1, "", "process"], [23, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.pkl": [[24, 1, 1, "", "PklSPADSensor"], [24, 1, 1, "", "PklSPADSensorConfig"]], "cc_hardware.drivers.spads.pkl.PklSPADSensor": [[24, 2, 1, "", "__del__"], [24, 2, 1, "", "accumulate"], [24, 2, 1, "", "calibrate"], [24, 2, 1, "", "close"], [24, 3, 1, "", "is_okay"], [24, 3, 1, "", "num_bins"], [24, 2, 1, "", "reset"], [24, 3, 1, "", "resolution"], [24, 3, 1, "", "settings"], [24, 2, 1, "", "update"]], "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig": [[24, 3, 1, "", "num_pixels"], [24, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad": [[25, 1, 1, "", "SPADDataType"], [25, 1, 1, "", "SPADSensor"], [25, 1, 1, "", "SPADSensorConfig"], [25, 1, 1, "", "SPADSensorData"]], "cc_hardware.drivers.spads.spad.SPADDataType": [[25, 2, 1, "", "__contains__"], [25, 2, 1, "", "__dir__"], [25, 2, 1, "", "__format__"], [25, 2, 1, "", "__hash__"], [25, 2, 1, "", "__iter__"], [25, 2, 1, "", "__reduce_ex__"], [25, 2, 1, "", "__repr__"], [25, 2, 1, "", "__str__"], [25, 2, 1, "", "name"], [25, 2, 1, "", "value"]], "cc_hardware.drivers.spads.spad.SPADSensor": [[25, 2, 1, "", "__del__"], [25, 2, 1, "", "accumulate"], [25, 2, 1, "", "calibrate"], [25, 2, 1, "", "close"], [25, 3, 1, "", "is_okay"], [25, 3, 1, "", "num_bins"], [25, 2, 1, "", "reset"], [25, 3, 1, "", "resolution"], [25, 3, 1, "", "settings"], [25, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad.SPADSensorConfig": [[25, 3, 1, "", "num_pixels"], [25, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad.SPADSensorData": [[25, 2, 1, "", "calculate_distance"], [25, 2, 1, "", "calculate_point_cloud"], [25, 2, 1, "", "get_data"], [25, 3, 1, "", "has_data"], [25, 2, 1, "", "process"], [25, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.spad_wrappers": [[26, 1, 1, "", "SPADBackgroundRemovalWrapper"], [26, 1, 1, "", "SPADBackgroundRemovalWrapperConfig"], [26, 1, 1, "", "SPADMergeWrapper"], [26, 1, 1, "", "SPADMergeWrapperConfig"], [26, 1, 1, "", "SPADMovingAverageWrapper"], [26, 1, 1, "", "SPADMovingAverageWrapperConfig"], [26, 1, 1, "", "SPADScalingWrapper"], [26, 1, 1, "", "SPADScalingWrapperConfig"], [26, 1, 1, "", "SPADWrapper"], [26, 1, 1, "", "SPADWrapperConfig"]], "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper": [[26, 2, 1, "", "__del__"], [26, 2, 1, "", "accumulate"], [26, 2, 1, "", "calibrate"], [26, 2, 1, "", "close"], [26, 3, 1, "", "is_okay"], [26, 3, 1, "", "num_bins"], [26, 2, 1, "", "reset"], [26, 3, 1, "", "resolution"], [26, 3, 1, "", "settings"], [26, 3, 1, "", "unwrapped"], [26, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapperConfig": [[26, 3, 1, "", "num_pixels"], [26, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper": [[26, 2, 1, "", "__del__"], [26, 2, 1, "", "accumulate"], [26, 2, 1, "", "calibrate"], [26, 2, 1, "", "close"], [26, 3, 1, "", "is_okay"], [26, 3, 1, "", "num_bins"], [26, 2, 1, "", "reset"], [26, 3, 1, "", "resolution"], [26, 3, 1, "", "settings"], [26, 3, 1, "", "unwrapped"], [26, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig": [[26, 3, 1, "", "num_pixels"], [26, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper": [[26, 2, 1, "", "__del__"], [26, 2, 1, "", "accumulate"], [26, 2, 1, "", "calibrate"], [26, 2, 1, "", "close"], [26, 3, 1, "", "is_okay"], [26, 3, 1, "", "num_bins"], [26, 2, 1, "", "reset"], [26, 3, 1, "", "resolution"], [26, 3, 1, "", "settings"], [26, 3, 1, "", "unwrapped"], [26, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig": [[26, 3, 1, "", "num_pixels"], [26, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper": [[26, 2, 1, "", "__del__"], [26, 2, 1, "", "accumulate"], [26, 2, 1, "", "calibrate"], [26, 2, 1, "", "close"], [26, 3, 1, "", "is_okay"], [26, 3, 1, "", "num_bins"], [26, 2, 1, "", "reset"], [26, 3, 1, "", "resolution"], [26, 3, 1, "", "settings"], [26, 3, 1, "", "unwrapped"], [26, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapperConfig": [[26, 3, 1, "", "num_pixels"], [26, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper": [[26, 2, 1, "", "__del__"], [26, 2, 1, "", "accumulate"], [26, 2, 1, "", "calibrate"], [26, 2, 1, "", "close"], [26, 3, 1, "", "is_okay"], [26, 3, 1, "", "num_bins"], [26, 2, 1, "", "reset"], [26, 3, 1, "", "resolution"], [26, 3, 1, "", "settings"], [26, 3, 1, "", "unwrapped"], [26, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig": [[26, 3, 1, "", "num_pixels"], [26, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.tmf8828": [[27, 1, 1, "", "RangeMode"], [27, 1, 1, "", "SPADID"], [27, 1, 1, "", "TMF8828Config"], [27, 1, 1, "", "TMF8828Data"], [27, 1, 1, "", "TMF8828Sensor"]], "cc_hardware.drivers.spads.tmf8828.RangeMode": [[27, 2, 1, "", "__dir__"], [27, 2, 1, "", "__format__"], [27, 2, 1, "", "__hash__"], [27, 2, 1, "", "__reduce_ex__"], [27, 2, 1, "", "__repr__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "name"], [27, 3, 1, "", "timing_resolution"], [27, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.SPADID": [[27, 2, 1, "", "__dir__"], [27, 2, 1, "", "__format__"], [27, 2, 1, "", "__hash__"], [27, 2, 1, "", "__reduce_ex__"], [27, 2, 1, "", "__repr__"], [27, 2, 1, "", "__str__"], [27, 3, 1, "", "active_channels_per_subcapture"], [27, 3, 1, "", "fov"], [27, 2, 1, "", "name"], [27, 3, 1, "", "num_channels"], [27, 3, 1, "", "resolution"], [27, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Config": [[27, 3, 1, "", "num_pixels"], [27, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Data": [[27, 2, 1, "", "calculate_distance"], [27, 2, 1, "", "calculate_point_cloud"], [27, 2, 1, "", "get_data"], [27, 3, 1, "", "has_data"], [27, 2, 1, "", "process"], [27, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor": [[27, 2, 1, "", "__del__"], [27, 2, 1, "", "accumulate"], [27, 2, 1, "", "calibrate"], [27, 2, 1, "", "close"], [27, 3, 1, "", "config"], [27, 3, 1, "", "is_okay"], [27, 3, 1, "", "num_bins"], [27, 2, 1, "", "reset"], [27, 3, 1, "", "resolution"], [27, 3, 1, "", "settings"], [27, 2, 1, "", "update"]], "cc_hardware.drivers.spads.vl53l8ch": [[28, 1, 1, "", "RangingMode"], [28, 1, 1, "", "VL53L8CHConfig"], [28, 1, 1, "", "VL53L8CHConfig4x4"], [28, 1, 1, "", "VL53L8CHConfig8x8"], [28, 1, 1, "", "VL53L8CHData"], [28, 1, 1, "", "VL53L8CHSensor"], [28, 1, 1, "", "VL53L8CHSharedConfig"]], "cc_hardware.drivers.spads.vl53l8ch.RangingMode": [[28, 2, 1, "", "__dir__"], [28, 2, 1, "", "__format__"], [28, 2, 1, "", "__hash__"], [28, 2, 1, "", "__reduce_ex__"], [28, 2, 1, "", "__repr__"], [28, 2, 1, "", "__str__"], [28, 2, 1, "", "name"], [28, 2, 1, "", "value"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig": [[28, 3, 1, "", "num_pixels"], [28, 2, 1, "", "pack"], [28, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4": [[28, 3, 1, "", "num_pixels"], [28, 2, 1, "", "pack"], [28, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8": [[28, 3, 1, "", "num_pixels"], [28, 2, 1, "", "pack"], [28, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData": [[28, 2, 1, "", "calculate_distance"], [28, 2, 1, "", "calculate_point_cloud"], [28, 2, 1, "", "get_data"], [28, 3, 1, "", "has_data"], [28, 2, 1, "", "process"], [28, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor": [[28, 2, 1, "", "__del__"], [28, 2, 1, "", "accumulate"], [28, 2, 1, "", "calibrate"], [28, 2, 1, "", "close"], [28, 3, 1, "", "is_okay"], [28, 3, 1, "", "num_bins"], [28, 2, 1, "", "reset"], [28, 3, 1, "", "resolution"], [28, 3, 1, "", "settings"], [28, 2, 1, "", "update"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig": [[28, 3, 1, "", "num_pixels"], [28, 2, 1, "", "pack"], [28, 3, 1, "", "settings"]], "cc_hardware.drivers.stepper_motors": [[29, 1, 1, "", "DummyStepperMotor"], [29, 1, 1, "", "StepperControllerConfig"], [29, 1, 1, "", "StepperMotor"], [29, 1, 1, "", "StepperMotorConfig"], [29, 1, 1, "", "StepperMotorSystem"], [29, 1, 1, "", "StepperMotorSystemAxis"], [29, 1, 1, "", "StepperMotorSystemConfig"], [30, 0, 0, "-", "kinesis_stepper"], [31, 0, 0, "-", "stepper_controller"], [32, 0, 0, "-", "stepper_motor"], [33, 0, 0, "-", "stepper_system"], [34, 0, 0, "-", "telemetrix_stepper"]], "cc_hardware.drivers.stepper_motors.StepperMotor": [[29, 2, 1, "", "close"], [29, 2, 1, "", "home"], [29, 3, 1, "", "is_moving"], [29, 2, 1, "", "move_by"], [29, 2, 1, "", "move_to"], [29, 3, 1, "", "position"], [29, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystem": [[29, 2, 1, "", "__getattr__"], [29, 3, 1, "", "axes"], [29, 3, 1, "", "is_moving"], [29, 2, 1, "", "move_by"], [29, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis": [[29, 2, 1, "", "__dir__"], [29, 2, 1, "", "__format__"], [29, 2, 1, "", "__hash__"], [29, 2, 1, "", "__reduce_ex__"], [29, 2, 1, "", "__repr__"], [29, 2, 1, "", "__str__"], [29, 2, 1, "", "name"], [29, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[30, 1, 1, "", "AzimuthElevationSystem"], [30, 1, 1, "", "KinesisRotationStage"], [30, 1, 1, "", "KinesisStepperMotor"], [30, 1, 1, "", "KinesisStepperMotorSystem"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem": [[30, 2, 1, "", "__getattr__"], [30, 3, 1, "", "axes"], [30, 3, 1, "", "is_moving"], [30, 2, 1, "", "move_by"], [30, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage": [[30, 2, 1, "", "close"], [30, 2, 1, "", "home"], [30, 2, 1, "", "initialize"], [30, 3, 1, "", "is_moving"], [30, 3, 1, "", "is_okay"], [30, 3, 1, "", "lower_limit"], [30, 2, 1, "", "move_by"], [30, 2, 1, "", "move_to"], [30, 3, 1, "", "position"], [30, 3, 1, "", "upper_limit"], [30, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor": [[30, 2, 1, "", "close"], [30, 2, 1, "", "home"], [30, 2, 1, "", "initialize"], [30, 3, 1, "", "is_moving"], [30, 3, 1, "", "is_okay"], [30, 3, 1, "", "lower_limit"], [30, 2, 1, "", "move_by"], [30, 2, 1, "", "move_to"], [30, 3, 1, "", "position"], [30, 3, 1, "", "upper_limit"], [30, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem": [[30, 2, 1, "", "__getattr__"], [30, 3, 1, "", "axes"], [30, 3, 1, "", "is_moving"], [30, 2, 1, "", "move_by"], [30, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[31, 1, 1, "", "ControllerAxisConfig"], [31, 1, 1, "", "SnakeControllerAxisConfig"], [31, 1, 1, "", "SnakeStepperControllerConfig"], [31, 1, 1, "", "SnakeStepperControllerConfigXY"], [31, 1, 1, "", "StepperControllerConfig"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[32, 1, 1, "", "DummyStepperMotor"], [32, 1, 1, "", "StepperMotor"], [32, 1, 1, "", "StepperMotorConfig"]], "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor": [[32, 2, 1, "", "close"], [32, 2, 1, "", "home"], [32, 3, 1, "", "is_moving"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[33, 1, 1, "", "DummyStepperSystem"], [33, 1, 1, "", "StepperMotorSystem"], [33, 1, 1, "", "StepperMotorSystemAxis"], [33, 1, 1, "", "StepperMotorSystemConfig"]], "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem": [[33, 2, 1, "", "__getattr__"], [33, 3, 1, "", "axes"], [33, 3, 1, "", "is_moving"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem": [[33, 2, 1, "", "__getattr__"], [33, 3, 1, "", "axes"], [33, 3, 1, "", "is_moving"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis": [[33, 2, 1, "", "__dir__"], [33, 2, 1, "", "__format__"], [33, 2, 1, "", "__hash__"], [33, 2, 1, "", "__reduce_ex__"], [33, 2, 1, "", "__repr__"], [33, 2, 1, "", "__str__"], [33, 2, 1, "", "name"], [33, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[34, 1, 1, "", "DualDrive2AxisGantryConfig"], [34, 1, 1, "", "DualDrive2AxisGantryXConfig"], [34, 1, 1, "", "DualDrive2AxisGantryY1Config"], [34, 1, 1, "", "DualDrive2AxisGantryY2Config"], [34, 1, 1, "", "SingleDrive1AxisGantryConfig"], [34, 1, 1, "", "SingleDrive1AxisGantryXConfig"], [34, 1, 1, "", "SingleDrive1AxisGantryYConfig"], [34, 1, 1, "", "TelemetrixStepperMotor"], [34, 1, 1, "", "TelemetrixStepperMotorConfig"], [34, 1, 1, "", "TelemetrixStepperMotorSystem"], [34, 1, 1, "", "TelemetrixStepperMotorSystemConfig"], [34, 1, 1, "", "TelemetrixStepperMotorXConfig"], [34, 1, 1, "", "TelemetrixStepperMotorYConfig"], [34, 1, 1, "", "TelemetrixStepperMotorZConfig"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor": [[34, 2, 1, "", "__getattr__"], [34, 2, 1, "", "close"], [34, 2, 1, "", "cm_to_revs"], [34, 2, 1, "", "home"], [34, 3, 1, "", "id"], [34, 3, 1, "", "is_moving"], [34, 3, 1, "", "is_okay"], [34, 2, 1, "", "move_by"], [34, 2, 1, "", "move_to"], [34, 3, 1, "", "position"], [34, 2, 1, "", "revs_to_cm"], [34, 2, 1, "", "set_absolute_target_position_cm"], [34, 2, 1, "", "set_target_position_cm"], [34, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem": [[34, 2, 1, "", "__getattr__"], [34, 3, 1, "", "axes"], [34, 2, 1, "", "close"], [34, 3, 1, "", "is_moving"], [34, 2, 1, "", "move_by"], [34, 2, 1, "", "move_to"]], "cc_hardware.tools": [[48, 1, 1, "", "Registry"], [36, 0, 0, "-", "calibration"], [37, 0, 0, "-", "camera_viewer"], [39, 0, 0, "-", "dashboard"], [47, 0, 0, "-", "flash"], [49, 0, 0, "-", "jogger"]], "cc_hardware.tools.Registry": [[48, 2, 1, "", "create_from_registry"], [48, 2, 1, "", "register"], [48, 2, 1, "", "registered"], [48, 2, 1, "", "registry"]], "cc_hardware.tools.calibration": [[36, 4, 1, "", "calibrate"], [36, 4, 1, "", "tmf8828_calibrate"]], "cc_hardware.tools.dashboard": [[39, 1, 1, "", "Dashboard"], [39, 1, 1, "", "DashboardConfig"], [39, 1, 1, "", "SPADDashboard"], [39, 1, 1, "", "SPADDashboardConfig"], [38, 0, 0, "-", "dashboard"], [41, 0, 0, "-", "mocap_dashboard"], [44, 0, 0, "-", "spad_dashboard"]], "cc_hardware.tools.dashboard.Dashboard": [[39, 2, 1, "", "run"], [39, 2, 1, "", "setup"], [39, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.SPADDashboard": [[39, 3, 1, "", "max_bin"], [39, 3, 1, "", "min_bin"], [39, 2, 1, "", "run"], [39, 3, 1, "", "sensor"], [39, 2, 1, "", "setup"], [39, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.dashboard": [[38, 1, 1, "", "Dashboard"], [38, 1, 1, "", "DashboardConfig"]], "cc_hardware.tools.dashboard.dashboard.Dashboard": [[38, 2, 1, "", "run"], [38, 2, 1, "", "setup"], [38, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[41, 1, 1, "", "MotionCaptureDashboard"], [41, 1, 1, "", "MotionCaptureDashboardConfig"], [40, 0, 0, "-", "dash"], [42, 0, 0, "-", "mocap_dashboard"], [43, 0, 0, "-", "pyqtgraph"]], "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard": [[41, 2, 1, "", "run"], [41, 3, 1, "", "sensor"], [41, 2, 1, "", "setup"], [41, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[42, 1, 1, "", "MotionCaptureDashboard"], [42, 1, 1, "", "MotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard": [[42, 2, 1, "", "run"], [42, 3, 1, "", "sensor"], [42, 2, 1, "", "setup"], [42, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[43, 1, 1, "", "DashboardWindow"], [43, 1, 1, "", "PyQtGraphMotionCaptureDashboard"], [43, 1, 1, "", "PyQtGraphMotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow": [[43, 2, 1, "", "keyPressEvent"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard": [[43, 2, 1, "", "close"], [43, 3, 1, "", "is_okay"], [43, 2, 1, "", "run"], [43, 3, 1, "", "sensor"], [43, 2, 1, "", "setup"], [43, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard": [[44, 1, 1, "", "DummySPADDashboard"], [44, 1, 1, "", "DummySPADDashboardConfig"], [44, 1, 1, "", "SPADDashboard"], [44, 1, 1, "", "SPADDashboardConfig"], [45, 0, 0, "-", "pyqtgraph"], [46, 0, 0, "-", "spad_dashboard"]], "cc_hardware.tools.dashboard.spad_dashboard.DummySPADDashboard": [[44, 3, 1, "", "max_bin"], [44, 3, 1, "", "min_bin"], [44, 2, 1, "", "run"], [44, 3, 1, "", "sensor"], [44, 2, 1, "", "setup"], [44, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard": [[44, 3, 1, "", "max_bin"], [44, 3, 1, "", "min_bin"], [44, 2, 1, "", "run"], [44, 3, 1, "", "sensor"], [44, 2, 1, "", "setup"], [44, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[45, 1, 1, "", "DashboardWindow"], [45, 1, 1, "", "PyQtGraphDashboard"], [45, 1, 1, "", "PyQtGraphDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow": [[45, 2, 1, "", "enable_depth_view"], [45, 2, 1, "", "enable_point_cloud_view"], [45, 2, 1, "", "init_ui"], [45, 2, 1, "", "keyPressEvent"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard": [[45, 3, 1, "", "max_bin"], [45, 3, 1, "", "min_bin"], [45, 2, 1, "", "run"], [45, 3, 1, "", "sensor"], [45, 2, 1, "", "setup"], [45, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[46, 1, 1, "", "DummySPADDashboard"], [46, 1, 1, "", "DummySPADDashboardConfig"], [46, 1, 1, "", "SPADDashboard"], [46, 1, 1, "", "SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard": [[46, 3, 1, "", "max_bin"], [46, 3, 1, "", "min_bin"], [46, 2, 1, "", "run"], [46, 3, 1, "", "sensor"], [46, 2, 1, "", "setup"], [46, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard": [[46, 3, 1, "", "max_bin"], [46, 3, 1, "", "min_bin"], [46, 2, 1, "", "run"], [46, 3, 1, "", "sensor"], [46, 2, 1, "", "setup"], [46, 2, 1, "", "update"]], "cc_hardware.tools.jogger": [[49, 1, 1, "", "LogBufferHandler"], [49, 1, 1, "", "OutputCapture"]], "cc_hardware.tools.jogger.LogBufferHandler": [[49, 2, 1, "", "__repr__"], [49, 2, 1, "", "acquire"], [49, 2, 1, "", "addFilter"], [49, 2, 1, "", "close"], [49, 2, 1, "", "createLock"], [49, 2, 1, "", "emit"], [49, 2, 1, "", "filter"], [49, 2, 1, "", "flush"], [49, 2, 1, "", "format"], [49, 2, 1, "", "handle"], [49, 2, 1, "", "handleError"], [49, 2, 1, "", "release"], [49, 2, 1, "", "removeFilter"], [49, 2, 1, "", "setFormatter"], [49, 2, 1, "", "setLevel"]], "cc_hardware.utils": [[52, 1, 1, "", "Component"], [52, 1, 1, "", "Config"], [52, 1, 1, "", "Manager"], [52, 1, 1, "", "Registry"], [52, 1, 1, "", "ThreadedComponent"], [50, 0, 0, "-", "constants"], [51, 0, 0, "-", "file_handlers"], [53, 0, 0, "-", "logger"], [54, 0, 0, "-", "manager"], [55, 0, 0, "-", "matplotlib"], [59, 0, 0, "-", "misc"], [52, 4, 1, "", "register"], [64, 0, 0, "-", "registry"], [65, 0, 0, "-", "setting"], [66, 0, 0, "-", "transformations"]], "cc_hardware.utils.Component": [[52, 2, 1, "", "__del__"], [52, 2, 1, "", "close"], [52, 3, 1, "", "config"], [52, 2, 1, "", "create_from_config"], [52, 2, 1, "", "create_from_registry"], [52, 3, 1, "", "is_okay"], [52, 2, 1, "", "register"], [52, 2, 1, "", "registered"], [52, 2, 1, "", "registry"]], "cc_hardware.utils.Config": [[52, 2, 1, "", "__getstate__"], [52, 2, 1, "", "__post_init__"], [52, 2, 1, "", "__setstate__"], [52, 2, 1, "", "__str__"], [52, 2, 1, "", "compose"], [52, 5, 1, "", "config"], [52, 2, 1, "", "copy"], [52, 2, 1, "", "create"], [52, 2, 1, "", "create_from_registry"], [52, 5, 1, "", "custom"], [52, 2, 1, "", "instantiate"], [52, 2, 1, "", "load"], [52, 2, 1, "", "merge_with"], [52, 2, 1, "", "register"], [52, 2, 1, "", "registered"], [52, 2, 1, "", "registry"], [52, 2, 1, "", "save"], [52, 2, 1, "", "to_dict"], [52, 2, 1, "", "to_yaml"]], "cc_hardware.utils.Manager": [[52, 2, 1, "", "__enter__"], [52, 2, 1, "", "__exit__"], [52, 2, 1, "", "add"], [52, 2, 1, "", "close"], [52, 3, 1, "", "components"], [52, 3, 1, "", "is_looping"], [52, 3, 1, "", "is_okay"], [52, 2, 1, "", "run"], [52, 2, 1, "", "set_iter"]], "cc_hardware.utils.Registry": [[52, 2, 1, "", "create_from_registry"], [52, 2, 1, "", "register"], [52, 2, 1, "", "registered"], [52, 2, 1, "", "registry"]], "cc_hardware.utils.ThreadedComponent": [[52, 2, 1, "", "__del__"], [52, 2, 1, "", "__setattr__"], [52, 2, 1, "", "close"], [52, 3, 1, "", "config"], [52, 2, 1, "", "create_from_config"], [52, 2, 1, "", "create_from_registry"], [52, 3, 1, "", "is_okay"], [52, 2, 1, "", "register"], [52, 2, 1, "", "registered"], [52, 2, 1, "", "registry"]], "cc_hardware.utils.constants": [[50, 6, 1, "", "C"], [50, 6, 1, "", "TORCH_DEVICE"]], "cc_hardware.utils.file_handlers": [[51, 1, 1, "", "PklHandler"], [51, 1, 1, "", "PklReader"], [51, 1, 1, "", "VideoWriter"]], "cc_hardware.utils.file_handlers.PklHandler": [[51, 2, 1, "", "__iter__"], [51, 2, 1, "", "__len__"], [51, 2, 1, "", "append"], [51, 2, 1, "", "load"], [51, 2, 1, "", "load_all"], [51, 2, 1, "", "update_index"], [51, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.PklReader": [[51, 2, 1, "", "__iter__"], [51, 2, 1, "", "__len__"], [51, 2, 1, "", "append"], [51, 2, 1, "", "load"], [51, 2, 1, "", "load_all"], [51, 2, 1, "", "update_index"], [51, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.VideoWriter": [[51, 2, 1, "", "__del__"], [51, 2, 1, "", "append"], [51, 2, 1, "", "close"]], "cc_hardware.utils.logger": [[53, 1, 1, "", "FileHandler"], [53, 1, 1, "", "LoggerMaxLevelFilter"], [53, 1, 1, "", "TqdmStreamHandler"]], "cc_hardware.utils.logger.FileHandler": [[53, 2, 1, "", "__repr__"], [53, 2, 1, "", "acquire"], [53, 2, 1, "", "addFilter"], [53, 2, 1, "", "close"], [53, 2, 1, "", "createLock"], [53, 2, 1, "", "emit"], [53, 2, 1, "", "filter"], [53, 2, 1, "", "flush"], [53, 2, 1, "", "format"], [53, 2, 1, "", "handle"], [53, 2, 1, "", "handleError"], [53, 2, 1, "", "release"], [53, 2, 1, "", "removeFilter"], [53, 2, 1, "", "setFormatter"], [53, 2, 1, "", "setLevel"], [53, 2, 1, "", "setStream"]], "cc_hardware.utils.logger.LoggerMaxLevelFilter": [[53, 2, 1, "", "filter"]], "cc_hardware.utils.logger.TqdmStreamHandler": [[53, 2, 1, "", "__repr__"], [53, 2, 1, "", "acquire"], [53, 2, 1, "", "addFilter"], [53, 2, 1, "", "close"], [53, 2, 1, "", "createLock"], [53, 2, 1, "", "emit"], [53, 2, 1, "", "filter"], [53, 2, 1, "", "flush"], [53, 2, 1, "", "format"], [53, 2, 1, "", "handle"], [53, 2, 1, "", "handleError"], [53, 2, 1, "", "release"], [53, 2, 1, "", "removeFilter"], [53, 2, 1, "", "setFormatter"], [53, 2, 1, "", "setLevel"], [53, 2, 1, "", "setStream"]], "cc_hardware.utils.manager": [[54, 1, 1, "", "Component"], [54, 1, 1, "", "Config"], [54, 1, 1, "", "Manager"], [54, 1, 1, "", "ThreadedComponent"]], "cc_hardware.utils.manager.Component": [[54, 2, 1, "", "__del__"], [54, 2, 1, "", "close"], [54, 3, 1, "", "config"], [54, 2, 1, "", "create_from_config"], [54, 2, 1, "", "create_from_registry"], [54, 3, 1, "", "is_okay"], [54, 2, 1, "", "register"], [54, 2, 1, "", "registered"], [54, 2, 1, "", "registry"]], "cc_hardware.utils.manager.Config": [[54, 2, 1, "", "__getstate__"], [54, 2, 1, "", "__post_init__"], [54, 2, 1, "", "__setstate__"], [54, 2, 1, "", "__str__"], [54, 2, 1, "", "compose"], [54, 5, 1, "", "config"], [54, 2, 1, "", "copy"], [54, 2, 1, "", "create"], [54, 2, 1, "", "create_from_registry"], [54, 5, 1, "", "custom"], [54, 2, 1, "", "instantiate"], [54, 2, 1, "", "load"], [54, 2, 1, "", "merge_with"], [54, 2, 1, "", "register"], [54, 2, 1, "", "registered"], [54, 2, 1, "", "registry"], [54, 2, 1, "", "save"], [54, 2, 1, "", "to_dict"], [54, 2, 1, "", "to_yaml"]], "cc_hardware.utils.manager.Manager": [[54, 2, 1, "", "__enter__"], [54, 2, 1, "", "__exit__"], [54, 2, 1, "", "add"], [54, 2, 1, "", "close"], [54, 3, 1, "", "components"], [54, 3, 1, "", "is_looping"], [54, 3, 1, "", "is_okay"], [54, 2, 1, "", "run"], [54, 2, 1, "", "set_iter"]], "cc_hardware.utils.manager.ThreadedComponent": [[54, 2, 1, "", "__del__"], [54, 2, 1, "", "__setattr__"], [54, 2, 1, "", "close"], [54, 3, 1, "", "config"], [54, 2, 1, "", "create_from_config"], [54, 2, 1, "", "create_from_registry"], [54, 3, 1, "", "is_okay"], [54, 2, 1, "", "register"], [54, 2, 1, "", "registered"], [54, 2, 1, "", "registry"]], "cc_hardware.utils.matplotlib": [[55, 4, 1, "", "set_matplotlib_style"]], "cc_hardware.utils.misc": [[59, 1, 1, "", "BlockingDeque"], [59, 1, 1, "", "SingletonABCMeta"], [59, 1, 1, "", "SingletonMeta"], [59, 4, 1, "", "arduino_upload"], [56, 0, 0, "-", "asyncio_utils"], [57, 0, 0, "-", "atomic"], [58, 0, 0, "-", "blocking_deque"], [59, 4, 1, "", "call_async"], [59, 4, 1, "", "call_async_gather"], [59, 4, 1, "", "call_async_value"], [59, 4, 1, "", "find_device_by_label"], [59, 4, 1, "", "find_ports"], [59, 4, 1, "", "get_object"], [60, 0, 0, "-", "misc"], [61, 0, 0, "-", "multiprocessing_deque"], [62, 0, 0, "-", "serial_utils"], [63, 0, 0, "-", "singleton"]], "cc_hardware.utils.misc.BlockingDeque": [[59, 2, 1, "", "__getattr__"], [59, 2, 1, "", "__getitem__"], [59, 2, 1, "", "__len__"], [59, 2, 1, "", "__repr__"], [59, 2, 1, "", "append"]], "cc_hardware.utils.misc.SingletonABCMeta": [[59, 2, 1, "", "__call__"], [59, 2, 1, "", "__instancecheck__"], [59, 2, 1, "", "__subclasscheck__"], [59, 2, 1, "", "instance"], [59, 2, 1, "", "register"]], "cc_hardware.utils.misc.SingletonMeta": [[59, 2, 1, "", "__call__"], [59, 2, 1, "", "instance"]], "cc_hardware.utils.misc.asyncio_utils": [[56, 4, 1, "", "call_async"], [56, 4, 1, "", "call_async_gather"], [56, 4, 1, "", "call_async_value"]], "cc_hardware.utils.misc.blocking_deque": [[58, 1, 1, "", "BlockingDeque"]], "cc_hardware.utils.misc.blocking_deque.BlockingDeque": [[58, 2, 1, "", "__getattr__"], [58, 2, 1, "", "__getitem__"], [58, 2, 1, "", "__len__"], [58, 2, 1, "", "__repr__"], [58, 2, 1, "", "append"]], "cc_hardware.utils.misc.misc": [[60, 4, 1, "", "get_object"]], "cc_hardware.utils.misc.serial_utils": [[62, 4, 1, "", "arduino_upload"], [62, 4, 1, "", "find_device_by_label"], [62, 4, 1, "", "find_ports"]], "cc_hardware.utils.misc.singleton": [[63, 1, 1, "", "SingletonABCMeta"], [63, 1, 1, "", "SingletonMeta"]], "cc_hardware.utils.misc.singleton.SingletonABCMeta": [[63, 2, 1, "", "__call__"], [63, 2, 1, "", "__instancecheck__"], [63, 2, 1, "", "__subclasscheck__"], [63, 2, 1, "", "instance"], [63, 2, 1, "", "register"]], "cc_hardware.utils.misc.singleton.SingletonMeta": [[63, 2, 1, "", "__call__"], [63, 2, 1, "", "instance"]], "cc_hardware.utils.registry": [[64, 1, 1, "", "Registry"], [64, 4, 1, "", "register"]], "cc_hardware.utils.registry.Registry": [[64, 2, 1, "", "create_from_registry"], [64, 2, 1, "", "register"], [64, 2, 1, "", "registered"], [64, 2, 1, "", "registry"]], "cc_hardware.utils.setting": [[65, 1, 1, "", "BoolSetting"], [65, 1, 1, "", "OptionSetting"], [65, 1, 1, "", "RangeSetting"], [65, 1, 1, "", "Setting"]], "cc_hardware.utils.setting.BoolSetting": [[65, 2, 1, "", "__getstate__"], [65, 2, 1, "", "__post_init__"], [65, 2, 1, "", "__setstate__"], [65, 2, 1, "", "__str__"], [65, 2, 1, "", "compose"], [65, 5, 1, "", "config"], [65, 2, 1, "", "copy"], [65, 2, 1, "", "create"], [65, 2, 1, "", "create_from_registry"], [65, 5, 1, "", "custom"], [65, 2, 1, "", "default_factory"], [65, 2, 1, "", "instantiate"], [65, 2, 1, "", "load"], [65, 2, 1, "", "merge_with"], [65, 2, 1, "", "register"], [65, 2, 1, "", "registered"], [65, 2, 1, "", "registry"], [65, 2, 1, "", "save"], [65, 2, 1, "", "to_dict"], [65, 2, 1, "", "to_yaml"], [65, 2, 1, "", "update"]], "cc_hardware.utils.setting.OptionSetting": [[65, 2, 1, "", "__getstate__"], [65, 2, 1, "", "__post_init__"], [65, 2, 1, "", "__setstate__"], [65, 2, 1, "", "__str__"], [65, 2, 1, "", "compose"], [65, 5, 1, "", "config"], [65, 2, 1, "", "copy"], [65, 2, 1, "", "create"], [65, 2, 1, "", "create_from_registry"], [65, 5, 1, "", "custom"], [65, 2, 1, "", "default_factory"], [65, 2, 1, "", "from_enum"], [65, 2, 1, "", "instantiate"], [65, 2, 1, "", "load"], [65, 2, 1, "", "merge_with"], [65, 2, 1, "", "register"], [65, 2, 1, "", "registered"], [65, 2, 1, "", "registry"], [65, 2, 1, "", "save"], [65, 2, 1, "", "to_dict"], [65, 2, 1, "", "to_yaml"], [65, 2, 1, "", "update"]], "cc_hardware.utils.setting.RangeSetting": [[65, 2, 1, "", "__getstate__"], [65, 2, 1, "", "__post_init__"], [65, 2, 1, "", "__setstate__"], [65, 2, 1, "", "__str__"], [65, 2, 1, "", "compose"], [65, 5, 1, "", "config"], [65, 2, 1, "", "copy"], [65, 2, 1, "", "create"], [65, 2, 1, "", "create_from_registry"], [65, 5, 1, "", "custom"], [65, 2, 1, "", "default_factory"], [65, 2, 1, "", "instantiate"], [65, 2, 1, "", "load"], [65, 2, 1, "", "merge_with"], [65, 2, 1, "", "register"], [65, 2, 1, "", "registered"], [65, 2, 1, "", "registry"], [65, 2, 1, "", "save"], [65, 2, 1, "", "to_dict"], [65, 2, 1, "", "to_yaml"], [65, 2, 1, "", "update"]], "cc_hardware.utils.setting.Setting": [[65, 2, 1, "", "__getstate__"], [65, 2, 1, "", "__post_init__"], [65, 2, 1, "", "__setstate__"], [65, 2, 1, "", "__str__"], [65, 2, 1, "", "compose"], [65, 5, 1, "", "config"], [65, 2, 1, "", "copy"], [65, 2, 1, "", "create"], [65, 2, 1, "", "create_from_registry"], [65, 5, 1, "", "custom"], [65, 2, 1, "", "default_factory"], [65, 2, 1, "", "instantiate"], [65, 2, 1, "", "load"], [65, 2, 1, "", "merge_with"], [65, 2, 1, "", "register"], [65, 2, 1, "", "registered"], [65, 2, 1, "", "registry"], [65, 2, 1, "", "save"], [65, 2, 1, "", "to_dict"], [65, 2, 1, "", "to_yaml"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"]}, "titleterms": {"contribut": 0, "setup": 0, "clone": 0, "repo": [0, 4], "instal": [0, 12], "deploi": 0, "your": 0, "chang": 0, "guidelin": 0, "file": 0, "structur": [0, 4], "edit": 0, "sourc": 0, "code": 0, "comment": 0, "document": [0, 4], "build": 0, "exampl": 1, "avail": 1, "sensor": [2, 22], "camera_view": [2, 37], "py": [2, 3], "spad_dashboard_cli": 2, "spad_dashboard": [2, 44, 45, 46], "stepper": 3, "motor": 3, "control": 3, "stepper_motor_controller_cli": 3, "stepper_system_w_spad": 3, "camera": [4, 11, 12, 13, 14, 15, 16], "cultur": 4, "hardwar": 4, "get": 4, "start": 4, "websit": 4, "other": 4, "detail": 4, "packag": [4, 5, 13, 17, 18, 23, 29, 39, 41, 44, 48, 52, 59], "api": 5, "refer": [5, 67], "cc_hardwar": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "algo": [6, 7, 8, 9, 10], "algorithm": 6, "modul": [6, 7, 8, 10, 11, 12, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 38, 42, 43, 45, 46, 49, 50, 51, 53, 54, 55, 56, 58, 60, 62, 63, 64, 65], "content": [6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65], "class": [6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 58, 59, 63, 64, 65], "aruco": 7, "dataset": 8, "submodul": [9, 13, 17, 23, 29, 41, 44, 48, 52, 59], "model": 10, "function": [10, 36, 52, 55, 56, 59, 60, 62, 64], "driver": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "flir": 12, "pyspin": 12, "pkl": [14, 24], "realsens": 15, "usb": 16, "subpackag": [17, 35, 39], "mocap": [18, 19, 20], "vive": 20, "safe_seri": 21, "spad": [23, 24, 25, 26, 27, 28], "spad_wrapp": 26, "tmf8828": 27, "vl53l8ch": 28, "stepper_motor": [29, 30, 31, 32, 33, 34], "kinesis_stepp": 30, "stepper_control": 31, "stepper_system": 33, "telemetrix_stepp": 34, "tool": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "calibr": 36, "dashboard": [38, 39, 40, 41, 42, 43, 44, 45, 46], "mocap_dashboard": [40, 41, 42, 43], "dash": 40, "pyqtgraph": [43, 45], "flash": 47, "jogger": 49, "util": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "constant": 50, "file_handl": 51, "logger": 53, "manag": 54, "matplotlib": 55, "misc": [56, 57, 58, 59, 60, 61, 62, 63], "asyncio_util": 56, "atom": 57, "blocking_dequ": 58, "multiprocessing_dequ": 61, "serial_util": 62, "singleton": 63, "registri": 64, "set": 65, "transform": 66}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Setup": [[0, "setup"]], "Cloning the Repo": [[0, "cloning-the-repo"]], "Installing": [[0, "installing"]], "Deploy your Changes": [[0, "deploy-your-changes"]], "Guidelines": [[0, "guidelines"]], "File Structure": [[0, "file-structure"]], "Editing the Source Code": [[0, "editing-the-source-code"]], "Commenting": [[0, "commenting"]], "Editing the Documentation": [[0, "editing-the-documentation"]], "Building the Documentation": [[0, "building-the-documentation"]], "Examples": [[1, "examples"]], "Available Examples": [[1, "available-examples"]], "Sensors": [[2, "sensors"]], "camera_viewer.py": [[2, "camera-viewer-py"]], "spad_dashboard_cli.py": [[2, "spad-dashboard-cli-py"]], "spad_dashboard.py": [[2, "spad-dashboard-py"]], "Stepper Motor Controller": [[3, "stepper-motor-controller"]], "stepper_motor_controller_cli.py": [[3, "stepper-motor-controller-cli-py"]], "stepper_system_w_spad.py": [[3, "stepper-system-w-spad-py"]], "Camera Culture Hardware Repo": [[4, "camera-culture-hardware-repo"]], "Getting Started": [[4, "getting-started"]], "Documentation Website": [[4, "documentation-website"]], "Other Details": [[4, "other-details"]], "Repo Structure": [[4, "repo-structure"]], "Package Structure": [[4, "package-structure"]], "API Reference": [[5, "api-reference"]], "Packages": [[5, "packages"]], "cc_hardware.algos.algorithm": [[6, "module-cc_hardware.algos.algorithm"]], "Module Contents": [[6, "module-contents"], [7, "module-contents"], [8, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [36, "module-contents"], [38, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [60, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"]], "Classes": [[6, "classes"], [7, "classes"], [8, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [38, "classes"], [39, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [58, "classes"], [59, "classes"], [63, "classes"], [64, "classes"], [65, "classes"]], "cc_hardware.algos.aruco": [[7, "module-cc_hardware.algos.aruco"]], "cc_hardware.algos.datasets": [[8, "module-cc_hardware.algos.datasets"]], "cc_hardware.algos": [[9, "module-cc_hardware.algos"]], "Submodules": [[9, "submodules"], [13, "submodules"], [17, "submodules"], [23, "submodules"], [29, "submodules"], [41, "submodules"], [44, "submodules"], [48, "submodules"], [52, "submodules"], [59, "submodules"]], "cc_hardware.algos.models": [[10, "module-cc_hardware.algos.models"]], "Functions": [[10, "functions"], [36, "functions"], [52, "functions"], [55, "functions"], [56, "functions"], [59, "functions"], [60, "functions"], [62, "functions"], [64, "functions"]], "cc_hardware.drivers.cameras.camera": [[11, "module-cc_hardware.drivers.cameras.camera"]], "cc_hardware.drivers.cameras.flir": [[12, "module-cc_hardware.drivers.cameras.flir"]], "PySpin Installation": [[12, "pyspin-installation"]], "cc_hardware.drivers.cameras": [[13, "module-cc_hardware.drivers.cameras"]], "Package Contents": [[13, "package-contents"], [17, "package-contents"], [18, "package-contents"], [23, "package-contents"], [29, "package-contents"], [39, "package-contents"], [41, "package-contents"], [44, "package-contents"], [48, "package-contents"], [52, "package-contents"], [59, "package-contents"]], "cc_hardware.drivers.cameras.pkl": [[14, "module-cc_hardware.drivers.cameras.pkl"]], "cc_hardware.drivers.cameras.realsense": [[15, "module-cc_hardware.drivers.cameras.realsense"]], "cc_hardware.drivers.cameras.usb": [[16, "module-cc_hardware.drivers.cameras.usb"]], "cc_hardware.drivers": [[17, "module-cc_hardware.drivers"]], "Subpackages": [[17, "subpackages"], [35, "subpackages"], [39, "subpackages"]], "cc_hardware.drivers.mocap": [[18, "module-cc_hardware.drivers.mocap"]], "cc_hardware.drivers.mocap.mocap": [[19, "module-cc_hardware.drivers.mocap.mocap"]], "cc_hardware.drivers.mocap.vive": [[20, "module-cc_hardware.drivers.mocap.vive"]], "cc_hardware.drivers.safe_serial": [[21, "module-cc_hardware.drivers.safe_serial"]], "cc_hardware.drivers.sensor": [[22, "module-cc_hardware.drivers.sensor"]], "cc_hardware.drivers.spads": [[23, "module-cc_hardware.drivers.spads"]], "cc_hardware.drivers.spads.pkl": [[24, "module-cc_hardware.drivers.spads.pkl"]], "cc_hardware.drivers.spads.spad": [[25, "module-cc_hardware.drivers.spads.spad"]], "cc_hardware.drivers.spads.spad_wrappers": [[26, "module-cc_hardware.drivers.spads.spad_wrappers"]], "cc_hardware.drivers.spads.tmf8828": [[27, "module-cc_hardware.drivers.spads.tmf8828"]], "cc_hardware.drivers.spads.vl53l8ch": [[28, "module-cc_hardware.drivers.spads.vl53l8ch"]], "cc_hardware.drivers.stepper_motors": [[29, "module-cc_hardware.drivers.stepper_motors"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[30, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[31, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[32, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[33, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[34, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "cc_hardware": [[35, "module-cc_hardware"]], "cc_hardware.tools.calibration": [[36, "module-cc_hardware.tools.calibration"]], "cc_hardware.tools.camera_viewer": [[37, "module-cc_hardware.tools.camera_viewer"]], "cc_hardware.tools.dashboard.dashboard": [[38, "module-cc_hardware.tools.dashboard.dashboard"]], "cc_hardware.tools.dashboard": [[39, "module-cc_hardware.tools.dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[40, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[41, "module-cc_hardware.tools.dashboard.mocap_dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[42, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[43, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"]], "cc_hardware.tools.dashboard.spad_dashboard": [[44, "module-cc_hardware.tools.dashboard.spad_dashboard"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[45, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[46, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"]], "cc_hardware.tools.flash": [[47, "module-cc_hardware.tools.flash"]], "cc_hardware.tools": [[48, "module-cc_hardware.tools"]], "cc_hardware.tools.jogger": [[49, "module-cc_hardware.tools.jogger"]], "cc_hardware.utils.constants": [[50, "module-cc_hardware.utils.constants"]], "cc_hardware.utils.file_handlers": [[51, "module-cc_hardware.utils.file_handlers"]], "cc_hardware.utils": [[52, "module-cc_hardware.utils"]], "cc_hardware.utils.logger": [[53, "module-cc_hardware.utils.logger"]], "cc_hardware.utils.manager": [[54, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.matplotlib": [[55, "module-cc_hardware.utils.matplotlib"]], "cc_hardware.utils.misc.asyncio_utils": [[56, "module-cc_hardware.utils.misc.asyncio_utils"]], "cc_hardware.utils.misc.atomic": [[57, "module-cc_hardware.utils.misc.atomic"]], "cc_hardware.utils.misc.blocking_deque": [[58, "module-cc_hardware.utils.misc.blocking_deque"]], "cc_hardware.utils.misc": [[59, "module-cc_hardware.utils.misc"]], "cc_hardware.utils.misc.misc": [[60, "module-cc_hardware.utils.misc.misc"]], "cc_hardware.utils.misc.multiprocessing_deque": [[61, "module-cc_hardware.utils.misc.multiprocessing_deque"]], "cc_hardware.utils.misc.serial_utils": [[62, "module-cc_hardware.utils.misc.serial_utils"]], "cc_hardware.utils.misc.singleton": [[63, "module-cc_hardware.utils.misc.singleton"]], "cc_hardware.utils.registry": [[64, "module-cc_hardware.utils.registry"]], "cc_hardware.utils.setting": [[65, "module-cc_hardware.utils.setting"]], "cc_hardware.utils.transformations": [[66, "module-cc_hardware.utils.transformations"]], "Reference": [[67, "reference"]]}, "indexentries": {"algorithm (class in cc_hardware.algos.algorithm)": [[6, "cc_hardware.algos.algorithm.Algorithm"]], "cc_hardware.algos.algorithm": [[6, "module-cc_hardware.algos.algorithm"]], "close() (algorithm method)": [[6, "cc_hardware.algos.algorithm.Algorithm.close"]], "is_okay (algorithm property)": [[6, "cc_hardware.algos.algorithm.Algorithm.is_okay"]], "module": [[6, "module-cc_hardware.algos.algorithm"], [7, "module-cc_hardware.algos.aruco"], [8, "module-cc_hardware.algos.datasets"], [9, "module-cc_hardware.algos"], [10, "module-cc_hardware.algos.models"], [11, "module-cc_hardware.drivers.cameras.camera"], [12, "module-cc_hardware.drivers.cameras.flir"], [13, "module-cc_hardware.drivers.cameras"], [14, "module-cc_hardware.drivers.cameras.pkl"], [15, "module-cc_hardware.drivers.cameras.realsense"], [16, "module-cc_hardware.drivers.cameras.usb"], [17, "module-cc_hardware.drivers"], [18, "module-cc_hardware.drivers.mocap"], [19, "module-cc_hardware.drivers.mocap.mocap"], [20, "module-cc_hardware.drivers.mocap.vive"], [21, "module-cc_hardware.drivers.safe_serial"], [22, "module-cc_hardware.drivers.sensor"], [23, "module-cc_hardware.drivers.spads"], [24, "module-cc_hardware.drivers.spads.pkl"], [25, "module-cc_hardware.drivers.spads.spad"], [26, "module-cc_hardware.drivers.spads.spad_wrappers"], [27, "module-cc_hardware.drivers.spads.tmf8828"], [28, "module-cc_hardware.drivers.spads.vl53l8ch"], [29, "module-cc_hardware.drivers.stepper_motors"], [30, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"], [31, "module-cc_hardware.drivers.stepper_motors.stepper_controller"], [32, "module-cc_hardware.drivers.stepper_motors.stepper_motor"], [33, "module-cc_hardware.drivers.stepper_motors.stepper_system"], [34, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"], [35, "module-cc_hardware"], [36, "module-cc_hardware.tools.calibration"], [37, "module-cc_hardware.tools.camera_viewer"], [38, "module-cc_hardware.tools.dashboard.dashboard"], [39, "module-cc_hardware.tools.dashboard"], [40, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"], [41, "module-cc_hardware.tools.dashboard.mocap_dashboard"], [42, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"], [43, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"], [44, "module-cc_hardware.tools.dashboard.spad_dashboard"], [45, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"], [46, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"], [47, "module-cc_hardware.tools.flash"], [48, "module-cc_hardware.tools"], [49, "module-cc_hardware.tools.jogger"], [50, "module-cc_hardware.utils.constants"], [51, "module-cc_hardware.utils.file_handlers"], [52, "module-cc_hardware.utils"], [53, "module-cc_hardware.utils.logger"], [54, "module-cc_hardware.utils.manager"], [55, "module-cc_hardware.utils.matplotlib"], [56, "module-cc_hardware.utils.misc.asyncio_utils"], [57, "module-cc_hardware.utils.misc.atomic"], [58, "module-cc_hardware.utils.misc.blocking_deque"], [59, "module-cc_hardware.utils.misc"], [60, "module-cc_hardware.utils.misc.misc"], [61, "module-cc_hardware.utils.misc.multiprocessing_deque"], [62, "module-cc_hardware.utils.misc.serial_utils"], [63, "module-cc_hardware.utils.misc.singleton"], [64, "module-cc_hardware.utils.registry"], [65, "module-cc_hardware.utils.setting"], [66, "module-cc_hardware.utils.transformations"]], "run() (algorithm method)": [[6, "cc_hardware.algos.algorithm.Algorithm.run"]], "arucolocalizationalgorithm (class in cc_hardware.algos.aruco)": [[7, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco": [[7, "module-cc_hardware.algos.aruco"]], "close() (arucolocalizationalgorithm method)": [[7, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.close"]], "is_okay (arucolocalizationalgorithm property)": [[7, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.is_okay"]], "run() (arucolocalizationalgorithm method)": [[7, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.run"]], "histogramdataset (class in cc_hardware.algos.datasets)": [[8, "cc_hardware.algos.datasets.HistogramDataset"]], "__add__() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.__add__"]], "__getitem__() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.__getitem__"]], "__len__() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.__len__"]], "augment() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.augment"]], "cc_hardware.algos.datasets": [[8, "module-cc_hardware.algos.datasets"]], "clip_negative() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.clip_negative"]], "get_bin_num() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.get_bin_num"]], "get_mean_capture() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.get_mean_capture"]], "get_raw_bin_num() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.get_raw_bin_num"]], "reset_transformations() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.reset_transformations"]], "set_end_bin() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.set_end_bin"]], "set_start_bin() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.set_start_bin"]], "set_zero() (histogramdataset method)": [[8, "cc_hardware.algos.datasets.HistogramDataset.set_zero"]], "cc_hardware.algos": [[9, "module-cc_hardware.algos"]], "deeplocation8 (class in cc_hardware.algos.models)": [[10, "cc_hardware.algos.models.DeepLocation8"]], "__delattr__() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.__delattr__"]], "__dir__() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.__dir__"]], "__getstate__() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.__getstate__"]], "__repr__() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.__repr__"]], "__setattr__() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.__setattr__"]], "add_module() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.add_module"]], "apply() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.apply"]], "bfloat16() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.bfloat16"]], "buffers() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.buffers"]], "cc_hardware.algos.models": [[10, "module-cc_hardware.algos.models"]], "children() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.children"]], "compile() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.compile"]], "cpu() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.cpu"]], "cuda() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.cuda"]], "double() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.double"]], "eval() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.eval"]], "extra_repr() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.extra_repr"]], "float() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.float"]], "get_buffer() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.get_buffer"]], "get_extra_state() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.get_extra_state"]], "get_parameter() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.get_parameter"]], "get_submodule() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.get_submodule"]], "half() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.half"]], "initialize_weights() (in module cc_hardware.algos.models)": [[10, "cc_hardware.algos.models.initialize_weights"]], "ipu() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.ipu"]], "load_state_dict() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.load_state_dict"]], "modules() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.modules"]], "mtia() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.mtia"]], "named_buffers() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.named_buffers"]], "named_children() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.named_children"]], "named_modules() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.named_modules"]], "named_parameters() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.named_parameters"]], "parameters() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.parameters"]], "register_backward_hook() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_backward_hook"]], "register_buffer() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_buffer"]], "register_forward_hook() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_forward_hook"]], "register_forward_pre_hook() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_forward_pre_hook"]], "register_full_backward_hook() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_full_backward_hook"]], "register_full_backward_pre_hook() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_load_state_dict_post_hook"]], "register_load_state_dict_pre_hook() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_load_state_dict_pre_hook"]], "register_module() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_module"]], "register_parameter() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_parameter"]], "register_state_dict_post_hook() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_state_dict_post_hook"]], "register_state_dict_pre_hook() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.register_state_dict_pre_hook"]], "requires_grad_() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.requires_grad_"]], "set_extra_state() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.set_extra_state"]], "set_submodule() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.set_submodule"]], "share_memory() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.share_memory"]], "state_dict() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.state_dict"]], "to() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.to"]], "to_empty() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.to_empty"]], "train() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.train"]], "type() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.type"]], "xpu() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.xpu"]], "zero_grad() (deeplocation8 method)": [[10, "cc_hardware.algos.models.DeepLocation8.zero_grad"]], "camera (class in cc_hardware.drivers.cameras.camera)": [[11, "cc_hardware.drivers.cameras.camera.Camera"]], "cameraconfig (class in cc_hardware.drivers.cameras.camera)": [[11, "cc_hardware.drivers.cameras.camera.CameraConfig"]], "__del__() (camera method)": [[11, "cc_hardware.drivers.cameras.camera.Camera.__del__"], [13, "cc_hardware.drivers.cameras.Camera.__del__"], [17, "cc_hardware.drivers.Camera.__del__"]], "accumulate() (camera method)": [[11, "cc_hardware.drivers.cameras.camera.Camera.accumulate"], [13, "cc_hardware.drivers.cameras.Camera.accumulate"], [17, "cc_hardware.drivers.Camera.accumulate"]], "calibrate() (camera method)": [[11, "cc_hardware.drivers.cameras.camera.Camera.calibrate"], [13, "cc_hardware.drivers.cameras.Camera.calibrate"], [17, "cc_hardware.drivers.Camera.calibrate"]], "cc_hardware.drivers.cameras.camera": [[11, "module-cc_hardware.drivers.cameras.camera"]], "close() (camera method)": [[11, "cc_hardware.drivers.cameras.camera.Camera.close"], [13, "cc_hardware.drivers.cameras.Camera.close"], [17, "cc_hardware.drivers.Camera.close"]], "distortion_coefficients (camera property)": [[11, "cc_hardware.drivers.cameras.camera.Camera.distortion_coefficients"], [13, "cc_hardware.drivers.cameras.Camera.distortion_coefficients"], [17, "cc_hardware.drivers.Camera.distortion_coefficients"]], "intrinsic_matrix (camera property)": [[11, "cc_hardware.drivers.cameras.camera.Camera.intrinsic_matrix"], [13, "cc_hardware.drivers.cameras.Camera.intrinsic_matrix"], [17, "cc_hardware.drivers.Camera.intrinsic_matrix"]], "is_okay (camera property)": [[11, "cc_hardware.drivers.cameras.camera.Camera.is_okay"], [13, "cc_hardware.drivers.cameras.Camera.is_okay"], [17, "cc_hardware.drivers.Camera.is_okay"]], "reset() (camera method)": [[11, "cc_hardware.drivers.cameras.camera.Camera.reset"], [13, "cc_hardware.drivers.cameras.Camera.reset"], [17, "cc_hardware.drivers.Camera.reset"]], "resolution (camera property)": [[11, "cc_hardware.drivers.cameras.camera.Camera.resolution"], [13, "cc_hardware.drivers.cameras.Camera.resolution"], [17, "cc_hardware.drivers.Camera.resolution"]], "settings (camera property)": [[11, "cc_hardware.drivers.cameras.camera.Camera.settings"], [13, "cc_hardware.drivers.cameras.Camera.settings"], [17, "cc_hardware.drivers.Camera.settings"]], "settings (cameraconfig property)": [[11, "cc_hardware.drivers.cameras.camera.CameraConfig.settings"], [13, "cc_hardware.drivers.cameras.CameraConfig.settings"], [17, "cc_hardware.drivers.CameraConfig.settings"]], "update() (camera method)": [[11, "cc_hardware.drivers.cameras.camera.Camera.update"], [13, "cc_hardware.drivers.cameras.Camera.update"], [17, "cc_hardware.drivers.Camera.update"]], "flircamera (class in cc_hardware.drivers.cameras.flir)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera"]], "grasshopperflircamera (class in cc_hardware.drivers.cameras.flir)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera"]], "__del__() (flircamera method)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.__del__"]], "__del__() (grasshopperflircamera method)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.__del__"]], "accumulate() (flircamera method)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.accumulate"]], "accumulate() (grasshopperflircamera method)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.accumulate"]], "calibrate() (flircamera method)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.calibrate"]], "calibrate() (grasshopperflircamera method)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.calibrate"]], "cc_hardware.drivers.cameras.flir": [[12, "module-cc_hardware.drivers.cameras.flir"]], "close() (flircamera method)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.close"]], "close() (grasshopperflircamera method)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.close"]], "distortion_coefficients (flircamera property)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.distortion_coefficients"]], "distortion_coefficients (grasshopperflircamera property)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.distortion_coefficients"]], "intrinsic_matrix (flircamera property)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.intrinsic_matrix"]], "intrinsic_matrix (grasshopperflircamera property)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.intrinsic_matrix"]], "is_okay (flircamera property)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.is_okay"]], "is_okay (grasshopperflircamera property)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.is_okay"]], "reset() (flircamera method)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.reset"]], "reset() (grasshopperflircamera method)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.reset"]], "resolution (flircamera property)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.resolution"]], "resolution (grasshopperflircamera property)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.resolution"]], "settings (flircamera property)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.settings"]], "settings (grasshopperflircamera property)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.settings"]], "update() (flircamera method)": [[12, "cc_hardware.drivers.cameras.flir.FlirCamera.update"]], "update() (grasshopperflircamera method)": [[12, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.update"]], "camera (class in cc_hardware.drivers.cameras)": [[13, "cc_hardware.drivers.cameras.Camera"]], "cameraconfig (class in cc_hardware.drivers.cameras)": [[13, "cc_hardware.drivers.cameras.CameraConfig"]], "cc_hardware.drivers.cameras": [[13, "module-cc_hardware.drivers.cameras"]], "pklcamera (class in cc_hardware.drivers.cameras.pkl)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera"]], "__del__() (pklcamera method)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.__del__"]], "accumulate() (pklcamera method)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.accumulate"]], "calibrate() (pklcamera method)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.calibrate"]], "cc_hardware.drivers.cameras.pkl": [[14, "module-cc_hardware.drivers.cameras.pkl"]], "close() (pklcamera method)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.close"]], "distortion_coefficients (pklcamera property)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.distortion_coefficients"]], "intrinsic_matrix (pklcamera property)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.intrinsic_matrix"]], "is_okay (pklcamera property)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.is_okay"]], "reset() (pklcamera method)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.reset"]], "resolution (pklcamera property)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.resolution"]], "settings (pklcamera property)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.settings"]], "update() (pklcamera method)": [[14, "cc_hardware.drivers.cameras.pkl.PklCamera.update"]], "realsensecamera (class in cc_hardware.drivers.cameras.realsense)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera"]], "realsenseconfig (class in cc_hardware.drivers.cameras.realsense)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseConfig"]], "__del__() (realsensecamera method)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.__del__"]], "accumulate() (realsensecamera method)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.accumulate"]], "calibrate() (realsensecamera method)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.calibrate"]], "cc_hardware.drivers.cameras.realsense": [[15, "module-cc_hardware.drivers.cameras.realsense"]], "close() (realsensecamera method)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.close"]], "config (realsensecamera property)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.config"]], "distortion_coefficients (realsensecamera property)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.distortion_coefficients"]], "intrinsic_matrix (realsensecamera property)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.intrinsic_matrix"]], "is_okay (realsensecamera property)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.is_okay"]], "reset() (realsensecamera method)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.reset"]], "resolution (realsensecamera property)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.resolution"]], "settings (realsensecamera property)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.settings"]], "settings (realsenseconfig property)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseConfig.settings"]], "update() (realsensecamera method)": [[15, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.update"]], "usbcamera (class in cc_hardware.drivers.cameras.usb)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera"]], "usbcameraconfig (class in cc_hardware.drivers.cameras.usb)": [[16, "cc_hardware.drivers.cameras.usb.USBCameraConfig"]], "__del__() (usbcamera method)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.__del__"]], "accumulate() (usbcamera method)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.accumulate"]], "calibrate() (usbcamera method)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.calibrate"]], "cc_hardware.drivers.cameras.usb": [[16, "module-cc_hardware.drivers.cameras.usb"]], "close() (usbcamera method)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.close"]], "distortion_coefficients (usbcamera property)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.distortion_coefficients"]], "intrinsic_matrix (usbcamera property)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.intrinsic_matrix"]], "is_okay (usbcamera property)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.is_okay"]], "reset() (usbcamera method)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.reset"]], "resolution (usbcamera property)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.resolution"]], "settings (usbcamera property)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.settings"]], "settings (usbcameraconfig property)": [[16, "cc_hardware.drivers.cameras.usb.USBCameraConfig.settings"]], "update() (usbcamera method)": [[16, "cc_hardware.drivers.cameras.usb.USBCamera.update"]], "camera (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.Camera"]], "cameraconfig (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.CameraConfig"]], "dummysteppermotor (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.DummyStepperMotor"]], "motioncapturesensor (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.MotionCaptureSensorConfig"]], "spadsensor (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.SPADSensorConfig"]], "safeserial (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.SafeSerial"]], "sensor (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.Sensor"]], "sensorconfig (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.SensorConfig"]], "steppermotor (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.StepperMotor"]], "steppermotorsystem (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers)": [[17, "cc_hardware.drivers.StepperMotorSystemAxis"]], "__del__() (motioncapturesensor method)": [[17, "cc_hardware.drivers.MotionCaptureSensor.__del__"], [18, "cc_hardware.drivers.mocap.MotionCaptureSensor.__del__"], [19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.__del__"]], "__del__() (spadsensor method)": [[17, "cc_hardware.drivers.SPADSensor.__del__"], [23, "cc_hardware.drivers.spads.SPADSensor.__del__"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.__del__"]], "__del__() (sensor method)": [[17, "cc_hardware.drivers.Sensor.__del__"], [22, "cc_hardware.drivers.sensor.Sensor.__del__"]], "__dir__() (steppermotorsystemaxis method)": [[17, "cc_hardware.drivers.StepperMotorSystemAxis.__dir__"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__dir__"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__dir__"]], "__format__() (steppermotorsystemaxis method)": [[17, "cc_hardware.drivers.StepperMotorSystemAxis.__format__"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__format__"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__format__"]], "__getattr__() (safeserial method)": [[17, "cc_hardware.drivers.SafeSerial.__getattr__"], [21, "cc_hardware.drivers.safe_serial.SafeSerial.__getattr__"]], "__getattr__() (steppermotorsystem method)": [[17, "cc_hardware.drivers.StepperMotorSystem.__getattr__"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.__getattr__"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.__getattr__"]], "__hash__() (steppermotorsystemaxis method)": [[17, "cc_hardware.drivers.StepperMotorSystemAxis.__hash__"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__hash__"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__hash__"]], "__reduce_ex__() (steppermotorsystemaxis method)": [[17, "cc_hardware.drivers.StepperMotorSystemAxis.__reduce_ex__"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__reduce_ex__"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__reduce_ex__"]], "__repr__() (steppermotorsystemaxis method)": [[17, "cc_hardware.drivers.StepperMotorSystemAxis.__repr__"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__repr__"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__repr__"]], "__str__() (steppermotorsystemaxis method)": [[17, "cc_hardware.drivers.StepperMotorSystemAxis.__str__"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__str__"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__str__"]], "accumulate() (motioncapturesensor method)": [[17, "cc_hardware.drivers.MotionCaptureSensor.accumulate"], [18, "cc_hardware.drivers.mocap.MotionCaptureSensor.accumulate"], [19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.accumulate"]], "accumulate() (spadsensor method)": [[17, "cc_hardware.drivers.SPADSensor.accumulate"], [23, "cc_hardware.drivers.spads.SPADSensor.accumulate"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.accumulate"]], "axes (steppermotorsystem property)": [[17, "cc_hardware.drivers.StepperMotorSystem.axes"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.axes"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.axes"]], "calibrate() (motioncapturesensor method)": [[17, "cc_hardware.drivers.MotionCaptureSensor.calibrate"], [18, "cc_hardware.drivers.mocap.MotionCaptureSensor.calibrate"], [19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.calibrate"]], "calibrate() (spadsensor method)": [[17, "cc_hardware.drivers.SPADSensor.calibrate"], [23, "cc_hardware.drivers.spads.SPADSensor.calibrate"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.calibrate"]], "calibrate() (sensor method)": [[17, "cc_hardware.drivers.Sensor.calibrate"], [22, "cc_hardware.drivers.sensor.Sensor.calibrate"]], "cc_hardware.drivers": [[17, "module-cc_hardware.drivers"]], "close() (motioncapturesensor method)": [[17, "cc_hardware.drivers.MotionCaptureSensor.close"], [18, "cc_hardware.drivers.mocap.MotionCaptureSensor.close"], [19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.close"]], "close() (spadsensor method)": [[17, "cc_hardware.drivers.SPADSensor.close"], [23, "cc_hardware.drivers.spads.SPADSensor.close"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.close"]], "close() (sensor method)": [[17, "cc_hardware.drivers.Sensor.close"], [22, "cc_hardware.drivers.sensor.Sensor.close"]], "close() (steppermotor method)": [[17, "cc_hardware.drivers.StepperMotor.close"], [29, "cc_hardware.drivers.stepper_motors.StepperMotor.close"], [32, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.close"]], "create() (safeserial class method)": [[17, "cc_hardware.drivers.SafeSerial.create"], [21, "cc_hardware.drivers.safe_serial.SafeSerial.create"]], "home() (steppermotor method)": [[17, "cc_hardware.drivers.StepperMotor.home"], [29, "cc_hardware.drivers.stepper_motors.StepperMotor.home"], [32, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.home"]], "is_moving (steppermotor property)": [[17, "cc_hardware.drivers.StepperMotor.is_moving"], [29, "cc_hardware.drivers.stepper_motors.StepperMotor.is_moving"], [32, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.is_moving"]], "is_moving (steppermotorsystem property)": [[17, "cc_hardware.drivers.StepperMotorSystem.is_moving"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.is_moving"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.is_moving"]], "is_okay (motioncapturesensor property)": [[17, "cc_hardware.drivers.MotionCaptureSensor.is_okay"], [18, "cc_hardware.drivers.mocap.MotionCaptureSensor.is_okay"], [19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.is_okay"]], "is_okay (spadsensor property)": [[17, "cc_hardware.drivers.SPADSensor.is_okay"], [23, "cc_hardware.drivers.spads.SPADSensor.is_okay"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.is_okay"]], "is_okay (sensor property)": [[17, "cc_hardware.drivers.Sensor.is_okay"], [22, "cc_hardware.drivers.sensor.Sensor.is_okay"]], "move_by() (steppermotor method)": [[17, "cc_hardware.drivers.StepperMotor.move_by"], [29, "cc_hardware.drivers.stepper_motors.StepperMotor.move_by"], [32, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_by"]], "move_by() (steppermotorsystem method)": [[17, "cc_hardware.drivers.StepperMotorSystem.move_by"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_by"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_by"]], "move_to() (steppermotor method)": [[17, "cc_hardware.drivers.StepperMotor.move_to"], [29, "cc_hardware.drivers.stepper_motors.StepperMotor.move_to"], [32, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_to"]], "move_to() (steppermotorsystem method)": [[17, "cc_hardware.drivers.StepperMotorSystem.move_to"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_to"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_to"]], "name() (steppermotorsystemaxis method)": [[17, "cc_hardware.drivers.StepperMotorSystemAxis.name"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.name"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.name"]], "num_bins (spadsensor property)": [[17, "cc_hardware.drivers.SPADSensor.num_bins"], [23, "cc_hardware.drivers.spads.SPADSensor.num_bins"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.num_bins"]], "num_pixels (spadsensorconfig property)": [[17, "cc_hardware.drivers.SPADSensorConfig.num_pixels"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.num_pixels"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.num_pixels"]], "position (steppermotor property)": [[17, "cc_hardware.drivers.StepperMotor.position"], [29, "cc_hardware.drivers.stepper_motors.StepperMotor.position"], [32, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.position"]], "read() (safeserial method)": [[17, "cc_hardware.drivers.SafeSerial.read"], [21, "cc_hardware.drivers.safe_serial.SafeSerial.read"]], "reset() (motioncapturesensor method)": [[17, "cc_hardware.drivers.MotionCaptureSensor.reset"], [18, "cc_hardware.drivers.mocap.MotionCaptureSensor.reset"], [19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.reset"]], "reset() (spadsensor method)": [[17, "cc_hardware.drivers.SPADSensor.reset"], [23, "cc_hardware.drivers.spads.SPADSensor.reset"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.reset"]], "reset() (sensor method)": [[17, "cc_hardware.drivers.Sensor.reset"], [22, "cc_hardware.drivers.sensor.Sensor.reset"]], "resolution (spadsensor property)": [[17, "cc_hardware.drivers.SPADSensor.resolution"], [23, "cc_hardware.drivers.spads.SPADSensor.resolution"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.resolution"]], "settings (motioncapturesensor property)": [[17, "cc_hardware.drivers.MotionCaptureSensor.settings"], [18, "cc_hardware.drivers.mocap.MotionCaptureSensor.settings"], [19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.settings"]], "settings (motioncapturesensorconfig property)": [[17, "cc_hardware.drivers.MotionCaptureSensorConfig.settings"], [18, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.settings"], [19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.settings"]], "settings (spadsensor property)": [[17, "cc_hardware.drivers.SPADSensor.settings"], [23, "cc_hardware.drivers.spads.SPADSensor.settings"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.settings"]], "settings (spadsensorconfig property)": [[17, "cc_hardware.drivers.SPADSensorConfig.settings"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.settings"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.settings"]], "settings (sensor property)": [[17, "cc_hardware.drivers.Sensor.settings"], [22, "cc_hardware.drivers.sensor.Sensor.settings"]], "settings (sensorconfig property)": [[17, "cc_hardware.drivers.SensorConfig.settings"], [22, "cc_hardware.drivers.sensor.SensorConfig.settings"]], "update() (motioncapturesensor method)": [[17, "cc_hardware.drivers.MotionCaptureSensor.update"], [18, "cc_hardware.drivers.mocap.MotionCaptureSensor.update"], [19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.update"]], "update() (spadsensor method)": [[17, "cc_hardware.drivers.SPADSensor.update"], [23, "cc_hardware.drivers.spads.SPADSensor.update"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.update"]], "update() (sensor method)": [[17, "cc_hardware.drivers.Sensor.update"], [22, "cc_hardware.drivers.sensor.Sensor.update"]], "value() (steppermotorsystemaxis method)": [[17, "cc_hardware.drivers.StepperMotorSystemAxis.value"], [29, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.value"], [33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.value"]], "wait_for_move() (steppermotor method)": [[17, "cc_hardware.drivers.StepperMotor.wait_for_move"], [29, "cc_hardware.drivers.stepper_motors.StepperMotor.wait_for_move"], [32, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.wait_for_move"]], "wait_for_start_talk() (safeserial method)": [[17, "cc_hardware.drivers.SafeSerial.wait_for_start_talk"], [21, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_start_talk"]], "wait_for_stop_talk() (safeserial method)": [[17, "cc_hardware.drivers.SafeSerial.wait_for_stop_talk"], [21, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_stop_talk"]], "write() (safeserial method)": [[17, "cc_hardware.drivers.SafeSerial.write"], [21, "cc_hardware.drivers.safe_serial.SafeSerial.write"]], "write_and_wait_for_start_and_stop_talk() (safeserial method)": [[17, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_and_stop_talk"], [21, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_and_stop_talk"]], "write_and_wait_for_start_talk() (safeserial method)": [[17, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_talk"], [21, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_talk"]], "write_and_wait_for_stop_talk() (safeserial method)": [[17, "cc_hardware.drivers.SafeSerial.write_and_wait_for_stop_talk"], [21, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_stop_talk"]], "motioncapturesensor (class in cc_hardware.drivers.mocap)": [[18, "cc_hardware.drivers.mocap.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers.mocap)": [[18, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap": [[18, "module-cc_hardware.drivers.mocap"]], "motioncapturesensor (class in cc_hardware.drivers.mocap.mocap)": [[19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers.mocap.mocap)": [[19, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap.mocap": [[19, "module-cc_hardware.drivers.mocap.mocap"]], "vivetrackerpose (class in cc_hardware.drivers.mocap.vive)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerPose"]], "vivetrackersensor (class in cc_hardware.drivers.mocap.vive)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensor"]], "vivetrackersensorconfig (class in cc_hardware.drivers.mocap.vive)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensorConfig"]], "__del__() (vivetrackersensor method)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensor.__del__"]], "accumulate() (vivetrackersensor method)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensor.accumulate"]], "calibrate() (vivetrackersensor method)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensor.calibrate"]], "cc_hardware.drivers.mocap.vive": [[20, "module-cc_hardware.drivers.mocap.vive"]], "close() (vivetrackersensor method)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensor.close"]], "get_data() (vivetrackerpose method)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.get_data"]], "has_data (vivetrackerpose property)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.has_data"]], "is_okay (vivetrackersensor property)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensor.is_okay"]], "process() (vivetrackerpose method)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.process"]], "reset() (vivetrackerpose method)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.reset"]], "reset() (vivetrackersensor method)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensor.reset"]], "settings (vivetrackersensor property)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensor.settings"]], "settings (vivetrackersensorconfig property)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensorConfig.settings"]], "update() (vivetrackersensor method)": [[20, "cc_hardware.drivers.mocap.vive.ViveTrackerSensor.update"]], "safeserial (class in cc_hardware.drivers.safe_serial)": [[21, "cc_hardware.drivers.safe_serial.SafeSerial"]], "cc_hardware.drivers.safe_serial": [[21, "module-cc_hardware.drivers.safe_serial"]], "sensor (class in cc_hardware.drivers.sensor)": [[22, "cc_hardware.drivers.sensor.Sensor"]], "sensorconfig (class in cc_hardware.drivers.sensor)": [[22, "cc_hardware.drivers.sensor.SensorConfig"]], "sensordata (class in cc_hardware.drivers.sensor)": [[22, "cc_hardware.drivers.sensor.SensorData"]], "cc_hardware.drivers.sensor": [[22, "module-cc_hardware.drivers.sensor"]], "get_data() (sensordata method)": [[22, "cc_hardware.drivers.sensor.SensorData.get_data"]], "has_data (sensordata property)": [[22, "cc_hardware.drivers.sensor.SensorData.has_data"]], "process() (sensordata method)": [[22, "cc_hardware.drivers.sensor.SensorData.process"]], "reset() (sensordata method)": [[22, "cc_hardware.drivers.sensor.SensorData.reset"]], "spaddatatype (class in cc_hardware.drivers.spads)": [[23, "cc_hardware.drivers.spads.SPADDataType"]], "spadsensor (class in cc_hardware.drivers.spads)": [[23, "cc_hardware.drivers.spads.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads)": [[23, "cc_hardware.drivers.spads.SPADSensorConfig"]], "spadsensordata (class in cc_hardware.drivers.spads)": [[23, "cc_hardware.drivers.spads.SPADSensorData"]], "__contains__() (spaddatatype method)": [[23, "cc_hardware.drivers.spads.SPADDataType.__contains__"], [25, "cc_hardware.drivers.spads.spad.SPADDataType.__contains__"]], "__dir__() (spaddatatype method)": [[23, "cc_hardware.drivers.spads.SPADDataType.__dir__"], [25, "cc_hardware.drivers.spads.spad.SPADDataType.__dir__"]], "__format__() (spaddatatype method)": [[23, "cc_hardware.drivers.spads.SPADDataType.__format__"], [25, "cc_hardware.drivers.spads.spad.SPADDataType.__format__"]], "__hash__() (spaddatatype method)": [[23, "cc_hardware.drivers.spads.SPADDataType.__hash__"], [25, "cc_hardware.drivers.spads.spad.SPADDataType.__hash__"]], "__iter__() (spaddatatype method)": [[23, "cc_hardware.drivers.spads.SPADDataType.__iter__"], [25, "cc_hardware.drivers.spads.spad.SPADDataType.__iter__"]], "__reduce_ex__() (spaddatatype method)": [[23, "cc_hardware.drivers.spads.SPADDataType.__reduce_ex__"], [25, "cc_hardware.drivers.spads.spad.SPADDataType.__reduce_ex__"]], "__repr__() (spaddatatype method)": [[23, "cc_hardware.drivers.spads.SPADDataType.__repr__"], [25, "cc_hardware.drivers.spads.spad.SPADDataType.__repr__"]], "__str__() (spaddatatype method)": [[23, "cc_hardware.drivers.spads.SPADDataType.__str__"], [25, "cc_hardware.drivers.spads.spad.SPADDataType.__str__"]], "calculate_distance() (spadsensordata method)": [[23, "cc_hardware.drivers.spads.SPADSensorData.calculate_distance"], [25, "cc_hardware.drivers.spads.spad.SPADSensorData.calculate_distance"]], "calculate_point_cloud() (spadsensordata method)": [[23, "cc_hardware.drivers.spads.SPADSensorData.calculate_point_cloud"], [25, "cc_hardware.drivers.spads.spad.SPADSensorData.calculate_point_cloud"]], "cc_hardware.drivers.spads": [[23, "module-cc_hardware.drivers.spads"]], "get_data() (spadsensordata method)": [[23, "cc_hardware.drivers.spads.SPADSensorData.get_data"], [25, "cc_hardware.drivers.spads.spad.SPADSensorData.get_data"]], "has_data (spadsensordata property)": [[23, "cc_hardware.drivers.spads.SPADSensorData.has_data"], [25, "cc_hardware.drivers.spads.spad.SPADSensorData.has_data"]], "name() (spaddatatype method)": [[23, "cc_hardware.drivers.spads.SPADDataType.name"], [25, "cc_hardware.drivers.spads.spad.SPADDataType.name"]], "process() (spadsensordata method)": [[23, "cc_hardware.drivers.spads.SPADSensorData.process"], [25, "cc_hardware.drivers.spads.spad.SPADSensorData.process"]], "reset() (spadsensordata method)": [[23, "cc_hardware.drivers.spads.SPADSensorData.reset"], [25, "cc_hardware.drivers.spads.spad.SPADSensorData.reset"]], "value() (spaddatatype method)": [[23, "cc_hardware.drivers.spads.SPADDataType.value"], [25, "cc_hardware.drivers.spads.spad.SPADDataType.value"]], "pklspadsensor (class in cc_hardware.drivers.spads.pkl)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor"]], "pklspadsensorconfig (class in cc_hardware.drivers.spads.pkl)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig"]], "__del__() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.__del__"]], "accumulate() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.accumulate"]], "calibrate() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.calibrate"]], "cc_hardware.drivers.spads.pkl": [[24, "module-cc_hardware.drivers.spads.pkl"]], "close() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.close"]], "is_okay (pklspadsensor property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.is_okay"]], "num_bins (pklspadsensor property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.num_bins"]], "num_pixels (pklspadsensorconfig property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.num_pixels"]], "reset() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.reset"]], "resolution (pklspadsensor property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.resolution"]], "settings (pklspadsensor property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.settings"]], "settings (pklspadsensorconfig property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.settings"]], "update() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.update"]], "spaddatatype (class in cc_hardware.drivers.spads.spad)": [[25, "cc_hardware.drivers.spads.spad.SPADDataType"]], "spadsensor (class in cc_hardware.drivers.spads.spad)": [[25, "cc_hardware.drivers.spads.spad.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads.spad)": [[25, "cc_hardware.drivers.spads.spad.SPADSensorConfig"]], "spadsensordata (class in cc_hardware.drivers.spads.spad)": [[25, "cc_hardware.drivers.spads.spad.SPADSensorData"]], "cc_hardware.drivers.spads.spad": [[25, "module-cc_hardware.drivers.spads.spad"]], "spadbackgroundremovalwrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper"]], "spadbackgroundremovalwrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapperConfig"]], "spadmergewrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper"]], "spadmergewrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig"]], "spadmovingaveragewrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper"]], "spadmovingaveragewrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig"]], "spadscalingwrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper"]], "spadscalingwrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapperConfig"]], "spadwrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper"]], "spadwrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig"]], "__del__() (spadbackgroundremovalwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.__del__"]], "__del__() (spadmergewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.__del__"]], "__del__() (spadmovingaveragewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.__del__"]], "__del__() (spadscalingwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.__del__"]], "__del__() (spadwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.__del__"]], "accumulate() (spadbackgroundremovalwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.accumulate"]], "accumulate() (spadmergewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.accumulate"]], "accumulate() (spadmovingaveragewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.accumulate"]], "accumulate() (spadscalingwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.accumulate"]], "accumulate() (spadwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.accumulate"]], "calibrate() (spadbackgroundremovalwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.calibrate"]], "calibrate() (spadmergewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.calibrate"]], "calibrate() (spadmovingaveragewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.calibrate"]], "calibrate() (spadscalingwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.calibrate"]], "calibrate() (spadwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.calibrate"]], "cc_hardware.drivers.spads.spad_wrappers": [[26, "module-cc_hardware.drivers.spads.spad_wrappers"]], "close() (spadbackgroundremovalwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.close"]], "close() (spadmergewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.close"]], "close() (spadmovingaveragewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.close"]], "close() (spadscalingwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.close"]], "close() (spadwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.close"]], "is_okay (spadbackgroundremovalwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.is_okay"]], "is_okay (spadmergewrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.is_okay"]], "is_okay (spadmovingaveragewrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.is_okay"]], "is_okay (spadscalingwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.is_okay"]], "is_okay (spadwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.is_okay"]], "num_bins (spadbackgroundremovalwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.num_bins"]], "num_bins (spadmergewrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.num_bins"]], "num_bins (spadmovingaveragewrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.num_bins"]], "num_bins (spadscalingwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.num_bins"]], "num_bins (spadwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.num_bins"]], "num_pixels (spadbackgroundremovalwrapperconfig property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapperConfig.num_pixels"]], "num_pixels (spadmergewrapperconfig property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.num_pixels"]], "num_pixels (spadmovingaveragewrapperconfig property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.num_pixels"]], "num_pixels (spadscalingwrapperconfig property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapperConfig.num_pixels"]], "num_pixels (spadwrapperconfig property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.num_pixels"]], "reset() (spadbackgroundremovalwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.reset"]], "reset() (spadmergewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.reset"]], "reset() (spadmovingaveragewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.reset"]], "reset() (spadscalingwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.reset"]], "reset() (spadwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.reset"]], "resolution (spadbackgroundremovalwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.resolution"]], "resolution (spadmergewrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.resolution"]], "resolution (spadmovingaveragewrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.resolution"]], "resolution (spadscalingwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.resolution"]], "resolution (spadwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.resolution"]], "settings (spadbackgroundremovalwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.settings"]], "settings (spadbackgroundremovalwrapperconfig property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapperConfig.settings"]], "settings (spadmergewrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.settings"]], "settings (spadmergewrapperconfig property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.settings"]], "settings (spadmovingaveragewrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.settings"]], "settings (spadmovingaveragewrapperconfig property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.settings"]], "settings (spadscalingwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.settings"]], "settings (spadscalingwrapperconfig property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapperConfig.settings"]], "settings (spadwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.settings"]], "settings (spadwrapperconfig property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.settings"]], "unwrapped (spadbackgroundremovalwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.unwrapped"]], "unwrapped (spadmergewrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.unwrapped"]], "unwrapped (spadmovingaveragewrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.unwrapped"]], "unwrapped (spadscalingwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.unwrapped"]], "unwrapped (spadwrapper property)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.unwrapped"]], "update() (spadbackgroundremovalwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADBackgroundRemovalWrapper.update"]], "update() (spadmergewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.update"]], "update() (spadmovingaveragewrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.update"]], "update() (spadscalingwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADScalingWrapper.update"]], "update() (spadwrapper method)": [[26, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.update"]], "rangemode (class in cc_hardware.drivers.spads.tmf8828)": [[27, "cc_hardware.drivers.spads.tmf8828.RangeMode"]], "spadid (class in cc_hardware.drivers.spads.tmf8828)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID"]], "tmf8828config (class in cc_hardware.drivers.spads.tmf8828)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Config"]], "tmf8828data (class in cc_hardware.drivers.spads.tmf8828)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Data"]], "tmf8828sensor (class in cc_hardware.drivers.spads.tmf8828)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor"]], "__del__() (tmf8828sensor method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.__del__"]], "__dir__() (rangemode method)": [[27, "cc_hardware.drivers.spads.tmf8828.RangeMode.__dir__"]], "__dir__() (spadid method)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.__dir__"]], "__format__() (rangemode method)": [[27, "cc_hardware.drivers.spads.tmf8828.RangeMode.__format__"]], "__format__() (spadid method)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.__format__"]], "__hash__() (rangemode method)": [[27, "cc_hardware.drivers.spads.tmf8828.RangeMode.__hash__"]], "__hash__() (spadid method)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.__hash__"]], "__reduce_ex__() (rangemode method)": [[27, "cc_hardware.drivers.spads.tmf8828.RangeMode.__reduce_ex__"]], "__reduce_ex__() (spadid method)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.__reduce_ex__"]], "__repr__() (rangemode method)": [[27, "cc_hardware.drivers.spads.tmf8828.RangeMode.__repr__"]], "__repr__() (spadid method)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.__repr__"]], "__str__() (rangemode method)": [[27, "cc_hardware.drivers.spads.tmf8828.RangeMode.__str__"]], "__str__() (spadid method)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.__str__"]], "accumulate() (tmf8828sensor method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.accumulate"]], "active_channels_per_subcapture (spadid property)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.active_channels_per_subcapture"]], "calculate_distance() (tmf8828data method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Data.calculate_distance"]], "calculate_point_cloud() (tmf8828data method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Data.calculate_point_cloud"]], "calibrate() (tmf8828sensor method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.calibrate"]], "cc_hardware.drivers.spads.tmf8828": [[27, "module-cc_hardware.drivers.spads.tmf8828"]], "close() (tmf8828sensor method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.close"]], "config (tmf8828sensor property)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.config"]], "fov (spadid property)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.fov"]], "get_data() (tmf8828data method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Data.get_data"]], "has_data (tmf8828data property)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Data.has_data"]], "is_okay (tmf8828sensor property)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.is_okay"]], "name() (rangemode method)": [[27, "cc_hardware.drivers.spads.tmf8828.RangeMode.name"]], "name() (spadid method)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.name"]], "num_bins (tmf8828sensor property)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.num_bins"]], "num_channels (spadid property)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.num_channels"]], "num_pixels (tmf8828config property)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.num_pixels"]], "process() (tmf8828data method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Data.process"]], "reset() (tmf8828data method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Data.reset"]], "reset() (tmf8828sensor method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.reset"]], "resolution (spadid property)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.resolution"]], "resolution (tmf8828sensor property)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.resolution"]], "settings (tmf8828config property)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.settings"]], "settings (tmf8828sensor property)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.settings"]], "timing_resolution (rangemode property)": [[27, "cc_hardware.drivers.spads.tmf8828.RangeMode.timing_resolution"]], "update() (tmf8828sensor method)": [[27, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.update"]], "value() (rangemode method)": [[27, "cc_hardware.drivers.spads.tmf8828.RangeMode.value"]], "value() (spadid method)": [[27, "cc_hardware.drivers.spads.tmf8828.SPADID.value"]], "rangingmode (class in cc_hardware.drivers.spads.vl53l8ch)": [[28, "cc_hardware.drivers.spads.vl53l8ch.RangingMode"]], "vl53l8chconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig"]], "vl53l8chconfig4x4 (class in cc_hardware.drivers.spads.vl53l8ch)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4"]], "vl53l8chconfig8x8 (class in cc_hardware.drivers.spads.vl53l8ch)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8"]], "vl53l8chdata (class in cc_hardware.drivers.spads.vl53l8ch)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData"]], "vl53l8chsensor (class in cc_hardware.drivers.spads.vl53l8ch)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor"]], "vl53l8chsharedconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig"]], "__del__() (vl53l8chsensor method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.__del__"]], "__dir__() (rangingmode method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__dir__"]], "__format__() (rangingmode method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__format__"]], "__hash__() (rangingmode method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__hash__"]], "__reduce_ex__() (rangingmode method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__reduce_ex__"]], "__repr__() (rangingmode method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__repr__"]], "__str__() (rangingmode method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__str__"]], "accumulate() (vl53l8chsensor method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.accumulate"]], "calculate_distance() (vl53l8chdata method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.calculate_distance"]], "calculate_point_cloud() (vl53l8chdata method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.calculate_point_cloud"]], "calibrate() (vl53l8chsensor method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.calibrate"]], "cc_hardware.drivers.spads.vl53l8ch": [[28, "module-cc_hardware.drivers.spads.vl53l8ch"]], "close() (vl53l8chsensor method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.close"]], "get_data() (vl53l8chdata method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.get_data"]], "has_data (vl53l8chdata property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.has_data"]], "is_okay (vl53l8chsensor property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.is_okay"]], "name() (rangingmode method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.name"]], "num_bins (vl53l8chsensor property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.num_bins"]], "num_pixels (vl53l8chconfig property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.num_pixels"]], "num_pixels (vl53l8chconfig4x4 property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.num_pixels"]], "num_pixels (vl53l8chconfig8x8 property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.num_pixels"]], "num_pixels (vl53l8chsharedconfig property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.num_pixels"]], "pack() (vl53l8chconfig method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.pack"]], "pack() (vl53l8chconfig4x4 method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.pack"]], "pack() (vl53l8chconfig8x8 method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.pack"]], "pack() (vl53l8chsharedconfig method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.pack"]], "process() (vl53l8chdata method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.process"]], "reset() (vl53l8chdata method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHData.reset"]], "reset() (vl53l8chsensor method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.reset"]], "resolution (vl53l8chsensor property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.resolution"]], "settings (vl53l8chconfig property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.settings"]], "settings (vl53l8chconfig4x4 property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.settings"]], "settings (vl53l8chconfig8x8 property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.settings"]], "settings (vl53l8chsensor property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.settings"]], "settings (vl53l8chsharedconfig property)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.settings"]], "update() (vl53l8chsensor method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.update"]], "value() (rangingmode method)": [[28, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.value"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors)": [[29, "cc_hardware.drivers.stepper_motors.DummyStepperMotor"]], "steppercontrollerconfig (class in cc_hardware.drivers.stepper_motors)": [[29, "cc_hardware.drivers.stepper_motors.StepperControllerConfig"]], "steppermotor (class in cc_hardware.drivers.stepper_motors)": [[29, "cc_hardware.drivers.stepper_motors.StepperMotor"]], "steppermotorconfig (class in cc_hardware.drivers.stepper_motors)": [[29, "cc_hardware.drivers.stepper_motors.StepperMotorConfig"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors)": [[29, "cc_hardware.drivers.stepper_motors.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors)": [[29, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis"]], "steppermotorsystemconfig (class in cc_hardware.drivers.stepper_motors)": [[29, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig"]], "cc_hardware.drivers.stepper_motors": [[29, "module-cc_hardware.drivers.stepper_motors"]], "azimuthelevationsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem"]], "kinesisrotationstage (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage"]], "kinesissteppermotor (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor"]], "kinesissteppermotorsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem"]], "__getattr__() (azimuthelevationsystem method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.__getattr__"]], "__getattr__() (kinesissteppermotorsystem method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.__getattr__"]], "axes (azimuthelevationsystem property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.axes"]], "axes (kinesissteppermotorsystem property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.axes"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[30, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "close() (kinesisrotationstage method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.close"]], "close() (kinesissteppermotor method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.close"]], "home() (kinesisrotationstage method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.home"]], "home() (kinesissteppermotor method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.home"]], "initialize() (kinesisrotationstage method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.initialize"]], "initialize() (kinesissteppermotor method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.initialize"]], "is_moving (azimuthelevationsystem property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.is_moving"]], "is_moving (kinesisrotationstage property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.is_moving"]], "is_moving (kinesissteppermotor property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.is_moving"]], "is_moving (kinesissteppermotorsystem property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.is_moving"]], "is_okay (kinesisrotationstage property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.is_okay"]], "is_okay (kinesissteppermotor property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.is_okay"]], "lower_limit (kinesisrotationstage property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.lower_limit"]], "lower_limit (kinesissteppermotor property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.lower_limit"]], "move_by() (azimuthelevationsystem method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.move_by"]], "move_by() (kinesisrotationstage method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_by"]], "move_by() (kinesissteppermotor method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_by"]], "move_by() (kinesissteppermotorsystem method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.move_by"]], "move_to() (azimuthelevationsystem method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.move_to"]], "move_to() (kinesisrotationstage method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_to"]], "move_to() (kinesissteppermotor method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_to"]], "move_to() (kinesissteppermotorsystem method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.move_to"]], "position (kinesisrotationstage property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.position"]], "position (kinesissteppermotor property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.position"]], "upper_limit (kinesisrotationstage property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.upper_limit"]], "upper_limit (kinesissteppermotor property)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.upper_limit"]], "wait_for_move() (kinesisrotationstage method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.wait_for_move"]], "wait_for_move() (kinesissteppermotor method)": [[30, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.wait_for_move"]], "controlleraxisconfig (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[31, "cc_hardware.drivers.stepper_motors.stepper_controller.ControllerAxisConfig"]], "snakecontrolleraxisconfig (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[31, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeControllerAxisConfig"]], "snakesteppercontrollerconfig (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[31, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfig"]], "snakesteppercontrollerconfigxy (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[31, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperControllerConfigXY"]], "steppercontrollerconfig (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[31, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperControllerConfig"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[31, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[32, "cc_hardware.drivers.stepper_motors.stepper_motor.DummyStepperMotor"]], "steppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[32, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor"]], "steppermotorconfig (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[32, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[32, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "dummysteppersystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[33, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis"]], "steppermotorsystemconfig (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[33, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig"]], "__getattr__() (dummysteppersystem method)": [[33, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.__getattr__"]], "axes (dummysteppersystem property)": [[33, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.axes"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[33, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "is_moving (dummysteppersystem property)": [[33, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.is_moving"]], "move_by() (dummysteppersystem method)": [[33, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_by"]], "move_to() (dummysteppersystem method)": [[33, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_to"]], "dualdrive2axisgantryconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryConfig"]], "dualdrive2axisgantryxconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryXConfig"]], "dualdrive2axisgantryy1config (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryY1Config"]], "dualdrive2axisgantryy2config (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryY2Config"]], "singledrive1axisgantryconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryConfig"]], "singledrive1axisgantryxconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryXConfig"]], "singledrive1axisgantryyconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryYConfig"]], "telemetrixsteppermotor (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor"]], "telemetrixsteppermotorconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorConfig"]], "telemetrixsteppermotorsystem (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem"]], "telemetrixsteppermotorsystemconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystemConfig"]], "telemetrixsteppermotorxconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXConfig"]], "telemetrixsteppermotoryconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYConfig"]], "telemetrixsteppermotorzconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZConfig"]], "__getattr__() (telemetrixsteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.__getattr__"]], "__getattr__() (telemetrixsteppermotorsystem method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.__getattr__"]], "axes (telemetrixsteppermotorsystem property)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.axes"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[34, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "close() (telemetrixsteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.close"]], "close() (telemetrixsteppermotorsystem method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.close"]], "cm_to_revs() (telemetrixsteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.cm_to_revs"]], "home() (telemetrixsteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.home"]], "id (telemetrixsteppermotor property)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.id"]], "is_moving (telemetrixsteppermotor property)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.is_moving"]], "is_moving (telemetrixsteppermotorsystem property)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.is_moving"]], "is_okay (telemetrixsteppermotor property)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.is_okay"]], "move_by() (telemetrixsteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_by"]], "move_by() (telemetrixsteppermotorsystem method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.move_by"]], "move_to() (telemetrixsteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_to"]], "move_to() (telemetrixsteppermotorsystem method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.move_to"]], "position (telemetrixsteppermotor property)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.position"]], "revs_to_cm() (telemetrixsteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.revs_to_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_absolute_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_target_position_cm"]], "wait_for_move() (telemetrixsteppermotor method)": [[34, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.wait_for_move"]], "cc_hardware": [[35, "module-cc_hardware"]], "calibrate() (in module cc_hardware.tools.calibration)": [[36, "cc_hardware.tools.calibration.calibrate"]], "cc_hardware.tools.calibration": [[36, "module-cc_hardware.tools.calibration"]], "tmf8828_calibrate() (in module cc_hardware.tools.calibration)": [[36, "cc_hardware.tools.calibration.tmf8828_calibrate"]], "cc_hardware.tools.camera_viewer": [[37, "module-cc_hardware.tools.camera_viewer"]], "dashboard (class in cc_hardware.tools.dashboard.dashboard)": [[38, "cc_hardware.tools.dashboard.dashboard.Dashboard"]], "dashboardconfig (class in cc_hardware.tools.dashboard.dashboard)": [[38, "cc_hardware.tools.dashboard.dashboard.DashboardConfig"]], "cc_hardware.tools.dashboard.dashboard": [[38, "module-cc_hardware.tools.dashboard.dashboard"]], "run() (dashboard method)": [[38, "cc_hardware.tools.dashboard.dashboard.Dashboard.run"], [39, "cc_hardware.tools.dashboard.Dashboard.run"]], "setup() (dashboard method)": [[38, "cc_hardware.tools.dashboard.dashboard.Dashboard.setup"], [39, "cc_hardware.tools.dashboard.Dashboard.setup"]], "update() (dashboard method)": [[38, "cc_hardware.tools.dashboard.dashboard.Dashboard.update"], [39, "cc_hardware.tools.dashboard.Dashboard.update"]], "dashboard (class in cc_hardware.tools.dashboard)": [[39, "cc_hardware.tools.dashboard.Dashboard"]], "dashboardconfig (class in cc_hardware.tools.dashboard)": [[39, "cc_hardware.tools.dashboard.DashboardConfig"]], "spaddashboard (class in cc_hardware.tools.dashboard)": [[39, "cc_hardware.tools.dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard)": [[39, "cc_hardware.tools.dashboard.SPADDashboardConfig"]], "cc_hardware.tools.dashboard": [[39, "module-cc_hardware.tools.dashboard"]], "max_bin (spaddashboard property)": [[39, "cc_hardware.tools.dashboard.SPADDashboard.max_bin"], [44, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.max_bin"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.max_bin"]], "min_bin (spaddashboard property)": [[39, "cc_hardware.tools.dashboard.SPADDashboard.min_bin"], [44, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.min_bin"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.min_bin"]], "run() (spaddashboard method)": [[39, "cc_hardware.tools.dashboard.SPADDashboard.run"], [44, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.run"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.run"]], "sensor (spaddashboard property)": [[39, "cc_hardware.tools.dashboard.SPADDashboard.sensor"], [44, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.sensor"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.sensor"]], "setup() (spaddashboard method)": [[39, "cc_hardware.tools.dashboard.SPADDashboard.setup"], [44, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.setup"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.setup"]], "update() (spaddashboard method)": [[39, "cc_hardware.tools.dashboard.SPADDashboard.update"], [44, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.update"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.update"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[40, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"]], "motioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard"]], "motioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[41, "module-cc_hardware.tools.dashboard.mocap_dashboard"]], "run() (motioncapturedashboard method)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.run"], [42, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.run"]], "sensor (motioncapturedashboard property)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.sensor"], [42, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.sensor"]], "setup() (motioncapturedashboard method)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.setup"], [42, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.setup"]], "update() (motioncapturedashboard method)": [[41, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.update"], [42, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.update"]], "motioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard)": [[42, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard"]], "motioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard)": [[42, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[42, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"]], "dashboardwindow (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow"]], "pyqtgraphmotioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard"]], "pyqtgraphmotioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[43, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"]], "close() (pyqtgraphmotioncapturedashboard method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.close"]], "is_okay (pyqtgraphmotioncapturedashboard property)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.is_okay"]], "keypressevent() (dashboardwindow method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow.keyPressEvent"], [45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.keyPressEvent"]], "run() (pyqtgraphmotioncapturedashboard method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.run"]], "sensor (pyqtgraphmotioncapturedashboard property)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.sensor"]], "setup() (pyqtgraphmotioncapturedashboard method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.setup"]], "update() (pyqtgraphmotioncapturedashboard method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.update"]], "dummyspaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard)": [[44, "cc_hardware.tools.dashboard.spad_dashboard.DummySPADDashboard"]], "dummyspaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard)": [[44, "cc_hardware.tools.dashboard.spad_dashboard.DummySPADDashboardConfig"]], "spaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard)": [[44, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard)": [[44, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard": [[44, "module-cc_hardware.tools.dashboard.spad_dashboard"]], "max_bin (dummyspaddashboard property)": [[44, "cc_hardware.tools.dashboard.spad_dashboard.DummySPADDashboard.max_bin"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.max_bin"]], "min_bin (dummyspaddashboard property)": [[44, "cc_hardware.tools.dashboard.spad_dashboard.DummySPADDashboard.min_bin"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.min_bin"]], "run() (dummyspaddashboard method)": [[44, "cc_hardware.tools.dashboard.spad_dashboard.DummySPADDashboard.run"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.run"]], "sensor (dummyspaddashboard property)": [[44, "cc_hardware.tools.dashboard.spad_dashboard.DummySPADDashboard.sensor"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.sensor"]], "setup() (dummyspaddashboard method)": [[44, "cc_hardware.tools.dashboard.spad_dashboard.DummySPADDashboard.setup"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.setup"]], "update() (dummyspaddashboard method)": [[44, "cc_hardware.tools.dashboard.spad_dashboard.DummySPADDashboard.update"], [46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard.update"]], "dashboardwindow (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow"]], "pyqtgraphdashboard (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard"]], "pyqtgraphdashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[45, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"]], "enable_depth_view() (dashboardwindow method)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.enable_depth_view"]], "enable_point_cloud_view() (dashboardwindow method)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.enable_point_cloud_view"]], "init_ui() (dashboardwindow method)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.init_ui"]], "max_bin (pyqtgraphdashboard property)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.max_bin"]], "min_bin (pyqtgraphdashboard property)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.min_bin"]], "run() (pyqtgraphdashboard method)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.run"]], "sensor (pyqtgraphdashboard property)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.sensor"]], "setup() (pyqtgraphdashboard method)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.setup"]], "update() (pyqtgraphdashboard method)": [[45, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.update"]], "dummyspaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboard"]], "dummyspaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.DummySPADDashboardConfig"]], "spaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[46, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[46, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"]], "cc_hardware.tools.flash": [[47, "module-cc_hardware.tools.flash"]], "registry (class in cc_hardware.tools)": [[48, "cc_hardware.tools.Registry"]], "cc_hardware.tools": [[48, "module-cc_hardware.tools"]], "create_from_registry() (registry class method)": [[48, "cc_hardware.tools.Registry.create_from_registry"], [52, "cc_hardware.utils.Registry.create_from_registry"], [64, "cc_hardware.utils.registry.Registry.create_from_registry"]], "register() (registry class method)": [[48, "cc_hardware.tools.Registry.register"], [52, "cc_hardware.utils.Registry.register"], [64, "cc_hardware.utils.registry.Registry.register"]], "registered() (registry method)": [[48, "cc_hardware.tools.Registry.registered"], [52, "cc_hardware.utils.Registry.registered"], [64, "cc_hardware.utils.registry.Registry.registered"]], "registry() (registry method)": [[48, "cc_hardware.tools.Registry.registry"], [52, "cc_hardware.utils.Registry.registry"], [64, "cc_hardware.utils.registry.Registry.registry"]], "logbufferhandler (class in cc_hardware.tools.jogger)": [[49, "cc_hardware.tools.jogger.LogBufferHandler"]], "outputcapture (class in cc_hardware.tools.jogger)": [[49, "cc_hardware.tools.jogger.OutputCapture"]], "__repr__() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.__repr__"]], "acquire() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.acquire"]], "addfilter() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.addFilter"]], "cc_hardware.tools.jogger": [[49, "module-cc_hardware.tools.jogger"]], "close() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.close"]], "createlock() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.createLock"]], "emit() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.emit"]], "filter() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.filter"]], "flush() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.flush"]], "format() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.format"]], "handle() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.handle"]], "handleerror() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.handleError"]], "release() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.release"]], "removefilter() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.removeFilter"]], "setformatter() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.setFormatter"]], "setlevel() (logbufferhandler method)": [[49, "cc_hardware.tools.jogger.LogBufferHandler.setLevel"]], "c (in module cc_hardware.utils.constants)": [[50, "cc_hardware.utils.constants.C"]], "torch_device (in module cc_hardware.utils.constants)": [[50, "cc_hardware.utils.constants.TORCH_DEVICE"]], "cc_hardware.utils.constants": [[50, "module-cc_hardware.utils.constants"]], "pklhandler (class in cc_hardware.utils.file_handlers)": [[51, "cc_hardware.utils.file_handlers.PklHandler"]], "pklreader (class in cc_hardware.utils.file_handlers)": [[51, "cc_hardware.utils.file_handlers.PklReader"]], "videowriter (class in cc_hardware.utils.file_handlers)": [[51, "cc_hardware.utils.file_handlers.VideoWriter"]], "__del__() (videowriter method)": [[51, "cc_hardware.utils.file_handlers.VideoWriter.__del__"]], "__iter__() (pklhandler method)": [[51, "cc_hardware.utils.file_handlers.PklHandler.__iter__"]], "__iter__() (pklreader method)": [[51, "cc_hardware.utils.file_handlers.PklReader.__iter__"]], "__len__() (pklhandler method)": [[51, "cc_hardware.utils.file_handlers.PklHandler.__len__"]], "__len__() (pklreader method)": [[51, "cc_hardware.utils.file_handlers.PklReader.__len__"]], "append() (pklhandler method)": [[51, "cc_hardware.utils.file_handlers.PklHandler.append"]], "append() (pklreader method)": [[51, "cc_hardware.utils.file_handlers.PklReader.append"]], "append() (videowriter method)": [[51, "cc_hardware.utils.file_handlers.VideoWriter.append"]], "cc_hardware.utils.file_handlers": [[51, "module-cc_hardware.utils.file_handlers"]], "close() (videowriter method)": [[51, "cc_hardware.utils.file_handlers.VideoWriter.close"]], "load() (pklhandler method)": [[51, "cc_hardware.utils.file_handlers.PklHandler.load"]], "load() (pklreader method)": [[51, "cc_hardware.utils.file_handlers.PklReader.load"]], "load_all() (pklhandler static method)": [[51, "cc_hardware.utils.file_handlers.PklHandler.load_all"]], "load_all() (pklreader static method)": [[51, "cc_hardware.utils.file_handlers.PklReader.load_all"]], "update_index() (pklhandler method)": [[51, "cc_hardware.utils.file_handlers.PklHandler.update_index"]], "update_index() (pklreader method)": [[51, "cc_hardware.utils.file_handlers.PklReader.update_index"]], "write() (pklhandler method)": [[51, "cc_hardware.utils.file_handlers.PklHandler.write"]], "write() (pklreader method)": [[51, "cc_hardware.utils.file_handlers.PklReader.write"]], "component (class in cc_hardware.utils)": [[52, "cc_hardware.utils.Component"]], "config (class in cc_hardware.utils)": [[52, "cc_hardware.utils.Config"]], "manager (class in cc_hardware.utils)": [[52, "cc_hardware.utils.Manager"]], "registry (class in cc_hardware.utils)": [[52, "cc_hardware.utils.Registry"]], "threadedcomponent (class in cc_hardware.utils)": [[52, "cc_hardware.utils.ThreadedComponent"]], "__del__() (component method)": [[52, "cc_hardware.utils.Component.__del__"], [54, "cc_hardware.utils.manager.Component.__del__"]], "__del__() (threadedcomponent method)": [[52, "cc_hardware.utils.ThreadedComponent.__del__"], [54, "cc_hardware.utils.manager.ThreadedComponent.__del__"]], "__enter__() (manager method)": [[52, "cc_hardware.utils.Manager.__enter__"], [54, "cc_hardware.utils.manager.Manager.__enter__"]], "__exit__() (manager method)": [[52, "cc_hardware.utils.Manager.__exit__"], [54, "cc_hardware.utils.manager.Manager.__exit__"]], "__getstate__() (config method)": [[52, "cc_hardware.utils.Config.__getstate__"], [54, "cc_hardware.utils.manager.Config.__getstate__"]], "__post_init__() (config method)": [[52, "cc_hardware.utils.Config.__post_init__"], [54, "cc_hardware.utils.manager.Config.__post_init__"]], "__setattr__() (threadedcomponent method)": [[52, "cc_hardware.utils.ThreadedComponent.__setattr__"], [54, "cc_hardware.utils.manager.ThreadedComponent.__setattr__"]], "__setstate__() (config method)": [[52, "cc_hardware.utils.Config.__setstate__"], [54, "cc_hardware.utils.manager.Config.__setstate__"]], "__str__() (config method)": [[52, "cc_hardware.utils.Config.__str__"], [54, "cc_hardware.utils.manager.Config.__str__"]], "add() (manager method)": [[52, "cc_hardware.utils.Manager.add"], [54, "cc_hardware.utils.manager.Manager.add"]], "cc_hardware.utils": [[52, "module-cc_hardware.utils"]], "close() (component method)": [[52, "cc_hardware.utils.Component.close"], [54, "cc_hardware.utils.manager.Component.close"]], "close() (manager method)": [[52, "cc_hardware.utils.Manager.close"], [54, "cc_hardware.utils.manager.Manager.close"]], "close() (threadedcomponent method)": [[52, "cc_hardware.utils.ThreadedComponent.close"], [54, "cc_hardware.utils.manager.ThreadedComponent.close"]], "components (manager property)": [[52, "cc_hardware.utils.Manager.components"], [54, "cc_hardware.utils.manager.Manager.components"]], "compose() (config class method)": [[52, "cc_hardware.utils.Config.compose"], [54, "cc_hardware.utils.manager.Config.compose"]], "config (component property)": [[52, "cc_hardware.utils.Component.config"], [54, "cc_hardware.utils.manager.Component.config"]], "config (config attribute)": [[52, "cc_hardware.utils.Config.config"], [54, "cc_hardware.utils.manager.Config.config"]], "config (threadedcomponent property)": [[52, "cc_hardware.utils.ThreadedComponent.config"], [54, "cc_hardware.utils.manager.ThreadedComponent.config"]], "copy() (config method)": [[52, "cc_hardware.utils.Config.copy"], [54, "cc_hardware.utils.manager.Config.copy"]], "create() (config class method)": [[52, "cc_hardware.utils.Config.create"], [54, "cc_hardware.utils.manager.Config.create"]], "create_from_config() (component class method)": [[52, "cc_hardware.utils.Component.create_from_config"], [54, "cc_hardware.utils.manager.Component.create_from_config"]], "create_from_config() (threadedcomponent class method)": [[52, "cc_hardware.utils.ThreadedComponent.create_from_config"], [54, "cc_hardware.utils.manager.ThreadedComponent.create_from_config"]], "create_from_registry() (component class method)": [[52, "cc_hardware.utils.Component.create_from_registry"], [54, "cc_hardware.utils.manager.Component.create_from_registry"]], "create_from_registry() (config class method)": [[52, "cc_hardware.utils.Config.create_from_registry"], [54, "cc_hardware.utils.manager.Config.create_from_registry"]], "create_from_registry() (threadedcomponent class method)": [[52, "cc_hardware.utils.ThreadedComponent.create_from_registry"], [54, "cc_hardware.utils.manager.ThreadedComponent.create_from_registry"]], "custom (config attribute)": [[52, "cc_hardware.utils.Config.custom"], [54, "cc_hardware.utils.manager.Config.custom"]], "instantiate() (config class method)": [[52, "cc_hardware.utils.Config.instantiate"], [54, "cc_hardware.utils.manager.Config.instantiate"]], "is_looping (manager property)": [[52, "cc_hardware.utils.Manager.is_looping"], [54, "cc_hardware.utils.manager.Manager.is_looping"]], "is_okay (component property)": [[52, "cc_hardware.utils.Component.is_okay"], [54, "cc_hardware.utils.manager.Component.is_okay"]], "is_okay (manager property)": [[52, "cc_hardware.utils.Manager.is_okay"], [54, "cc_hardware.utils.manager.Manager.is_okay"]], "is_okay (threadedcomponent property)": [[52, "cc_hardware.utils.ThreadedComponent.is_okay"], [54, "cc_hardware.utils.manager.ThreadedComponent.is_okay"]], "load() (config class method)": [[52, "cc_hardware.utils.Config.load"], [54, "cc_hardware.utils.manager.Config.load"]], "merge_with() (config method)": [[52, "cc_hardware.utils.Config.merge_with"], [54, "cc_hardware.utils.manager.Config.merge_with"]], "register() (component class method)": [[52, "cc_hardware.utils.Component.register"], [54, "cc_hardware.utils.manager.Component.register"]], "register() (config class method)": [[52, "cc_hardware.utils.Config.register"], [54, "cc_hardware.utils.manager.Config.register"]], "register() (threadedcomponent class method)": [[52, "cc_hardware.utils.ThreadedComponent.register"], [54, "cc_hardware.utils.manager.ThreadedComponent.register"]], "register() (in module cc_hardware.utils)": [[52, "cc_hardware.utils.register"]], "registered() (component method)": [[52, "cc_hardware.utils.Component.registered"], [54, "cc_hardware.utils.manager.Component.registered"]], "registered() (config method)": [[52, "cc_hardware.utils.Config.registered"], [54, "cc_hardware.utils.manager.Config.registered"]], "registered() (threadedcomponent method)": [[52, "cc_hardware.utils.ThreadedComponent.registered"], [54, "cc_hardware.utils.manager.ThreadedComponent.registered"]], "registry() (component method)": [[52, "cc_hardware.utils.Component.registry"], [54, "cc_hardware.utils.manager.Component.registry"]], "registry() (config method)": [[52, "cc_hardware.utils.Config.registry"], [54, "cc_hardware.utils.manager.Config.registry"]], "registry() (threadedcomponent method)": [[52, "cc_hardware.utils.ThreadedComponent.registry"], [54, "cc_hardware.utils.manager.ThreadedComponent.registry"]], "run() (manager method)": [[52, "cc_hardware.utils.Manager.run"], [54, "cc_hardware.utils.manager.Manager.run"]], "save() (config method)": [[52, "cc_hardware.utils.Config.save"], [54, "cc_hardware.utils.manager.Config.save"]], "set_iter() (manager method)": [[52, "cc_hardware.utils.Manager.set_iter"], [54, "cc_hardware.utils.manager.Manager.set_iter"]], "to_dict() (config method)": [[52, "cc_hardware.utils.Config.to_dict"], [54, "cc_hardware.utils.manager.Config.to_dict"]], "to_yaml() (config method)": [[52, "cc_hardware.utils.Config.to_yaml"], [54, "cc_hardware.utils.manager.Config.to_yaml"]], "filehandler (class in cc_hardware.utils.logger)": [[53, "cc_hardware.utils.logger.FileHandler"]], "loggermaxlevelfilter (class in cc_hardware.utils.logger)": [[53, "cc_hardware.utils.logger.LoggerMaxLevelFilter"]], "tqdmstreamhandler (class in cc_hardware.utils.logger)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler"]], "__repr__() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.__repr__"]], "__repr__() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.__repr__"]], "acquire() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.acquire"]], "acquire() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.acquire"]], "addfilter() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.addFilter"]], "addfilter() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.addFilter"]], "cc_hardware.utils.logger": [[53, "module-cc_hardware.utils.logger"]], "close() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.close"]], "close() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.close"]], "createlock() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.createLock"]], "createlock() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.createLock"]], "emit() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.emit"]], "emit() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.emit"]], "filter() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.filter"]], "filter() (loggermaxlevelfilter method)": [[53, "cc_hardware.utils.logger.LoggerMaxLevelFilter.filter"]], "filter() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.filter"]], "flush() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.flush"]], "flush() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.flush"]], "format() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.format"]], "format() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.format"]], "handle() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.handle"]], "handle() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.handle"]], "handleerror() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.handleError"]], "handleerror() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.handleError"]], "release() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.release"]], "release() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.release"]], "removefilter() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.removeFilter"]], "removefilter() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.removeFilter"]], "setformatter() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.setFormatter"]], "setformatter() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.setFormatter"]], "setlevel() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.setLevel"]], "setlevel() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.setLevel"]], "setstream() (filehandler method)": [[53, "cc_hardware.utils.logger.FileHandler.setStream"]], "setstream() (tqdmstreamhandler method)": [[53, "cc_hardware.utils.logger.TqdmStreamHandler.setStream"]], "component (class in cc_hardware.utils.manager)": [[54, "cc_hardware.utils.manager.Component"]], "config (class in cc_hardware.utils.manager)": [[54, "cc_hardware.utils.manager.Config"]], "manager (class in cc_hardware.utils.manager)": [[54, "cc_hardware.utils.manager.Manager"]], "threadedcomponent (class in cc_hardware.utils.manager)": [[54, "cc_hardware.utils.manager.ThreadedComponent"]], "cc_hardware.utils.manager": [[54, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.matplotlib": [[55, "module-cc_hardware.utils.matplotlib"]], "set_matplotlib_style() (in module cc_hardware.utils.matplotlib)": [[55, "cc_hardware.utils.matplotlib.set_matplotlib_style"]], "call_async() (in module cc_hardware.utils.misc.asyncio_utils)": [[56, "cc_hardware.utils.misc.asyncio_utils.call_async"]], "call_async_gather() (in module cc_hardware.utils.misc.asyncio_utils)": [[56, "cc_hardware.utils.misc.asyncio_utils.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.misc.asyncio_utils)": [[56, "cc_hardware.utils.misc.asyncio_utils.call_async_value"]], "cc_hardware.utils.misc.asyncio_utils": [[56, "module-cc_hardware.utils.misc.asyncio_utils"]], "cc_hardware.utils.misc.atomic": [[57, "module-cc_hardware.utils.misc.atomic"]], "blockingdeque (class in cc_hardware.utils.misc.blocking_deque)": [[58, "cc_hardware.utils.misc.blocking_deque.BlockingDeque"]], "__getattr__() (blockingdeque method)": [[58, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__getattr__"], [59, "cc_hardware.utils.misc.BlockingDeque.__getattr__"]], "__getitem__() (blockingdeque method)": [[58, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__getitem__"], [59, "cc_hardware.utils.misc.BlockingDeque.__getitem__"]], "__len__() (blockingdeque method)": [[58, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__len__"], [59, "cc_hardware.utils.misc.BlockingDeque.__len__"]], "__repr__() (blockingdeque method)": [[58, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__repr__"], [59, "cc_hardware.utils.misc.BlockingDeque.__repr__"]], "append() (blockingdeque method)": [[58, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.append"], [59, "cc_hardware.utils.misc.BlockingDeque.append"]], "cc_hardware.utils.misc.blocking_deque": [[58, "module-cc_hardware.utils.misc.blocking_deque"]], "blockingdeque (class in cc_hardware.utils.misc)": [[59, "cc_hardware.utils.misc.BlockingDeque"]], "singletonabcmeta (class in cc_hardware.utils.misc)": [[59, "cc_hardware.utils.misc.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.misc)": [[59, "cc_hardware.utils.misc.SingletonMeta"]], "__call__() (singletonabcmeta method)": [[59, "cc_hardware.utils.misc.SingletonABCMeta.__call__"], [63, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__call__"]], "__call__() (singletonmeta method)": [[59, "cc_hardware.utils.misc.SingletonMeta.__call__"], [63, "cc_hardware.utils.misc.singleton.SingletonMeta.__call__"]], "__instancecheck__() (singletonabcmeta method)": [[59, "cc_hardware.utils.misc.SingletonABCMeta.__instancecheck__"], [63, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__instancecheck__"]], "__subclasscheck__() (singletonabcmeta method)": [[59, "cc_hardware.utils.misc.SingletonABCMeta.__subclasscheck__"], [63, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__subclasscheck__"]], "arduino_upload() (in module cc_hardware.utils.misc)": [[59, "cc_hardware.utils.misc.arduino_upload"]], "call_async() (in module cc_hardware.utils.misc)": [[59, "cc_hardware.utils.misc.call_async"]], "call_async_gather() (in module cc_hardware.utils.misc)": [[59, "cc_hardware.utils.misc.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.misc)": [[59, "cc_hardware.utils.misc.call_async_value"]], "cc_hardware.utils.misc": [[59, "module-cc_hardware.utils.misc"]], "find_device_by_label() (in module cc_hardware.utils.misc)": [[59, "cc_hardware.utils.misc.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.misc)": [[59, "cc_hardware.utils.misc.find_ports"]], "get_object() (in module cc_hardware.utils.misc)": [[59, "cc_hardware.utils.misc.get_object"]], "instance() (singletonabcmeta class method)": [[59, "cc_hardware.utils.misc.SingletonABCMeta.instance"], [63, "cc_hardware.utils.misc.singleton.SingletonABCMeta.instance"]], "instance() (singletonmeta class method)": [[59, "cc_hardware.utils.misc.SingletonMeta.instance"], [63, "cc_hardware.utils.misc.singleton.SingletonMeta.instance"]], "register() (singletonabcmeta method)": [[59, "cc_hardware.utils.misc.SingletonABCMeta.register"], [63, "cc_hardware.utils.misc.singleton.SingletonABCMeta.register"]], "cc_hardware.utils.misc.misc": [[60, "module-cc_hardware.utils.misc.misc"]], "get_object() (in module cc_hardware.utils.misc.misc)": [[60, "cc_hardware.utils.misc.misc.get_object"]], "cc_hardware.utils.misc.multiprocessing_deque": [[61, "module-cc_hardware.utils.misc.multiprocessing_deque"]], "arduino_upload() (in module cc_hardware.utils.misc.serial_utils)": [[62, "cc_hardware.utils.misc.serial_utils.arduino_upload"]], "cc_hardware.utils.misc.serial_utils": [[62, "module-cc_hardware.utils.misc.serial_utils"]], "find_device_by_label() (in module cc_hardware.utils.misc.serial_utils)": [[62, "cc_hardware.utils.misc.serial_utils.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.misc.serial_utils)": [[62, "cc_hardware.utils.misc.serial_utils.find_ports"]], "singletonabcmeta (class in cc_hardware.utils.misc.singleton)": [[63, "cc_hardware.utils.misc.singleton.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.misc.singleton)": [[63, "cc_hardware.utils.misc.singleton.SingletonMeta"]], "cc_hardware.utils.misc.singleton": [[63, "module-cc_hardware.utils.misc.singleton"]], "registry (class in cc_hardware.utils.registry)": [[64, "cc_hardware.utils.registry.Registry"]], "cc_hardware.utils.registry": [[64, "module-cc_hardware.utils.registry"]], "register() (in module cc_hardware.utils.registry)": [[64, "cc_hardware.utils.registry.register"]], "boolsetting (class in cc_hardware.utils.setting)": [[65, "cc_hardware.utils.setting.BoolSetting"]], "optionsetting (class in cc_hardware.utils.setting)": [[65, "cc_hardware.utils.setting.OptionSetting"]], "rangesetting (class in cc_hardware.utils.setting)": [[65, "cc_hardware.utils.setting.RangeSetting"]], "setting (class in cc_hardware.utils.setting)": [[65, "cc_hardware.utils.setting.Setting"]], "__getstate__() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.__getstate__"]], "__getstate__() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.__getstate__"]], "__getstate__() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.__getstate__"]], "__getstate__() (setting method)": [[65, "cc_hardware.utils.setting.Setting.__getstate__"]], "__post_init__() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.__post_init__"]], "__post_init__() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.__post_init__"]], "__post_init__() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.__post_init__"]], "__post_init__() (setting method)": [[65, "cc_hardware.utils.setting.Setting.__post_init__"]], "__setstate__() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.__setstate__"]], "__setstate__() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.__setstate__"]], "__setstate__() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.__setstate__"]], "__setstate__() (setting method)": [[65, "cc_hardware.utils.setting.Setting.__setstate__"]], "__str__() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.__str__"]], "__str__() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.__str__"]], "__str__() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.__str__"]], "__str__() (setting method)": [[65, "cc_hardware.utils.setting.Setting.__str__"]], "cc_hardware.utils.setting": [[65, "module-cc_hardware.utils.setting"]], "compose() (boolsetting class method)": [[65, "cc_hardware.utils.setting.BoolSetting.compose"]], "compose() (optionsetting class method)": [[65, "cc_hardware.utils.setting.OptionSetting.compose"]], "compose() (rangesetting class method)": [[65, "cc_hardware.utils.setting.RangeSetting.compose"]], "compose() (setting class method)": [[65, "cc_hardware.utils.setting.Setting.compose"]], "config (boolsetting attribute)": [[65, "cc_hardware.utils.setting.BoolSetting.config"]], "config (optionsetting attribute)": [[65, "cc_hardware.utils.setting.OptionSetting.config"]], "config (rangesetting attribute)": [[65, "cc_hardware.utils.setting.RangeSetting.config"]], "config (setting attribute)": [[65, "cc_hardware.utils.setting.Setting.config"]], "copy() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.copy"]], "copy() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.copy"]], "copy() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.copy"]], "copy() (setting method)": [[65, "cc_hardware.utils.setting.Setting.copy"]], "create() (boolsetting class method)": [[65, "cc_hardware.utils.setting.BoolSetting.create"]], "create() (optionsetting class method)": [[65, "cc_hardware.utils.setting.OptionSetting.create"]], "create() (rangesetting class method)": [[65, "cc_hardware.utils.setting.RangeSetting.create"]], "create() (setting class method)": [[65, "cc_hardware.utils.setting.Setting.create"]], "create_from_registry() (boolsetting class method)": [[65, "cc_hardware.utils.setting.BoolSetting.create_from_registry"]], "create_from_registry() (optionsetting class method)": [[65, "cc_hardware.utils.setting.OptionSetting.create_from_registry"]], "create_from_registry() (rangesetting class method)": [[65, "cc_hardware.utils.setting.RangeSetting.create_from_registry"]], "create_from_registry() (setting class method)": [[65, "cc_hardware.utils.setting.Setting.create_from_registry"]], "custom (boolsetting attribute)": [[65, "cc_hardware.utils.setting.BoolSetting.custom"]], "custom (optionsetting attribute)": [[65, "cc_hardware.utils.setting.OptionSetting.custom"]], "custom (rangesetting attribute)": [[65, "cc_hardware.utils.setting.RangeSetting.custom"]], "custom (setting attribute)": [[65, "cc_hardware.utils.setting.Setting.custom"]], "default_factory() (boolsetting class method)": [[65, "cc_hardware.utils.setting.BoolSetting.default_factory"]], "default_factory() (optionsetting class method)": [[65, "cc_hardware.utils.setting.OptionSetting.default_factory"]], "default_factory() (rangesetting class method)": [[65, "cc_hardware.utils.setting.RangeSetting.default_factory"]], "default_factory() (setting class method)": [[65, "cc_hardware.utils.setting.Setting.default_factory"]], "from_enum() (optionsetting class method)": [[65, "cc_hardware.utils.setting.OptionSetting.from_enum"]], "instantiate() (boolsetting class method)": [[65, "cc_hardware.utils.setting.BoolSetting.instantiate"]], "instantiate() (optionsetting class method)": [[65, "cc_hardware.utils.setting.OptionSetting.instantiate"]], "instantiate() (rangesetting class method)": [[65, "cc_hardware.utils.setting.RangeSetting.instantiate"]], "instantiate() (setting class method)": [[65, "cc_hardware.utils.setting.Setting.instantiate"]], "load() (boolsetting class method)": [[65, "cc_hardware.utils.setting.BoolSetting.load"]], "load() (optionsetting class method)": [[65, "cc_hardware.utils.setting.OptionSetting.load"]], "load() (rangesetting class method)": [[65, "cc_hardware.utils.setting.RangeSetting.load"]], "load() (setting class method)": [[65, "cc_hardware.utils.setting.Setting.load"]], "merge_with() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.merge_with"]], "merge_with() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.merge_with"]], "merge_with() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.merge_with"]], "merge_with() (setting method)": [[65, "cc_hardware.utils.setting.Setting.merge_with"]], "register() (boolsetting class method)": [[65, "cc_hardware.utils.setting.BoolSetting.register"]], "register() (optionsetting class method)": [[65, "cc_hardware.utils.setting.OptionSetting.register"]], "register() (rangesetting class method)": [[65, "cc_hardware.utils.setting.RangeSetting.register"]], "register() (setting class method)": [[65, "cc_hardware.utils.setting.Setting.register"]], "registered() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.registered"]], "registered() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.registered"]], "registered() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.registered"]], "registered() (setting method)": [[65, "cc_hardware.utils.setting.Setting.registered"]], "registry() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.registry"]], "registry() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.registry"]], "registry() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.registry"]], "registry() (setting method)": [[65, "cc_hardware.utils.setting.Setting.registry"]], "save() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.save"]], "save() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.save"]], "save() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.save"]], "save() (setting method)": [[65, "cc_hardware.utils.setting.Setting.save"]], "to_dict() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.to_dict"]], "to_dict() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.to_dict"]], "to_dict() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.to_dict"]], "to_dict() (setting method)": [[65, "cc_hardware.utils.setting.Setting.to_dict"]], "to_yaml() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.to_yaml"]], "to_yaml() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.to_yaml"]], "to_yaml() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.to_yaml"]], "to_yaml() (setting method)": [[65, "cc_hardware.utils.setting.Setting.to_yaml"]], "update() (boolsetting method)": [[65, "cc_hardware.utils.setting.BoolSetting.update"]], "update() (optionsetting method)": [[65, "cc_hardware.utils.setting.OptionSetting.update"]], "update() (rangesetting method)": [[65, "cc_hardware.utils.setting.RangeSetting.update"]], "cc_hardware.utils.transformations": [[66, "module-cc_hardware.utils.transformations"]]}})