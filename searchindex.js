Search.setIndex({"docnames": ["contributing", "examples/algo_nlos", "examples/camera_viewer", "examples/index", "examples/spad_dashboard", "examples/spad_gantry_capture", "examples/stepper_motor_controller", "index", "usage/api", "usage/api/cc_hardware/algos/algorithm/index", "usage/api/cc_hardware/algos/aruco/index", "usage/api/cc_hardware/algos/datasets/index", "usage/api/cc_hardware/algos/index", "usage/api/cc_hardware/algos/models/index", "usage/api/cc_hardware/drivers/cameras/camera/index", "usage/api/cc_hardware/drivers/cameras/flir/index", "usage/api/cc_hardware/drivers/cameras/index", "usage/api/cc_hardware/drivers/cameras/pkl/index", "usage/api/cc_hardware/drivers/cameras/realsense/index", "usage/api/cc_hardware/drivers/cameras/usb/index", "usage/api/cc_hardware/drivers/index", "usage/api/cc_hardware/drivers/mocap/index", "usage/api/cc_hardware/drivers/mocap/mocap/index", "usage/api/cc_hardware/drivers/mocap/vive/index", "usage/api/cc_hardware/drivers/safe_serial/index", "usage/api/cc_hardware/drivers/sensor/index", "usage/api/cc_hardware/drivers/spads/index", "usage/api/cc_hardware/drivers/spads/pkl/index", "usage/api/cc_hardware/drivers/spads/spad/index", "usage/api/cc_hardware/drivers/spads/spad_wrappers/index", "usage/api/cc_hardware/drivers/spads/tmf8828/index", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index", "usage/api/cc_hardware/drivers/stepper_motors/index", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index", "usage/api/cc_hardware/index", "usage/api/cc_hardware/tools/calibration/index", "usage/api/cc_hardware/tools/camera_viewer/index", "usage/api/cc_hardware/tools/dashboard/dashboard/index", "usage/api/cc_hardware/tools/dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/dash/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/mocap_dashboard/index", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/pyqtgraph/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/dash/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/matplotlib/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/pyqtgraph/index", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/spad_dashboard/index", "usage/api/cc_hardware/tools/flash/index", "usage/api/cc_hardware/tools/index", "usage/api/cc_hardware/tools/jogger/index", "usage/api/cc_hardware/utils/constants/index", "usage/api/cc_hardware/utils/file_handlers/index", "usage/api/cc_hardware/utils/index", "usage/api/cc_hardware/utils/logger/index", "usage/api/cc_hardware/utils/manager/index", "usage/api/cc_hardware/utils/matplotlib/index", "usage/api/cc_hardware/utils/misc/asyncio_utils/index", "usage/api/cc_hardware/utils/misc/blocking_deque/index", "usage/api/cc_hardware/utils/misc/index", "usage/api/cc_hardware/utils/misc/misc/index", "usage/api/cc_hardware/utils/misc/multiprocessing_deque/index", "usage/api/cc_hardware/utils/misc/serial_utils/index", "usage/api/cc_hardware/utils/misc/singleton/index", "usage/api/cc_hardware/utils/registry/index", "usage/api/cc_hardware/utils/setting/index", "usage/api/cc_hardware/utils/transformations/index", "usage/index"], "filenames": ["contributing.md", "examples/algo_nlos.md", "examples/camera_viewer.md", "examples/index.md", "examples/spad_dashboard.md", "examples/spad_gantry_capture.md", "examples/stepper_motor_controller.md", "index.md", "usage/api.md", "usage/api/cc_hardware/algos/algorithm/index.rst", "usage/api/cc_hardware/algos/aruco/index.rst", "usage/api/cc_hardware/algos/datasets/index.rst", "usage/api/cc_hardware/algos/index.rst", "usage/api/cc_hardware/algos/models/index.rst", "usage/api/cc_hardware/drivers/cameras/camera/index.rst", "usage/api/cc_hardware/drivers/cameras/flir/index.rst", "usage/api/cc_hardware/drivers/cameras/index.rst", "usage/api/cc_hardware/drivers/cameras/pkl/index.rst", "usage/api/cc_hardware/drivers/cameras/realsense/index.rst", "usage/api/cc_hardware/drivers/cameras/usb/index.rst", "usage/api/cc_hardware/drivers/index.rst", "usage/api/cc_hardware/drivers/mocap/index.rst", "usage/api/cc_hardware/drivers/mocap/mocap/index.rst", "usage/api/cc_hardware/drivers/mocap/vive/index.rst", "usage/api/cc_hardware/drivers/safe_serial/index.rst", "usage/api/cc_hardware/drivers/sensor/index.rst", "usage/api/cc_hardware/drivers/spads/index.rst", "usage/api/cc_hardware/drivers/spads/pkl/index.rst", "usage/api/cc_hardware/drivers/spads/spad/index.rst", "usage/api/cc_hardware/drivers/spads/spad_wrappers/index.rst", "usage/api/cc_hardware/drivers/spads/tmf8828/index.rst", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index.rst", "usage/api/cc_hardware/index.rst", "usage/api/cc_hardware/tools/calibration/index.rst", "usage/api/cc_hardware/tools/camera_viewer/index.rst", "usage/api/cc_hardware/tools/dashboard/dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/dash/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/mocap_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/mocap_dashboard/pyqtgraph/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/dash/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/matplotlib/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/pyqtgraph/index.rst", "usage/api/cc_hardware/tools/dashboard/spad_dashboard/spad_dashboard/index.rst", "usage/api/cc_hardware/tools/flash/index.rst", "usage/api/cc_hardware/tools/index.rst", "usage/api/cc_hardware/tools/jogger/index.rst", "usage/api/cc_hardware/utils/constants/index.rst", "usage/api/cc_hardware/utils/file_handlers/index.rst", "usage/api/cc_hardware/utils/index.rst", "usage/api/cc_hardware/utils/logger/index.rst", "usage/api/cc_hardware/utils/manager/index.rst", "usage/api/cc_hardware/utils/matplotlib/index.rst", "usage/api/cc_hardware/utils/misc/asyncio_utils/index.rst", "usage/api/cc_hardware/utils/misc/blocking_deque/index.rst", "usage/api/cc_hardware/utils/misc/index.rst", "usage/api/cc_hardware/utils/misc/misc/index.rst", "usage/api/cc_hardware/utils/misc/multiprocessing_deque/index.rst", "usage/api/cc_hardware/utils/misc/serial_utils/index.rst", "usage/api/cc_hardware/utils/misc/singleton/index.rst", "usage/api/cc_hardware/utils/registry/index.rst", "usage/api/cc_hardware/utils/setting/index.rst", "usage/api/cc_hardware/utils/transformations/index.rst", "usage/index.md"], "titles": ["Contributing", "&lt;no title&gt;", "&lt;no title&gt;", "Examples", "&lt;no title&gt;", "Stepper Gantry Collab", "Stepper Motor Controller", "Camera Culture Hardware Repo", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.aruco</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.camera</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.flir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.realsense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.usb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap.mocap</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.mocap.vive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.safe_serial</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.sensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.tmf8828</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.vl53l8ch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.kinesis_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_controller</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_motor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_system</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.telemetrix_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.camera_viewer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.dash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.dash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.matplotlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.flash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.jogger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.file_handlers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.matplotlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.asyncio_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.blocking_deque</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.multiprocessing_deque</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.serial_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.registry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.setting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.transformations</span></code>", "Reference"], "terms": {"repositori": [0, 7], "i": [0, 5, 6, 7, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 56, 57, 58, 59, 62, 63, 64, 67, 68, 69], "fairli": [0, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "easi": 0, "so": [0, 15, 54], "pleas": 0, "see": [0, 20, 30, 32, 36, 58], "below": 0, "instruct": [0, 15], "how": [0, 3, 5, 20, 30, 32, 36, 58], "actual": [0, 20, 25, 27, 54, 58], "make": [0, 57, 61, 62, 63], "thi": [0, 5, 7, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 48, 50, 51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 67, 68, 69, 70], "project": 0, "There": [0, 5, 51], "ar": [0, 5, 7, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 51, 54, 56, 57, 58, 59, 63, 66], "two": [0, 5, 11], "form": 0, "simpl": [0, 15, 18, 33, 46], "ad": [0, 20, 30, 32, 36, 54, 58], "content": 0, "within": [0, 7, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "doc": 0, "folder": 0, "all": [0, 7, 9, 11, 14, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 54, 56, 57, 58, 59, 61, 63, 66, 68, 69], "written": [0, 20, 24, 56, 58], "markdown": 0, "convert": [0, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "html": 0, "through": [0, 37], "myst_pars": 0, "sphinx": 0, "To": [0, 15], "well": [0, 14, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "you": [0, 5, 7, 14, 15, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 54, 57, 58, 59, 69], "want": [0, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 54, 57, 58, 59, 69], "packag": [0, 3, 15, 58], "symlink": 0, "A": [0, 9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 56, 57, 58, 59, 62, 63, 66, 67, 68, 69], "conda": 0, "virtualenv": 0, "add": [0, 5, 9, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 54, 57, 58, 59, 69], "isol": 0, "python": [0, 6, 15], "environ": [0, 57, 62, 63], "reduc": 0, "conflict": 0, "amongst": 0, "It": [0, 15, 18, 20, 24, 30, 31, 32, 33, 35, 41, 42, 56, 57, 58, 59, 67], "highli": 0, "recommend": 0, "us": [0, 3, 5, 7, 10, 11, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 57, 58, 59, 62, 63, 66, 67, 68, 69], "one": [0, 6, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 63, 67, 68, 69], "normal": 0, "git": [0, 7], "http": 0, "github": [0, 7], "com": [0, 7], "camera": [0, 5, 10, 20, 40, 59], "cultur": 0, "cc": [0, 7, 16, 21, 26, 31, 32, 57, 59], "hardwar": [0, 16, 21, 26, 27, 31, 32, 39, 52, 57, 59], "cd": [0, 7], "sinc": [0, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "organ": [0, 30], "monorepo": [0, 7], "need": [0, 15, 46, 57, 63, 67], "poetri": [0, 7], "The": [0, 5, 7, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 59, 62, 63, 66, 67, 68, 69], "develop": [0, 30], "mode": [0, 5, 30, 31, 39, 50, 58], "e": [0, 7, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "symbol": 0, "link": 0, "immedi": 0, "reflect": 0, "pip": [0, 7, 15], "action": 0, "automat": [0, 5, 7], "site": [0, 15], "page": 0, "host": 0, "static": [0, 56], "updat": [0, 5, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 69], "have": [0, 7, 20, 30, 32, 35, 36, 54, 58], "push": 0, "main": [0, 31, 41, 42, 43, 44, 45, 48, 51], "branch": 0, "onc": [0, 19], "rebuild": 0, "ensur": [0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 54, 56, 57, 58, 59, 62, 63, 67, 68], "error": [0, 9, 20, 24, 54, 58], "befor": [0, 20, 24, 33, 57, 58, 59], "do": [0, 15, 31, 54, 58], "mai": [0, 9, 15, 20, 21, 22, 26, 28, 32, 35, 54, 58], "get": [0, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 56, 57, 58, 59, 62, 63, 68, 69], "an": [0, 9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69], "email": 0, "from": [0, 5, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 56, 57, 58, 59, 62, 63, 64, 67, 68, 69], "someth": [0, 20, 24], "bad": 0, "happen": [0, 20, 24], "tag": 0, "exampl": [0, 5, 6, 15, 20, 23, 30, 32, 34, 36, 51, 53, 56, 57, 58, 59, 67, 68], "v3": 0, "0": [0, 5, 11, 15, 19, 27, 33, 55, 57, 59], "1": [0, 10, 11, 14, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 28, 30, 31, 32, 33, 36, 41, 42, 43, 56], "follow": [0, 7, 15], "pkg": [0, 7], "algo": [0, 7, 8], "contain": [0, 7, 9, 10, 11, 14, 15, 16, 17, 20, 30, 37, 59], "algorithm": [0, 7, 10, 12], "process": [0, 7, 10, 11, 23, 25, 30, 31, 41, 42, 54, 58], "data": [0, 5, 7, 11, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 59, 60, 69], "driver": [0, 5, 7, 8, 42, 43, 44, 45, 46, 48, 51], "interfac": [0, 7, 9, 15, 18, 20, 24, 30, 31, 32, 33, 35, 37, 50, 53, 54], "util": [0, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 46, 47, 48, 49, 50, 53], "function": [0, 7, 10, 29, 31, 41, 42, 56, 59, 67], "class": [0, 7, 64, 66, 70], "tool": [0, 5, 7, 8, 38], "work": [0, 7, 66, 70], "calibr": [0, 7, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 38, 53], "visual": [0, 7, 46, 47, 49, 50, 51, 60], "script": [0, 7, 30, 31, 57, 63, 66], "addit": [0, 9, 14, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 63, 66, 67, 69], "licens": 0, "pyproject": [0, 7], "toml": [0, 7], "descript": 0, "If": [0, 9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 63, 66, 68, 69], "plan": 0, "visit": 0, "correspond": [0, 11, 23, 30], "under": 0, "each": [0, 7, 9, 14, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 56, 57, 59, 69], "should": [0, 7, 9, 20, 23, 25, 32, 34, 35, 41, 42, 43, 44, 45, 46, 48, 51, 54, 56, 58, 69], "readm": [0, 7], "md": [0, 7], "cc_hardwar": [0, 3, 5, 7, 8], "__init__": [0, 7, 67, 68], "py": [0, 7], "googl": 0, "": [0, 5, 9, 14, 15, 16, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 55, 57, 58, 59, 69], "style": [0, 49, 50, 60], "These": [0, 20, 25, 37], "also": [0, 20, 24, 32, 34, 35, 37, 53, 56, 57, 58, 63, 67, 68], "gener": [0, 5, 11, 19, 69], "tutori": 0, "fix": [0, 50], "exist": [0, 5, 29, 56, 57, 58, 63, 67], "_static": 0, "persist": 0, "css": 0, "custom": [0, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 50, 51, 54, 57, 58, 59, 69], "differ": [0, 20, 24, 30, 33, 51, 58, 69], "default": [0, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 54, 56, 57, 58, 59, 60, 69], "furo": 0, "theme": 0, "imag": [0, 10, 15, 17, 18], "favicon": 0, "etc": 0, "usag": [0, 57, 63, 67], "refer": [0, 20, 26, 28, 32, 33, 35, 37], "guid": 0, "eyesofcambrian": 0, "conf": 0, "set": [0, 5, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 57, 58, 59, 60], "relat": [0, 20, 26, 28], "extens": 0, "index": [0, 11, 19, 27, 34, 56, 57, 61, 62, 63], "home": [0, 20, 32, 33, 35, 37], "try": 0, "maintain": [0, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "describ": [0, 7], "abov": 0, "tab": 0, "onli": [0, 6, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 63, 66, 67, 68, 69], "singl": [0, 19, 20, 24, 26, 28, 30, 36, 56, 57, 63, 67], "background": [0, 15, 18, 19, 30, 31], "ha": [0, 9, 15, 20, 30, 32, 33, 35, 54, 58, 69], "multipl": [0, 7, 20, 24, 30, 31, 32, 33, 36, 37, 56, 57, 61, 63], "creat": [0, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 58, 59, 63, 67, 68, 69], "titl": [0, 69], "same": [0, 11, 20, 32, 35, 57, 63, 67], "insert": 0, "name": [0, 9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 57, 58, 59, 62, 63, 66, 68, 69], "without": [0, 11, 23, 27, 56], "tabl": 0, "insid": 0, "restructuredtext": 0, "which": [0, 5, 20, 32, 33, 35, 36, 37, 54, 57, 58, 59], "both": [0, 10, 18, 34, 53, 57, 67, 68], "advantag": 0, "disadvantag": 0, "allow": [0, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 50, 51, 54, 57, 58, 59, 63, 67, 69], "u": 0, "understand": 0, "languag": 0, "compil": 0, "down": [0, 20, 32, 35, 37], "featur": [0, 33, 51], "librari": [0, 15, 18, 33, 37], "websit": 0, "wai": [0, 7, 69], "easiest": 0, "makefil": [0, 31], "bat": 0, "provid": [0, 3, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 47, 49, 50, 51, 53, 56, 57, 58, 61, 62, 67, 68, 69, 70], "directli": [0, 19, 34, 37, 53, 57, 68], "necessari": [0, 9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 63, 67, 68, 69], "depend": [0, 20, 21, 22, 26, 28, 32, 35, 54, 58], "run": [0, 5, 7, 9, 10, 15, 19, 30, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 59], "command": [0, 7, 15, 20, 32, 35, 53], "dev": 0, "clean": [0, 46], "view": [0, 40, 46], "go": [0, 15], "browser": [0, 47], "open": [0, 10, 17, 46, 58], "locat": [0, 20, 32, 35], "autobuild": 0, "extrem": 0, "when": [0, 7, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 54, 56, 57, 58, 59, 62, 69], "made": [0, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 30], "pypi": 0, "tl": 0, "dr": 0, "we": [3, 7, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "few": [3, 24], "stepper": [3, 20, 25, 32, 33, 34, 35, 36, 37], "gantri": [3, 6, 20, 32, 36, 54], "collab": 3, "motor": [3, 20, 25, 32, 33, 34, 35, 36, 37], "control": [3, 5, 20, 32, 33, 34, 35, 36, 37, 54], "demo": 5, "show": [5, 10], "can": [5, 7, 9, 11, 15, 19, 20, 24, 26, 28, 30, 32, 34, 35, 36, 37, 46, 51, 53, 54, 57, 58, 59, 68], "along": 5, "spad": [5, 20, 21, 22, 42, 47, 48, 49, 50, 51], "separ": [5, 7], "api": [5, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69, 71], "first": [5, 56], "v1": 5, "argpars": 5, "more": [5, 46, 54, 58], "explicit": 5, "code": [5, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "instanti": [5, 9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "second": [5, 20, 24, 37], "v2": 5, "register_cli": 5, "decor": [5, 57, 63, 67, 68], "cli": 5, "import": [5, 7, 51, 58, 59, 67, 68], "time": [5, 11, 19, 20, 24, 30, 31, 37, 49, 50, 51, 69], "datetim": 5, "functool": 5, "partial": 5, "pathlib": 5, "path": [5, 7, 9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 50, 51, 53, 56, 57, 59, 63, 64, 68, 69], "spadsensor": [5, 20, 26, 27, 28, 29, 30, 31, 42, 48, 51], "spadsensorconfig": [5, 20, 26, 27, 28, 29, 30, 31], "stepper_motor": [5, 20], "steppermotorsystem": [5, 20, 32, 33, 36, 37], "steppermotorsystemconfig": [5, 32, 36, 37], "stepper_control": [5, 20, 32], "steppercontrol": [5, 34], "steppercontrollerconfig": 5, "dashboard": 5, "spaddashboard": [5, 42, 47, 48, 49, 50, 51], "spaddashboardconfig": [5, 42, 47, 48, 49, 50, 51], "get_logg": [5, 58], "run_cli": 5, "file_handl": [5, 57], "pklhandler": [5, 56], "manag": [5, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 42, 43, 44, 46, 47, 48, 49, 50, 57, 69], "uncom": 5, "logger": [5, 57], "debug": 5, "level": [5, 54, 58], "log": [5, 20, 24, 54, 58], "now": 5, "def": [5, 15, 59, 67, 68], "setup": [5, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 59], "sensor": [5, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 35, 39, 42, 43, 44, 45, 46, 47, 48, 49, 51, 60, 69], "logdir": 5, "mkdir": 5, "parent": [5, 20, 24, 46, 50], "true": [5, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 50, 51, 54, 56, 57, 58, 59, 60, 63, 64, 69], "exist_ok": 5, "create_from_config": [5, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59], "is_okai": [5, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59], "fatal": 5, "fail": [5, 15], "initi": [5, 9, 13, 15, 18, 19, 23, 25, 33, 37, 50], "return": [5, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 69], "output_pkl": 5, "pkl": [5, 16, 20, 26, 56], "assert": [5, 67], "f": 5, "output": [5, 30, 49, 50, 54, 56, 58], "file": [5, 14, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 56, 57, 58, 59, 69], "alreadi": 5, "writer": [5, 10, 56], "loop": [5, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59], "iter": [5, 17, 20, 30, 32, 34, 36, 57, 59], "int": [5, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 33, 34, 37, 41, 42, 43, 44, 45, 47, 48, 49, 51, 54, 56, 57, 58, 59, 62, 63], "stepper_system": [5, 6, 20, 32, 33, 37], "kwarg": [5, 9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 58, 59, 62, 63, 66, 67, 68, 69], "bool": [5, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 50, 51, 56, 57, 59, 69], "info": [5, 58], "start": [5, 11, 19, 20, 24, 31, 32, 35, 56, 59], "histogram": [5, 11, 13, 20, 26, 27, 28, 29, 30, 31, 42, 47, 48, 49, 50, 51], "accumul": [5, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 30, 31, 46, 47, 49], "po": 5, "get_posit": [5, 34], "none": [5, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 63, 66, 68, 69], "fals": [5, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 54, 56, 57, 58, 59, 69], "move_to": [5, 20, 32, 33, 35, 36, 37], "x": [5, 31], "y": [5, 31, 42, 48, 49, 51], "append": [5, 56, 57, 58, 62, 63], "sleep": 5, "25": 5, "spad_gantry_capture_v2": 5, "strftime": 5, "m": [5, 13, 55], "d": 5, "h": 5, "_setup": 5, "__name__": 5, "__main__": 5, "port": [6, 20, 24, 30, 31, 33, 37, 39, 57, 63, 66], "option": [6, 10, 14, 15, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 56, 57, 59, 69], "devic": [6, 18, 20, 24, 31, 33, 39, 52, 57, 63, 66], "connect": [6, 20, 24, 27, 30, 31, 32, 33, 35, 37], "stepper_motor_control": 6, "instal": 7, "clone": 7, "publish": 7, "io": 7, "subdirectori": 7, "directori": [7, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 58, 59, 69], "done": [7, 46], "current": [7, 19, 20, 32, 33, 34, 35, 37, 41, 42, 43, 44, 45, 47, 48, 49, 51, 58, 69], "support": [7, 15, 19, 30, 33, 34, 42, 48, 51, 53, 56, 57, 67, 68, 69], "package_nam": 7, "In": [7, 31], "module_nam": 7, "implement": [9, 15, 18, 19, 20, 24, 30, 32, 35, 39, 47, 49, 50, 51, 54, 57, 63, 67], "registri": [9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 57, 59, 69], "abc": [9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 46, 47, 48, 49, 50, 57, 59, 63, 67], "abstract": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 63, 67], "result": [9, 10, 57, 61, 63], "subclass": [9, 20, 25, 32, 34, 35, 42, 43, 44, 45, 48, 51, 53, 54, 57, 58, 63, 67, 68], "paramet": [9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 57, 59, 62, 63, 66, 67, 68, 69], "method": [9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 56, 57, 58, 59, 61, 63, 68, 69], "specifi": [9, 10, 14, 15, 16, 17, 20, 21, 22, 24, 26, 27, 28, 32, 33, 35, 36, 37, 51, 54, 56, 57, 58, 62, 63], "type": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 63, 64, 68, 69], "properti": [9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59], "okai": [9, 10, 57, 59], "otherwis": [9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 57, 58, 59, 68, 69], "either": [9, 20, 24, 31], "been": [9, 30, 54, 58, 69], "properli": [9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 56, 57, 59], "encount": [9, 54, 58], "close": [9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 54, 56, 57, 58, 59], "releas": [9, 10, 14, 16, 19, 20, 21, 22, 25, 26, 28, 32, 35, 36, 41, 42, 43, 44, 45, 48, 51, 54, 57, 58, 59], "ani": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 53, 54, 56, 57, 58, 59, 62, 63, 64, 68, 69], "resourc": [9, 10, 14, 16, 17, 19, 20, 21, 22, 25, 26, 28, 32, 35, 36, 41, 42, 43, 44, 45, 48, 51, 54, 57, 58, 59], "here": [9, 37], "overrid": [9, 14, 15, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 63, 67, 69], "own": [9, 15, 20, 30, 32, 36], "classmethod": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 63, 67, 68, 69], "regist": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 63, 67, 68, 69], "class_typ": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "class_nam": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "str": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 49, 51, 53, 54, 56, 57, 58, 59, 62, 63, 68, 69], "module_path": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "friend": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "self": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 56, 57, 58, 59, 63, 67, 68, 69], "object": [9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 49, 51, 53, 56, 57, 59, 62, 68, 69], "lazi": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "load": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 56, 57, 59, 68, 69], "string": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 62, 63, 68, 69], "anoth": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "associ": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "create_from_registri": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "arg": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 58, 59, 62, 63, 67, 68, 69], "instanc": [9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 57, 58, 59, 63, 67, 68, 69], "perform": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 63, 64, 68, 69], "posit": [9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 53, 56, 57, 59, 63, 67, 68, 69], "argument": [9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 56, 57, 59, 63, 66, 67, 68, 69], "pass": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 57, 58, 59, 63, 66, 68, 69], "constructor": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 58, 59, 63, 67, 68, 69], "keyword": [9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 56, 57, 59, 63, 66, 67, 68, 69], "request": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 62, 63, 68, 69], "dictionari": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "map": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 54, 57, 58, 59, 68, 69], "enumer": [9, 10, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "local": 10, "marker": 10, "arucolocalizationalgorithm": 10, "aruco_dict": 10, "marker_s": 10, "origin_id": 10, "num_sampl": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31], "marker_id": 10, "detect": [10, 37], "comput": [10, 20, 32, 35], "pose": [10, 20, 21, 22], "rel": [10, 20, 32, 33, 35, 37], "origin": [10, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 54, 57, 58, 59, 69], "save": [10, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 57, 59, 69], "filenam": [10, 39, 49, 58], "return_imag": 10, "whether": [10, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 41, 42, 43, 44, 45, 46, 48, 50, 51, 57, 59, 69], "displai": [10, 41, 42, 43, 44, 45, 48, 50, 51], "video": [10, 56], "dict": [10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "list": [10, 11, 14, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 56, 57, 59, 61, 63, 66, 69], "check": [10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 63, 64, 66], "model": [11, 12, 15], "histogramdataset": 11, "pkl_path": [11, 17], "rolling_window": 11, "train": 11, "analysi": 11, "input": [11, 13, 37, 56], "target": [11, 20, 32, 33, 35, 37], "manipul": 11, "affect": 11, "raw": 11, "set_start_bin": 11, "start_bin": 11, "bin": [11, 20, 26, 27, 28, 30, 31, 42, 48, 51], "set_end_bin": 11, "end_bin": 11, "end": 11, "get_raw_bin_num": 11, "number": [11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 30, 31, 34, 37, 41, 42, 43, 44, 45, 47, 48, 49, 51, 56, 57, 62, 63, 69], "transform": [11, 46, 57], "appli": [11, 20, 24], "get_bin_num": 11, "augment": 11, "factor": [11, 33], "std_multipli": 11, "group_by_target": 11, "repeat": 11, "given": [11, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 34, 39, 57, 63, 66], "float": [11, 20, 24, 30, 32, 33, 34, 35, 36, 37, 42, 48, 51], "standard": 11, "deviat": 11, "sampl": [11, 14, 15, 16, 17, 18, 20, 21, 22, 26, 27, 28, 30, 31], "get_mean_captur": 11, "mean": [11, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "captur": [11, 15, 18, 19, 20, 21, 22, 30, 43, 44, 45, 46, 54], "torch": 11, "tensor": 11, "set_zero": 11, "zero": [11, 20, 32, 33, 35, 37], "empti": [11, 20, 30, 31, 32, 34, 36, 57, 62, 63], "subtract": 11, "clip_neg": 11, "clip": [11, 33], "neg": 11, "valu": [11, 19, 20, 23, 24, 26, 28, 30, 31, 32, 34, 35, 36, 42, 48, 51, 54, 56, 57, 58, 59, 61, 62, 63, 67, 68, 69], "reset_transform": 11, "reset": [11, 20, 23, 24, 25, 30, 31], "__len__": [11, 56, 57, 62, 63], "__getitem__": [11, 57, 62, 63], "idx": [11, 57, 61, 63], "item": [11, 57, 62, 63], "__add__": 11, "other": [11, 14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 54, 57, 58, 59, 69], "join": 11, "confirm": 11, "dimens": [11, 20, 26, 28], "aruco": 12, "dataset": 12, "neural": 13, "network": 13, "architectur": 13, "deeplocation8": 13, "height": [13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 28, 30], "8": 13, "width": [13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 28, 30], "num_bin": [13, 20, 26, 27, 28, 30, 31], "16": 13, "out_dim": 13, "2": [13, 20, 24, 30, 32, 36, 54, 57, 58, 61, 63], "layer": 13, "convolut": 13, "design": [13, 20, 26, 28, 29], "8x8": [13, 30, 31], "initialize_weight": 13, "weight": 13, "kaim": 13, "uniform": 13, "base": [14, 15, 16, 20, 21, 22, 23, 25, 26, 27, 28, 30, 32, 34, 35, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 56, 57, 59, 63, 64, 67, 68, 69], "cameraconfig": [14, 16, 18, 19, 20], "sensorconfig": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31], "config": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 59, 69], "hydra_config": [14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 42, 43, 44, 46, 47, 48, 49, 50, 57, 59, 69], "hydracontainerconfig": [14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 59, 69], "configur": [14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 59], "retriev": [14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 62, 63, 67], "omegaconf": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "dictconfig": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "uninstanti": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "nest": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "proper": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "serial": [14, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 54, 57, 58, 59, 63, 66, 69], "deseri": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "print": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 56, 57, 59, 68, 69], "yaml": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "specif": [14, 15, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 48, 51, 56, 57, 59, 61, 63, 69], "logic": [14, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "where": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 56, 57, 59, 62, 63, 69], "store": [14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 54, 56, 57, 59, 69], "necessarili": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 53, 57, 59, 68, 69], "defin": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "_convert_": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "listconfig": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "convers": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "structur": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "dataclass": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "equival": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "compos": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "config_dir": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "config_nam": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "return_hydra_config": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "hydra": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 63, 64, 69], "hydraconfig": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "pattern": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 63, 67, 69], "instantiate_kwarg": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "wrapper": [14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 61, 62, 63, 69], "around": [14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 62, 69], "select": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "merge_with": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "merg": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 29, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "copi": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "new": [14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "deepcopi": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "__getstate__": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "__setstate__": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "call": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 54, 57, 58, 59, 63, 67, 69], "slow": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "pickl": [14, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 56, 57, 59, 69], "unpickl": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "header": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "top": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "to_yaml": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "some": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "represent": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 62, 63, 69], "attribut": [14, 16, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 58, 59, 62, 63, 69], "ll": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "state": [14, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "__str__": [14, 16, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 59, 69], "compon": [14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 57, 59], "extend": [14, 16, 20], "averag": [14, 15, 16, 20, 21, 22, 26, 27, 28, 29, 30, 31], "np": [14, 15, 16, 17, 18, 19, 20, 23, 25, 27, 30, 31, 47, 49, 56], "ndarrai": [14, 15, 16, 17, 18, 19, 20, 23, 25, 27, 30, 31, 47, 49, 56], "arrai": [14, 15, 16, 17, 20, 30], "distortion_coeffici": [14, 15, 16, 17, 18, 19, 20], "numpi": [14, 15, 16, 17, 18, 19, 20], "distort": [14, 15, 16, 17, 18, 19, 20], "coeffici": [14, 15, 16, 17, 18, 19, 20], "repres": [14, 15, 16, 17, 20, 26, 28, 30, 31, 32, 35], "intrinsic_matrix": [14, 15, 16, 17, 18, 19, 20], "intrins": [14, 15, 16, 17, 18, 19, 20], "matrix": [14, 15, 16, 17, 18, 19, 20], "3x3": [14, 15, 16, 17, 20, 30], "resolut": [14, 15, 16, 17, 18, 19, 20, 26, 27, 28, 30, 31], "tupl": [14, 15, 16, 17, 18, 19, 20, 24, 26, 27, 28, 30, 31], "chang": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 54, 58], "via": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 33], "sent": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31], "kei": [14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 34, 37, 50, 56, 69], "must": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 54, 57, 58, 59], "match": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31], "field": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 46], "wa": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 30, 31, 54, 58, 69], "were": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28], "oper": [14, 16, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 41, 42, 43, 44, 45, 48, 51, 57, 59], "__del__": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 56], "destructor": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31], "t": [14, 15, 16, 17, 19, 20, 21, 22, 25, 26, 27, 28, 31, 32, 35, 36, 41, 42, 43, 44, 45, 46, 48, 51, 57, 58, 59], "flircamera": 15, "singleton": [15, 18, 57, 63], "grasshopperflircamera": 15, "special": 15, "grasshopp": 15, "inherit": [15, 17, 20, 26, 27, 28, 30, 31, 34, 53, 57, 68], "036": 15, "145": 15, "001": 15, "155": 15, "1815": 15, "5": 15, "1817": 15, "753": 15, "721": 15, "299": 15, "531": 15, "352": 15, "spinnak": 15, "usual": [15, 37], "As": 15, "write": [15, 20, 24, 56, 58], "2024": 15, "09": 15, "21": 15, "3": [15, 20, 30, 32, 36, 54, 58], "10": [15, 20, 24, 56, 67], "newer": 15, "version": [15, 54, 58], "step": [15, 20, 32, 35, 37, 43, 46, 50], "after": [15, 57, 59], "re": 15, "tar": 15, "xvzf": 15, "spinnaker_python": 15, "cp": 15, "o": [15, 54, 58], "arch": 15, "gz": 15, "whl": 15, "But": 15, "replac": [15, 54, 58], "your": 15, "For": [15, 23], "11": 15, "m2": 15, "mac": 15, "would": [15, 69], "turn": 15, "4": 15, "172": 15, "cp310": 15, "macosx_13_0_arm64": 15, "mv": 15, "cp311": 15, "And": 15, "_pyspin": 15, "cpython": 15, "310": 15, "darwin": 15, "311": 15, "offici": 15, "caus": 15, "issu": [15, 58], "risk": 15, "camera_index": [15, 19], "thread": [15, 18, 19, 20, 24, 41, 42, 43, 44, 45, 48, 51, 54, 57, 58, 62, 63], "them": [15, 18, 19, 20, 30, 32, 33, 35, 36, 69], "queue": [15, 18, 19], "avail": [15, 17, 20, 24, 31, 51, 57, 63, 66], "stream": [15, 18, 58], "stop": [15, 18, 19, 20, 24, 30, 31, 57, 59], "deiniti": [15, 18], "flir": [16, 20], "realsens": [16, 20], "modul": [16, 20, 21, 26, 32, 42, 44, 48, 53, 57, 70], "pre": [17, 27, 31], "record": [17, 27, 54, 56, 58], "pklcamera": 17, "read": [17, 20, 24, 56, 69], "exhaust": 17, "still": [17, 46], "activ": [17, 30], "placehold": 17, "potenti": 17, "cleanup": [17, 57, 59], "intel": 18, "realsensecamera": 18, "pyrealsens": 18, "d435i": 18, "color": [18, 20, 30, 32, 36], "depth": [18, 19, 30], "return_depth": [18, 19], "realsenseconfig": 18, "rgb": [18, 19], "r": 18, "return_rgb": [18, 19], "return_ir": 18, "readi": 18, "rais": [18, 19, 20, 24, 30, 31, 32, 36, 54], "notimplementederror": [18, 19, 54], "yet": [18, 19], "usbcameraconfig": 19, "variabl": [19, 20, 25, 30, 31, 32, 36, 37, 41, 42, 48, 51, 69], "identifi": 19, "g": [19, 20, 32, 35, 46], "start_capture_onc": 19, "keep": 19, "until": [19, 20, 24, 32, 35, 41, 42, 43, 44, 45, 48, 51, 57, 59], "exposur": 19, "desir": 19, "note": [19, 37], "vari": [19, 20, 21, 22, 26, 28], "platform": 19, "force_autoexposur": 19, "attempt": [19, 20, 24, 37, 62], "enabl": [19, 30, 31, 37], "auto": [19, 37], "Not": 19, "usbcamera": 19, "frame": [19, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56], "ignor": [19, 29, 54, 58], "don": [19, 20, 32, 35], "known": [19, 20, 32, 35], "fallback": 19, "mocap": [20, 43, 44, 45, 46], "tmf8828": [20, 26, 39], "vl53l8ch": [20, 26], "kinesis_stepp": [20, 32], "telemetrix_stepp": [20, 32], "safe_seri": 20, "motioncapturesensor": [20, 21, 22, 43, 44, 45, 46], "motion": [20, 21, 22, 32, 35, 37, 43, 44, 45, 46], "sum": [20, 21, 22, 26, 28], "motioncapturesensorconfig": [20, 21, 22, 23], "safeseri": [20, 24], "lock_typ": [20, 24], "multiprocess": [20, 24], "safe": [20, 24, 32, 35, 37, 57, 62, 63], "synchron": [20, 24, 41, 42, 43, 44, 45, 48, 51, 57, 61, 62, 63], "lock": [20, 24, 54, 58], "handl": [20, 23, 24, 25, 31, 50, 54, 57, 58, 59], "format": [20, 24, 54, 58], "wait": [20, 24, 32, 33, 35, 37, 57, 62, 63], "establish": [20, 24, 32, 35], "forc": [20, 24], "found": [20, 24], "invalid": [20, 24], "warn": [20, 24], "size": [20, 24, 29, 42, 48, 51], "byte": [20, 24, 31], "wait_for_start_talk": [20, 24], "timeout": [20, 24, 30], "talk": [20, 24], "success": [20, 24, 31], "maximum": [20, 24, 33, 42, 48, 51, 58, 69], "give": [20, 24], "up": [20, 24, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 57, 58, 63, 64], "receiv": [20, 24, 30, 31], "wait_for_stop_talk": [20, 24], "write_and_wait_for_start_talk": [20, 24], "tri": [20, 24], "resend": [20, 24], "write_and_wait_for_stop_talk": [20, 24], "return_data": [20, 24], "upon": [20, 24], "statu": [20, 24, 32, 35], "write_and_wait_for_start_and_stop_talk": [20, 24], "event": [20, 24, 46, 50, 54, 58], "__getattr__": [20, 24, 32, 36, 37, 57, 62, 63], "forward": [20, 24], "access": [20, 24, 30, 32, 33, 36, 37, 54, 56, 57, 58, 62, 63], "prevent": [20, 24], "concurr": [20, 24], "ui": [20, 25, 46, 69], "element": [20, 25], "photon": [20, 26, 28], "avalanch": [20, 26, 28], "diod": [20, 26, 28], "measur": [20, 26, 28, 30], "collect": [20, 26, 28, 29, 30, 32, 36], "analyz": [20, 26, 28], "system": [20, 26, 28, 32, 33, 36, 37, 54, 58], "indic": [20, 26, 28, 30], "discret": [20, 26, 28], "rang": [20, 26, 28, 30, 31, 39, 69], "total": [20, 26, 28, 34], "distanc": [20, 26, 28], "equal": [20, 26, 28], "multipli": [20, 26, 28], "spatial": [20, 26, 28], "pixel": [20, 26, 28, 30, 31], "point": [20, 26, 28, 32, 35], "respect": [20, 26, 28], "dummysteppermotor": [20, 32, 35], "dummi": [20, 32, 35, 36], "doe": [20, 32, 35, 36, 54, 57, 63, 64, 69], "noth": [20, 32, 35, 36, 54], "test": [20, 27, 32, 35], "ax": [20, 32, 33, 35, 36], "attach": [20, 32, 33, 35, 36, 54, 58], "steppermotor": [20, 32, 33, 35, 36, 37], "unifi": [20, 32, 35, 37], "common": [20, 27, 30, 31, 32, 35], "move": [20, 29, 32, 33, 34, 35, 36, 37], "includ": [20, 31, 32, 35, 67], "compat": [20, 32, 35, 69], "expect": [20, 31, 32, 35], "behavior": [20, 27, 32, 35, 57, 62, 63], "shut": [20, 32, 35, 37], "power": [20, 32, 35], "avoid": [20, 32, 35], "damag": [20, 32, 35], "memori": [20, 32, 35, 56], "leak": [20, 32, 35], "its": [20, 23, 25, 32, 33, 34, 35, 37, 53, 57, 63, 66, 68], "predefin": [20, 32, 33, 35], "could": [20, 32, 35, 54, 58], "involv": [20, 32, 35], "limit": [20, 32, 33, 35, 42, 48, 49, 51], "switch": [20, 32, 35], "trigger": [20, 32, 35], "absolut": [20, 32, 33, 35, 37], "interpret": [20, 32, 35], "characterist": [20, 32, 35], "angl": [20, 32, 35], "move_bi": [20, 32, 33, 35, 36, 37], "relative_posit": [20, 32, 33, 35, 37], "amount": [20, 32, 33, 35, 37], "degre": [20, 32, 35], "unit": [20, 32, 35, 36], "wait_for_mov": [20, 32, 33, 35, 37], "complet": [20, 30, 32, 33, 35, 37], "block": [20, 32, 35, 36, 41, 42, 43, 44, 45, 48, 51, 57, 62, 63], "execut": [20, 32, 35, 47, 49, 50, 51], "reach": [20, 32, 35], "is_mov": [20, 32, 35, 36, 37], "whole": [20, 32, 33, 36], "multi": [20, 30, 32, 33, 36, 57, 62, 63], "axi": [20, 32, 33, 34, 36, 42, 48, 49, 51], "rotat": [20, 32, 36], "stage": [20, 32, 36], "passthrough": [20, 32, 36, 37], "underli": [20, 32, 36, 37, 54, 57, 58, 62, 63], "steppermotorsystemaxi": [20, 32, 33, 36], "kwd": [20, 30, 31, 32, 36], "pair": [20, 30, 32, 36], "enum": [20, 30, 31, 32, 36, 69], "red": [20, 30, 32, 36], "blue": [20, 30, 32, 36], "green": [20, 30, 32, 36], "lookup": [20, 30, 32, 36, 54, 58], "over": [20, 30, 32, 36], "know": [20, 30, 32, 36], "mani": [20, 30, 32, 34, 36, 53, 57, 68], "member": [20, 30, 31, 32, 36], "thei": [20, 30, 32, 36, 54, 58], "len": [20, 30, 32, 36], "document": [20, 30, 32, 36], "detail": [20, 30, 32, 36], "__repr__": [20, 30, 31, 32, 36, 54, 57, 58, 62, 63], "repr": [20, 30, 31, 32, 36, 54, 58], "__dir__": [20, 30, 31, 32, 36], "public": [20, 30, 31, 32, 36], "interest": [20, 30, 31, 32, 36, 54, 58], "__format__": [20, 30, 31, 32, 36], "format_spec": [20, 30, 31, 32, 36], "formatt": [20, 30, 31, 32, 36, 54, 58], "typeerror": [20, 30, 31, 32, 36], "__hash__": [20, 30, 31, 32, 36], "hash": [20, 30, 31, 32, 36], "__reduce_ex__": [20, 30, 31, 32, 36], "proto": [20, 30, 31, 32, 36], "helper": [20, 30, 31, 32, 36, 69], "vivetrackersensorconfig": 23, "vivetrack": 23, "cfg": 23, "json": 23, "additional_arg": 23, "pysurv": 23, "simplecontext": 23, "lead": 23, "poser": 23, "mpfit": 23, "vivetrackerpos": 23, "sensordata": [23, 25, 30, 31], "row": [23, 25, 29, 30, 31], "get_data": [23, 25, 30, 31], "commun": [24, 30, 31], "conveni": 24, "verify_has_data": 25, "pklspadsensorconfig": 27, "pklspadsensor": 27, "fake": 27, "simul": 27, "return_entri": 27, "entri": 27, "next": 27, "Will": 27, "handler": [27, 54, 56, 58], "op": 27, "spadwrapperconfig": 29, "wrap": [29, 54, 57, 58, 61, 62, 63], "spadwrapp": 29, "expos": 29, "simplifi": 29, "spadmergewrapperconfig": 29, "merge_row": 29, "merge_col": 29, "column": [29, 31], "merge_al": 29, "spadmergewrapp": 29, "spadmovingaveragewrapperconfig": 29, "window_s": 29, "window": [29, 33, 46, 50], "spadmovingaveragewrapp": 29, "zone": 30, "flight": [30, 31], "am": 30, "wide": 30, "vcsel": 30, "4x4": [30, 31], "3x6": 30, "multizon": 30, "tmf8828sensor": 30, "tmf882x": [30, 39], "arduino": [30, 37, 57, 63, 66], "shield": 30, "spadid": [30, 39], "get_num_pixel": 30, "id": [30, 37], "get_num_channel": 30, "channel": [30, 33, 42, 48, 49, 51], "get_active_channels_per_subcaptur": 30, "per": [30, 37], "subcaptur": 30, "get_resolut": 30, "rangemod": [30, 39], "tmf8828config": 30, "spad_id": [30, 39], "range_mod": [30, 39], "long": [30, 39], "short": [30, 39], "tmf8828histogram": 30, "clear": 30, "temporari": 30, "intern": [30, 54, 58], "has_data": [30, 31], "across": [30, 67], "high": 30, "baudrat": [30, 31], "baud": [30, 31], "rate": [30, 31], "framework": 31, "rangingmod": 31, "vl53l8chconfig": 31, "uint16_t": 31, "ranging_mod": 31, "ranging_frequency_hz": 31, "frequenc": 31, "hz": 31, "integration_time_m": 31, "integr": 31, "millisecond": 31, "cnh_start_bin": 31, "cnh": 31, "cnh_num_bin": 31, "cnh_subsampl": 31, "subsampl": 31, "agg_start_x": 31, "aggreg": 31, "coordin": 31, "agg_start_i": 31, "agg_merge_x": 31, "agg_merge_i": 31, "agg_col": 31, "agg_row": 31, "add_back_ambi": 31, "flag": 31, "back": 31, "ambient": 31, "light": [31, 55], "preprocess": 31, "remov": [31, 54, 58], "calcul": 31, "user": [31, 41, 42, 50, 51, 54, 58], "never": 31, "pack": 31, "vl53l8chsharedconfig": 31, "share": [31, 57, 62, 63, 67], "vl53l8chconfig4x4": 31, "vl53l8chconfig8x8": 31, "vl53l8chhistogram": 31, "num_pixel": 31, "vl53l8chsensor": 31, "acquisit": [31, 54, 58], "individu": [31, 69], "grid": 31, "steppermotorconfig": [32, 35, 37], "kinesi": 33, "kinesissteppermotor": 33, "thorlab": 33, "c": [33, 55], "pylablib": 33, "throlab": 33, "kinesismotor": 33, "linux": 33, "is_rack_system": 33, "scale": 33, "movement": 33, "part": 33, "rack": 33, "max_veloc": 33, "acceler": 33, "lower_limit": 33, "upper_limit": 33, "clip_at_limit": 33, "initial_posit": 33, "reference_posit": 33, "check_hom": 33, "veloc": 33, "lower": 33, "upper": 33, "dure": [33, 54, 58], "opposit": [33, 37], "successfulli": 33, "healthi": [33, 37], "kinesisrotationstag": 33, "kinesissteppermotorsystem": 33, "azimuthelevationsystem": 33, "azimuth": 33, "elev": 33, "plu": [34, 53, 57, 68], "factori": [34, 53, 57, 68, 69], "direct": [34, 37, 53, 57, 68], "registr": [34, 53, 57, 68], "myregistri": [34, 53, 57, 68], "foo": [34, 53, 57, 68], "bar": [34, 53, 57, 68], "my_modul": [34, 53, 57, 68], "submodul": [34, 68], "snakesteppercontrol": 34, "axis_config": 34, "exce": 34, "dummysteppersystem": 36, "telemetrixsteppermotor": 37, "telemetrixsteppermotorsystem": 37, "telemetrix": 37, "cncshield": 37, "telemetrixsteppermotorconfig": 37, "board": 37, "distance_pin": 37, "pin": 37, "direction_pin": 37, "enable_pin": 37, "cm_per_rev": 37, "centimet": 37, "revolut": 37, "steps_per_rev": 37, "speed": [37, 55], "cm": 37, "flip_direct": 37, "effect": 37, "set_current_posit": 37, "explicitli": 37, "set_target_position_cm": 37, "relative_cm": 37, "set_absolute_target_position_cm": 37, "position_cm": 37, "cm_to_rev": 37, "revs_to_cm": 37, "rev": 37, "stepper_": 37, "motorx": 37, "target_posit": 37, "equat": 37, "_board": 37, "stepper_target_posit": 37, "requir": [37, 57, 62, 63], "telemetrixsteppermotorsystemconfig": 37, "arduino_wait": 37, "telemetrixsteppermotorxconfig": 37, "telemetrixsteppermotoryconfig": 37, "telemetrixsteppermotorzconfig": 37, "dualdrive2axisgantryxconfig": 37, "dualdrive2axisgantryy1config": 37, "dualdrive2axisgantryy2config": 37, "dualdrive2axisgantryconfig": 37, "singledrive1axisgantryxconfig": 37, "singledrive1axisgantryyconfig": 37, "singledrive1axisgantryconfig": 37, "camera_view": [38, 53], "flash": [38, 53], "jogger": [38, 53], "tmf8828_calibr": 39, "id6": 39, "id15": 39, "four": 39, "legaci": 39, "twice": 39, "feed": 40, "dashboardconfig": [41, 42, 43, 44, 46, 47, 48, 49, 50], "gui": [41, 42], "num_fram": [41, 42], "000": [41, 42], "user_callback": [41, 42, 51], "callabl": [41, 42, 54, 56, 57, 58, 59], "callback": [41, 42, 51, 57, 61, 63], "accept": [41, 42, 57, 59], "independ": [41, 42, 43, 44, 45, 46, 48, 51], "capabl": [41, 42, 43, 44, 45, 48, 51], "being": [41, 42, 43, 44, 45, 48, 51, 54, 57, 58, 63, 67], "non": [41, 42, 43, 44, 45, 48, 51], "mocap_dashboard": 42, "spad_dashboard": 42, "dash": [42, 48, 51], "matplotlib": [42, 48, 51, 57], "pyqtgraph": [42, 48, 51], "min_bin": [42, 48, 51], "minimum": [42, 48, 51, 69], "max_bin": [42, 48, 51], "autoscal": [42, 48, 51], "ylim": [42, 48, 51], "channel_mask": [42, 48, 51], "dashmotioncapturedashboardconfig": 43, "motioncapturedashboardconfig": [43, 44, 45, 46], "dashmotioncapturedashboard": 43, "motioncapturedashboard": [43, 44, 45, 46], "motioncaptur": [43, 44, 45, 46], "fig": 43, "pyqtgraphmotioncapturedashboardconfig": 46, "3d": [46, 70], "dashboardwindow": [46, 50], "qwidget": 46, "hold": 46, "opengl": 46, "glviewwidget": 46, "keypressev": [46, 50], "quit": 46, "q": 46, "esc": 46, "pyqtgraphmotioncapturedashboard": 46, "enter": 46, "qt": 46, "period": [46, 56], "timer": 46, "send": 46, "applic": [46, 47, 50, 54, 58, 67], "dashdashboardconfig": 47, "dashdashboard": [47, 51], "plotli": [47, 51], "web": [47, 51], "layout": [47, 49, 50], "figur": 47, "n_interv": 47, "existing_fig": 47, "real": [49, 50, 51], "save_anim": 49, "anim": 49, "funcanim": 49, "matplotlibdashboardconfig": 49, "matplotlibdashboard": [49, 51], "plot": [49, 50, 60], "adjust_ylim": 49, "adjust": 49, "pyqtgraphdashboardconfig": 50, "panel": 50, "right": 50, "init_ui": 50, "press": 50, "exit": 50, "pyqtgraphdashboard": [50, 51], "fullscreen": 50, "headless": 50, "three": 51, "my_callback": 51, "firmwar": 52, "line": 53, "toolregistri": 53, "joystick": 54, "like": 54, "outputcaptur": 54, "buffer": [54, 56], "stdout": 54, "stderr": 54, "logbufferhandl": 54, "filter": [54, 56, 58], "emit": [54, 58], "whatev": 54, "take": [54, 56], "intend": 54, "createlock": [54, 58], "acquir": [54, 58], "setlevel": [54, 58], "condition": [54, 58], "emiss": [54, 58], "setformatt": [54, 58], "fmt": [54, 58], "flush": [54, 56, 58], "tidi": [54, 58], "_handler": [54, 58], "overridden": [54, 58, 69], "handleerror": [54, 58], "occur": [54, 58], "except": [54, 58], "raiseexcept": [54, 58], "silent": [54, 58], "what": [54, 58], "mostli": [54, 58], "most": [54, 58], "care": [54, 58], "about": [54, 58], "howev": [54, 58], "wish": [54, 58], "addfilt": [54, 58], "removefilt": [54, 58], "determin": [54, 58], "loggabl": [54, 58], "consult": [54, 58], "veto": [54, 58], "place": [54, 58], "further": [54, 58], "just": [54, 57, 58, 59], "12": [54, 58], "logrecord": [54, 58], "instead": [54, 58], "modifi": [54, 58, 69], "300000000": 55, "overwrit": 56, "update_index_kwarg": 56, "random": 56, "entir": 56, "another_kei": 56, "another_valu": 56, "update_index": 56, "prune_fn": 56, "lambda": 56, "_": [56, 57, 59], "build": 56, "scan": 56, "_index": 56, "exclud": 56, "load_al": 56, "extract": 56, "pklreader": 56, "videowrit": 56, "fp": 56, "flush_interv": 56, "interv": 56, "mp4": 56, "30": 56, "remain": 56, "delet": 56, "constant": 57, "cleanup_on_keyboard_interrupt": [57, 59], "essenti": [57, 59], "context": [57, 59], "counter": [57, 59], "begin": [57, 59], "continu": [57, 59], "__enter__": [57, 59], "__exit__": [57, 59], "__": [57, 59], "call_async": [57, 61, 63], "fn": [57, 61, 63], "asynchron": [57, 61, 63], "call_async_gath": [57, 61, 63], "call_async_valu": [57, 61, 63], "singletonabcmeta": [57, 63, 67], "metaclass": [57, 63, 67], "combin": [57, 63, 67], "enforc": [57, 63, 67], "while": [57, 63, 67], "virtual": [57, 63, 67], "__instancecheck__": [57, 63, 67], "isinst": [57, 63, 67], "cl": [57, 63, 66, 67], "__subclasscheck__": [57, 63, 67], "issubclass": [57, 63, 67], "__call__": [57, 63, 67], "singletonmeta": [57, 63, 67], "blockingdequ": [57, 62, 63], "dequ": [57, 62, 63], "condit": [57, 62, 63], "suitabl": [57, 62, 63], "notifi": [57, 62, 63], "manner": [57, 62, 63], "find_device_by_label": [57, 63, 66], "label": [57, 63, 66], "find": [57, 63, 66], "volum": [57, 63, 66], "search": [57, 63, 66], "find_port": [57, 63, 66], "arduino_upload": [57, 63, 66], "upload": [57, 63, 66], "sketch": [57, 63, 66], "get_object": [57, 63, 64], "verbos": [57, 63, 64], "look": [57, 63, 64], "entiti": [57, 63, 64], "dotpath": [57, 63, 64], "lift": [57, 63, 64], "recurs": [57, 68], "approach": [57, 68], "ancestor": [57, 68], "tqdm": 58, "messag": 58, "consol": 58, "filehandl": 58, "streamhandl": 58, "doesn": 58, "becaus": 58, "delai": 58, "superclass": 58, "w": 58, "_close": 58, "42378": 58, "setstream": 58, "old": 58, "wasn": 58, "tqdmstreamhandl": 58, "trail": 58, "newlin": 58, "inform": 58, "present": 58, "traceback": 58, "print_except": 58, "encod": 58, "loggermaxlevelfilt": 58, "max_level": 58, "deem": 58, "appropri": 58, "100": 59, "set_matplotlib_styl": 60, "use_scienceplot": 60, "asyncio_util": 63, "blocking_dequ": 63, "serial_util": 63, "_py_abc": [63, 67], "abcmeta": [63, 67], "miscellan": 64, "singleton_meta": 67, "mysingleton": 67, "instance1": 67, "instance2": 67, "my_registri": 68, "myclass": 68, "hello": 68, "lazili": 68, "myotherclass": 68, "other_inst": 68, "some_arg": 68, "dirti": 69, "last": 69, "ideal": 69, "731": 69, "default_factori": 69, "sensorset": 69, "rangeset": 69, "valid": 69, "min": 69, "max": 69, "optionset": 69, "from_enum": 69, "boolset": 69, "boolean": 69, "space": 70}, "objects": {"": [[38, 0, 0, "-", "cc_hardware"]], "cc_hardware": [[12, 0, 0, "-", "algos"], [20, 0, 0, "-", "drivers"], [53, 0, 0, "-", "tools"], [57, 0, 0, "-", "utils"]], "cc_hardware.algos": [[9, 0, 0, "-", "algorithm"], [10, 0, 0, "-", "aruco"], [11, 0, 0, "-", "datasets"], [13, 0, 0, "-", "models"]], "cc_hardware.algos.algorithm": [[9, 1, 1, "", "Algorithm"]], "cc_hardware.algos.algorithm.Algorithm": [[9, 2, 1, "", "close"], [9, 2, 1, "", "create_from_registry"], [9, 3, 1, "", "is_okay"], [9, 2, 1, "", "register"], [9, 2, 1, "", "registered"], [9, 2, 1, "", "registry"], [9, 2, 1, "", "run"]], "cc_hardware.algos.aruco": [[10, 1, 1, "", "ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm": [[10, 2, 1, "", "close"], [10, 2, 1, "", "create_from_registry"], [10, 3, 1, "", "is_okay"], [10, 2, 1, "", "register"], [10, 2, 1, "", "registered"], [10, 2, 1, "", "registry"], [10, 2, 1, "", "run"]], "cc_hardware.algos.datasets": [[11, 1, 1, "", "HistogramDataset"]], "cc_hardware.algos.datasets.HistogramDataset": [[11, 2, 1, "", "__add__"], [11, 2, 1, "", "__getitem__"], [11, 2, 1, "", "__len__"], [11, 2, 1, "", "augment"], [11, 2, 1, "", "clip_negative"], [11, 2, 1, "", "get_bin_num"], [11, 2, 1, "", "get_mean_capture"], [11, 2, 1, "", "get_raw_bin_num"], [11, 2, 1, "", "reset_transformations"], [11, 2, 1, "", "set_end_bin"], [11, 2, 1, "", "set_start_bin"], [11, 2, 1, "", "set_zero"]], "cc_hardware.algos.models": [[13, 1, 1, "", "DeepLocation8"], [13, 4, 1, "", "initialize_weights"]], "cc_hardware.drivers": [[20, 1, 1, "", "Camera"], [20, 1, 1, "", "CameraConfig"], [20, 1, 1, "", "DummyStepperMotor"], [20, 1, 1, "", "MotionCaptureSensor"], [20, 1, 1, "", "MotionCaptureSensorConfig"], [20, 1, 1, "", "SPADSensor"], [20, 1, 1, "", "SPADSensorConfig"], [20, 1, 1, "", "SafeSerial"], [20, 1, 1, "", "Sensor"], [20, 1, 1, "", "SensorConfig"], [20, 1, 1, "", "StepperMotor"], [20, 1, 1, "", "StepperMotorSystem"], [20, 1, 1, "", "StepperMotorSystemAxis"], [16, 0, 0, "-", "cameras"], [21, 0, 0, "-", "mocap"], [24, 0, 0, "-", "safe_serial"], [25, 0, 0, "-", "sensor"], [26, 0, 0, "-", "spads"], [32, 0, 0, "-", "stepper_motors"]], "cc_hardware.drivers.Camera": [[20, 2, 1, "", "__del__"], [20, 2, 1, "", "accumulate"], [20, 2, 1, "", "calibrate"], [20, 2, 1, "", "close"], [20, 3, 1, "", "config"], [20, 2, 1, "", "create_from_config"], [20, 2, 1, "", "create_from_registry"], [20, 3, 1, "", "distortion_coefficients"], [20, 3, 1, "", "intrinsic_matrix"], [20, 3, 1, "", "is_okay"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 3, 1, "", "resolution"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "update"]], "cc_hardware.drivers.CameraConfig": [[20, 2, 1, "", "__getstate__"], [20, 2, 1, "", "__setstate__"], [20, 2, 1, "", "__str__"], [20, 2, 1, "", "compose"], [20, 5, 1, "", "config"], [20, 2, 1, "", "copy"], [20, 2, 1, "", "create"], [20, 2, 1, "", "create_from_registry"], [20, 5, 1, "", "custom"], [20, 2, 1, "", "instantiate"], [20, 2, 1, "", "load"], [20, 2, 1, "", "merge_with"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 2, 1, "", "save"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.MotionCaptureSensor": [[20, 2, 1, "", "__del__"], [20, 2, 1, "", "accumulate"], [20, 2, 1, "", "calibrate"], [20, 2, 1, "", "close"], [20, 3, 1, "", "config"], [20, 2, 1, "", "create_from_config"], [20, 2, 1, "", "create_from_registry"], [20, 3, 1, "", "is_okay"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "update"]], "cc_hardware.drivers.MotionCaptureSensorConfig": [[20, 2, 1, "", "__getstate__"], [20, 2, 1, "", "__setstate__"], [20, 2, 1, "", "__str__"], [20, 2, 1, "", "compose"], [20, 5, 1, "", "config"], [20, 2, 1, "", "copy"], [20, 2, 1, "", "create"], [20, 2, 1, "", "create_from_registry"], [20, 5, 1, "", "custom"], [20, 2, 1, "", "instantiate"], [20, 2, 1, "", "load"], [20, 2, 1, "", "merge_with"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 2, 1, "", "save"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.SPADSensor": [[20, 2, 1, "", "__del__"], [20, 2, 1, "", "accumulate"], [20, 2, 1, "", "calibrate"], [20, 2, 1, "", "close"], [20, 3, 1, "", "config"], [20, 2, 1, "", "create_from_config"], [20, 2, 1, "", "create_from_registry"], [20, 3, 1, "", "is_okay"], [20, 3, 1, "", "num_bins"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 3, 1, "", "resolution"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "update"]], "cc_hardware.drivers.SPADSensorConfig": [[20, 2, 1, "", "__getstate__"], [20, 2, 1, "", "__setstate__"], [20, 2, 1, "", "__str__"], [20, 2, 1, "", "compose"], [20, 5, 1, "", "config"], [20, 2, 1, "", "copy"], [20, 2, 1, "", "create"], [20, 2, 1, "", "create_from_registry"], [20, 5, 1, "", "custom"], [20, 2, 1, "", "instantiate"], [20, 2, 1, "", "load"], [20, 2, 1, "", "merge_with"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 2, 1, "", "save"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.SafeSerial": [[20, 2, 1, "", "__getattr__"], [20, 2, 1, "", "create"], [20, 2, 1, "", "read"], [20, 2, 1, "", "wait_for_start_talk"], [20, 2, 1, "", "wait_for_stop_talk"], [20, 2, 1, "", "write"], [20, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [20, 2, 1, "", "write_and_wait_for_start_talk"], [20, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.Sensor": [[20, 2, 1, "", "__del__"], [20, 2, 1, "", "calibrate"], [20, 2, 1, "", "close"], [20, 3, 1, "", "config"], [20, 2, 1, "", "create_from_config"], [20, 2, 1, "", "create_from_registry"], [20, 3, 1, "", "is_okay"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "update"]], "cc_hardware.drivers.SensorConfig": [[20, 2, 1, "", "__getstate__"], [20, 2, 1, "", "__setstate__"], [20, 2, 1, "", "__str__"], [20, 2, 1, "", "compose"], [20, 5, 1, "", "config"], [20, 2, 1, "", "copy"], [20, 2, 1, "", "create"], [20, 2, 1, "", "create_from_registry"], [20, 5, 1, "", "custom"], [20, 2, 1, "", "instantiate"], [20, 2, 1, "", "load"], [20, 2, 1, "", "merge_with"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 2, 1, "", "save"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.StepperMotor": [[20, 2, 1, "", "close"], [20, 3, 1, "", "config"], [20, 2, 1, "", "create_from_config"], [20, 2, 1, "", "create_from_registry"], [20, 2, 1, "", "home"], [20, 3, 1, "", "is_moving"], [20, 3, 1, "", "is_okay"], [20, 2, 1, "", "move_by"], [20, 2, 1, "", "move_to"], [20, 3, 1, "", "position"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.StepperMotorSystem": [[20, 2, 1, "", "__getattr__"], [20, 3, 1, "", "axes"], [20, 2, 1, "", "close"], [20, 3, 1, "", "config"], [20, 2, 1, "", "create_from_config"], [20, 2, 1, "", "create_from_registry"], [20, 3, 1, "", "is_moving"], [20, 3, 1, "", "is_okay"], [20, 2, 1, "", "move_by"], [20, 2, 1, "", "move_to"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"]], "cc_hardware.drivers.StepperMotorSystemAxis": [[20, 2, 1, "", "__dir__"], [20, 2, 1, "", "__format__"], [20, 2, 1, "", "__hash__"], [20, 2, 1, "", "__reduce_ex__"], [20, 2, 1, "", "__repr__"], [20, 2, 1, "", "__str__"], [20, 2, 1, "", "name"], [20, 2, 1, "", "value"]], "cc_hardware.drivers.cameras": [[16, 1, 1, "", "Camera"], [16, 1, 1, "", "CameraConfig"], [14, 0, 0, "-", "camera"], [15, 0, 0, "-", "flir"], [17, 0, 0, "-", "pkl"], [18, 0, 0, "-", "realsense"], [19, 0, 0, "-", "usb"]], "cc_hardware.drivers.cameras.Camera": [[16, 2, 1, "", "__del__"], [16, 2, 1, "", "accumulate"], [16, 2, 1, "", "calibrate"], [16, 2, 1, "", "close"], [16, 3, 1, "", "config"], [16, 2, 1, "", "create_from_config"], [16, 2, 1, "", "create_from_registry"], [16, 3, 1, "", "distortion_coefficients"], [16, 3, 1, "", "intrinsic_matrix"], [16, 3, 1, "", "is_okay"], [16, 2, 1, "", "register"], [16, 2, 1, "", "registered"], [16, 2, 1, "", "registry"], [16, 3, 1, "", "resolution"], [16, 3, 1, "", "settings"], [16, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.CameraConfig": [[16, 2, 1, "", "__getstate__"], [16, 2, 1, "", "__setstate__"], [16, 2, 1, "", "__str__"], [16, 2, 1, "", "compose"], [16, 5, 1, "", "config"], [16, 2, 1, "", "copy"], [16, 2, 1, "", "create"], [16, 2, 1, "", "create_from_registry"], [16, 5, 1, "", "custom"], [16, 2, 1, "", "instantiate"], [16, 2, 1, "", "load"], [16, 2, 1, "", "merge_with"], [16, 2, 1, "", "register"], [16, 2, 1, "", "registered"], [16, 2, 1, "", "registry"], [16, 2, 1, "", "save"], [16, 3, 1, "", "settings"], [16, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.cameras.camera": [[14, 1, 1, "", "Camera"], [14, 1, 1, "", "CameraConfig"]], "cc_hardware.drivers.cameras.camera.Camera": [[14, 2, 1, "", "__del__"], [14, 2, 1, "", "accumulate"], [14, 2, 1, "", "calibrate"], [14, 2, 1, "", "close"], [14, 3, 1, "", "config"], [14, 2, 1, "", "create_from_config"], [14, 2, 1, "", "create_from_registry"], [14, 3, 1, "", "distortion_coefficients"], [14, 3, 1, "", "intrinsic_matrix"], [14, 3, 1, "", "is_okay"], [14, 2, 1, "", "register"], [14, 2, 1, "", "registered"], [14, 2, 1, "", "registry"], [14, 3, 1, "", "resolution"], [14, 3, 1, "", "settings"], [14, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.camera.CameraConfig": [[14, 2, 1, "", "__getstate__"], [14, 2, 1, "", "__setstate__"], [14, 2, 1, "", "__str__"], [14, 2, 1, "", "compose"], [14, 5, 1, "", "config"], [14, 2, 1, "", "copy"], [14, 2, 1, "", "create"], [14, 2, 1, "", "create_from_registry"], [14, 5, 1, "", "custom"], [14, 2, 1, "", "instantiate"], [14, 2, 1, "", "load"], [14, 2, 1, "", "merge_with"], [14, 2, 1, "", "register"], [14, 2, 1, "", "registered"], [14, 2, 1, "", "registry"], [14, 2, 1, "", "save"], [14, 3, 1, "", "settings"], [14, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.cameras.flir": [[15, 1, 1, "", "FlirCamera"], [15, 1, 1, "", "GrasshopperFlirCamera"]], "cc_hardware.drivers.cameras.flir.FlirCamera": [[15, 2, 1, "", "__del__"], [15, 2, 1, "", "accumulate"], [15, 2, 1, "", "calibrate"], [15, 2, 1, "", "close"], [15, 3, 1, "", "config"], [15, 2, 1, "", "create_from_config"], [15, 2, 1, "", "create_from_registry"], [15, 3, 1, "", "distortion_coefficients"], [15, 3, 1, "", "intrinsic_matrix"], [15, 3, 1, "", "is_okay"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 3, 1, "", "resolution"], [15, 3, 1, "", "settings"], [15, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera": [[15, 2, 1, "", "__del__"], [15, 2, 1, "", "accumulate"], [15, 2, 1, "", "calibrate"], [15, 2, 1, "", "close"], [15, 3, 1, "", "config"], [15, 2, 1, "", "create_from_config"], [15, 2, 1, "", "create_from_registry"], [15, 3, 1, "", "distortion_coefficients"], [15, 3, 1, "", "intrinsic_matrix"], [15, 3, 1, "", "is_okay"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 3, 1, "", "resolution"], [15, 3, 1, "", "settings"], [15, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.pkl": [[17, 1, 1, "", "PklCamera"]], "cc_hardware.drivers.cameras.pkl.PklCamera": [[17, 2, 1, "", "__del__"], [17, 2, 1, "", "accumulate"], [17, 2, 1, "", "calibrate"], [17, 2, 1, "", "close"], [17, 3, 1, "", "config"], [17, 2, 1, "", "create_from_config"], [17, 2, 1, "", "create_from_registry"], [17, 3, 1, "", "distortion_coefficients"], [17, 3, 1, "", "intrinsic_matrix"], [17, 3, 1, "", "is_okay"], [17, 2, 1, "", "register"], [17, 2, 1, "", "registered"], [17, 2, 1, "", "registry"], [17, 3, 1, "", "resolution"], [17, 3, 1, "", "settings"], [17, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.realsense": [[18, 1, 1, "", "RealsenseCamera"], [18, 1, 1, "", "RealsenseConfig"]], "cc_hardware.drivers.cameras.realsense.RealsenseCamera": [[18, 2, 1, "", "accumulate"], [18, 2, 1, "", "close"], [18, 3, 1, "", "config"], [18, 3, 1, "", "distortion_coefficients"], [18, 3, 1, "", "intrinsic_matrix"], [18, 3, 1, "", "is_okay"], [18, 3, 1, "", "resolution"]], "cc_hardware.drivers.cameras.usb": [[19, 1, 1, "", "USBCamera"], [19, 1, 1, "", "USBCameraConfig"]], "cc_hardware.drivers.cameras.usb.USBCamera": [[19, 2, 1, "", "__del__"], [19, 2, 1, "", "accumulate"], [19, 2, 1, "", "calibrate"], [19, 2, 1, "", "close"], [19, 3, 1, "", "config"], [19, 2, 1, "", "create_from_config"], [19, 2, 1, "", "create_from_registry"], [19, 3, 1, "", "distortion_coefficients"], [19, 3, 1, "", "intrinsic_matrix"], [19, 3, 1, "", "is_okay"], [19, 2, 1, "", "register"], [19, 2, 1, "", "registered"], [19, 2, 1, "", "registry"], [19, 3, 1, "", "resolution"], [19, 3, 1, "", "settings"], [19, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.usb.USBCameraConfig": [[19, 2, 1, "", "__getstate__"], [19, 2, 1, "", "__setstate__"], [19, 2, 1, "", "__str__"], [19, 2, 1, "", "compose"], [19, 5, 1, "", "config"], [19, 2, 1, "", "copy"], [19, 2, 1, "", "create"], [19, 2, 1, "", "create_from_registry"], [19, 5, 1, "", "custom"], [19, 2, 1, "", "instantiate"], [19, 2, 1, "", "load"], [19, 2, 1, "", "merge_with"], [19, 2, 1, "", "register"], [19, 2, 1, "", "registered"], [19, 2, 1, "", "registry"], [19, 2, 1, "", "save"], [19, 3, 1, "", "settings"], [19, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.mocap": [[21, 1, 1, "", "MotionCaptureSensor"], [21, 1, 1, "", "MotionCaptureSensorConfig"], [22, 0, 0, "-", "mocap"], [23, 0, 0, "-", "vive"]], "cc_hardware.drivers.mocap.MotionCaptureSensor": [[21, 2, 1, "", "__del__"], [21, 2, 1, "", "accumulate"], [21, 2, 1, "", "calibrate"], [21, 2, 1, "", "close"], [21, 3, 1, "", "config"], [21, 2, 1, "", "create_from_config"], [21, 2, 1, "", "create_from_registry"], [21, 3, 1, "", "is_okay"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "update"]], "cc_hardware.drivers.mocap.MotionCaptureSensorConfig": [[21, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__setstate__"], [21, 2, 1, "", "__str__"], [21, 2, 1, "", "compose"], [21, 5, 1, "", "config"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "create"], [21, 2, 1, "", "create_from_registry"], [21, 5, 1, "", "custom"], [21, 2, 1, "", "instantiate"], [21, 2, 1, "", "load"], [21, 2, 1, "", "merge_with"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 2, 1, "", "save"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.mocap.mocap": [[22, 1, 1, "", "MotionCaptureSensor"], [22, 1, 1, "", "MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor": [[22, 2, 1, "", "__del__"], [22, 2, 1, "", "accumulate"], [22, 2, 1, "", "calibrate"], [22, 2, 1, "", "close"], [22, 3, 1, "", "config"], [22, 2, 1, "", "create_from_config"], [22, 2, 1, "", "create_from_registry"], [22, 3, 1, "", "is_okay"], [22, 2, 1, "", "register"], [22, 2, 1, "", "registered"], [22, 2, 1, "", "registry"], [22, 3, 1, "", "settings"], [22, 2, 1, "", "update"]], "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig": [[22, 2, 1, "", "__getstate__"], [22, 2, 1, "", "__setstate__"], [22, 2, 1, "", "__str__"], [22, 2, 1, "", "compose"], [22, 5, 1, "", "config"], [22, 2, 1, "", "copy"], [22, 2, 1, "", "create"], [22, 2, 1, "", "create_from_registry"], [22, 5, 1, "", "custom"], [22, 2, 1, "", "instantiate"], [22, 2, 1, "", "load"], [22, 2, 1, "", "merge_with"], [22, 2, 1, "", "register"], [22, 2, 1, "", "registered"], [22, 2, 1, "", "registry"], [22, 2, 1, "", "save"], [22, 3, 1, "", "settings"], [22, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.mocap.vive": [[23, 1, 1, "", "ViveTrackerPose"], [23, 1, 1, "", "ViveTrackerSensorConfig"]], "cc_hardware.drivers.mocap.vive.ViveTrackerPose": [[23, 2, 1, "", "get_data"], [23, 2, 1, "", "process"], [23, 2, 1, "", "reset"]], "cc_hardware.drivers.safe_serial": [[24, 1, 1, "", "SafeSerial"]], "cc_hardware.drivers.safe_serial.SafeSerial": [[24, 2, 1, "", "__getattr__"], [24, 2, 1, "", "create"], [24, 2, 1, "", "read"], [24, 2, 1, "", "wait_for_start_talk"], [24, 2, 1, "", "wait_for_stop_talk"], [24, 2, 1, "", "write"], [24, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [24, 2, 1, "", "write_and_wait_for_start_talk"], [24, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.sensor": [[25, 1, 1, "", "Sensor"], [25, 1, 1, "", "SensorConfig"], [25, 1, 1, "", "SensorData"]], "cc_hardware.drivers.sensor.Sensor": [[25, 2, 1, "", "__del__"], [25, 2, 1, "", "calibrate"], [25, 2, 1, "", "close"], [25, 3, 1, "", "config"], [25, 2, 1, "", "create_from_config"], [25, 2, 1, "", "create_from_registry"], [25, 3, 1, "", "is_okay"], [25, 2, 1, "", "register"], [25, 2, 1, "", "registered"], [25, 2, 1, "", "registry"], [25, 3, 1, "", "settings"], [25, 2, 1, "", "update"]], "cc_hardware.drivers.sensor.SensorConfig": [[25, 2, 1, "", "__getstate__"], [25, 2, 1, "", "__setstate__"], [25, 2, 1, "", "__str__"], [25, 2, 1, "", "compose"], [25, 5, 1, "", "config"], [25, 2, 1, "", "copy"], [25, 2, 1, "", "create"], [25, 2, 1, "", "create_from_registry"], [25, 5, 1, "", "custom"], [25, 2, 1, "", "instantiate"], [25, 2, 1, "", "load"], [25, 2, 1, "", "merge_with"], [25, 2, 1, "", "register"], [25, 2, 1, "", "registered"], [25, 2, 1, "", "registry"], [25, 2, 1, "", "save"], [25, 3, 1, "", "settings"], [25, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.sensor.SensorData": [[25, 2, 1, "", "get_data"], [25, 2, 1, "", "process"], [25, 2, 1, "", "reset"]], "cc_hardware.drivers.spads": [[26, 1, 1, "", "SPADSensor"], [26, 1, 1, "", "SPADSensorConfig"], [27, 0, 0, "-", "pkl"], [28, 0, 0, "-", "spad"], [29, 0, 0, "-", "spad_wrappers"], [30, 0, 0, "-", "tmf8828"], [31, 0, 0, "-", "vl53l8ch"]], "cc_hardware.drivers.spads.SPADSensor": [[26, 2, 1, "", "__del__"], [26, 2, 1, "", "accumulate"], [26, 2, 1, "", "calibrate"], [26, 2, 1, "", "close"], [26, 3, 1, "", "config"], [26, 2, 1, "", "create_from_config"], [26, 2, 1, "", "create_from_registry"], [26, 3, 1, "", "is_okay"], [26, 3, 1, "", "num_bins"], [26, 2, 1, "", "register"], [26, 2, 1, "", "registered"], [26, 2, 1, "", "registry"], [26, 3, 1, "", "resolution"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "update"]], "cc_hardware.drivers.spads.SPADSensorConfig": [[26, 2, 1, "", "__getstate__"], [26, 2, 1, "", "__setstate__"], [26, 2, 1, "", "__str__"], [26, 2, 1, "", "compose"], [26, 5, 1, "", "config"], [26, 2, 1, "", "copy"], [26, 2, 1, "", "create"], [26, 2, 1, "", "create_from_registry"], [26, 5, 1, "", "custom"], [26, 2, 1, "", "instantiate"], [26, 2, 1, "", "load"], [26, 2, 1, "", "merge_with"], [26, 2, 1, "", "register"], [26, 2, 1, "", "registered"], [26, 2, 1, "", "registry"], [26, 2, 1, "", "save"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.pkl": [[27, 1, 1, "", "PklSPADSensor"], [27, 1, 1, "", "PklSPADSensorConfig"]], "cc_hardware.drivers.spads.pkl.PklSPADSensor": [[27, 2, 1, "", "__del__"], [27, 2, 1, "", "accumulate"], [27, 2, 1, "", "calibrate"], [27, 2, 1, "", "close"], [27, 3, 1, "", "config"], [27, 2, 1, "", "create_from_config"], [27, 2, 1, "", "create_from_registry"], [27, 3, 1, "", "is_okay"], [27, 3, 1, "", "num_bins"], [27, 2, 1, "", "register"], [27, 2, 1, "", "registered"], [27, 2, 1, "", "registry"], [27, 3, 1, "", "resolution"], [27, 3, 1, "", "settings"], [27, 2, 1, "", "update"]], "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig": [[27, 2, 1, "", "__getstate__"], [27, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "compose"], [27, 5, 1, "", "config"], [27, 2, 1, "", "copy"], [27, 2, 1, "", "create"], [27, 2, 1, "", "create_from_registry"], [27, 5, 1, "", "custom"], [27, 2, 1, "", "instantiate"], [27, 2, 1, "", "load"], [27, 2, 1, "", "merge_with"], [27, 2, 1, "", "register"], [27, 2, 1, "", "registered"], [27, 2, 1, "", "registry"], [27, 2, 1, "", "save"], [27, 3, 1, "", "settings"], [27, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.spad": [[28, 1, 1, "", "SPADSensor"], [28, 1, 1, "", "SPADSensorConfig"]], "cc_hardware.drivers.spads.spad.SPADSensor": [[28, 2, 1, "", "__del__"], [28, 2, 1, "", "accumulate"], [28, 2, 1, "", "calibrate"], [28, 2, 1, "", "close"], [28, 3, 1, "", "config"], [28, 2, 1, "", "create_from_config"], [28, 2, 1, "", "create_from_registry"], [28, 3, 1, "", "is_okay"], [28, 3, 1, "", "num_bins"], [28, 2, 1, "", "register"], [28, 2, 1, "", "registered"], [28, 2, 1, "", "registry"], [28, 3, 1, "", "resolution"], [28, 3, 1, "", "settings"], [28, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad.SPADSensorConfig": [[28, 2, 1, "", "__getstate__"], [28, 2, 1, "", "__setstate__"], [28, 2, 1, "", "__str__"], [28, 2, 1, "", "compose"], [28, 5, 1, "", "config"], [28, 2, 1, "", "copy"], [28, 2, 1, "", "create"], [28, 2, 1, "", "create_from_registry"], [28, 5, 1, "", "custom"], [28, 2, 1, "", "instantiate"], [28, 2, 1, "", "load"], [28, 2, 1, "", "merge_with"], [28, 2, 1, "", "register"], [28, 2, 1, "", "registered"], [28, 2, 1, "", "registry"], [28, 2, 1, "", "save"], [28, 3, 1, "", "settings"], [28, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.spad_wrappers": [[29, 1, 1, "", "SPADMergeWrapper"], [29, 1, 1, "", "SPADMergeWrapperConfig"], [29, 1, 1, "", "SPADMovingAverageWrapper"], [29, 1, 1, "", "SPADMovingAverageWrapperConfig"], [29, 1, 1, "", "SPADWrapper"], [29, 1, 1, "", "SPADWrapperConfig"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig": [[29, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig": [[29, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig": [[29, 3, 1, "", "settings"]], "cc_hardware.drivers.spads.tmf8828": [[30, 1, 1, "", "RangeMode"], [30, 1, 1, "", "SPADID"], [30, 1, 1, "", "TMF8828Config"], [30, 1, 1, "", "TMF8828Histogram"], [30, 1, 1, "", "TMF8828Sensor"]], "cc_hardware.drivers.spads.tmf8828.RangeMode": [[30, 2, 1, "", "__dir__"], [30, 2, 1, "", "__format__"], [30, 2, 1, "", "__hash__"], [30, 2, 1, "", "__reduce_ex__"], [30, 2, 1, "", "__repr__"], [30, 2, 1, "", "__str__"], [30, 2, 1, "", "name"], [30, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.SPADID": [[30, 2, 1, "", "__dir__"], [30, 2, 1, "", "__format__"], [30, 2, 1, "", "__hash__"], [30, 2, 1, "", "__reduce_ex__"], [30, 2, 1, "", "__repr__"], [30, 2, 1, "", "__str__"], [30, 2, 1, "", "get_active_channels_per_subcapture"], [30, 2, 1, "", "get_num_channels"], [30, 2, 1, "", "get_num_pixels"], [30, 2, 1, "", "get_resolution"], [30, 2, 1, "", "name"], [30, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram": [[30, 2, 1, "", "get_data"], [30, 3, 1, "", "has_data"], [30, 2, 1, "", "process"], [30, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor": [[30, 2, 1, "", "accumulate"], [30, 2, 1, "", "calibrate"], [30, 2, 1, "", "close"], [30, 3, 1, "", "config"], [30, 3, 1, "", "is_okay"], [30, 3, 1, "", "num_bins"], [30, 3, 1, "", "resolution"]], "cc_hardware.drivers.spads.vl53l8ch": [[31, 1, 1, "", "RangingMode"], [31, 1, 1, "", "VL53L8CHConfig"], [31, 1, 1, "", "VL53L8CHConfig4x4"], [31, 1, 1, "", "VL53L8CHConfig8x8"], [31, 1, 1, "", "VL53L8CHHistogram"], [31, 1, 1, "", "VL53L8CHSensor"], [31, 1, 1, "", "VL53L8CHSharedConfig"]], "cc_hardware.drivers.spads.vl53l8ch.RangingMode": [[31, 2, 1, "", "__dir__"], [31, 2, 1, "", "__format__"], [31, 2, 1, "", "__hash__"], [31, 2, 1, "", "__reduce_ex__"], [31, 2, 1, "", "__repr__"], [31, 2, 1, "", "__str__"], [31, 2, 1, "", "name"], [31, 2, 1, "", "value"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig": [[31, 2, 1, "", "__getstate__"], [31, 2, 1, "", "__setstate__"], [31, 2, 1, "", "__str__"], [31, 2, 1, "", "compose"], [31, 5, 1, "", "config"], [31, 2, 1, "", "copy"], [31, 2, 1, "", "create"], [31, 2, 1, "", "create_from_registry"], [31, 5, 1, "", "custom"], [31, 2, 1, "", "instantiate"], [31, 2, 1, "", "load"], [31, 2, 1, "", "merge_with"], [31, 2, 1, "", "pack"], [31, 2, 1, "", "register"], [31, 2, 1, "", "registered"], [31, 2, 1, "", "registry"], [31, 2, 1, "", "save"], [31, 3, 1, "", "settings"], [31, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4": [[31, 2, 1, "", "__getstate__"], [31, 2, 1, "", "__setstate__"], [31, 2, 1, "", "__str__"], [31, 2, 1, "", "compose"], [31, 5, 1, "", "config"], [31, 2, 1, "", "copy"], [31, 2, 1, "", "create"], [31, 2, 1, "", "create_from_registry"], [31, 5, 1, "", "custom"], [31, 2, 1, "", "instantiate"], [31, 2, 1, "", "load"], [31, 2, 1, "", "merge_with"], [31, 2, 1, "", "pack"], [31, 2, 1, "", "register"], [31, 2, 1, "", "registered"], [31, 2, 1, "", "registry"], [31, 2, 1, "", "save"], [31, 3, 1, "", "settings"], [31, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8": [[31, 2, 1, "", "__getstate__"], [31, 2, 1, "", "__setstate__"], [31, 2, 1, "", "__str__"], [31, 2, 1, "", "compose"], [31, 5, 1, "", "config"], [31, 2, 1, "", "copy"], [31, 2, 1, "", "create"], [31, 2, 1, "", "create_from_registry"], [31, 5, 1, "", "custom"], [31, 2, 1, "", "instantiate"], [31, 2, 1, "", "load"], [31, 2, 1, "", "merge_with"], [31, 2, 1, "", "pack"], [31, 2, 1, "", "register"], [31, 2, 1, "", "registered"], [31, 2, 1, "", "registry"], [31, 2, 1, "", "save"], [31, 3, 1, "", "settings"], [31, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram": [[31, 2, 1, "", "get_data"], [31, 3, 1, "", "has_data"], [31, 2, 1, "", "process"], [31, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor": [[31, 2, 1, "", "__del__"], [31, 2, 1, "", "accumulate"], [31, 2, 1, "", "calibrate"], [31, 2, 1, "", "close"], [31, 3, 1, "", "config"], [31, 2, 1, "", "create_from_config"], [31, 2, 1, "", "create_from_registry"], [31, 3, 1, "", "is_okay"], [31, 3, 1, "", "num_bins"], [31, 2, 1, "", "register"], [31, 2, 1, "", "registered"], [31, 2, 1, "", "registry"], [31, 3, 1, "", "resolution"], [31, 3, 1, "", "settings"], [31, 2, 1, "", "update"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig": [[31, 2, 1, "", "__getstate__"], [31, 2, 1, "", "__setstate__"], [31, 2, 1, "", "__str__"], [31, 2, 1, "", "compose"], [31, 5, 1, "", "config"], [31, 2, 1, "", "copy"], [31, 2, 1, "", "create"], [31, 2, 1, "", "create_from_registry"], [31, 5, 1, "", "custom"], [31, 2, 1, "", "instantiate"], [31, 2, 1, "", "load"], [31, 2, 1, "", "merge_with"], [31, 2, 1, "", "pack"], [31, 2, 1, "", "register"], [31, 2, 1, "", "registered"], [31, 2, 1, "", "registry"], [31, 2, 1, "", "save"], [31, 3, 1, "", "settings"], [31, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors": [[32, 1, 1, "", "DummyStepperMotor"], [32, 1, 1, "", "StepperMotor"], [32, 1, 1, "", "StepperMotorConfig"], [32, 1, 1, "", "StepperMotorSystem"], [32, 1, 1, "", "StepperMotorSystemAxis"], [32, 1, 1, "", "StepperMotorSystemConfig"], [33, 0, 0, "-", "kinesis_stepper"], [34, 0, 0, "-", "stepper_controller"], [35, 0, 0, "-", "stepper_motor"], [36, 0, 0, "-", "stepper_system"], [37, 0, 0, "-", "telemetrix_stepper"]], "cc_hardware.drivers.stepper_motors.StepperMotor": [[32, 2, 1, "", "close"], [32, 3, 1, "", "config"], [32, 2, 1, "", "create_from_config"], [32, 2, 1, "", "create_from_registry"], [32, 2, 1, "", "home"], [32, 3, 1, "", "is_moving"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.StepperMotorConfig": [[32, 2, 1, "", "__getstate__"], [32, 2, 1, "", "__setstate__"], [32, 2, 1, "", "__str__"], [32, 2, 1, "", "compose"], [32, 5, 1, "", "config"], [32, 2, 1, "", "copy"], [32, 2, 1, "", "create"], [32, 2, 1, "", "create_from_registry"], [32, 5, 1, "", "custom"], [32, 2, 1, "", "instantiate"], [32, 2, 1, "", "load"], [32, 2, 1, "", "merge_with"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"], [32, 2, 1, "", "save"], [32, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystem": [[32, 2, 1, "", "__getattr__"], [32, 3, 1, "", "axes"], [32, 2, 1, "", "close"], [32, 3, 1, "", "config"], [32, 2, 1, "", "create_from_config"], [32, 2, 1, "", "create_from_registry"], [32, 3, 1, "", "is_moving"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis": [[32, 2, 1, "", "__dir__"], [32, 2, 1, "", "__format__"], [32, 2, 1, "", "__hash__"], [32, 2, 1, "", "__reduce_ex__"], [32, 2, 1, "", "__repr__"], [32, 2, 1, "", "__str__"], [32, 2, 1, "", "name"], [32, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig": [[32, 2, 1, "", "__getstate__"], [32, 2, 1, "", "__setstate__"], [32, 2, 1, "", "__str__"], [32, 2, 1, "", "compose"], [32, 5, 1, "", "config"], [32, 2, 1, "", "copy"], [32, 2, 1, "", "create"], [32, 2, 1, "", "create_from_registry"], [32, 5, 1, "", "custom"], [32, 2, 1, "", "instantiate"], [32, 2, 1, "", "load"], [32, 2, 1, "", "merge_with"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"], [32, 2, 1, "", "save"], [32, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[33, 1, 1, "", "AzimuthElevationSystem"], [33, 1, 1, "", "KinesisRotationStage"], [33, 1, 1, "", "KinesisStepperMotor"], [33, 1, 1, "", "KinesisStepperMotorSystem"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage": [[33, 2, 1, "", "close"], [33, 2, 1, "", "home"], [33, 2, 1, "", "initialize"], [33, 3, 1, "", "is_okay"], [33, 3, 1, "", "lower_limit"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 3, 1, "", "upper_limit"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor": [[33, 2, 1, "", "close"], [33, 2, 1, "", "home"], [33, 2, 1, "", "initialize"], [33, 3, 1, "", "is_okay"], [33, 3, 1, "", "lower_limit"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 3, 1, "", "upper_limit"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[34, 1, 1, "", "SnakeStepperController"], [34, 1, 1, "", "StepperController"]], "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController": [[34, 2, 1, "", "create_from_registry"], [34, 2, 1, "", "get_position"], [34, 2, 1, "", "register"], [34, 2, 1, "", "registered"], [34, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController": [[34, 2, 1, "", "create_from_registry"], [34, 2, 1, "", "get_position"], [34, 2, 1, "", "register"], [34, 2, 1, "", "registered"], [34, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[35, 1, 1, "", "DummyStepperMotor"], [35, 1, 1, "", "StepperMotor"], [35, 1, 1, "", "StepperMotorConfig"]], "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor": [[35, 2, 1, "", "close"], [35, 3, 1, "", "config"], [35, 2, 1, "", "create_from_config"], [35, 2, 1, "", "create_from_registry"], [35, 2, 1, "", "home"], [35, 3, 1, "", "is_moving"], [35, 3, 1, "", "is_okay"], [35, 2, 1, "", "move_by"], [35, 2, 1, "", "move_to"], [35, 3, 1, "", "position"], [35, 2, 1, "", "register"], [35, 2, 1, "", "registered"], [35, 2, 1, "", "registry"], [35, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig": [[35, 2, 1, "", "__getstate__"], [35, 2, 1, "", "__setstate__"], [35, 2, 1, "", "__str__"], [35, 2, 1, "", "compose"], [35, 5, 1, "", "config"], [35, 2, 1, "", "copy"], [35, 2, 1, "", "create"], [35, 2, 1, "", "create_from_registry"], [35, 5, 1, "", "custom"], [35, 2, 1, "", "instantiate"], [35, 2, 1, "", "load"], [35, 2, 1, "", "merge_with"], [35, 2, 1, "", "register"], [35, 2, 1, "", "registered"], [35, 2, 1, "", "registry"], [35, 2, 1, "", "save"], [35, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[36, 1, 1, "", "DummyStepperSystem"], [36, 1, 1, "", "StepperMotorSystem"], [36, 1, 1, "", "StepperMotorSystemAxis"], [36, 1, 1, "", "StepperMotorSystemConfig"]], "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem": [[36, 2, 1, "", "__getattr__"], [36, 3, 1, "", "axes"], [36, 2, 1, "", "close"], [36, 3, 1, "", "config"], [36, 2, 1, "", "create_from_config"], [36, 2, 1, "", "create_from_registry"], [36, 3, 1, "", "is_moving"], [36, 3, 1, "", "is_okay"], [36, 2, 1, "", "move_by"], [36, 2, 1, "", "move_to"], [36, 2, 1, "", "register"], [36, 2, 1, "", "registered"], [36, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem": [[36, 2, 1, "", "__getattr__"], [36, 3, 1, "", "axes"], [36, 2, 1, "", "close"], [36, 3, 1, "", "config"], [36, 2, 1, "", "create_from_config"], [36, 2, 1, "", "create_from_registry"], [36, 3, 1, "", "is_moving"], [36, 3, 1, "", "is_okay"], [36, 2, 1, "", "move_by"], [36, 2, 1, "", "move_to"], [36, 2, 1, "", "register"], [36, 2, 1, "", "registered"], [36, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis": [[36, 2, 1, "", "__dir__"], [36, 2, 1, "", "__format__"], [36, 2, 1, "", "__hash__"], [36, 2, 1, "", "__reduce_ex__"], [36, 2, 1, "", "__repr__"], [36, 2, 1, "", "__str__"], [36, 2, 1, "", "name"], [36, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig": [[36, 2, 1, "", "__getstate__"], [36, 2, 1, "", "__setstate__"], [36, 2, 1, "", "__str__"], [36, 2, 1, "", "compose"], [36, 5, 1, "", "config"], [36, 2, 1, "", "copy"], [36, 2, 1, "", "create"], [36, 2, 1, "", "create_from_registry"], [36, 5, 1, "", "custom"], [36, 2, 1, "", "instantiate"], [36, 2, 1, "", "load"], [36, 2, 1, "", "merge_with"], [36, 2, 1, "", "register"], [36, 2, 1, "", "registered"], [36, 2, 1, "", "registry"], [36, 2, 1, "", "save"], [36, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[37, 1, 1, "", "DualDrive2AxisGantryConfig"], [37, 1, 1, "", "DualDrive2AxisGantryXConfig"], [37, 1, 1, "", "DualDrive2AxisGantryY1Config"], [37, 1, 1, "", "DualDrive2AxisGantryY2Config"], [37, 1, 1, "", "SingleDrive1AxisGantryConfig"], [37, 1, 1, "", "SingleDrive1AxisGantryXConfig"], [37, 1, 1, "", "SingleDrive1AxisGantryYConfig"], [37, 1, 1, "", "TelemetrixStepperMotor"], [37, 1, 1, "", "TelemetrixStepperMotorConfig"], [37, 1, 1, "", "TelemetrixStepperMotorSystem"], [37, 1, 1, "", "TelemetrixStepperMotorSystemConfig"], [37, 1, 1, "", "TelemetrixStepperMotorXConfig"], [37, 1, 1, "", "TelemetrixStepperMotorYConfig"], [37, 1, 1, "", "TelemetrixStepperMotorZConfig"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor": [[37, 2, 1, "", "__getattr__"], [37, 2, 1, "", "close"], [37, 2, 1, "", "cm_to_revs"], [37, 2, 1, "", "home"], [37, 3, 1, "", "id"], [37, 3, 1, "", "is_moving"], [37, 3, 1, "", "is_okay"], [37, 2, 1, "", "move_by"], [37, 2, 1, "", "move_to"], [37, 3, 1, "", "position"], [37, 2, 1, "", "revs_to_cm"], [37, 2, 1, "", "set_absolute_target_position_cm"], [37, 2, 1, "", "set_target_position_cm"], [37, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem": [[37, 2, 1, "", "close"]], "cc_hardware.tools": [[53, 1, 1, "", "Registry"], [53, 1, 1, "", "ToolRegistry"], [39, 0, 0, "-", "calibration"], [40, 0, 0, "-", "camera_viewer"], [42, 0, 0, "-", "dashboard"], [52, 0, 0, "-", "flash"], [54, 0, 0, "-", "jogger"]], "cc_hardware.tools.Registry": [[53, 2, 1, "", "create_from_registry"], [53, 2, 1, "", "register"], [53, 2, 1, "", "registered"], [53, 2, 1, "", "registry"]], "cc_hardware.tools.ToolRegistry": [[53, 2, 1, "", "create_from_registry"], [53, 2, 1, "", "register"], [53, 2, 1, "", "registered"], [53, 2, 1, "", "registry"]], "cc_hardware.tools.calibration": [[39, 4, 1, "", "calibrate"], [39, 4, 1, "", "tmf8828_calibrate"]], "cc_hardware.tools.dashboard": [[42, 1, 1, "", "Dashboard"], [42, 1, 1, "", "DashboardConfig"], [42, 1, 1, "", "SPADDashboard"], [42, 1, 1, "", "SPADDashboardConfig"], [41, 0, 0, "-", "dashboard"], [44, 0, 0, "-", "mocap_dashboard"], [48, 0, 0, "-", "spad_dashboard"]], "cc_hardware.tools.dashboard.Dashboard": [[42, 2, 1, "", "close"], [42, 3, 1, "", "config"], [42, 2, 1, "", "create_from_config"], [42, 2, 1, "", "create_from_registry"], [42, 3, 1, "", "is_okay"], [42, 2, 1, "", "register"], [42, 2, 1, "", "registered"], [42, 2, 1, "", "registry"], [42, 2, 1, "", "run"], [42, 2, 1, "", "setup"], [42, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.DashboardConfig": [[42, 2, 1, "", "__getstate__"], [42, 2, 1, "", "__setstate__"], [42, 2, 1, "", "__str__"], [42, 2, 1, "", "compose"], [42, 5, 1, "", "config"], [42, 2, 1, "", "copy"], [42, 2, 1, "", "create"], [42, 2, 1, "", "create_from_registry"], [42, 5, 1, "", "custom"], [42, 2, 1, "", "instantiate"], [42, 2, 1, "", "load"], [42, 2, 1, "", "merge_with"], [42, 2, 1, "", "register"], [42, 2, 1, "", "registered"], [42, 2, 1, "", "registry"], [42, 2, 1, "", "save"], [42, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.SPADDashboard": [[42, 2, 1, "", "close"], [42, 3, 1, "", "config"], [42, 2, 1, "", "create_from_config"], [42, 2, 1, "", "create_from_registry"], [42, 3, 1, "", "is_okay"], [42, 3, 1, "", "max_bin"], [42, 3, 1, "", "min_bin"], [42, 2, 1, "", "register"], [42, 2, 1, "", "registered"], [42, 2, 1, "", "registry"], [42, 2, 1, "", "run"], [42, 3, 1, "", "sensor"], [42, 2, 1, "", "setup"], [42, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.SPADDashboardConfig": [[42, 2, 1, "", "__getstate__"], [42, 2, 1, "", "__setstate__"], [42, 2, 1, "", "__str__"], [42, 2, 1, "", "compose"], [42, 5, 1, "", "config"], [42, 2, 1, "", "copy"], [42, 2, 1, "", "create"], [42, 2, 1, "", "create_from_registry"], [42, 5, 1, "", "custom"], [42, 2, 1, "", "instantiate"], [42, 2, 1, "", "load"], [42, 2, 1, "", "merge_with"], [42, 2, 1, "", "register"], [42, 2, 1, "", "registered"], [42, 2, 1, "", "registry"], [42, 2, 1, "", "save"], [42, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.dashboard": [[41, 1, 1, "", "Dashboard"], [41, 1, 1, "", "DashboardConfig"]], "cc_hardware.tools.dashboard.dashboard.Dashboard": [[41, 2, 1, "", "close"], [41, 3, 1, "", "config"], [41, 2, 1, "", "create_from_config"], [41, 2, 1, "", "create_from_registry"], [41, 3, 1, "", "is_okay"], [41, 2, 1, "", "register"], [41, 2, 1, "", "registered"], [41, 2, 1, "", "registry"], [41, 2, 1, "", "run"], [41, 2, 1, "", "setup"], [41, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.dashboard.DashboardConfig": [[41, 2, 1, "", "__getstate__"], [41, 2, 1, "", "__setstate__"], [41, 2, 1, "", "__str__"], [41, 2, 1, "", "compose"], [41, 5, 1, "", "config"], [41, 2, 1, "", "copy"], [41, 2, 1, "", "create"], [41, 2, 1, "", "create_from_registry"], [41, 5, 1, "", "custom"], [41, 2, 1, "", "instantiate"], [41, 2, 1, "", "load"], [41, 2, 1, "", "merge_with"], [41, 2, 1, "", "register"], [41, 2, 1, "", "registered"], [41, 2, 1, "", "registry"], [41, 2, 1, "", "save"], [41, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[44, 1, 1, "", "MotionCaptureDashboard"], [44, 1, 1, "", "MotionCaptureDashboardConfig"], [43, 0, 0, "-", "dash"], [45, 0, 0, "-", "mocap_dashboard"], [46, 0, 0, "-", "pyqtgraph"]], "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard": [[44, 2, 1, "", "close"], [44, 3, 1, "", "config"], [44, 2, 1, "", "create_from_config"], [44, 2, 1, "", "create_from_registry"], [44, 3, 1, "", "is_okay"], [44, 2, 1, "", "register"], [44, 2, 1, "", "registered"], [44, 2, 1, "", "registry"], [44, 2, 1, "", "run"], [44, 3, 1, "", "sensor"], [44, 2, 1, "", "setup"], [44, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig": [[44, 2, 1, "", "__getstate__"], [44, 2, 1, "", "__setstate__"], [44, 2, 1, "", "__str__"], [44, 2, 1, "", "compose"], [44, 5, 1, "", "config"], [44, 2, 1, "", "copy"], [44, 2, 1, "", "create"], [44, 2, 1, "", "create_from_registry"], [44, 5, 1, "", "custom"], [44, 2, 1, "", "instantiate"], [44, 2, 1, "", "load"], [44, 2, 1, "", "merge_with"], [44, 2, 1, "", "register"], [44, 2, 1, "", "registered"], [44, 2, 1, "", "registry"], [44, 2, 1, "", "save"], [44, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[43, 1, 1, "", "DashMotionCaptureDashboard"], [43, 1, 1, "", "DashMotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard": [[43, 2, 1, "", "close"], [43, 3, 1, "", "config"], [43, 2, 1, "", "create_from_config"], [43, 2, 1, "", "create_from_registry"], [43, 3, 1, "", "is_okay"], [43, 2, 1, "", "register"], [43, 2, 1, "", "registered"], [43, 2, 1, "", "registry"], [43, 2, 1, "", "run"], [43, 3, 1, "", "sensor"], [43, 2, 1, "", "setup"], [43, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig": [[43, 2, 1, "", "__getstate__"], [43, 2, 1, "", "__setstate__"], [43, 2, 1, "", "__str__"], [43, 2, 1, "", "compose"], [43, 5, 1, "", "config"], [43, 2, 1, "", "copy"], [43, 2, 1, "", "create"], [43, 2, 1, "", "create_from_registry"], [43, 5, 1, "", "custom"], [43, 2, 1, "", "instantiate"], [43, 2, 1, "", "load"], [43, 2, 1, "", "merge_with"], [43, 2, 1, "", "register"], [43, 2, 1, "", "registered"], [43, 2, 1, "", "registry"], [43, 2, 1, "", "save"], [43, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[45, 1, 1, "", "MotionCaptureDashboard"], [45, 1, 1, "", "MotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard": [[45, 2, 1, "", "close"], [45, 3, 1, "", "config"], [45, 2, 1, "", "create_from_config"], [45, 2, 1, "", "create_from_registry"], [45, 3, 1, "", "is_okay"], [45, 2, 1, "", "register"], [45, 2, 1, "", "registered"], [45, 2, 1, "", "registry"], [45, 2, 1, "", "run"], [45, 3, 1, "", "sensor"], [45, 2, 1, "", "setup"], [45, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig": [[45, 2, 1, "", "__getstate__"], [45, 2, 1, "", "__setstate__"], [45, 2, 1, "", "__str__"], [45, 2, 1, "", "compose"], [45, 5, 1, "", "config"], [45, 2, 1, "", "copy"], [45, 2, 1, "", "create"], [45, 2, 1, "", "create_from_registry"], [45, 5, 1, "", "custom"], [45, 2, 1, "", "instantiate"], [45, 2, 1, "", "load"], [45, 2, 1, "", "merge_with"], [45, 2, 1, "", "register"], [45, 2, 1, "", "registered"], [45, 2, 1, "", "registry"], [45, 2, 1, "", "save"], [45, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[46, 1, 1, "", "DashboardWindow"], [46, 1, 1, "", "PyQtGraphMotionCaptureDashboard"], [46, 1, 1, "", "PyQtGraphMotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow": [[46, 2, 1, "", "keyPressEvent"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard": [[46, 2, 1, "", "close"], [46, 3, 1, "", "config"], [46, 2, 1, "", "create_from_config"], [46, 2, 1, "", "create_from_registry"], [46, 3, 1, "", "is_okay"], [46, 2, 1, "", "register"], [46, 2, 1, "", "registered"], [46, 2, 1, "", "registry"], [46, 2, 1, "", "run"], [46, 3, 1, "", "sensor"], [46, 2, 1, "", "setup"], [46, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig": [[46, 2, 1, "", "__getstate__"], [46, 2, 1, "", "__setstate__"], [46, 2, 1, "", "__str__"], [46, 2, 1, "", "compose"], [46, 5, 1, "", "config"], [46, 2, 1, "", "copy"], [46, 2, 1, "", "create"], [46, 2, 1, "", "create_from_registry"], [46, 5, 1, "", "custom"], [46, 2, 1, "", "instantiate"], [46, 2, 1, "", "load"], [46, 2, 1, "", "merge_with"], [46, 2, 1, "", "register"], [46, 2, 1, "", "registered"], [46, 2, 1, "", "registry"], [46, 2, 1, "", "save"], [46, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.spad_dashboard": [[48, 1, 1, "", "SPADDashboard"], [48, 1, 1, "", "SPADDashboardConfig"], [47, 0, 0, "-", "dash"], [49, 0, 0, "-", "matplotlib"], [50, 0, 0, "-", "pyqtgraph"], [51, 0, 0, "-", "spad_dashboard"]], "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard": [[48, 2, 1, "", "close"], [48, 3, 1, "", "config"], [48, 2, 1, "", "create_from_config"], [48, 2, 1, "", "create_from_registry"], [48, 3, 1, "", "is_okay"], [48, 3, 1, "", "max_bin"], [48, 3, 1, "", "min_bin"], [48, 2, 1, "", "register"], [48, 2, 1, "", "registered"], [48, 2, 1, "", "registry"], [48, 2, 1, "", "run"], [48, 3, 1, "", "sensor"], [48, 2, 1, "", "setup"], [48, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig": [[48, 2, 1, "", "__getstate__"], [48, 2, 1, "", "__setstate__"], [48, 2, 1, "", "__str__"], [48, 2, 1, "", "compose"], [48, 5, 1, "", "config"], [48, 2, 1, "", "copy"], [48, 2, 1, "", "create"], [48, 2, 1, "", "create_from_registry"], [48, 5, 1, "", "custom"], [48, 2, 1, "", "instantiate"], [48, 2, 1, "", "load"], [48, 2, 1, "", "merge_with"], [48, 2, 1, "", "register"], [48, 2, 1, "", "registered"], [48, 2, 1, "", "registry"], [48, 2, 1, "", "save"], [48, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboard.spad_dashboard.dash": [[47, 1, 1, "", "DashDashboard"], [47, 1, 1, "", "DashDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard": [[47, 2, 1, "", "run"], [47, 2, 1, "", "setup"], [47, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.matplotlib": [[49, 1, 1, "", "MatplotlibDashboard"], [49, 1, 1, "", "MatplotlibDashboardConfig"], [49, 4, 1, "", "save_animation"]], "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard": [[49, 2, 1, "", "adjust_ylim"], [49, 2, 1, "", "run"], [49, 2, 1, "", "setup"], [49, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[50, 1, 1, "", "DashboardWindow"], [50, 1, 1, "", "PyQtGraphDashboard"], [50, 1, 1, "", "PyQtGraphDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow": [[50, 2, 1, "", "init_ui"], [50, 2, 1, "", "keyPressEvent"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard": [[50, 2, 1, "", "run"], [50, 2, 1, "", "setup"], [50, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[51, 1, 1, "", "SPADDashboard"], [51, 1, 1, "", "SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard": [[51, 2, 1, "", "close"], [51, 3, 1, "", "config"], [51, 2, 1, "", "create_from_config"], [51, 2, 1, "", "create_from_registry"], [51, 3, 1, "", "is_okay"], [51, 3, 1, "", "max_bin"], [51, 3, 1, "", "min_bin"], [51, 2, 1, "", "register"], [51, 2, 1, "", "registered"], [51, 2, 1, "", "registry"], [51, 2, 1, "", "run"], [51, 3, 1, "", "sensor"], [51, 2, 1, "", "setup"], [51, 2, 1, "", "update"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig": [[51, 2, 1, "", "__getstate__"], [51, 2, 1, "", "__setstate__"], [51, 2, 1, "", "__str__"], [51, 2, 1, "", "compose"], [51, 5, 1, "", "config"], [51, 2, 1, "", "copy"], [51, 2, 1, "", "create"], [51, 2, 1, "", "create_from_registry"], [51, 5, 1, "", "custom"], [51, 2, 1, "", "instantiate"], [51, 2, 1, "", "load"], [51, 2, 1, "", "merge_with"], [51, 2, 1, "", "register"], [51, 2, 1, "", "registered"], [51, 2, 1, "", "registry"], [51, 2, 1, "", "save"], [51, 2, 1, "", "to_yaml"]], "cc_hardware.tools.jogger": [[54, 1, 1, "", "LogBufferHandler"], [54, 1, 1, "", "OutputCapture"]], "cc_hardware.tools.jogger.LogBufferHandler": [[54, 2, 1, "", "__repr__"], [54, 2, 1, "", "acquire"], [54, 2, 1, "", "addFilter"], [54, 2, 1, "", "close"], [54, 2, 1, "", "createLock"], [54, 2, 1, "", "emit"], [54, 2, 1, "", "filter"], [54, 2, 1, "", "flush"], [54, 2, 1, "", "format"], [54, 2, 1, "", "handle"], [54, 2, 1, "", "handleError"], [54, 2, 1, "", "release"], [54, 2, 1, "", "removeFilter"], [54, 2, 1, "", "setFormatter"], [54, 2, 1, "", "setLevel"]], "cc_hardware.utils": [[57, 1, 1, "", "BlockingDeque"], [57, 1, 1, "", "Component"], [57, 1, 1, "", "Config"], [57, 1, 1, "", "Manager"], [57, 1, 1, "", "Registry"], [57, 1, 1, "", "SingletonABCMeta"], [57, 1, 1, "", "SingletonMeta"], [57, 4, 1, "", "arduino_upload"], [57, 4, 1, "", "call_async"], [57, 4, 1, "", "call_async_gather"], [57, 4, 1, "", "call_async_value"], [55, 0, 0, "-", "constants"], [56, 0, 0, "-", "file_handlers"], [57, 4, 1, "", "find_device_by_label"], [57, 4, 1, "", "find_ports"], [57, 4, 1, "", "get_object"], [58, 0, 0, "-", "logger"], [59, 0, 0, "-", "manager"], [60, 0, 0, "-", "matplotlib"], [63, 0, 0, "-", "misc"], [57, 4, 1, "", "register"], [68, 0, 0, "-", "registry"], [69, 0, 0, "-", "setting"], [70, 0, 0, "-", "transformations"]], "cc_hardware.utils.BlockingDeque": [[57, 2, 1, "", "__getattr__"], [57, 2, 1, "", "__getitem__"], [57, 2, 1, "", "__len__"], [57, 2, 1, "", "__repr__"], [57, 2, 1, "", "append"]], "cc_hardware.utils.Component": [[57, 2, 1, "", "close"], [57, 3, 1, "", "config"], [57, 2, 1, "", "create_from_config"], [57, 2, 1, "", "create_from_registry"], [57, 3, 1, "", "is_okay"], [57, 2, 1, "", "register"], [57, 2, 1, "", "registered"], [57, 2, 1, "", "registry"]], "cc_hardware.utils.Config": [[57, 2, 1, "", "__getstate__"], [57, 2, 1, "", "__setstate__"], [57, 2, 1, "", "__str__"], [57, 2, 1, "", "compose"], [57, 5, 1, "", "config"], [57, 2, 1, "", "copy"], [57, 2, 1, "", "create"], [57, 2, 1, "", "create_from_registry"], [57, 5, 1, "", "custom"], [57, 2, 1, "", "instantiate"], [57, 2, 1, "", "load"], [57, 2, 1, "", "merge_with"], [57, 2, 1, "", "register"], [57, 2, 1, "", "registered"], [57, 2, 1, "", "registry"], [57, 2, 1, "", "save"], [57, 2, 1, "", "to_yaml"]], "cc_hardware.utils.Manager": [[57, 2, 1, "", "__enter__"], [57, 2, 1, "", "__exit__"], [57, 2, 1, "", "add"], [57, 2, 1, "", "close"], [57, 3, 1, "", "components"], [57, 3, 1, "", "is_okay"], [57, 2, 1, "", "run"]], "cc_hardware.utils.Registry": [[57, 2, 1, "", "create_from_registry"], [57, 2, 1, "", "register"], [57, 2, 1, "", "registered"], [57, 2, 1, "", "registry"]], "cc_hardware.utils.SingletonABCMeta": [[57, 2, 1, "", "__call__"], [57, 2, 1, "", "__instancecheck__"], [57, 2, 1, "", "__subclasscheck__"], [57, 2, 1, "", "instance"], [57, 2, 1, "", "register"]], "cc_hardware.utils.SingletonMeta": [[57, 2, 1, "", "__call__"], [57, 2, 1, "", "instance"]], "cc_hardware.utils.constants": [[55, 6, 1, "", "C"]], "cc_hardware.utils.file_handlers": [[56, 1, 1, "", "PklHandler"], [56, 1, 1, "", "PklReader"], [56, 1, 1, "", "VideoWriter"]], "cc_hardware.utils.file_handlers.PklHandler": [[56, 2, 1, "", "__len__"], [56, 2, 1, "", "append"], [56, 2, 1, "", "load"], [56, 2, 1, "", "load_all"], [56, 2, 1, "", "update_index"], [56, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.PklReader": [[56, 2, 1, "", "__len__"], [56, 2, 1, "", "append"], [56, 2, 1, "", "load"], [56, 2, 1, "", "load_all"], [56, 2, 1, "", "update_index"], [56, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.VideoWriter": [[56, 2, 1, "", "__del__"], [56, 2, 1, "", "append"], [56, 2, 1, "", "close"]], "cc_hardware.utils.logger": [[58, 1, 1, "", "FileHandler"], [58, 1, 1, "", "LoggerMaxLevelFilter"], [58, 1, 1, "", "TqdmStreamHandler"]], "cc_hardware.utils.logger.FileHandler": [[58, 2, 1, "", "__repr__"], [58, 2, 1, "", "acquire"], [58, 2, 1, "", "addFilter"], [58, 2, 1, "", "close"], [58, 2, 1, "", "createLock"], [58, 2, 1, "", "emit"], [58, 2, 1, "", "filter"], [58, 2, 1, "", "flush"], [58, 2, 1, "", "format"], [58, 2, 1, "", "handle"], [58, 2, 1, "", "handleError"], [58, 2, 1, "", "release"], [58, 2, 1, "", "removeFilter"], [58, 2, 1, "", "setFormatter"], [58, 2, 1, "", "setLevel"], [58, 2, 1, "", "setStream"]], "cc_hardware.utils.logger.LoggerMaxLevelFilter": [[58, 2, 1, "", "filter"]], "cc_hardware.utils.logger.TqdmStreamHandler": [[58, 2, 1, "", "__repr__"], [58, 2, 1, "", "acquire"], [58, 2, 1, "", "addFilter"], [58, 2, 1, "", "close"], [58, 2, 1, "", "createLock"], [58, 2, 1, "", "emit"], [58, 2, 1, "", "filter"], [58, 2, 1, "", "flush"], [58, 2, 1, "", "format"], [58, 2, 1, "", "handle"], [58, 2, 1, "", "handleError"], [58, 2, 1, "", "release"], [58, 2, 1, "", "removeFilter"], [58, 2, 1, "", "setFormatter"], [58, 2, 1, "", "setLevel"], [58, 2, 1, "", "setStream"]], "cc_hardware.utils.manager": [[59, 1, 1, "", "Component"], [59, 1, 1, "", "Config"], [59, 1, 1, "", "Manager"]], "cc_hardware.utils.manager.Component": [[59, 2, 1, "", "close"], [59, 3, 1, "", "config"], [59, 2, 1, "", "create_from_config"], [59, 2, 1, "", "create_from_registry"], [59, 3, 1, "", "is_okay"], [59, 2, 1, "", "register"], [59, 2, 1, "", "registered"], [59, 2, 1, "", "registry"]], "cc_hardware.utils.manager.Config": [[59, 2, 1, "", "__getstate__"], [59, 2, 1, "", "__setstate__"], [59, 2, 1, "", "__str__"], [59, 2, 1, "", "compose"], [59, 5, 1, "", "config"], [59, 2, 1, "", "copy"], [59, 2, 1, "", "create"], [59, 2, 1, "", "create_from_registry"], [59, 5, 1, "", "custom"], [59, 2, 1, "", "instantiate"], [59, 2, 1, "", "load"], [59, 2, 1, "", "merge_with"], [59, 2, 1, "", "register"], [59, 2, 1, "", "registered"], [59, 2, 1, "", "registry"], [59, 2, 1, "", "save"], [59, 2, 1, "", "to_yaml"]], "cc_hardware.utils.manager.Manager": [[59, 2, 1, "", "__enter__"], [59, 2, 1, "", "__exit__"], [59, 2, 1, "", "add"], [59, 2, 1, "", "close"], [59, 3, 1, "", "components"], [59, 3, 1, "", "is_okay"], [59, 2, 1, "", "run"]], "cc_hardware.utils.matplotlib": [[60, 4, 1, "", "set_matplotlib_style"]], "cc_hardware.utils.misc": [[63, 1, 1, "", "BlockingDeque"], [63, 1, 1, "", "SingletonABCMeta"], [63, 1, 1, "", "SingletonMeta"], [63, 4, 1, "", "arduino_upload"], [61, 0, 0, "-", "asyncio_utils"], [62, 0, 0, "-", "blocking_deque"], [63, 4, 1, "", "call_async"], [63, 4, 1, "", "call_async_gather"], [63, 4, 1, "", "call_async_value"], [63, 4, 1, "", "find_device_by_label"], [63, 4, 1, "", "find_ports"], [63, 4, 1, "", "get_object"], [64, 0, 0, "-", "misc"], [65, 0, 0, "-", "multiprocessing_deque"], [66, 0, 0, "-", "serial_utils"], [67, 0, 0, "-", "singleton"]], "cc_hardware.utils.misc.BlockingDeque": [[63, 2, 1, "", "__getattr__"], [63, 2, 1, "", "__getitem__"], [63, 2, 1, "", "__len__"], [63, 2, 1, "", "__repr__"], [63, 2, 1, "", "append"]], "cc_hardware.utils.misc.SingletonABCMeta": [[63, 2, 1, "", "__call__"], [63, 2, 1, "", "__instancecheck__"], [63, 2, 1, "", "__subclasscheck__"], [63, 2, 1, "", "instance"], [63, 2, 1, "", "register"]], "cc_hardware.utils.misc.SingletonMeta": [[63, 2, 1, "", "__call__"], [63, 2, 1, "", "instance"]], "cc_hardware.utils.misc.asyncio_utils": [[61, 4, 1, "", "call_async"], [61, 4, 1, "", "call_async_gather"], [61, 4, 1, "", "call_async_value"]], "cc_hardware.utils.misc.blocking_deque": [[62, 1, 1, "", "BlockingDeque"]], "cc_hardware.utils.misc.blocking_deque.BlockingDeque": [[62, 2, 1, "", "__getattr__"], [62, 2, 1, "", "__getitem__"], [62, 2, 1, "", "__len__"], [62, 2, 1, "", "__repr__"], [62, 2, 1, "", "append"]], "cc_hardware.utils.misc.misc": [[64, 4, 1, "", "get_object"]], "cc_hardware.utils.misc.serial_utils": [[66, 4, 1, "", "arduino_upload"], [66, 4, 1, "", "find_device_by_label"], [66, 4, 1, "", "find_ports"]], "cc_hardware.utils.misc.singleton": [[67, 1, 1, "", "SingletonABCMeta"], [67, 1, 1, "", "SingletonMeta"]], "cc_hardware.utils.misc.singleton.SingletonABCMeta": [[67, 2, 1, "", "__call__"], [67, 2, 1, "", "__instancecheck__"], [67, 2, 1, "", "__subclasscheck__"], [67, 2, 1, "", "instance"], [67, 2, 1, "", "register"]], "cc_hardware.utils.misc.singleton.SingletonMeta": [[67, 2, 1, "", "__call__"], [67, 2, 1, "", "instance"]], "cc_hardware.utils.registry": [[68, 1, 1, "", "Registry"], [68, 4, 1, "", "register"]], "cc_hardware.utils.registry.Registry": [[68, 2, 1, "", "create_from_registry"], [68, 2, 1, "", "register"], [68, 2, 1, "", "registered"], [68, 2, 1, "", "registry"]], "cc_hardware.utils.setting": [[69, 1, 1, "", "BoolSetting"], [69, 1, 1, "", "OptionSetting"], [69, 1, 1, "", "RangeSetting"], [69, 1, 1, "", "Setting"]], "cc_hardware.utils.setting.BoolSetting": [[69, 2, 1, "", "__getstate__"], [69, 2, 1, "", "__setstate__"], [69, 2, 1, "", "__str__"], [69, 2, 1, "", "compose"], [69, 5, 1, "", "config"], [69, 2, 1, "", "copy"], [69, 2, 1, "", "create"], [69, 2, 1, "", "create_from_registry"], [69, 5, 1, "", "custom"], [69, 2, 1, "", "default_factory"], [69, 2, 1, "", "instantiate"], [69, 2, 1, "", "load"], [69, 2, 1, "", "merge_with"], [69, 2, 1, "", "register"], [69, 2, 1, "", "registered"], [69, 2, 1, "", "registry"], [69, 2, 1, "", "save"], [69, 2, 1, "", "to_yaml"], [69, 2, 1, "", "update"]], "cc_hardware.utils.setting.OptionSetting": [[69, 2, 1, "", "__getstate__"], [69, 2, 1, "", "__setstate__"], [69, 2, 1, "", "__str__"], [69, 2, 1, "", "compose"], [69, 5, 1, "", "config"], [69, 2, 1, "", "copy"], [69, 2, 1, "", "create"], [69, 2, 1, "", "create_from_registry"], [69, 5, 1, "", "custom"], [69, 2, 1, "", "default_factory"], [69, 2, 1, "", "from_enum"], [69, 2, 1, "", "instantiate"], [69, 2, 1, "", "load"], [69, 2, 1, "", "merge_with"], [69, 2, 1, "", "register"], [69, 2, 1, "", "registered"], [69, 2, 1, "", "registry"], [69, 2, 1, "", "save"], [69, 2, 1, "", "to_yaml"], [69, 2, 1, "", "update"]], "cc_hardware.utils.setting.RangeSetting": [[69, 2, 1, "", "__getstate__"], [69, 2, 1, "", "__setstate__"], [69, 2, 1, "", "__str__"], [69, 2, 1, "", "compose"], [69, 5, 1, "", "config"], [69, 2, 1, "", "copy"], [69, 2, 1, "", "create"], [69, 2, 1, "", "create_from_registry"], [69, 5, 1, "", "custom"], [69, 2, 1, "", "default_factory"], [69, 2, 1, "", "instantiate"], [69, 2, 1, "", "load"], [69, 2, 1, "", "merge_with"], [69, 2, 1, "", "register"], [69, 2, 1, "", "registered"], [69, 2, 1, "", "registry"], [69, 2, 1, "", "save"], [69, 2, 1, "", "to_yaml"], [69, 2, 1, "", "update"]], "cc_hardware.utils.setting.Setting": [[69, 2, 1, "", "__getstate__"], [69, 2, 1, "", "__setstate__"], [69, 2, 1, "", "__str__"], [69, 2, 1, "", "compose"], [69, 5, 1, "", "config"], [69, 2, 1, "", "copy"], [69, 2, 1, "", "create"], [69, 2, 1, "", "create_from_registry"], [69, 5, 1, "", "custom"], [69, 2, 1, "", "default_factory"], [69, 2, 1, "", "instantiate"], [69, 2, 1, "", "load"], [69, 2, 1, "", "merge_with"], [69, 2, 1, "", "register"], [69, 2, 1, "", "registered"], [69, 2, 1, "", "registry"], [69, 2, 1, "", "save"], [69, 2, 1, "", "to_yaml"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"]}, "titleterms": {"contribut": 0, "setup": 0, "clone": 0, "repo": [0, 7], "instal": [0, 15], "deploi": 0, "your": 0, "chang": 0, "guidelin": 0, "file": 0, "structur": [0, 7], "edit": 0, "sourc": 0, "code": 0, "comment": 0, "document": [0, 7], "build": 0, "exampl": 3, "avail": 3, "stepper": [5, 6], "gantri": 5, "collab": 5, "motor": 6, "control": 6, "stepper_motor_controller_cli": 6, "py": 6, "camera": [7, 14, 15, 16, 17, 18, 19], "cultur": 7, "hardwar": 7, "get": 7, "start": 7, "websit": 7, "other": 7, "detail": 7, "packag": [7, 8, 16, 20, 21, 26, 32, 42, 44, 48, 53, 57, 63], "api": 8, "refer": [8, 71], "cc_hardwar": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "algo": [9, 10, 11, 12, 13], "algorithm": 9, "modul": [9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 41, 43, 45, 46, 47, 49, 50, 51, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69], "content": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69], "class": [9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 62, 63, 67, 68, 69], "aruco": 10, "dataset": 11, "submodul": [12, 16, 20, 26, 32, 44, 48, 53, 57, 63], "model": 13, "function": [13, 39, 49, 57, 60, 61, 63, 64, 66, 68], "driver": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "flir": 15, "pyspin": 15, "pkl": [17, 27], "realsens": 18, "usb": 19, "subpackag": [20, 38, 42], "mocap": [21, 22, 23], "vive": 23, "safe_seri": 24, "sensor": 25, "spad": [26, 27, 28, 29, 30, 31], "spad_wrapp": 29, "tmf8828": 30, "vl53l8ch": 31, "stepper_motor": [32, 33, 34, 35, 36, 37], "kinesis_stepp": 33, "stepper_control": 34, "stepper_system": 36, "telemetrix_stepp": 37, "tool": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "calibr": 39, "camera_view": 40, "dashboard": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51], "mocap_dashboard": [43, 44, 45, 46], "dash": [43, 47], "pyqtgraph": [46, 50], "spad_dashboard": [47, 48, 49, 50, 51], "matplotlib": [49, 60], "flash": 52, "jogger": 54, "util": [55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "constant": 55, "file_handl": 56, "logger": 58, "manag": 59, "misc": [61, 62, 63, 64, 65, 66, 67], "asyncio_util": 61, "blocking_dequ": 62, "multiprocessing_dequ": 65, "serial_util": 66, "singleton": 67, "registri": 68, "set": 69, "transform": 70}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Setup": [[0, "setup"]], "Cloning the Repo": [[0, "cloning-the-repo"]], "Installing": [[0, "installing"]], "Deploy your Changes": [[0, "deploy-your-changes"]], "Guidelines": [[0, "guidelines"]], "File Structure": [[0, "file-structure"]], "Editing the Source Code": [[0, "editing-the-source-code"]], "Commenting": [[0, "commenting"]], "Editing the Documentation": [[0, "editing-the-documentation"]], "Building the Documentation": [[0, "building-the-documentation"]], "Examples": [[3, "examples"]], "Available Examples": [[3, "available-examples"]], "Stepper Gantry Collab": [[5, "stepper-gantry-collab"]], "Stepper Motor Controller": [[6, "stepper-motor-controller"]], "stepper_motor_controller_cli.py": [[6, "stepper-motor-controller-cli-py"]], "Camera Culture Hardware Repo": [[7, "camera-culture-hardware-repo"]], "Getting Started": [[7, "getting-started"]], "Documentation Website": [[7, "documentation-website"]], "Other Details": [[7, "other-details"]], "Repo Structure": [[7, "repo-structure"]], "Package Structure": [[7, "package-structure"]], "API Reference": [[8, "api-reference"]], "Packages": [[8, "packages"]], "cc_hardware.algos.algorithm": [[9, "module-cc_hardware.algos.algorithm"]], "Module Contents": [[9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [41, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [64, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"]], "Classes": [[9, "classes"], [10, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [53, "classes"], [54, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [62, "classes"], [63, "classes"], [67, "classes"], [68, "classes"], [69, "classes"]], "cc_hardware.algos.aruco": [[10, "module-cc_hardware.algos.aruco"]], "cc_hardware.algos.datasets": [[11, "module-cc_hardware.algos.datasets"]], "cc_hardware.algos": [[12, "module-cc_hardware.algos"]], "Submodules": [[12, "submodules"], [16, "submodules"], [20, "submodules"], [26, "submodules"], [32, "submodules"], [44, "submodules"], [48, "submodules"], [53, "submodules"], [57, "submodules"], [63, "submodules"]], "cc_hardware.algos.models": [[13, "module-cc_hardware.algos.models"]], "Functions": [[13, "functions"], [39, "functions"], [49, "functions"], [57, "functions"], [60, "functions"], [61, "functions"], [63, "functions"], [64, "functions"], [66, "functions"], [68, "functions"]], "cc_hardware.drivers.cameras.camera": [[14, "module-cc_hardware.drivers.cameras.camera"]], "cc_hardware.drivers.cameras.flir": [[15, "module-cc_hardware.drivers.cameras.flir"]], "PySpin Installation": [[15, "pyspin-installation"]], "cc_hardware.drivers.cameras": [[16, "module-cc_hardware.drivers.cameras"]], "Package Contents": [[16, "package-contents"], [20, "package-contents"], [21, "package-contents"], [26, "package-contents"], [32, "package-contents"], [42, "package-contents"], [44, "package-contents"], [48, "package-contents"], [53, "package-contents"], [57, "package-contents"], [63, "package-contents"]], "cc_hardware.drivers.cameras.pkl": [[17, "module-cc_hardware.drivers.cameras.pkl"]], "cc_hardware.drivers.cameras.realsense": [[18, "module-cc_hardware.drivers.cameras.realsense"]], "cc_hardware.drivers.cameras.usb": [[19, "module-cc_hardware.drivers.cameras.usb"]], "cc_hardware.drivers": [[20, "module-cc_hardware.drivers"]], "Subpackages": [[20, "subpackages"], [38, "subpackages"], [42, "subpackages"]], "cc_hardware.drivers.mocap": [[21, "module-cc_hardware.drivers.mocap"]], "cc_hardware.drivers.mocap.mocap": [[22, "module-cc_hardware.drivers.mocap.mocap"]], "cc_hardware.drivers.mocap.vive": [[23, "module-cc_hardware.drivers.mocap.vive"]], "cc_hardware.drivers.safe_serial": [[24, "module-cc_hardware.drivers.safe_serial"]], "cc_hardware.drivers.sensor": [[25, "module-cc_hardware.drivers.sensor"]], "cc_hardware.drivers.spads": [[26, "module-cc_hardware.drivers.spads"]], "cc_hardware.drivers.spads.pkl": [[27, "module-cc_hardware.drivers.spads.pkl"]], "cc_hardware.drivers.spads.spad": [[28, "module-cc_hardware.drivers.spads.spad"]], "cc_hardware.drivers.spads.spad_wrappers": [[29, "module-cc_hardware.drivers.spads.spad_wrappers"]], "cc_hardware.drivers.spads.tmf8828": [[30, "module-cc_hardware.drivers.spads.tmf8828"]], "cc_hardware.drivers.spads.vl53l8ch": [[31, "module-cc_hardware.drivers.spads.vl53l8ch"]], "cc_hardware.drivers.stepper_motors": [[32, "module-cc_hardware.drivers.stepper_motors"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[33, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[34, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[35, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[36, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[37, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "cc_hardware": [[38, "module-cc_hardware"]], "cc_hardware.tools.calibration": [[39, "module-cc_hardware.tools.calibration"]], "cc_hardware.tools.camera_viewer": [[40, "module-cc_hardware.tools.camera_viewer"]], "cc_hardware.tools.dashboard.dashboard": [[41, "module-cc_hardware.tools.dashboard.dashboard"]], "cc_hardware.tools.dashboard": [[42, "module-cc_hardware.tools.dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[43, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[44, "module-cc_hardware.tools.dashboard.mocap_dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[45, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[46, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"]], "cc_hardware.tools.dashboard.spad_dashboard.dash": [[47, "module-cc_hardware.tools.dashboard.spad_dashboard.dash"]], "cc_hardware.tools.dashboard.spad_dashboard": [[48, "module-cc_hardware.tools.dashboard.spad_dashboard"]], "cc_hardware.tools.dashboard.spad_dashboard.matplotlib": [[49, "module-cc_hardware.tools.dashboard.spad_dashboard.matplotlib"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[50, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[51, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"]], "cc_hardware.tools.flash": [[52, "module-cc_hardware.tools.flash"]], "cc_hardware.tools": [[53, "module-cc_hardware.tools"]], "cc_hardware.tools.jogger": [[54, "module-cc_hardware.tools.jogger"]], "cc_hardware.utils.constants": [[55, "module-cc_hardware.utils.constants"]], "cc_hardware.utils.file_handlers": [[56, "module-cc_hardware.utils.file_handlers"]], "cc_hardware.utils": [[57, "module-cc_hardware.utils"]], "cc_hardware.utils.logger": [[58, "module-cc_hardware.utils.logger"]], "cc_hardware.utils.manager": [[59, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.matplotlib": [[60, "module-cc_hardware.utils.matplotlib"]], "cc_hardware.utils.misc.asyncio_utils": [[61, "module-cc_hardware.utils.misc.asyncio_utils"]], "cc_hardware.utils.misc.blocking_deque": [[62, "module-cc_hardware.utils.misc.blocking_deque"]], "cc_hardware.utils.misc": [[63, "module-cc_hardware.utils.misc"]], "cc_hardware.utils.misc.misc": [[64, "module-cc_hardware.utils.misc.misc"]], "cc_hardware.utils.misc.multiprocessing_deque": [[65, "module-cc_hardware.utils.misc.multiprocessing_deque"]], "cc_hardware.utils.misc.serial_utils": [[66, "module-cc_hardware.utils.misc.serial_utils"]], "cc_hardware.utils.misc.singleton": [[67, "module-cc_hardware.utils.misc.singleton"]], "cc_hardware.utils.registry": [[68, "module-cc_hardware.utils.registry"]], "cc_hardware.utils.setting": [[69, "module-cc_hardware.utils.setting"]], "cc_hardware.utils.transformations": [[70, "module-cc_hardware.utils.transformations"]], "Reference": [[71, "reference"]]}, "indexentries": {"algorithm (class in cc_hardware.algos.algorithm)": [[9, "cc_hardware.algos.algorithm.Algorithm"]], "cc_hardware.algos.algorithm": [[9, "module-cc_hardware.algos.algorithm"]], "close() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.close"]], "create_from_registry() (algorithm class method)": [[9, "cc_hardware.algos.algorithm.Algorithm.create_from_registry"]], "is_okay (algorithm property)": [[9, "cc_hardware.algos.algorithm.Algorithm.is_okay"]], "module": [[9, "module-cc_hardware.algos.algorithm"], [10, "module-cc_hardware.algos.aruco"], [11, "module-cc_hardware.algos.datasets"], [12, "module-cc_hardware.algos"], [13, "module-cc_hardware.algos.models"], [14, "module-cc_hardware.drivers.cameras.camera"], [15, "module-cc_hardware.drivers.cameras.flir"], [16, "module-cc_hardware.drivers.cameras"], [17, "module-cc_hardware.drivers.cameras.pkl"], [18, "module-cc_hardware.drivers.cameras.realsense"], [19, "module-cc_hardware.drivers.cameras.usb"], [20, "module-cc_hardware.drivers"], [21, "module-cc_hardware.drivers.mocap"], [22, "module-cc_hardware.drivers.mocap.mocap"], [23, "module-cc_hardware.drivers.mocap.vive"], [24, "module-cc_hardware.drivers.safe_serial"], [25, "module-cc_hardware.drivers.sensor"], [26, "module-cc_hardware.drivers.spads"], [27, "module-cc_hardware.drivers.spads.pkl"], [28, "module-cc_hardware.drivers.spads.spad"], [29, "module-cc_hardware.drivers.spads.spad_wrappers"], [30, "module-cc_hardware.drivers.spads.tmf8828"], [31, "module-cc_hardware.drivers.spads.vl53l8ch"], [32, "module-cc_hardware.drivers.stepper_motors"], [33, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"], [34, "module-cc_hardware.drivers.stepper_motors.stepper_controller"], [35, "module-cc_hardware.drivers.stepper_motors.stepper_motor"], [36, "module-cc_hardware.drivers.stepper_motors.stepper_system"], [37, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"], [38, "module-cc_hardware"], [39, "module-cc_hardware.tools.calibration"], [40, "module-cc_hardware.tools.camera_viewer"], [41, "module-cc_hardware.tools.dashboard.dashboard"], [42, "module-cc_hardware.tools.dashboard"], [43, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"], [44, "module-cc_hardware.tools.dashboard.mocap_dashboard"], [45, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"], [46, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"], [47, "module-cc_hardware.tools.dashboard.spad_dashboard.dash"], [48, "module-cc_hardware.tools.dashboard.spad_dashboard"], [49, "module-cc_hardware.tools.dashboard.spad_dashboard.matplotlib"], [50, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"], [51, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"], [52, "module-cc_hardware.tools.flash"], [53, "module-cc_hardware.tools"], [54, "module-cc_hardware.tools.jogger"], [55, "module-cc_hardware.utils.constants"], [56, "module-cc_hardware.utils.file_handlers"], [57, "module-cc_hardware.utils"], [58, "module-cc_hardware.utils.logger"], [59, "module-cc_hardware.utils.manager"], [60, "module-cc_hardware.utils.matplotlib"], [61, "module-cc_hardware.utils.misc.asyncio_utils"], [62, "module-cc_hardware.utils.misc.blocking_deque"], [63, "module-cc_hardware.utils.misc"], [64, "module-cc_hardware.utils.misc.misc"], [65, "module-cc_hardware.utils.misc.multiprocessing_deque"], [66, "module-cc_hardware.utils.misc.serial_utils"], [67, "module-cc_hardware.utils.misc.singleton"], [68, "module-cc_hardware.utils.registry"], [69, "module-cc_hardware.utils.setting"], [70, "module-cc_hardware.utils.transformations"]], "register() (algorithm class method)": [[9, "cc_hardware.algos.algorithm.Algorithm.register"]], "registered() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.registered"]], "registry() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.registry"]], "run() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.run"]], "arucolocalizationalgorithm (class in cc_hardware.algos.aruco)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco": [[10, "module-cc_hardware.algos.aruco"]], "close() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.close"]], "create_from_registry() (arucolocalizationalgorithm class method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.create_from_registry"]], "is_okay (arucolocalizationalgorithm property)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.is_okay"]], "register() (arucolocalizationalgorithm class method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.register"]], "registered() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.registered"]], "registry() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.registry"]], "run() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.run"]], "histogramdataset (class in cc_hardware.algos.datasets)": [[11, "cc_hardware.algos.datasets.HistogramDataset"]], "__add__() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.__add__"]], "__getitem__() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.__getitem__"]], "__len__() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.__len__"]], "augment() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.augment"]], "cc_hardware.algos.datasets": [[11, "module-cc_hardware.algos.datasets"]], "clip_negative() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.clip_negative"]], "get_bin_num() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.get_bin_num"]], "get_mean_capture() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.get_mean_capture"]], "get_raw_bin_num() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.get_raw_bin_num"]], "reset_transformations() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.reset_transformations"]], "set_end_bin() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.set_end_bin"]], "set_start_bin() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.set_start_bin"]], "set_zero() (histogramdataset method)": [[11, "cc_hardware.algos.datasets.HistogramDataset.set_zero"]], "cc_hardware.algos": [[12, "module-cc_hardware.algos"]], "deeplocation8 (class in cc_hardware.algos.models)": [[13, "cc_hardware.algos.models.DeepLocation8"]], "cc_hardware.algos.models": [[13, "module-cc_hardware.algos.models"]], "initialize_weights() (in module cc_hardware.algos.models)": [[13, "cc_hardware.algos.models.initialize_weights"]], "camera (class in cc_hardware.drivers.cameras.camera)": [[14, "cc_hardware.drivers.cameras.camera.Camera"]], "cameraconfig (class in cc_hardware.drivers.cameras.camera)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig"]], "__del__() (camera method)": [[14, "cc_hardware.drivers.cameras.camera.Camera.__del__"], [16, "cc_hardware.drivers.cameras.Camera.__del__"], [20, "cc_hardware.drivers.Camera.__del__"]], "__getstate__() (cameraconfig method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.__getstate__"], [16, "cc_hardware.drivers.cameras.CameraConfig.__getstate__"], [20, "cc_hardware.drivers.CameraConfig.__getstate__"]], "__setstate__() (cameraconfig method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.__setstate__"], [16, "cc_hardware.drivers.cameras.CameraConfig.__setstate__"], [20, "cc_hardware.drivers.CameraConfig.__setstate__"]], "__str__() (cameraconfig method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.__str__"], [16, "cc_hardware.drivers.cameras.CameraConfig.__str__"], [20, "cc_hardware.drivers.CameraConfig.__str__"]], "accumulate() (camera method)": [[14, "cc_hardware.drivers.cameras.camera.Camera.accumulate"], [16, "cc_hardware.drivers.cameras.Camera.accumulate"], [20, "cc_hardware.drivers.Camera.accumulate"]], "calibrate() (camera method)": [[14, "cc_hardware.drivers.cameras.camera.Camera.calibrate"], [16, "cc_hardware.drivers.cameras.Camera.calibrate"], [20, "cc_hardware.drivers.Camera.calibrate"]], "cc_hardware.drivers.cameras.camera": [[14, "module-cc_hardware.drivers.cameras.camera"]], "close() (camera method)": [[14, "cc_hardware.drivers.cameras.camera.Camera.close"], [16, "cc_hardware.drivers.cameras.Camera.close"], [20, "cc_hardware.drivers.Camera.close"]], "compose() (cameraconfig class method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.compose"], [16, "cc_hardware.drivers.cameras.CameraConfig.compose"], [20, "cc_hardware.drivers.CameraConfig.compose"]], "config (camera property)": [[14, "cc_hardware.drivers.cameras.camera.Camera.config"], [16, "cc_hardware.drivers.cameras.Camera.config"], [20, "cc_hardware.drivers.Camera.config"]], "config (cameraconfig attribute)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.config"], [16, "cc_hardware.drivers.cameras.CameraConfig.config"], [20, "cc_hardware.drivers.CameraConfig.config"]], "copy() (cameraconfig method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.copy"], [16, "cc_hardware.drivers.cameras.CameraConfig.copy"], [20, "cc_hardware.drivers.CameraConfig.copy"]], "create() (cameraconfig class method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.create"], [16, "cc_hardware.drivers.cameras.CameraConfig.create"], [20, "cc_hardware.drivers.CameraConfig.create"]], "create_from_config() (camera class method)": [[14, "cc_hardware.drivers.cameras.camera.Camera.create_from_config"], [16, "cc_hardware.drivers.cameras.Camera.create_from_config"], [20, "cc_hardware.drivers.Camera.create_from_config"]], "create_from_registry() (camera class method)": [[14, "cc_hardware.drivers.cameras.camera.Camera.create_from_registry"], [16, "cc_hardware.drivers.cameras.Camera.create_from_registry"], [20, "cc_hardware.drivers.Camera.create_from_registry"]], "create_from_registry() (cameraconfig class method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.create_from_registry"], [16, "cc_hardware.drivers.cameras.CameraConfig.create_from_registry"], [20, "cc_hardware.drivers.CameraConfig.create_from_registry"]], "custom (cameraconfig attribute)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.custom"], [16, "cc_hardware.drivers.cameras.CameraConfig.custom"], [20, "cc_hardware.drivers.CameraConfig.custom"]], "distortion_coefficients (camera property)": [[14, "cc_hardware.drivers.cameras.camera.Camera.distortion_coefficients"], [16, "cc_hardware.drivers.cameras.Camera.distortion_coefficients"], [20, "cc_hardware.drivers.Camera.distortion_coefficients"]], "instantiate() (cameraconfig class method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.instantiate"], [16, "cc_hardware.drivers.cameras.CameraConfig.instantiate"], [20, "cc_hardware.drivers.CameraConfig.instantiate"]], "intrinsic_matrix (camera property)": [[14, "cc_hardware.drivers.cameras.camera.Camera.intrinsic_matrix"], [16, "cc_hardware.drivers.cameras.Camera.intrinsic_matrix"], [20, "cc_hardware.drivers.Camera.intrinsic_matrix"]], "is_okay (camera property)": [[14, "cc_hardware.drivers.cameras.camera.Camera.is_okay"], [16, "cc_hardware.drivers.cameras.Camera.is_okay"], [20, "cc_hardware.drivers.Camera.is_okay"]], "load() (cameraconfig class method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.load"], [16, "cc_hardware.drivers.cameras.CameraConfig.load"], [20, "cc_hardware.drivers.CameraConfig.load"]], "merge_with() (cameraconfig method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.merge_with"], [16, "cc_hardware.drivers.cameras.CameraConfig.merge_with"], [20, "cc_hardware.drivers.CameraConfig.merge_with"]], "register() (camera class method)": [[14, "cc_hardware.drivers.cameras.camera.Camera.register"], [16, "cc_hardware.drivers.cameras.Camera.register"], [20, "cc_hardware.drivers.Camera.register"]], "register() (cameraconfig class method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.register"], [16, "cc_hardware.drivers.cameras.CameraConfig.register"], [20, "cc_hardware.drivers.CameraConfig.register"]], "registered() (camera method)": [[14, "cc_hardware.drivers.cameras.camera.Camera.registered"], [16, "cc_hardware.drivers.cameras.Camera.registered"], [20, "cc_hardware.drivers.Camera.registered"]], "registered() (cameraconfig method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.registered"], [16, "cc_hardware.drivers.cameras.CameraConfig.registered"], [20, "cc_hardware.drivers.CameraConfig.registered"]], "registry() (camera method)": [[14, "cc_hardware.drivers.cameras.camera.Camera.registry"], [16, "cc_hardware.drivers.cameras.Camera.registry"], [20, "cc_hardware.drivers.Camera.registry"]], "registry() (cameraconfig method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.registry"], [16, "cc_hardware.drivers.cameras.CameraConfig.registry"], [20, "cc_hardware.drivers.CameraConfig.registry"]], "resolution (camera property)": [[14, "cc_hardware.drivers.cameras.camera.Camera.resolution"], [16, "cc_hardware.drivers.cameras.Camera.resolution"], [20, "cc_hardware.drivers.Camera.resolution"]], "save() (cameraconfig method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.save"], [16, "cc_hardware.drivers.cameras.CameraConfig.save"], [20, "cc_hardware.drivers.CameraConfig.save"]], "settings (camera property)": [[14, "cc_hardware.drivers.cameras.camera.Camera.settings"], [16, "cc_hardware.drivers.cameras.Camera.settings"], [20, "cc_hardware.drivers.Camera.settings"]], "settings (cameraconfig property)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.settings"], [16, "cc_hardware.drivers.cameras.CameraConfig.settings"], [20, "cc_hardware.drivers.CameraConfig.settings"]], "to_yaml() (cameraconfig method)": [[14, "cc_hardware.drivers.cameras.camera.CameraConfig.to_yaml"], [16, "cc_hardware.drivers.cameras.CameraConfig.to_yaml"], [20, "cc_hardware.drivers.CameraConfig.to_yaml"]], "update() (camera method)": [[14, "cc_hardware.drivers.cameras.camera.Camera.update"], [16, "cc_hardware.drivers.cameras.Camera.update"], [20, "cc_hardware.drivers.Camera.update"]], "flircamera (class in cc_hardware.drivers.cameras.flir)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera"]], "grasshopperflircamera (class in cc_hardware.drivers.cameras.flir)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera"]], "__del__() (flircamera method)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.__del__"]], "__del__() (grasshopperflircamera method)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.__del__"]], "accumulate() (flircamera method)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.accumulate"]], "accumulate() (grasshopperflircamera method)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.accumulate"]], "calibrate() (flircamera method)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.calibrate"]], "calibrate() (grasshopperflircamera method)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.calibrate"]], "cc_hardware.drivers.cameras.flir": [[15, "module-cc_hardware.drivers.cameras.flir"]], "close() (flircamera method)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.close"]], "close() (grasshopperflircamera method)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.close"]], "config (flircamera property)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.config"]], "config (grasshopperflircamera property)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.config"]], "create_from_config() (flircamera class method)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.create_from_config"]], "create_from_config() (grasshopperflircamera class method)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.create_from_config"]], "create_from_registry() (flircamera class method)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.create_from_registry"]], "create_from_registry() (grasshopperflircamera class method)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.create_from_registry"]], "distortion_coefficients (flircamera property)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.distortion_coefficients"]], "distortion_coefficients (grasshopperflircamera property)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.distortion_coefficients"]], "intrinsic_matrix (flircamera property)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.intrinsic_matrix"]], "intrinsic_matrix (grasshopperflircamera property)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.intrinsic_matrix"]], "is_okay (flircamera property)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.is_okay"]], "is_okay (grasshopperflircamera property)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.is_okay"]], "register() (flircamera class method)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.register"]], "register() (grasshopperflircamera class method)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.register"]], "registered() (flircamera method)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.registered"]], "registered() (grasshopperflircamera method)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.registered"]], "registry() (flircamera method)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.registry"]], "registry() (grasshopperflircamera method)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.registry"]], "resolution (flircamera property)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.resolution"]], "resolution (grasshopperflircamera property)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.resolution"]], "settings (flircamera property)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.settings"]], "settings (grasshopperflircamera property)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.settings"]], "update() (flircamera method)": [[15, "cc_hardware.drivers.cameras.flir.FlirCamera.update"]], "update() (grasshopperflircamera method)": [[15, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.update"]], "camera (class in cc_hardware.drivers.cameras)": [[16, "cc_hardware.drivers.cameras.Camera"]], "cameraconfig (class in cc_hardware.drivers.cameras)": [[16, "cc_hardware.drivers.cameras.CameraConfig"]], "cc_hardware.drivers.cameras": [[16, "module-cc_hardware.drivers.cameras"]], "pklcamera (class in cc_hardware.drivers.cameras.pkl)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera"]], "__del__() (pklcamera method)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.__del__"]], "accumulate() (pklcamera method)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.accumulate"]], "calibrate() (pklcamera method)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.calibrate"]], "cc_hardware.drivers.cameras.pkl": [[17, "module-cc_hardware.drivers.cameras.pkl"]], "close() (pklcamera method)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.close"]], "config (pklcamera property)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.config"]], "create_from_config() (pklcamera class method)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.create_from_config"]], "create_from_registry() (pklcamera class method)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.create_from_registry"]], "distortion_coefficients (pklcamera property)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.distortion_coefficients"]], "intrinsic_matrix (pklcamera property)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.intrinsic_matrix"]], "is_okay (pklcamera property)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.is_okay"]], "register() (pklcamera class method)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.register"]], "registered() (pklcamera method)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.registered"]], "registry() (pklcamera method)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.registry"]], "resolution (pklcamera property)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.resolution"]], "settings (pklcamera property)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.settings"]], "update() (pklcamera method)": [[17, "cc_hardware.drivers.cameras.pkl.PklCamera.update"]], "realsensecamera (class in cc_hardware.drivers.cameras.realsense)": [[18, "cc_hardware.drivers.cameras.realsense.RealsenseCamera"]], "realsenseconfig (class in cc_hardware.drivers.cameras.realsense)": [[18, "cc_hardware.drivers.cameras.realsense.RealsenseConfig"]], "accumulate() (realsensecamera method)": [[18, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.accumulate"]], "cc_hardware.drivers.cameras.realsense": [[18, "module-cc_hardware.drivers.cameras.realsense"]], "close() (realsensecamera method)": [[18, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.close"]], "config (realsensecamera property)": [[18, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.config"]], "distortion_coefficients (realsensecamera property)": [[18, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.distortion_coefficients"]], "intrinsic_matrix (realsensecamera property)": [[18, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.intrinsic_matrix"]], "is_okay (realsensecamera property)": [[18, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.is_okay"]], "resolution (realsensecamera property)": [[18, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.resolution"]], "usbcamera (class in cc_hardware.drivers.cameras.usb)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera"]], "usbcameraconfig (class in cc_hardware.drivers.cameras.usb)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig"]], "__del__() (usbcamera method)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.__del__"]], "__getstate__() (usbcameraconfig method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.__getstate__"]], "__setstate__() (usbcameraconfig method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.__setstate__"]], "__str__() (usbcameraconfig method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.__str__"]], "accumulate() (usbcamera method)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.accumulate"]], "calibrate() (usbcamera method)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.calibrate"]], "cc_hardware.drivers.cameras.usb": [[19, "module-cc_hardware.drivers.cameras.usb"]], "close() (usbcamera method)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.close"]], "compose() (usbcameraconfig class method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.compose"]], "config (usbcamera property)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.config"]], "config (usbcameraconfig attribute)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.config"]], "copy() (usbcameraconfig method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.copy"]], "create() (usbcameraconfig class method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.create"]], "create_from_config() (usbcamera class method)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.create_from_config"]], "create_from_registry() (usbcamera class method)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.create_from_registry"]], "create_from_registry() (usbcameraconfig class method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.create_from_registry"]], "custom (usbcameraconfig attribute)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.custom"]], "distortion_coefficients (usbcamera property)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.distortion_coefficients"]], "instantiate() (usbcameraconfig class method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.instantiate"]], "intrinsic_matrix (usbcamera property)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.intrinsic_matrix"]], "is_okay (usbcamera property)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.is_okay"]], "load() (usbcameraconfig class method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.load"]], "merge_with() (usbcameraconfig method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.merge_with"]], "register() (usbcamera class method)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.register"]], "register() (usbcameraconfig class method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.register"]], "registered() (usbcamera method)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.registered"]], "registered() (usbcameraconfig method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.registered"]], "registry() (usbcamera method)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.registry"]], "registry() (usbcameraconfig method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.registry"]], "resolution (usbcamera property)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.resolution"]], "save() (usbcameraconfig method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.save"]], "settings (usbcamera property)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.settings"]], "settings (usbcameraconfig property)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.settings"]], "to_yaml() (usbcameraconfig method)": [[19, "cc_hardware.drivers.cameras.usb.USBCameraConfig.to_yaml"]], "update() (usbcamera method)": [[19, "cc_hardware.drivers.cameras.usb.USBCamera.update"]], "camera (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.Camera"]], "cameraconfig (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.CameraConfig"]], "dummysteppermotor (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.DummyStepperMotor"]], "motioncapturesensor (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig"]], "spadsensor (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.SPADSensorConfig"]], "safeserial (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.SafeSerial"]], "sensor (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.Sensor"]], "sensorconfig (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.SensorConfig"]], "steppermotor (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.StepperMotor"]], "steppermotorsystem (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers)": [[20, "cc_hardware.drivers.StepperMotorSystemAxis"]], "__del__() (motioncapturesensor method)": [[20, "cc_hardware.drivers.MotionCaptureSensor.__del__"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.__del__"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.__del__"]], "__del__() (spadsensor method)": [[20, "cc_hardware.drivers.SPADSensor.__del__"], [26, "cc_hardware.drivers.spads.SPADSensor.__del__"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.__del__"]], "__del__() (sensor method)": [[20, "cc_hardware.drivers.Sensor.__del__"], [25, "cc_hardware.drivers.sensor.Sensor.__del__"]], "__dir__() (steppermotorsystemaxis method)": [[20, "cc_hardware.drivers.StepperMotorSystemAxis.__dir__"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__dir__"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__dir__"]], "__format__() (steppermotorsystemaxis method)": [[20, "cc_hardware.drivers.StepperMotorSystemAxis.__format__"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__format__"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__format__"]], "__getattr__() (safeserial method)": [[20, "cc_hardware.drivers.SafeSerial.__getattr__"], [24, "cc_hardware.drivers.safe_serial.SafeSerial.__getattr__"]], "__getattr__() (steppermotorsystem method)": [[20, "cc_hardware.drivers.StepperMotorSystem.__getattr__"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.__getattr__"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.__getattr__"]], "__getstate__() (motioncapturesensorconfig method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.__getstate__"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.__getstate__"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.__getstate__"]], "__getstate__() (spadsensorconfig method)": [[20, "cc_hardware.drivers.SPADSensorConfig.__getstate__"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.__getstate__"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__getstate__"]], "__getstate__() (sensorconfig method)": [[20, "cc_hardware.drivers.SensorConfig.__getstate__"], [25, "cc_hardware.drivers.sensor.SensorConfig.__getstate__"]], "__hash__() (steppermotorsystemaxis method)": [[20, "cc_hardware.drivers.StepperMotorSystemAxis.__hash__"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__hash__"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__hash__"]], "__reduce_ex__() (steppermotorsystemaxis method)": [[20, "cc_hardware.drivers.StepperMotorSystemAxis.__reduce_ex__"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__reduce_ex__"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__reduce_ex__"]], "__repr__() (steppermotorsystemaxis method)": [[20, "cc_hardware.drivers.StepperMotorSystemAxis.__repr__"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__repr__"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__repr__"]], "__setstate__() (motioncapturesensorconfig method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.__setstate__"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.__setstate__"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.__setstate__"]], "__setstate__() (spadsensorconfig method)": [[20, "cc_hardware.drivers.SPADSensorConfig.__setstate__"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.__setstate__"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__setstate__"]], "__setstate__() (sensorconfig method)": [[20, "cc_hardware.drivers.SensorConfig.__setstate__"], [25, "cc_hardware.drivers.sensor.SensorConfig.__setstate__"]], "__str__() (motioncapturesensorconfig method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.__str__"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.__str__"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.__str__"]], "__str__() (spadsensorconfig method)": [[20, "cc_hardware.drivers.SPADSensorConfig.__str__"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.__str__"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__str__"]], "__str__() (sensorconfig method)": [[20, "cc_hardware.drivers.SensorConfig.__str__"], [25, "cc_hardware.drivers.sensor.SensorConfig.__str__"]], "__str__() (steppermotorsystemaxis method)": [[20, "cc_hardware.drivers.StepperMotorSystemAxis.__str__"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__str__"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__str__"]], "accumulate() (motioncapturesensor method)": [[20, "cc_hardware.drivers.MotionCaptureSensor.accumulate"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.accumulate"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.accumulate"]], "accumulate() (spadsensor method)": [[20, "cc_hardware.drivers.SPADSensor.accumulate"], [26, "cc_hardware.drivers.spads.SPADSensor.accumulate"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.accumulate"]], "axes (steppermotorsystem property)": [[20, "cc_hardware.drivers.StepperMotorSystem.axes"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.axes"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.axes"]], "calibrate() (motioncapturesensor method)": [[20, "cc_hardware.drivers.MotionCaptureSensor.calibrate"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.calibrate"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.calibrate"]], "calibrate() (spadsensor method)": [[20, "cc_hardware.drivers.SPADSensor.calibrate"], [26, "cc_hardware.drivers.spads.SPADSensor.calibrate"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.calibrate"]], "calibrate() (sensor method)": [[20, "cc_hardware.drivers.Sensor.calibrate"], [25, "cc_hardware.drivers.sensor.Sensor.calibrate"]], "cc_hardware.drivers": [[20, "module-cc_hardware.drivers"]], "close() (motioncapturesensor method)": [[20, "cc_hardware.drivers.MotionCaptureSensor.close"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.close"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.close"]], "close() (spadsensor method)": [[20, "cc_hardware.drivers.SPADSensor.close"], [26, "cc_hardware.drivers.spads.SPADSensor.close"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.close"]], "close() (sensor method)": [[20, "cc_hardware.drivers.Sensor.close"], [25, "cc_hardware.drivers.sensor.Sensor.close"]], "close() (steppermotor method)": [[20, "cc_hardware.drivers.StepperMotor.close"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.close"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.close"]], "close() (steppermotorsystem method)": [[20, "cc_hardware.drivers.StepperMotorSystem.close"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.close"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.close"]], "compose() (motioncapturesensorconfig class method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.compose"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.compose"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.compose"]], "compose() (spadsensorconfig class method)": [[20, "cc_hardware.drivers.SPADSensorConfig.compose"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.compose"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.compose"]], "compose() (sensorconfig class method)": [[20, "cc_hardware.drivers.SensorConfig.compose"], [25, "cc_hardware.drivers.sensor.SensorConfig.compose"]], "config (motioncapturesensor property)": [[20, "cc_hardware.drivers.MotionCaptureSensor.config"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.config"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.config"]], "config (motioncapturesensorconfig attribute)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.config"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.config"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.config"]], "config (spadsensor property)": [[20, "cc_hardware.drivers.SPADSensor.config"], [26, "cc_hardware.drivers.spads.SPADSensor.config"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.config"]], "config (spadsensorconfig attribute)": [[20, "cc_hardware.drivers.SPADSensorConfig.config"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.config"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.config"]], "config (sensor property)": [[20, "cc_hardware.drivers.Sensor.config"], [25, "cc_hardware.drivers.sensor.Sensor.config"]], "config (sensorconfig attribute)": [[20, "cc_hardware.drivers.SensorConfig.config"], [25, "cc_hardware.drivers.sensor.SensorConfig.config"]], "config (steppermotor property)": [[20, "cc_hardware.drivers.StepperMotor.config"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.config"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.config"]], "config (steppermotorsystem property)": [[20, "cc_hardware.drivers.StepperMotorSystem.config"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.config"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.config"]], "copy() (motioncapturesensorconfig method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.copy"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.copy"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.copy"]], "copy() (spadsensorconfig method)": [[20, "cc_hardware.drivers.SPADSensorConfig.copy"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.copy"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.copy"]], "copy() (sensorconfig method)": [[20, "cc_hardware.drivers.SensorConfig.copy"], [25, "cc_hardware.drivers.sensor.SensorConfig.copy"]], "create() (motioncapturesensorconfig class method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.create"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.create"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.create"]], "create() (spadsensorconfig class method)": [[20, "cc_hardware.drivers.SPADSensorConfig.create"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.create"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.create"]], "create() (safeserial class method)": [[20, "cc_hardware.drivers.SafeSerial.create"], [24, "cc_hardware.drivers.safe_serial.SafeSerial.create"]], "create() (sensorconfig class method)": [[20, "cc_hardware.drivers.SensorConfig.create"], [25, "cc_hardware.drivers.sensor.SensorConfig.create"]], "create_from_config() (motioncapturesensor class method)": [[20, "cc_hardware.drivers.MotionCaptureSensor.create_from_config"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.create_from_config"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.create_from_config"]], "create_from_config() (spadsensor class method)": [[20, "cc_hardware.drivers.SPADSensor.create_from_config"], [26, "cc_hardware.drivers.spads.SPADSensor.create_from_config"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.create_from_config"]], "create_from_config() (sensor class method)": [[20, "cc_hardware.drivers.Sensor.create_from_config"], [25, "cc_hardware.drivers.sensor.Sensor.create_from_config"]], "create_from_config() (steppermotor class method)": [[20, "cc_hardware.drivers.StepperMotor.create_from_config"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.create_from_config"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.create_from_config"]], "create_from_config() (steppermotorsystem class method)": [[20, "cc_hardware.drivers.StepperMotorSystem.create_from_config"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.create_from_config"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.create_from_config"]], "create_from_registry() (motioncapturesensor class method)": [[20, "cc_hardware.drivers.MotionCaptureSensor.create_from_registry"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.create_from_registry"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.create_from_registry"]], "create_from_registry() (motioncapturesensorconfig class method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.create_from_registry"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.create_from_registry"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.create_from_registry"]], "create_from_registry() (spadsensor class method)": [[20, "cc_hardware.drivers.SPADSensor.create_from_registry"], [26, "cc_hardware.drivers.spads.SPADSensor.create_from_registry"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.create_from_registry"]], "create_from_registry() (spadsensorconfig class method)": [[20, "cc_hardware.drivers.SPADSensorConfig.create_from_registry"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.create_from_registry"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.create_from_registry"]], "create_from_registry() (sensor class method)": [[20, "cc_hardware.drivers.Sensor.create_from_registry"], [25, "cc_hardware.drivers.sensor.Sensor.create_from_registry"]], "create_from_registry() (sensorconfig class method)": [[20, "cc_hardware.drivers.SensorConfig.create_from_registry"], [25, "cc_hardware.drivers.sensor.SensorConfig.create_from_registry"]], "create_from_registry() (steppermotor class method)": [[20, "cc_hardware.drivers.StepperMotor.create_from_registry"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.create_from_registry"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.create_from_registry"]], "create_from_registry() (steppermotorsystem class method)": [[20, "cc_hardware.drivers.StepperMotorSystem.create_from_registry"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.create_from_registry"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.create_from_registry"]], "custom (motioncapturesensorconfig attribute)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.custom"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.custom"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.custom"]], "custom (spadsensorconfig attribute)": [[20, "cc_hardware.drivers.SPADSensorConfig.custom"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.custom"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.custom"]], "custom (sensorconfig attribute)": [[20, "cc_hardware.drivers.SensorConfig.custom"], [25, "cc_hardware.drivers.sensor.SensorConfig.custom"]], "home() (steppermotor method)": [[20, "cc_hardware.drivers.StepperMotor.home"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.home"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.home"]], "instantiate() (motioncapturesensorconfig class method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.instantiate"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.instantiate"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.instantiate"]], "instantiate() (spadsensorconfig class method)": [[20, "cc_hardware.drivers.SPADSensorConfig.instantiate"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.instantiate"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.instantiate"]], "instantiate() (sensorconfig class method)": [[20, "cc_hardware.drivers.SensorConfig.instantiate"], [25, "cc_hardware.drivers.sensor.SensorConfig.instantiate"]], "is_moving (steppermotor property)": [[20, "cc_hardware.drivers.StepperMotor.is_moving"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.is_moving"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.is_moving"]], "is_moving (steppermotorsystem property)": [[20, "cc_hardware.drivers.StepperMotorSystem.is_moving"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.is_moving"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.is_moving"]], "is_okay (motioncapturesensor property)": [[20, "cc_hardware.drivers.MotionCaptureSensor.is_okay"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.is_okay"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.is_okay"]], "is_okay (spadsensor property)": [[20, "cc_hardware.drivers.SPADSensor.is_okay"], [26, "cc_hardware.drivers.spads.SPADSensor.is_okay"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.is_okay"]], "is_okay (sensor property)": [[20, "cc_hardware.drivers.Sensor.is_okay"], [25, "cc_hardware.drivers.sensor.Sensor.is_okay"]], "is_okay (steppermotor property)": [[20, "cc_hardware.drivers.StepperMotor.is_okay"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.is_okay"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.is_okay"]], "is_okay (steppermotorsystem property)": [[20, "cc_hardware.drivers.StepperMotorSystem.is_okay"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.is_okay"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.is_okay"]], "load() (motioncapturesensorconfig class method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.load"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.load"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.load"]], "load() (spadsensorconfig class method)": [[20, "cc_hardware.drivers.SPADSensorConfig.load"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.load"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.load"]], "load() (sensorconfig class method)": [[20, "cc_hardware.drivers.SensorConfig.load"], [25, "cc_hardware.drivers.sensor.SensorConfig.load"]], "merge_with() (motioncapturesensorconfig method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.merge_with"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.merge_with"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.merge_with"]], "merge_with() (spadsensorconfig method)": [[20, "cc_hardware.drivers.SPADSensorConfig.merge_with"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.merge_with"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.merge_with"]], "merge_with() (sensorconfig method)": [[20, "cc_hardware.drivers.SensorConfig.merge_with"], [25, "cc_hardware.drivers.sensor.SensorConfig.merge_with"]], "move_by() (steppermotor method)": [[20, "cc_hardware.drivers.StepperMotor.move_by"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.move_by"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_by"]], "move_by() (steppermotorsystem method)": [[20, "cc_hardware.drivers.StepperMotorSystem.move_by"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_by"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_by"]], "move_to() (steppermotor method)": [[20, "cc_hardware.drivers.StepperMotor.move_to"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.move_to"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_to"]], "move_to() (steppermotorsystem method)": [[20, "cc_hardware.drivers.StepperMotorSystem.move_to"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_to"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_to"]], "name() (steppermotorsystemaxis method)": [[20, "cc_hardware.drivers.StepperMotorSystemAxis.name"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.name"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.name"]], "num_bins (spadsensor property)": [[20, "cc_hardware.drivers.SPADSensor.num_bins"], [26, "cc_hardware.drivers.spads.SPADSensor.num_bins"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.num_bins"]], "position (steppermotor property)": [[20, "cc_hardware.drivers.StepperMotor.position"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.position"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.position"]], "read() (safeserial method)": [[20, "cc_hardware.drivers.SafeSerial.read"], [24, "cc_hardware.drivers.safe_serial.SafeSerial.read"]], "register() (motioncapturesensor class method)": [[20, "cc_hardware.drivers.MotionCaptureSensor.register"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.register"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.register"]], "register() (motioncapturesensorconfig class method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.register"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.register"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.register"]], "register() (spadsensor class method)": [[20, "cc_hardware.drivers.SPADSensor.register"], [26, "cc_hardware.drivers.spads.SPADSensor.register"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.register"]], "register() (spadsensorconfig class method)": [[20, "cc_hardware.drivers.SPADSensorConfig.register"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.register"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.register"]], "register() (sensor class method)": [[20, "cc_hardware.drivers.Sensor.register"], [25, "cc_hardware.drivers.sensor.Sensor.register"]], "register() (sensorconfig class method)": [[20, "cc_hardware.drivers.SensorConfig.register"], [25, "cc_hardware.drivers.sensor.SensorConfig.register"]], "register() (steppermotor class method)": [[20, "cc_hardware.drivers.StepperMotor.register"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.register"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.register"]], "register() (steppermotorsystem class method)": [[20, "cc_hardware.drivers.StepperMotorSystem.register"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.register"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.register"]], "registered() (motioncapturesensor method)": [[20, "cc_hardware.drivers.MotionCaptureSensor.registered"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.registered"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.registered"]], "registered() (motioncapturesensorconfig method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.registered"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.registered"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.registered"]], "registered() (spadsensor method)": [[20, "cc_hardware.drivers.SPADSensor.registered"], [26, "cc_hardware.drivers.spads.SPADSensor.registered"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.registered"]], "registered() (spadsensorconfig method)": [[20, "cc_hardware.drivers.SPADSensorConfig.registered"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.registered"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.registered"]], "registered() (sensor method)": [[20, "cc_hardware.drivers.Sensor.registered"], [25, "cc_hardware.drivers.sensor.Sensor.registered"]], "registered() (sensorconfig method)": [[20, "cc_hardware.drivers.SensorConfig.registered"], [25, "cc_hardware.drivers.sensor.SensorConfig.registered"]], "registered() (steppermotor method)": [[20, "cc_hardware.drivers.StepperMotor.registered"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.registered"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.registered"]], "registered() (steppermotorsystem method)": [[20, "cc_hardware.drivers.StepperMotorSystem.registered"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.registered"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.registered"]], "registry() (motioncapturesensor method)": [[20, "cc_hardware.drivers.MotionCaptureSensor.registry"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.registry"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.registry"]], "registry() (motioncapturesensorconfig method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.registry"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.registry"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.registry"]], "registry() (spadsensor method)": [[20, "cc_hardware.drivers.SPADSensor.registry"], [26, "cc_hardware.drivers.spads.SPADSensor.registry"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.registry"]], "registry() (spadsensorconfig method)": [[20, "cc_hardware.drivers.SPADSensorConfig.registry"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.registry"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.registry"]], "registry() (sensor method)": [[20, "cc_hardware.drivers.Sensor.registry"], [25, "cc_hardware.drivers.sensor.Sensor.registry"]], "registry() (sensorconfig method)": [[20, "cc_hardware.drivers.SensorConfig.registry"], [25, "cc_hardware.drivers.sensor.SensorConfig.registry"]], "registry() (steppermotor method)": [[20, "cc_hardware.drivers.StepperMotor.registry"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.registry"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.registry"]], "registry() (steppermotorsystem method)": [[20, "cc_hardware.drivers.StepperMotorSystem.registry"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.registry"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.registry"]], "resolution (spadsensor property)": [[20, "cc_hardware.drivers.SPADSensor.resolution"], [26, "cc_hardware.drivers.spads.SPADSensor.resolution"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.resolution"]], "save() (motioncapturesensorconfig method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.save"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.save"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.save"]], "save() (spadsensorconfig method)": [[20, "cc_hardware.drivers.SPADSensorConfig.save"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.save"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.save"]], "save() (sensorconfig method)": [[20, "cc_hardware.drivers.SensorConfig.save"], [25, "cc_hardware.drivers.sensor.SensorConfig.save"]], "settings (motioncapturesensor property)": [[20, "cc_hardware.drivers.MotionCaptureSensor.settings"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.settings"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.settings"]], "settings (motioncapturesensorconfig property)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.settings"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.settings"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.settings"]], "settings (spadsensor property)": [[20, "cc_hardware.drivers.SPADSensor.settings"], [26, "cc_hardware.drivers.spads.SPADSensor.settings"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.settings"]], "settings (spadsensorconfig property)": [[20, "cc_hardware.drivers.SPADSensorConfig.settings"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.settings"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.settings"]], "settings (sensor property)": [[20, "cc_hardware.drivers.Sensor.settings"], [25, "cc_hardware.drivers.sensor.Sensor.settings"]], "settings (sensorconfig property)": [[20, "cc_hardware.drivers.SensorConfig.settings"], [25, "cc_hardware.drivers.sensor.SensorConfig.settings"]], "to_yaml() (motioncapturesensorconfig method)": [[20, "cc_hardware.drivers.MotionCaptureSensorConfig.to_yaml"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig.to_yaml"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig.to_yaml"]], "to_yaml() (spadsensorconfig method)": [[20, "cc_hardware.drivers.SPADSensorConfig.to_yaml"], [26, "cc_hardware.drivers.spads.SPADSensorConfig.to_yaml"], [28, "cc_hardware.drivers.spads.spad.SPADSensorConfig.to_yaml"]], "to_yaml() (sensorconfig method)": [[20, "cc_hardware.drivers.SensorConfig.to_yaml"], [25, "cc_hardware.drivers.sensor.SensorConfig.to_yaml"]], "update() (motioncapturesensor method)": [[20, "cc_hardware.drivers.MotionCaptureSensor.update"], [21, "cc_hardware.drivers.mocap.MotionCaptureSensor.update"], [22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor.update"]], "update() (spadsensor method)": [[20, "cc_hardware.drivers.SPADSensor.update"], [26, "cc_hardware.drivers.spads.SPADSensor.update"], [28, "cc_hardware.drivers.spads.spad.SPADSensor.update"]], "update() (sensor method)": [[20, "cc_hardware.drivers.Sensor.update"], [25, "cc_hardware.drivers.sensor.Sensor.update"]], "value() (steppermotorsystemaxis method)": [[20, "cc_hardware.drivers.StepperMotorSystemAxis.value"], [32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.value"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.value"]], "wait_for_move() (steppermotor method)": [[20, "cc_hardware.drivers.StepperMotor.wait_for_move"], [32, "cc_hardware.drivers.stepper_motors.StepperMotor.wait_for_move"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.wait_for_move"]], "wait_for_start_talk() (safeserial method)": [[20, "cc_hardware.drivers.SafeSerial.wait_for_start_talk"], [24, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_start_talk"]], "wait_for_stop_talk() (safeserial method)": [[20, "cc_hardware.drivers.SafeSerial.wait_for_stop_talk"], [24, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_stop_talk"]], "write() (safeserial method)": [[20, "cc_hardware.drivers.SafeSerial.write"], [24, "cc_hardware.drivers.safe_serial.SafeSerial.write"]], "write_and_wait_for_start_and_stop_talk() (safeserial method)": [[20, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_and_stop_talk"], [24, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_and_stop_talk"]], "write_and_wait_for_start_talk() (safeserial method)": [[20, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_talk"], [24, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_talk"]], "write_and_wait_for_stop_talk() (safeserial method)": [[20, "cc_hardware.drivers.SafeSerial.write_and_wait_for_stop_talk"], [24, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_stop_talk"]], "motioncapturesensor (class in cc_hardware.drivers.mocap)": [[21, "cc_hardware.drivers.mocap.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers.mocap)": [[21, "cc_hardware.drivers.mocap.MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap": [[21, "module-cc_hardware.drivers.mocap"]], "motioncapturesensor (class in cc_hardware.drivers.mocap.mocap)": [[22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensor"]], "motioncapturesensorconfig (class in cc_hardware.drivers.mocap.mocap)": [[22, "cc_hardware.drivers.mocap.mocap.MotionCaptureSensorConfig"]], "cc_hardware.drivers.mocap.mocap": [[22, "module-cc_hardware.drivers.mocap.mocap"]], "vivetrackerpose (class in cc_hardware.drivers.mocap.vive)": [[23, "cc_hardware.drivers.mocap.vive.ViveTrackerPose"]], "vivetrackersensorconfig (class in cc_hardware.drivers.mocap.vive)": [[23, "cc_hardware.drivers.mocap.vive.ViveTrackerSensorConfig"]], "cc_hardware.drivers.mocap.vive": [[23, "module-cc_hardware.drivers.mocap.vive"]], "get_data() (vivetrackerpose method)": [[23, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.get_data"]], "process() (vivetrackerpose method)": [[23, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.process"]], "reset() (vivetrackerpose method)": [[23, "cc_hardware.drivers.mocap.vive.ViveTrackerPose.reset"]], "safeserial (class in cc_hardware.drivers.safe_serial)": [[24, "cc_hardware.drivers.safe_serial.SafeSerial"]], "cc_hardware.drivers.safe_serial": [[24, "module-cc_hardware.drivers.safe_serial"]], "sensor (class in cc_hardware.drivers.sensor)": [[25, "cc_hardware.drivers.sensor.Sensor"]], "sensorconfig (class in cc_hardware.drivers.sensor)": [[25, "cc_hardware.drivers.sensor.SensorConfig"]], "sensordata (class in cc_hardware.drivers.sensor)": [[25, "cc_hardware.drivers.sensor.SensorData"]], "cc_hardware.drivers.sensor": [[25, "module-cc_hardware.drivers.sensor"]], "get_data() (sensordata method)": [[25, "cc_hardware.drivers.sensor.SensorData.get_data"]], "process() (sensordata method)": [[25, "cc_hardware.drivers.sensor.SensorData.process"]], "reset() (sensordata method)": [[25, "cc_hardware.drivers.sensor.SensorData.reset"]], "spadsensor (class in cc_hardware.drivers.spads)": [[26, "cc_hardware.drivers.spads.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads)": [[26, "cc_hardware.drivers.spads.SPADSensorConfig"]], "cc_hardware.drivers.spads": [[26, "module-cc_hardware.drivers.spads"]], "pklspadsensor (class in cc_hardware.drivers.spads.pkl)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor"]], "pklspadsensorconfig (class in cc_hardware.drivers.spads.pkl)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig"]], "__del__() (pklspadsensor method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.__del__"]], "__getstate__() (pklspadsensorconfig method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.__getstate__"]], "__setstate__() (pklspadsensorconfig method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.__setstate__"]], "__str__() (pklspadsensorconfig method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.__str__"]], "accumulate() (pklspadsensor method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.accumulate"]], "calibrate() (pklspadsensor method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.calibrate"]], "cc_hardware.drivers.spads.pkl": [[27, "module-cc_hardware.drivers.spads.pkl"]], "close() (pklspadsensor method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.close"]], "compose() (pklspadsensorconfig class method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.compose"]], "config (pklspadsensor property)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.config"]], "config (pklspadsensorconfig attribute)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.config"]], "copy() (pklspadsensorconfig method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.copy"]], "create() (pklspadsensorconfig class method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.create"]], "create_from_config() (pklspadsensor class method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.create_from_config"]], "create_from_registry() (pklspadsensor class method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.create_from_registry"]], "create_from_registry() (pklspadsensorconfig class method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.create_from_registry"]], "custom (pklspadsensorconfig attribute)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.custom"]], "instantiate() (pklspadsensorconfig class method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.instantiate"]], "is_okay (pklspadsensor property)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.is_okay"]], "load() (pklspadsensorconfig class method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.load"]], "merge_with() (pklspadsensorconfig method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.merge_with"]], "num_bins (pklspadsensor property)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.num_bins"]], "register() (pklspadsensor class method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.register"]], "register() (pklspadsensorconfig class method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.register"]], "registered() (pklspadsensor method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.registered"]], "registered() (pklspadsensorconfig method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.registered"]], "registry() (pklspadsensor method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.registry"]], "registry() (pklspadsensorconfig method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.registry"]], "resolution (pklspadsensor property)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.resolution"]], "save() (pklspadsensorconfig method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.save"]], "settings (pklspadsensor property)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.settings"]], "settings (pklspadsensorconfig property)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.settings"]], "to_yaml() (pklspadsensorconfig method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensorConfig.to_yaml"]], "update() (pklspadsensor method)": [[27, "cc_hardware.drivers.spads.pkl.PklSPADSensor.update"]], "spadsensor (class in cc_hardware.drivers.spads.spad)": [[28, "cc_hardware.drivers.spads.spad.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads.spad)": [[28, "cc_hardware.drivers.spads.spad.SPADSensorConfig"]], "cc_hardware.drivers.spads.spad": [[28, "module-cc_hardware.drivers.spads.spad"]], "spadmergewrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[29, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper"]], "spadmergewrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[29, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig"]], "spadmovingaveragewrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[29, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper"]], "spadmovingaveragewrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[29, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig"]], "spadwrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[29, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper"]], "spadwrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[29, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig"]], "cc_hardware.drivers.spads.spad_wrappers": [[29, "module-cc_hardware.drivers.spads.spad_wrappers"]], "settings (spadmergewrapperconfig property)": [[29, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.settings"]], "settings (spadmovingaveragewrapperconfig property)": [[29, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.settings"]], "settings (spadwrapperconfig property)": [[29, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.settings"]], "rangemode (class in cc_hardware.drivers.spads.tmf8828)": [[30, "cc_hardware.drivers.spads.tmf8828.RangeMode"]], "spadid (class in cc_hardware.drivers.spads.tmf8828)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID"]], "tmf8828config (class in cc_hardware.drivers.spads.tmf8828)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Config"]], "tmf8828histogram (class in cc_hardware.drivers.spads.tmf8828)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram"]], "tmf8828sensor (class in cc_hardware.drivers.spads.tmf8828)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor"]], "__dir__() (rangemode method)": [[30, "cc_hardware.drivers.spads.tmf8828.RangeMode.__dir__"]], "__dir__() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.__dir__"]], "__format__() (rangemode method)": [[30, "cc_hardware.drivers.spads.tmf8828.RangeMode.__format__"]], "__format__() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.__format__"]], "__hash__() (rangemode method)": [[30, "cc_hardware.drivers.spads.tmf8828.RangeMode.__hash__"]], "__hash__() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.__hash__"]], "__reduce_ex__() (rangemode method)": [[30, "cc_hardware.drivers.spads.tmf8828.RangeMode.__reduce_ex__"]], "__reduce_ex__() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.__reduce_ex__"]], "__repr__() (rangemode method)": [[30, "cc_hardware.drivers.spads.tmf8828.RangeMode.__repr__"]], "__repr__() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.__repr__"]], "__str__() (rangemode method)": [[30, "cc_hardware.drivers.spads.tmf8828.RangeMode.__str__"]], "__str__() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.__str__"]], "accumulate() (tmf8828sensor method)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.accumulate"]], "calibrate() (tmf8828sensor method)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.calibrate"]], "cc_hardware.drivers.spads.tmf8828": [[30, "module-cc_hardware.drivers.spads.tmf8828"]], "close() (tmf8828sensor method)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.close"]], "config (tmf8828sensor property)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.config"]], "get_active_channels_per_subcapture() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.get_active_channels_per_subcapture"]], "get_data() (tmf8828histogram method)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.get_data"]], "get_num_channels() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.get_num_channels"]], "get_num_pixels() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.get_num_pixels"]], "get_resolution() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.get_resolution"]], "has_data (tmf8828histogram property)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.has_data"]], "is_okay (tmf8828sensor property)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.is_okay"]], "name() (rangemode method)": [[30, "cc_hardware.drivers.spads.tmf8828.RangeMode.name"]], "name() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.name"]], "num_bins (tmf8828sensor property)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.num_bins"]], "process() (tmf8828histogram method)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.process"]], "reset() (tmf8828histogram method)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.reset"]], "resolution (tmf8828sensor property)": [[30, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.resolution"]], "value() (rangemode method)": [[30, "cc_hardware.drivers.spads.tmf8828.RangeMode.value"]], "value() (spadid method)": [[30, "cc_hardware.drivers.spads.tmf8828.SPADID.value"]], "rangingmode (class in cc_hardware.drivers.spads.vl53l8ch)": [[31, "cc_hardware.drivers.spads.vl53l8ch.RangingMode"]], "vl53l8chconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig"]], "vl53l8chconfig4x4 (class in cc_hardware.drivers.spads.vl53l8ch)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4"]], "vl53l8chconfig8x8 (class in cc_hardware.drivers.spads.vl53l8ch)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8"]], "vl53l8chhistogram (class in cc_hardware.drivers.spads.vl53l8ch)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram"]], "vl53l8chsensor (class in cc_hardware.drivers.spads.vl53l8ch)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor"]], "vl53l8chsharedconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig"]], "__del__() (vl53l8chsensor method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.__del__"]], "__dir__() (rangingmode method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__dir__"]], "__format__() (rangingmode method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__format__"]], "__getstate__() (vl53l8chconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__getstate__"]], "__getstate__() (vl53l8chconfig4x4 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__getstate__"]], "__getstate__() (vl53l8chconfig8x8 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__getstate__"]], "__getstate__() (vl53l8chsharedconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__getstate__"]], "__hash__() (rangingmode method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__hash__"]], "__reduce_ex__() (rangingmode method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__reduce_ex__"]], "__repr__() (rangingmode method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__repr__"]], "__setstate__() (vl53l8chconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__setstate__"]], "__setstate__() (vl53l8chconfig4x4 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__setstate__"]], "__setstate__() (vl53l8chconfig8x8 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__setstate__"]], "__setstate__() (vl53l8chsharedconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__setstate__"]], "__str__() (rangingmode method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__str__"]], "__str__() (vl53l8chconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__str__"]], "__str__() (vl53l8chconfig4x4 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__str__"]], "__str__() (vl53l8chconfig8x8 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__str__"]], "__str__() (vl53l8chsharedconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__str__"]], "accumulate() (vl53l8chsensor method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.accumulate"]], "calibrate() (vl53l8chsensor method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.calibrate"]], "cc_hardware.drivers.spads.vl53l8ch": [[31, "module-cc_hardware.drivers.spads.vl53l8ch"]], "close() (vl53l8chsensor method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.close"]], "compose() (vl53l8chconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.compose"]], "compose() (vl53l8chconfig4x4 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.compose"]], "compose() (vl53l8chconfig8x8 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.compose"]], "compose() (vl53l8chsharedconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.compose"]], "config (vl53l8chconfig attribute)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.config"]], "config (vl53l8chconfig4x4 attribute)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.config"]], "config (vl53l8chconfig8x8 attribute)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.config"]], "config (vl53l8chsensor property)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.config"]], "config (vl53l8chsharedconfig attribute)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.config"]], "copy() (vl53l8chconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.copy"]], "copy() (vl53l8chconfig4x4 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.copy"]], "copy() (vl53l8chconfig8x8 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.copy"]], "copy() (vl53l8chsharedconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.copy"]], "create() (vl53l8chconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.create"]], "create() (vl53l8chconfig4x4 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.create"]], "create() (vl53l8chconfig8x8 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.create"]], "create() (vl53l8chsharedconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.create"]], "create_from_config() (vl53l8chsensor class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.create_from_config"]], "create_from_registry() (vl53l8chconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.create_from_registry"]], "create_from_registry() (vl53l8chconfig4x4 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.create_from_registry"]], "create_from_registry() (vl53l8chconfig8x8 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.create_from_registry"]], "create_from_registry() (vl53l8chsensor class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.create_from_registry"]], "create_from_registry() (vl53l8chsharedconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.create_from_registry"]], "custom (vl53l8chconfig attribute)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.custom"]], "custom (vl53l8chconfig4x4 attribute)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.custom"]], "custom (vl53l8chconfig8x8 attribute)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.custom"]], "custom (vl53l8chsharedconfig attribute)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.custom"]], "get_data() (vl53l8chhistogram method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.get_data"]], "has_data (vl53l8chhistogram property)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.has_data"]], "instantiate() (vl53l8chconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.instantiate"]], "instantiate() (vl53l8chconfig4x4 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.instantiate"]], "instantiate() (vl53l8chconfig8x8 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.instantiate"]], "instantiate() (vl53l8chsharedconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.instantiate"]], "is_okay (vl53l8chsensor property)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.is_okay"]], "load() (vl53l8chconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.load"]], "load() (vl53l8chconfig4x4 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.load"]], "load() (vl53l8chconfig8x8 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.load"]], "load() (vl53l8chsharedconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.load"]], "merge_with() (vl53l8chconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.merge_with"]], "merge_with() (vl53l8chconfig4x4 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.merge_with"]], "merge_with() (vl53l8chconfig8x8 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.merge_with"]], "merge_with() (vl53l8chsharedconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.merge_with"]], "name() (rangingmode method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.name"]], "num_bins (vl53l8chsensor property)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.num_bins"]], "pack() (vl53l8chconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.pack"]], "pack() (vl53l8chconfig4x4 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.pack"]], "pack() (vl53l8chconfig8x8 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.pack"]], "pack() (vl53l8chsharedconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.pack"]], "process() (vl53l8chhistogram method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.process"]], "register() (vl53l8chconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.register"]], "register() (vl53l8chconfig4x4 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.register"]], "register() (vl53l8chconfig8x8 class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.register"]], "register() (vl53l8chsensor class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.register"]], "register() (vl53l8chsharedconfig class method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.register"]], "registered() (vl53l8chconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.registered"]], "registered() (vl53l8chconfig4x4 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.registered"]], "registered() (vl53l8chconfig8x8 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.registered"]], "registered() (vl53l8chsensor method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.registered"]], "registered() (vl53l8chsharedconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.registered"]], "registry() (vl53l8chconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.registry"]], "registry() (vl53l8chconfig4x4 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.registry"]], "registry() (vl53l8chconfig8x8 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.registry"]], "registry() (vl53l8chsensor method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.registry"]], "registry() (vl53l8chsharedconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.registry"]], "reset() (vl53l8chhistogram method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.reset"]], "resolution (vl53l8chsensor property)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.resolution"]], "save() (vl53l8chconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.save"]], "save() (vl53l8chconfig4x4 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.save"]], "save() (vl53l8chconfig8x8 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.save"]], "save() (vl53l8chsharedconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.save"]], "settings (vl53l8chconfig property)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.settings"]], "settings (vl53l8chconfig4x4 property)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.settings"]], "settings (vl53l8chconfig8x8 property)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.settings"]], "settings (vl53l8chsensor property)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.settings"]], "settings (vl53l8chsharedconfig property)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.settings"]], "to_yaml() (vl53l8chconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.to_yaml"]], "to_yaml() (vl53l8chconfig4x4 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.to_yaml"]], "to_yaml() (vl53l8chconfig8x8 method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.to_yaml"]], "to_yaml() (vl53l8chsharedconfig method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.to_yaml"]], "update() (vl53l8chsensor method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.update"]], "value() (rangingmode method)": [[31, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.value"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors)": [[32, "cc_hardware.drivers.stepper_motors.DummyStepperMotor"]], "steppermotor (class in cc_hardware.drivers.stepper_motors)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotor"]], "steppermotorconfig (class in cc_hardware.drivers.stepper_motors)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis"]], "steppermotorsystemconfig (class in cc_hardware.drivers.stepper_motors)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig"]], "__getstate__() (steppermotorconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.__getstate__"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.__getstate__"]], "__getstate__() (steppermotorsystemconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.__getstate__"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.__getstate__"]], "__setstate__() (steppermotorconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.__setstate__"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.__setstate__"]], "__setstate__() (steppermotorsystemconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.__setstate__"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.__setstate__"]], "__str__() (steppermotorconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.__str__"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.__str__"]], "__str__() (steppermotorsystemconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.__str__"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.__str__"]], "cc_hardware.drivers.stepper_motors": [[32, "module-cc_hardware.drivers.stepper_motors"]], "compose() (steppermotorconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.compose"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.compose"]], "compose() (steppermotorsystemconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.compose"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.compose"]], "config (steppermotorconfig attribute)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.config"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.config"]], "config (steppermotorsystemconfig attribute)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.config"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.config"]], "copy() (steppermotorconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.copy"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.copy"]], "copy() (steppermotorsystemconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.copy"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.copy"]], "create() (steppermotorconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.create"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.create"]], "create() (steppermotorsystemconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.create"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.create"]], "create_from_registry() (steppermotorconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.create_from_registry"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.create_from_registry"]], "create_from_registry() (steppermotorsystemconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.create_from_registry"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.create_from_registry"]], "custom (steppermotorconfig attribute)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.custom"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.custom"]], "custom (steppermotorsystemconfig attribute)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.custom"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.custom"]], "instantiate() (steppermotorconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.instantiate"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.instantiate"]], "instantiate() (steppermotorsystemconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.instantiate"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.instantiate"]], "load() (steppermotorconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.load"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.load"]], "load() (steppermotorsystemconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.load"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.load"]], "merge_with() (steppermotorconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.merge_with"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.merge_with"]], "merge_with() (steppermotorsystemconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.merge_with"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.merge_with"]], "register() (steppermotorconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.register"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.register"]], "register() (steppermotorsystemconfig class method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.register"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.register"]], "registered() (steppermotorconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.registered"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.registered"]], "registered() (steppermotorsystemconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.registered"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.registered"]], "registry() (steppermotorconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.registry"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.registry"]], "registry() (steppermotorsystemconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.registry"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.registry"]], "save() (steppermotorconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.save"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.save"]], "save() (steppermotorsystemconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.save"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.save"]], "to_yaml() (steppermotorconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorConfig.to_yaml"], [35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig.to_yaml"]], "to_yaml() (steppermotorsystemconfig method)": [[32, "cc_hardware.drivers.stepper_motors.StepperMotorSystemConfig.to_yaml"], [36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig.to_yaml"]], "azimuthelevationsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem"]], "kinesisrotationstage (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage"]], "kinesissteppermotor (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor"]], "kinesissteppermotorsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[33, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "close() (kinesisrotationstage method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.close"]], "close() (kinesissteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.close"]], "home() (kinesisrotationstage method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.home"]], "home() (kinesissteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.home"]], "initialize() (kinesisrotationstage method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.initialize"]], "initialize() (kinesissteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.initialize"]], "is_okay (kinesisrotationstage property)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.is_okay"]], "is_okay (kinesissteppermotor property)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.is_okay"]], "lower_limit (kinesisrotationstage property)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.lower_limit"]], "lower_limit (kinesissteppermotor property)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.lower_limit"]], "move_by() (kinesisrotationstage method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_by"]], "move_by() (kinesissteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_by"]], "move_to() (kinesisrotationstage method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_to"]], "move_to() (kinesissteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_to"]], "position (kinesisrotationstage property)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.position"]], "position (kinesissteppermotor property)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.position"]], "upper_limit (kinesisrotationstage property)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.upper_limit"]], "upper_limit (kinesissteppermotor property)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.upper_limit"]], "wait_for_move() (kinesisrotationstage method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.wait_for_move"]], "wait_for_move() (kinesissteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.wait_for_move"]], "snakesteppercontroller (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController"]], "steppercontroller (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[34, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "create_from_registry() (snakesteppercontroller class method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.create_from_registry"]], "create_from_registry() (steppercontroller class method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.create_from_registry"]], "get_position() (snakesteppercontroller method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.get_position"]], "get_position() (steppercontroller method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.get_position"]], "register() (snakesteppercontroller class method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.register"]], "register() (steppercontroller class method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.register"]], "registered() (snakesteppercontroller method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.registered"]], "registered() (steppercontroller method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.registered"]], "registry() (snakesteppercontroller method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.registry"]], "registry() (steppercontroller method)": [[34, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.registry"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[35, "cc_hardware.drivers.stepper_motors.stepper_motor.DummyStepperMotor"]], "steppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor"]], "steppermotorconfig (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[35, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotorConfig"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[35, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "dummysteppersystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis"]], "steppermotorsystemconfig (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemConfig"]], "__getattr__() (dummysteppersystem method)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.__getattr__"]], "axes (dummysteppersystem property)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.axes"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[36, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "close() (dummysteppersystem method)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.close"]], "config (dummysteppersystem property)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.config"]], "create_from_config() (dummysteppersystem class method)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.create_from_config"]], "create_from_registry() (dummysteppersystem class method)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.create_from_registry"]], "is_moving (dummysteppersystem property)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.is_moving"]], "is_okay (dummysteppersystem property)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.is_okay"]], "move_by() (dummysteppersystem method)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_by"]], "move_to() (dummysteppersystem method)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_to"]], "register() (dummysteppersystem class method)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.register"]], "registered() (dummysteppersystem method)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.registered"]], "registry() (dummysteppersystem method)": [[36, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.registry"]], "dualdrive2axisgantryconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryConfig"]], "dualdrive2axisgantryxconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryXConfig"]], "dualdrive2axisgantryy1config (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryY1Config"]], "dualdrive2axisgantryy2config (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantryY2Config"]], "singledrive1axisgantryconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryConfig"]], "singledrive1axisgantryxconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryXConfig"]], "singledrive1axisgantryyconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantryYConfig"]], "telemetrixsteppermotor (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor"]], "telemetrixsteppermotorconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorConfig"]], "telemetrixsteppermotorsystem (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem"]], "telemetrixsteppermotorsystemconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystemConfig"]], "telemetrixsteppermotorxconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXConfig"]], "telemetrixsteppermotoryconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYConfig"]], "telemetrixsteppermotorzconfig (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZConfig"]], "__getattr__() (telemetrixsteppermotor method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.__getattr__"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[37, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "close() (telemetrixsteppermotor method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.close"]], "close() (telemetrixsteppermotorsystem method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.close"]], "cm_to_revs() (telemetrixsteppermotor method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.cm_to_revs"]], "home() (telemetrixsteppermotor method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.home"]], "id (telemetrixsteppermotor property)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.id"]], "is_moving (telemetrixsteppermotor property)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.is_moving"]], "is_okay (telemetrixsteppermotor property)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.is_okay"]], "move_by() (telemetrixsteppermotor method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_by"]], "move_to() (telemetrixsteppermotor method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_to"]], "position (telemetrixsteppermotor property)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.position"]], "revs_to_cm() (telemetrixsteppermotor method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.revs_to_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotor method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_absolute_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotor method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_target_position_cm"]], "wait_for_move() (telemetrixsteppermotor method)": [[37, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.wait_for_move"]], "cc_hardware": [[38, "module-cc_hardware"]], "calibrate() (in module cc_hardware.tools.calibration)": [[39, "cc_hardware.tools.calibration.calibrate"]], "cc_hardware.tools.calibration": [[39, "module-cc_hardware.tools.calibration"]], "tmf8828_calibrate() (in module cc_hardware.tools.calibration)": [[39, "cc_hardware.tools.calibration.tmf8828_calibrate"]], "cc_hardware.tools.camera_viewer": [[40, "module-cc_hardware.tools.camera_viewer"]], "dashboard (class in cc_hardware.tools.dashboard.dashboard)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard"]], "dashboardconfig (class in cc_hardware.tools.dashboard.dashboard)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig"]], "__getstate__() (dashboardconfig method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.__getstate__"], [42, "cc_hardware.tools.dashboard.DashboardConfig.__getstate__"]], "__setstate__() (dashboardconfig method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.__setstate__"], [42, "cc_hardware.tools.dashboard.DashboardConfig.__setstate__"]], "__str__() (dashboardconfig method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.__str__"], [42, "cc_hardware.tools.dashboard.DashboardConfig.__str__"]], "cc_hardware.tools.dashboard.dashboard": [[41, "module-cc_hardware.tools.dashboard.dashboard"]], "close() (dashboard method)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.close"], [42, "cc_hardware.tools.dashboard.Dashboard.close"]], "compose() (dashboardconfig class method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.compose"], [42, "cc_hardware.tools.dashboard.DashboardConfig.compose"]], "config (dashboard property)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.config"], [42, "cc_hardware.tools.dashboard.Dashboard.config"]], "config (dashboardconfig attribute)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.config"], [42, "cc_hardware.tools.dashboard.DashboardConfig.config"]], "copy() (dashboardconfig method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.copy"], [42, "cc_hardware.tools.dashboard.DashboardConfig.copy"]], "create() (dashboardconfig class method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.create"], [42, "cc_hardware.tools.dashboard.DashboardConfig.create"]], "create_from_config() (dashboard class method)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.create_from_config"], [42, "cc_hardware.tools.dashboard.Dashboard.create_from_config"]], "create_from_registry() (dashboard class method)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.create_from_registry"], [42, "cc_hardware.tools.dashboard.Dashboard.create_from_registry"]], "create_from_registry() (dashboardconfig class method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.create_from_registry"], [42, "cc_hardware.tools.dashboard.DashboardConfig.create_from_registry"]], "custom (dashboardconfig attribute)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.custom"], [42, "cc_hardware.tools.dashboard.DashboardConfig.custom"]], "instantiate() (dashboardconfig class method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.instantiate"], [42, "cc_hardware.tools.dashboard.DashboardConfig.instantiate"]], "is_okay (dashboard property)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.is_okay"], [42, "cc_hardware.tools.dashboard.Dashboard.is_okay"]], "load() (dashboardconfig class method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.load"], [42, "cc_hardware.tools.dashboard.DashboardConfig.load"]], "merge_with() (dashboardconfig method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.merge_with"], [42, "cc_hardware.tools.dashboard.DashboardConfig.merge_with"]], "register() (dashboard class method)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.register"], [42, "cc_hardware.tools.dashboard.Dashboard.register"]], "register() (dashboardconfig class method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.register"], [42, "cc_hardware.tools.dashboard.DashboardConfig.register"]], "registered() (dashboard method)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.registered"], [42, "cc_hardware.tools.dashboard.Dashboard.registered"]], "registered() (dashboardconfig method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.registered"], [42, "cc_hardware.tools.dashboard.DashboardConfig.registered"]], "registry() (dashboard method)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.registry"], [42, "cc_hardware.tools.dashboard.Dashboard.registry"]], "registry() (dashboardconfig method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.registry"], [42, "cc_hardware.tools.dashboard.DashboardConfig.registry"]], "run() (dashboard method)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.run"], [42, "cc_hardware.tools.dashboard.Dashboard.run"]], "save() (dashboardconfig method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.save"], [42, "cc_hardware.tools.dashboard.DashboardConfig.save"]], "setup() (dashboard method)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.setup"], [42, "cc_hardware.tools.dashboard.Dashboard.setup"]], "to_yaml() (dashboardconfig method)": [[41, "cc_hardware.tools.dashboard.dashboard.DashboardConfig.to_yaml"], [42, "cc_hardware.tools.dashboard.DashboardConfig.to_yaml"]], "update() (dashboard method)": [[41, "cc_hardware.tools.dashboard.dashboard.Dashboard.update"], [42, "cc_hardware.tools.dashboard.Dashboard.update"]], "dashboard (class in cc_hardware.tools.dashboard)": [[42, "cc_hardware.tools.dashboard.Dashboard"]], "dashboardconfig (class in cc_hardware.tools.dashboard)": [[42, "cc_hardware.tools.dashboard.DashboardConfig"]], "spaddashboard (class in cc_hardware.tools.dashboard)": [[42, "cc_hardware.tools.dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig"]], "__getstate__() (spaddashboardconfig method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.__getstate__"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.__getstate__"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.__getstate__"]], "__setstate__() (spaddashboardconfig method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.__setstate__"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.__setstate__"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.__setstate__"]], "__str__() (spaddashboardconfig method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.__str__"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.__str__"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.__str__"]], "cc_hardware.tools.dashboard": [[42, "module-cc_hardware.tools.dashboard"]], "close() (spaddashboard method)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.close"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.close"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.close"]], "compose() (spaddashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.compose"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.compose"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.compose"]], "config (spaddashboard property)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.config"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.config"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.config"]], "config (spaddashboardconfig attribute)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.config"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.config"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.config"]], "copy() (spaddashboardconfig method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.copy"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.copy"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.copy"]], "create() (spaddashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.create"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.create"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.create"]], "create_from_config() (spaddashboard class method)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.create_from_config"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.create_from_config"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.create_from_config"]], "create_from_registry() (spaddashboard class method)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.create_from_registry"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.create_from_registry"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.create_from_registry"]], "create_from_registry() (spaddashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.create_from_registry"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.create_from_registry"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.create_from_registry"]], "custom (spaddashboardconfig attribute)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.custom"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.custom"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.custom"]], "instantiate() (spaddashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.instantiate"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.instantiate"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.instantiate"]], "is_okay (spaddashboard property)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.is_okay"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.is_okay"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.is_okay"]], "load() (spaddashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.load"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.load"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.load"]], "max_bin (spaddashboard property)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.max_bin"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.max_bin"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.max_bin"]], "merge_with() (spaddashboardconfig method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.merge_with"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.merge_with"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.merge_with"]], "min_bin (spaddashboard property)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.min_bin"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.min_bin"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.min_bin"]], "register() (spaddashboard class method)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.register"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.register"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.register"]], "register() (spaddashboardconfig class method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.register"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.register"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.register"]], "registered() (spaddashboard method)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.registered"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.registered"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.registered"]], "registered() (spaddashboardconfig method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.registered"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.registered"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.registered"]], "registry() (spaddashboard method)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.registry"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.registry"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.registry"]], "registry() (spaddashboardconfig method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.registry"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.registry"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.registry"]], "run() (spaddashboard method)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.run"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.run"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.run"]], "save() (spaddashboardconfig method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.save"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.save"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.save"]], "sensor (spaddashboard property)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.sensor"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.sensor"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.sensor"]], "setup() (spaddashboard method)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.setup"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.setup"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.setup"]], "to_yaml() (spaddashboardconfig method)": [[42, "cc_hardware.tools.dashboard.SPADDashboardConfig.to_yaml"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig.to_yaml"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig.to_yaml"]], "update() (spaddashboard method)": [[42, "cc_hardware.tools.dashboard.SPADDashboard.update"], [48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard.update"], [51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard.update"]], "dashmotioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.dash)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard"]], "dashmotioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.dash)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig"]], "__getstate__() (dashmotioncapturedashboardconfig method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.__getstate__"]], "__setstate__() (dashmotioncapturedashboardconfig method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.__setstate__"]], "__str__() (dashmotioncapturedashboardconfig method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.__str__"]], "cc_hardware.tools.dashboard.mocap_dashboard.dash": [[43, "module-cc_hardware.tools.dashboard.mocap_dashboard.dash"]], "close() (dashmotioncapturedashboard method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.close"]], "compose() (dashmotioncapturedashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.compose"]], "config (dashmotioncapturedashboard property)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.config"]], "config (dashmotioncapturedashboardconfig attribute)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.config"]], "copy() (dashmotioncapturedashboardconfig method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.copy"]], "create() (dashmotioncapturedashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.create"]], "create_from_config() (dashmotioncapturedashboard class method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.create_from_config"]], "create_from_registry() (dashmotioncapturedashboard class method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.create_from_registry"]], "create_from_registry() (dashmotioncapturedashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.create_from_registry"]], "custom (dashmotioncapturedashboardconfig attribute)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.custom"]], "instantiate() (dashmotioncapturedashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.instantiate"]], "is_okay (dashmotioncapturedashboard property)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.is_okay"]], "load() (dashmotioncapturedashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.load"]], "merge_with() (dashmotioncapturedashboardconfig method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.merge_with"]], "register() (dashmotioncapturedashboard class method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.register"]], "register() (dashmotioncapturedashboardconfig class method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.register"]], "registered() (dashmotioncapturedashboard method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.registered"]], "registered() (dashmotioncapturedashboardconfig method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.registered"]], "registry() (dashmotioncapturedashboard method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.registry"]], "registry() (dashmotioncapturedashboardconfig method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.registry"]], "run() (dashmotioncapturedashboard method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.run"]], "save() (dashmotioncapturedashboardconfig method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.save"]], "sensor (dashmotioncapturedashboard property)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.sensor"]], "setup() (dashmotioncapturedashboard method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.setup"]], "to_yaml() (dashmotioncapturedashboardconfig method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboardConfig.to_yaml"]], "update() (dashmotioncapturedashboard method)": [[43, "cc_hardware.tools.dashboard.mocap_dashboard.dash.DashMotionCaptureDashboard.update"]], "motioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard"]], "motioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig"]], "__getstate__() (motioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__getstate__"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__getstate__"]], "__setstate__() (motioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__setstate__"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__setstate__"]], "__str__() (motioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__str__"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.__str__"]], "cc_hardware.tools.dashboard.mocap_dashboard": [[44, "module-cc_hardware.tools.dashboard.mocap_dashboard"]], "close() (motioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.close"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.close"]], "compose() (motioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.compose"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.compose"]], "config (motioncapturedashboard property)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.config"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.config"]], "config (motioncapturedashboardconfig attribute)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.config"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.config"]], "copy() (motioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.copy"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.copy"]], "create() (motioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.create"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.create"]], "create_from_config() (motioncapturedashboard class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.create_from_config"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.create_from_config"]], "create_from_registry() (motioncapturedashboard class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.create_from_registry"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.create_from_registry"]], "create_from_registry() (motioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.create_from_registry"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.create_from_registry"]], "custom (motioncapturedashboardconfig attribute)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.custom"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.custom"]], "instantiate() (motioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.instantiate"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.instantiate"]], "is_okay (motioncapturedashboard property)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.is_okay"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.is_okay"]], "load() (motioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.load"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.load"]], "merge_with() (motioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.merge_with"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.merge_with"]], "register() (motioncapturedashboard class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.register"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.register"]], "register() (motioncapturedashboardconfig class method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.register"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.register"]], "registered() (motioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.registered"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.registered"]], "registered() (motioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.registered"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.registered"]], "registry() (motioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.registry"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.registry"]], "registry() (motioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.registry"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.registry"]], "run() (motioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.run"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.run"]], "save() (motioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.save"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.save"]], "sensor (motioncapturedashboard property)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.sensor"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.sensor"]], "setup() (motioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.setup"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.setup"]], "to_yaml() (motioncapturedashboardconfig method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboardConfig.to_yaml"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig.to_yaml"]], "update() (motioncapturedashboard method)": [[44, "cc_hardware.tools.dashboard.mocap_dashboard.MotionCaptureDashboard.update"], [45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard.update"]], "motioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboard"]], "motioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard)": [[45, "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard.MotionCaptureDashboardConfig"]], "cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard": [[45, "module-cc_hardware.tools.dashboard.mocap_dashboard.mocap_dashboard"]], "dashboardwindow (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow"]], "pyqtgraphmotioncapturedashboard (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard"]], "pyqtgraphmotioncapturedashboardconfig (class in cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig"]], "__getstate__() (pyqtgraphmotioncapturedashboardconfig method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.__getstate__"]], "__setstate__() (pyqtgraphmotioncapturedashboardconfig method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.__setstate__"]], "__str__() (pyqtgraphmotioncapturedashboardconfig method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.__str__"]], "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph": [[46, "module-cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph"]], "close() (pyqtgraphmotioncapturedashboard method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.close"]], "compose() (pyqtgraphmotioncapturedashboardconfig class method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.compose"]], "config (pyqtgraphmotioncapturedashboard property)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.config"]], "config (pyqtgraphmotioncapturedashboardconfig attribute)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.config"]], "copy() (pyqtgraphmotioncapturedashboardconfig method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.copy"]], "create() (pyqtgraphmotioncapturedashboardconfig class method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.create"]], "create_from_config() (pyqtgraphmotioncapturedashboard class method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.create_from_config"]], "create_from_registry() (pyqtgraphmotioncapturedashboard class method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.create_from_registry"]], "create_from_registry() (pyqtgraphmotioncapturedashboardconfig class method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.create_from_registry"]], "custom (pyqtgraphmotioncapturedashboardconfig attribute)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.custom"]], "instantiate() (pyqtgraphmotioncapturedashboardconfig class method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.instantiate"]], "is_okay (pyqtgraphmotioncapturedashboard property)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.is_okay"]], "keypressevent() (dashboardwindow method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.DashboardWindow.keyPressEvent"], [50, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.keyPressEvent"]], "load() (pyqtgraphmotioncapturedashboardconfig class method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.load"]], "merge_with() (pyqtgraphmotioncapturedashboardconfig method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.merge_with"]], "register() (pyqtgraphmotioncapturedashboard class method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.register"]], "register() (pyqtgraphmotioncapturedashboardconfig class method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.register"]], "registered() (pyqtgraphmotioncapturedashboard method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.registered"]], "registered() (pyqtgraphmotioncapturedashboardconfig method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.registered"]], "registry() (pyqtgraphmotioncapturedashboard method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.registry"]], "registry() (pyqtgraphmotioncapturedashboardconfig method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.registry"]], "run() (pyqtgraphmotioncapturedashboard method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.run"]], "save() (pyqtgraphmotioncapturedashboardconfig method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.save"]], "sensor (pyqtgraphmotioncapturedashboard property)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.sensor"]], "setup() (pyqtgraphmotioncapturedashboard method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.setup"]], "to_yaml() (pyqtgraphmotioncapturedashboardconfig method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboardConfig.to_yaml"]], "update() (pyqtgraphmotioncapturedashboard method)": [[46, "cc_hardware.tools.dashboard.mocap_dashboard.pyqtgraph.PyQtGraphMotionCaptureDashboard.update"]], "dashdashboard (class in cc_hardware.tools.dashboard.spad_dashboard.dash)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard"]], "dashdashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.dash)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.dash": [[47, "module-cc_hardware.tools.dashboard.spad_dashboard.dash"]], "run() (dashdashboard method)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard.run"]], "setup() (dashdashboard method)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard.setup"]], "update() (dashdashboard method)": [[47, "cc_hardware.tools.dashboard.spad_dashboard.dash.DashDashboard.update"]], "spaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard)": [[48, "cc_hardware.tools.dashboard.spad_dashboard.SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard": [[48, "module-cc_hardware.tools.dashboard.spad_dashboard"]], "matplotlibdashboard (class in cc_hardware.tools.dashboard.spad_dashboard.matplotlib)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard"]], "matplotlibdashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.matplotlib)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboardConfig"]], "adjust_ylim() (matplotlibdashboard method)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.adjust_ylim"]], "cc_hardware.tools.dashboard.spad_dashboard.matplotlib": [[49, "module-cc_hardware.tools.dashboard.spad_dashboard.matplotlib"]], "run() (matplotlibdashboard method)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.run"]], "save_animation() (in module cc_hardware.tools.dashboard.spad_dashboard.matplotlib)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.save_animation"]], "setup() (matplotlibdashboard method)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.setup"]], "update() (matplotlibdashboard method)": [[49, "cc_hardware.tools.dashboard.spad_dashboard.matplotlib.MatplotlibDashboard.update"]], "dashboardwindow (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow"]], "pyqtgraphdashboard (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard"]], "pyqtgraphdashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph": [[50, "module-cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph"]], "init_ui() (dashboardwindow method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.DashboardWindow.init_ui"]], "run() (pyqtgraphdashboard method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.run"]], "setup() (pyqtgraphdashboard method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.setup"]], "update() (pyqtgraphdashboard method)": [[50, "cc_hardware.tools.dashboard.spad_dashboard.pyqtgraph.PyQtGraphDashboard.update"]], "spaddashboard (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard)": [[51, "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard.SPADDashboardConfig"]], "cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard": [[51, "module-cc_hardware.tools.dashboard.spad_dashboard.spad_dashboard"]], "cc_hardware.tools.flash": [[52, "module-cc_hardware.tools.flash"]], "registry (class in cc_hardware.tools)": [[53, "cc_hardware.tools.Registry"]], "toolregistry (class in cc_hardware.tools)": [[53, "cc_hardware.tools.ToolRegistry"]], "cc_hardware.tools": [[53, "module-cc_hardware.tools"]], "create_from_registry() (registry class method)": [[53, "cc_hardware.tools.Registry.create_from_registry"], [57, "cc_hardware.utils.Registry.create_from_registry"], [68, "cc_hardware.utils.registry.Registry.create_from_registry"]], "create_from_registry() (toolregistry class method)": [[53, "cc_hardware.tools.ToolRegistry.create_from_registry"]], "register() (registry class method)": [[53, "cc_hardware.tools.Registry.register"], [57, "cc_hardware.utils.Registry.register"], [68, "cc_hardware.utils.registry.Registry.register"]], "register() (toolregistry class method)": [[53, "cc_hardware.tools.ToolRegistry.register"]], "registered() (registry method)": [[53, "cc_hardware.tools.Registry.registered"], [57, "cc_hardware.utils.Registry.registered"], [68, "cc_hardware.utils.registry.Registry.registered"]], "registered() (toolregistry method)": [[53, "cc_hardware.tools.ToolRegistry.registered"]], "registry() (registry method)": [[53, "cc_hardware.tools.Registry.registry"], [57, "cc_hardware.utils.Registry.registry"], [68, "cc_hardware.utils.registry.Registry.registry"]], "registry() (toolregistry method)": [[53, "cc_hardware.tools.ToolRegistry.registry"]], "logbufferhandler (class in cc_hardware.tools.jogger)": [[54, "cc_hardware.tools.jogger.LogBufferHandler"]], "outputcapture (class in cc_hardware.tools.jogger)": [[54, "cc_hardware.tools.jogger.OutputCapture"]], "__repr__() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.__repr__"]], "acquire() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.acquire"]], "addfilter() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.addFilter"]], "cc_hardware.tools.jogger": [[54, "module-cc_hardware.tools.jogger"]], "close() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.close"]], "createlock() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.createLock"]], "emit() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.emit"]], "filter() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.filter"]], "flush() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.flush"]], "format() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.format"]], "handle() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.handle"]], "handleerror() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.handleError"]], "release() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.release"]], "removefilter() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.removeFilter"]], "setformatter() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.setFormatter"]], "setlevel() (logbufferhandler method)": [[54, "cc_hardware.tools.jogger.LogBufferHandler.setLevel"]], "c (in module cc_hardware.utils.constants)": [[55, "cc_hardware.utils.constants.C"]], "cc_hardware.utils.constants": [[55, "module-cc_hardware.utils.constants"]], "pklhandler (class in cc_hardware.utils.file_handlers)": [[56, "cc_hardware.utils.file_handlers.PklHandler"]], "pklreader (class in cc_hardware.utils.file_handlers)": [[56, "cc_hardware.utils.file_handlers.PklReader"]], "videowriter (class in cc_hardware.utils.file_handlers)": [[56, "cc_hardware.utils.file_handlers.VideoWriter"]], "__del__() (videowriter method)": [[56, "cc_hardware.utils.file_handlers.VideoWriter.__del__"]], "__len__() (pklhandler method)": [[56, "cc_hardware.utils.file_handlers.PklHandler.__len__"]], "__len__() (pklreader method)": [[56, "cc_hardware.utils.file_handlers.PklReader.__len__"]], "append() (pklhandler method)": [[56, "cc_hardware.utils.file_handlers.PklHandler.append"]], "append() (pklreader method)": [[56, "cc_hardware.utils.file_handlers.PklReader.append"]], "append() (videowriter method)": [[56, "cc_hardware.utils.file_handlers.VideoWriter.append"]], "cc_hardware.utils.file_handlers": [[56, "module-cc_hardware.utils.file_handlers"]], "close() (videowriter method)": [[56, "cc_hardware.utils.file_handlers.VideoWriter.close"]], "load() (pklhandler method)": [[56, "cc_hardware.utils.file_handlers.PklHandler.load"]], "load() (pklreader method)": [[56, "cc_hardware.utils.file_handlers.PklReader.load"]], "load_all() (pklhandler static method)": [[56, "cc_hardware.utils.file_handlers.PklHandler.load_all"]], "load_all() (pklreader static method)": [[56, "cc_hardware.utils.file_handlers.PklReader.load_all"]], "update_index() (pklhandler method)": [[56, "cc_hardware.utils.file_handlers.PklHandler.update_index"]], "update_index() (pklreader method)": [[56, "cc_hardware.utils.file_handlers.PklReader.update_index"]], "write() (pklhandler method)": [[56, "cc_hardware.utils.file_handlers.PklHandler.write"]], "write() (pklreader method)": [[56, "cc_hardware.utils.file_handlers.PklReader.write"]], "blockingdeque (class in cc_hardware.utils)": [[57, "cc_hardware.utils.BlockingDeque"]], "component (class in cc_hardware.utils)": [[57, "cc_hardware.utils.Component"]], "config (class in cc_hardware.utils)": [[57, "cc_hardware.utils.Config"]], "manager (class in cc_hardware.utils)": [[57, "cc_hardware.utils.Manager"]], "registry (class in cc_hardware.utils)": [[57, "cc_hardware.utils.Registry"]], "singletonabcmeta (class in cc_hardware.utils)": [[57, "cc_hardware.utils.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils)": [[57, "cc_hardware.utils.SingletonMeta"]], "__call__() (singletonabcmeta method)": [[57, "cc_hardware.utils.SingletonABCMeta.__call__"], [63, "cc_hardware.utils.misc.SingletonABCMeta.__call__"], [67, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__call__"]], "__call__() (singletonmeta method)": [[57, "cc_hardware.utils.SingletonMeta.__call__"], [63, "cc_hardware.utils.misc.SingletonMeta.__call__"], [67, "cc_hardware.utils.misc.singleton.SingletonMeta.__call__"]], "__enter__() (manager method)": [[57, "cc_hardware.utils.Manager.__enter__"], [59, "cc_hardware.utils.manager.Manager.__enter__"]], "__exit__() (manager method)": [[57, "cc_hardware.utils.Manager.__exit__"], [59, "cc_hardware.utils.manager.Manager.__exit__"]], "__getattr__() (blockingdeque method)": [[57, "cc_hardware.utils.BlockingDeque.__getattr__"], [62, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__getattr__"], [63, "cc_hardware.utils.misc.BlockingDeque.__getattr__"]], "__getitem__() (blockingdeque method)": [[57, "cc_hardware.utils.BlockingDeque.__getitem__"], [62, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__getitem__"], [63, "cc_hardware.utils.misc.BlockingDeque.__getitem__"]], "__getstate__() (config method)": [[57, "cc_hardware.utils.Config.__getstate__"], [59, "cc_hardware.utils.manager.Config.__getstate__"]], "__instancecheck__() (singletonabcmeta method)": [[57, "cc_hardware.utils.SingletonABCMeta.__instancecheck__"], [63, "cc_hardware.utils.misc.SingletonABCMeta.__instancecheck__"], [67, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__instancecheck__"]], "__len__() (blockingdeque method)": [[57, "cc_hardware.utils.BlockingDeque.__len__"], [62, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__len__"], [63, "cc_hardware.utils.misc.BlockingDeque.__len__"]], "__repr__() (blockingdeque method)": [[57, "cc_hardware.utils.BlockingDeque.__repr__"], [62, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__repr__"], [63, "cc_hardware.utils.misc.BlockingDeque.__repr__"]], "__setstate__() (config method)": [[57, "cc_hardware.utils.Config.__setstate__"], [59, "cc_hardware.utils.manager.Config.__setstate__"]], "__str__() (config method)": [[57, "cc_hardware.utils.Config.__str__"], [59, "cc_hardware.utils.manager.Config.__str__"]], "__subclasscheck__() (singletonabcmeta method)": [[57, "cc_hardware.utils.SingletonABCMeta.__subclasscheck__"], [63, "cc_hardware.utils.misc.SingletonABCMeta.__subclasscheck__"], [67, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__subclasscheck__"]], "add() (manager method)": [[57, "cc_hardware.utils.Manager.add"], [59, "cc_hardware.utils.manager.Manager.add"]], "append() (blockingdeque method)": [[57, "cc_hardware.utils.BlockingDeque.append"], [62, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.append"], [63, "cc_hardware.utils.misc.BlockingDeque.append"]], "arduino_upload() (in module cc_hardware.utils)": [[57, "cc_hardware.utils.arduino_upload"]], "call_async() (in module cc_hardware.utils)": [[57, "cc_hardware.utils.call_async"]], "call_async_gather() (in module cc_hardware.utils)": [[57, "cc_hardware.utils.call_async_gather"]], "call_async_value() (in module cc_hardware.utils)": [[57, "cc_hardware.utils.call_async_value"]], "cc_hardware.utils": [[57, "module-cc_hardware.utils"]], "close() (component method)": [[57, "cc_hardware.utils.Component.close"], [59, "cc_hardware.utils.manager.Component.close"]], "close() (manager method)": [[57, "cc_hardware.utils.Manager.close"], [59, "cc_hardware.utils.manager.Manager.close"]], "components (manager property)": [[57, "cc_hardware.utils.Manager.components"], [59, "cc_hardware.utils.manager.Manager.components"]], "compose() (config class method)": [[57, "cc_hardware.utils.Config.compose"], [59, "cc_hardware.utils.manager.Config.compose"]], "config (component property)": [[57, "cc_hardware.utils.Component.config"], [59, "cc_hardware.utils.manager.Component.config"]], "config (config attribute)": [[57, "cc_hardware.utils.Config.config"], [59, "cc_hardware.utils.manager.Config.config"]], "copy() (config method)": [[57, "cc_hardware.utils.Config.copy"], [59, "cc_hardware.utils.manager.Config.copy"]], "create() (config class method)": [[57, "cc_hardware.utils.Config.create"], [59, "cc_hardware.utils.manager.Config.create"]], "create_from_config() (component class method)": [[57, "cc_hardware.utils.Component.create_from_config"], [59, "cc_hardware.utils.manager.Component.create_from_config"]], "create_from_registry() (component class method)": [[57, "cc_hardware.utils.Component.create_from_registry"], [59, "cc_hardware.utils.manager.Component.create_from_registry"]], "create_from_registry() (config class method)": [[57, "cc_hardware.utils.Config.create_from_registry"], [59, "cc_hardware.utils.manager.Config.create_from_registry"]], "custom (config attribute)": [[57, "cc_hardware.utils.Config.custom"], [59, "cc_hardware.utils.manager.Config.custom"]], "find_device_by_label() (in module cc_hardware.utils)": [[57, "cc_hardware.utils.find_device_by_label"]], "find_ports() (in module cc_hardware.utils)": [[57, "cc_hardware.utils.find_ports"]], "get_object() (in module cc_hardware.utils)": [[57, "cc_hardware.utils.get_object"]], "instance() (singletonabcmeta class method)": [[57, "cc_hardware.utils.SingletonABCMeta.instance"], [63, "cc_hardware.utils.misc.SingletonABCMeta.instance"], [67, "cc_hardware.utils.misc.singleton.SingletonABCMeta.instance"]], "instance() (singletonmeta class method)": [[57, "cc_hardware.utils.SingletonMeta.instance"], [63, "cc_hardware.utils.misc.SingletonMeta.instance"], [67, "cc_hardware.utils.misc.singleton.SingletonMeta.instance"]], "instantiate() (config class method)": [[57, "cc_hardware.utils.Config.instantiate"], [59, "cc_hardware.utils.manager.Config.instantiate"]], "is_okay (component property)": [[57, "cc_hardware.utils.Component.is_okay"], [59, "cc_hardware.utils.manager.Component.is_okay"]], "is_okay (manager property)": [[57, "cc_hardware.utils.Manager.is_okay"], [59, "cc_hardware.utils.manager.Manager.is_okay"]], "load() (config class method)": [[57, "cc_hardware.utils.Config.load"], [59, "cc_hardware.utils.manager.Config.load"]], "merge_with() (config method)": [[57, "cc_hardware.utils.Config.merge_with"], [59, "cc_hardware.utils.manager.Config.merge_with"]], "register() (component class method)": [[57, "cc_hardware.utils.Component.register"], [59, "cc_hardware.utils.manager.Component.register"]], "register() (config class method)": [[57, "cc_hardware.utils.Config.register"], [59, "cc_hardware.utils.manager.Config.register"]], "register() (singletonabcmeta method)": [[57, "cc_hardware.utils.SingletonABCMeta.register"], [63, "cc_hardware.utils.misc.SingletonABCMeta.register"], [67, "cc_hardware.utils.misc.singleton.SingletonABCMeta.register"]], "register() (in module cc_hardware.utils)": [[57, "cc_hardware.utils.register"]], "registered() (component method)": [[57, "cc_hardware.utils.Component.registered"], [59, "cc_hardware.utils.manager.Component.registered"]], "registered() (config method)": [[57, "cc_hardware.utils.Config.registered"], [59, "cc_hardware.utils.manager.Config.registered"]], "registry() (component method)": [[57, "cc_hardware.utils.Component.registry"], [59, "cc_hardware.utils.manager.Component.registry"]], "registry() (config method)": [[57, "cc_hardware.utils.Config.registry"], [59, "cc_hardware.utils.manager.Config.registry"]], "run() (manager method)": [[57, "cc_hardware.utils.Manager.run"], [59, "cc_hardware.utils.manager.Manager.run"]], "save() (config method)": [[57, "cc_hardware.utils.Config.save"], [59, "cc_hardware.utils.manager.Config.save"]], "to_yaml() (config method)": [[57, "cc_hardware.utils.Config.to_yaml"], [59, "cc_hardware.utils.manager.Config.to_yaml"]], "filehandler (class in cc_hardware.utils.logger)": [[58, "cc_hardware.utils.logger.FileHandler"]], "loggermaxlevelfilter (class in cc_hardware.utils.logger)": [[58, "cc_hardware.utils.logger.LoggerMaxLevelFilter"]], "tqdmstreamhandler (class in cc_hardware.utils.logger)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler"]], "__repr__() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.__repr__"]], "__repr__() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.__repr__"]], "acquire() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.acquire"]], "acquire() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.acquire"]], "addfilter() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.addFilter"]], "addfilter() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.addFilter"]], "cc_hardware.utils.logger": [[58, "module-cc_hardware.utils.logger"]], "close() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.close"]], "close() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.close"]], "createlock() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.createLock"]], "createlock() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.createLock"]], "emit() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.emit"]], "emit() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.emit"]], "filter() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.filter"]], "filter() (loggermaxlevelfilter method)": [[58, "cc_hardware.utils.logger.LoggerMaxLevelFilter.filter"]], "filter() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.filter"]], "flush() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.flush"]], "flush() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.flush"]], "format() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.format"]], "format() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.format"]], "handle() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.handle"]], "handle() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.handle"]], "handleerror() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.handleError"]], "handleerror() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.handleError"]], "release() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.release"]], "release() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.release"]], "removefilter() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.removeFilter"]], "removefilter() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.removeFilter"]], "setformatter() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.setFormatter"]], "setformatter() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.setFormatter"]], "setlevel() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.setLevel"]], "setlevel() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.setLevel"]], "setstream() (filehandler method)": [[58, "cc_hardware.utils.logger.FileHandler.setStream"]], "setstream() (tqdmstreamhandler method)": [[58, "cc_hardware.utils.logger.TqdmStreamHandler.setStream"]], "component (class in cc_hardware.utils.manager)": [[59, "cc_hardware.utils.manager.Component"]], "config (class in cc_hardware.utils.manager)": [[59, "cc_hardware.utils.manager.Config"]], "manager (class in cc_hardware.utils.manager)": [[59, "cc_hardware.utils.manager.Manager"]], "cc_hardware.utils.manager": [[59, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.matplotlib": [[60, "module-cc_hardware.utils.matplotlib"]], "set_matplotlib_style() (in module cc_hardware.utils.matplotlib)": [[60, "cc_hardware.utils.matplotlib.set_matplotlib_style"]], "call_async() (in module cc_hardware.utils.misc.asyncio_utils)": [[61, "cc_hardware.utils.misc.asyncio_utils.call_async"]], "call_async_gather() (in module cc_hardware.utils.misc.asyncio_utils)": [[61, "cc_hardware.utils.misc.asyncio_utils.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.misc.asyncio_utils)": [[61, "cc_hardware.utils.misc.asyncio_utils.call_async_value"]], "cc_hardware.utils.misc.asyncio_utils": [[61, "module-cc_hardware.utils.misc.asyncio_utils"]], "blockingdeque (class in cc_hardware.utils.misc.blocking_deque)": [[62, "cc_hardware.utils.misc.blocking_deque.BlockingDeque"]], "cc_hardware.utils.misc.blocking_deque": [[62, "module-cc_hardware.utils.misc.blocking_deque"]], "blockingdeque (class in cc_hardware.utils.misc)": [[63, "cc_hardware.utils.misc.BlockingDeque"]], "singletonabcmeta (class in cc_hardware.utils.misc)": [[63, "cc_hardware.utils.misc.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.misc)": [[63, "cc_hardware.utils.misc.SingletonMeta"]], "arduino_upload() (in module cc_hardware.utils.misc)": [[63, "cc_hardware.utils.misc.arduino_upload"]], "call_async() (in module cc_hardware.utils.misc)": [[63, "cc_hardware.utils.misc.call_async"]], "call_async_gather() (in module cc_hardware.utils.misc)": [[63, "cc_hardware.utils.misc.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.misc)": [[63, "cc_hardware.utils.misc.call_async_value"]], "cc_hardware.utils.misc": [[63, "module-cc_hardware.utils.misc"]], "find_device_by_label() (in module cc_hardware.utils.misc)": [[63, "cc_hardware.utils.misc.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.misc)": [[63, "cc_hardware.utils.misc.find_ports"]], "get_object() (in module cc_hardware.utils.misc)": [[63, "cc_hardware.utils.misc.get_object"]], "cc_hardware.utils.misc.misc": [[64, "module-cc_hardware.utils.misc.misc"]], "get_object() (in module cc_hardware.utils.misc.misc)": [[64, "cc_hardware.utils.misc.misc.get_object"]], "cc_hardware.utils.misc.multiprocessing_deque": [[65, "module-cc_hardware.utils.misc.multiprocessing_deque"]], "arduino_upload() (in module cc_hardware.utils.misc.serial_utils)": [[66, "cc_hardware.utils.misc.serial_utils.arduino_upload"]], "cc_hardware.utils.misc.serial_utils": [[66, "module-cc_hardware.utils.misc.serial_utils"]], "find_device_by_label() (in module cc_hardware.utils.misc.serial_utils)": [[66, "cc_hardware.utils.misc.serial_utils.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.misc.serial_utils)": [[66, "cc_hardware.utils.misc.serial_utils.find_ports"]], "singletonabcmeta (class in cc_hardware.utils.misc.singleton)": [[67, "cc_hardware.utils.misc.singleton.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.misc.singleton)": [[67, "cc_hardware.utils.misc.singleton.SingletonMeta"]], "cc_hardware.utils.misc.singleton": [[67, "module-cc_hardware.utils.misc.singleton"]], "registry (class in cc_hardware.utils.registry)": [[68, "cc_hardware.utils.registry.Registry"]], "cc_hardware.utils.registry": [[68, "module-cc_hardware.utils.registry"]], "register() (in module cc_hardware.utils.registry)": [[68, "cc_hardware.utils.registry.register"]], "boolsetting (class in cc_hardware.utils.setting)": [[69, "cc_hardware.utils.setting.BoolSetting"]], "optionsetting (class in cc_hardware.utils.setting)": [[69, "cc_hardware.utils.setting.OptionSetting"]], "rangesetting (class in cc_hardware.utils.setting)": [[69, "cc_hardware.utils.setting.RangeSetting"]], "setting (class in cc_hardware.utils.setting)": [[69, "cc_hardware.utils.setting.Setting"]], "__getstate__() (boolsetting method)": [[69, "cc_hardware.utils.setting.BoolSetting.__getstate__"]], "__getstate__() (optionsetting method)": [[69, "cc_hardware.utils.setting.OptionSetting.__getstate__"]], "__getstate__() (rangesetting method)": [[69, "cc_hardware.utils.setting.RangeSetting.__getstate__"]], "__getstate__() (setting method)": [[69, "cc_hardware.utils.setting.Setting.__getstate__"]], "__setstate__() (boolsetting method)": [[69, "cc_hardware.utils.setting.BoolSetting.__setstate__"]], "__setstate__() (optionsetting method)": [[69, "cc_hardware.utils.setting.OptionSetting.__setstate__"]], "__setstate__() (rangesetting method)": [[69, "cc_hardware.utils.setting.RangeSetting.__setstate__"]], "__setstate__() (setting method)": [[69, "cc_hardware.utils.setting.Setting.__setstate__"]], "__str__() (boolsetting method)": [[69, "cc_hardware.utils.setting.BoolSetting.__str__"]], "__str__() (optionsetting method)": [[69, "cc_hardware.utils.setting.OptionSetting.__str__"]], "__str__() (rangesetting method)": [[69, "cc_hardware.utils.setting.RangeSetting.__str__"]], "__str__() (setting method)": [[69, "cc_hardware.utils.setting.Setting.__str__"]], "cc_hardware.utils.setting": [[69, "module-cc_hardware.utils.setting"]], "compose() (boolsetting class method)": [[69, "cc_hardware.utils.setting.BoolSetting.compose"]], "compose() (optionsetting class method)": [[69, "cc_hardware.utils.setting.OptionSetting.compose"]], "compose() (rangesetting class method)": [[69, "cc_hardware.utils.setting.RangeSetting.compose"]], "compose() (setting class method)": [[69, "cc_hardware.utils.setting.Setting.compose"]], "config (boolsetting attribute)": [[69, "cc_hardware.utils.setting.BoolSetting.config"]], "config (optionsetting attribute)": [[69, "cc_hardware.utils.setting.OptionSetting.config"]], "config (rangesetting attribute)": [[69, "cc_hardware.utils.setting.RangeSetting.config"]], "config (setting attribute)": [[69, "cc_hardware.utils.setting.Setting.config"]], "copy() (boolsetting method)": [[69, "cc_hardware.utils.setting.BoolSetting.copy"]], "copy() (optionsetting method)": [[69, "cc_hardware.utils.setting.OptionSetting.copy"]], "copy() (rangesetting method)": [[69, "cc_hardware.utils.setting.RangeSetting.copy"]], "copy() (setting method)": [[69, "cc_hardware.utils.setting.Setting.copy"]], "create() (boolsetting class method)": [[69, "cc_hardware.utils.setting.BoolSetting.create"]], "create() (optionsetting class method)": [[69, "cc_hardware.utils.setting.OptionSetting.create"]], "create() (rangesetting class method)": [[69, "cc_hardware.utils.setting.RangeSetting.create"]], "create() (setting class method)": [[69, "cc_hardware.utils.setting.Setting.create"]], "create_from_registry() (boolsetting class method)": [[69, "cc_hardware.utils.setting.BoolSetting.create_from_registry"]], "create_from_registry() (optionsetting class method)": [[69, "cc_hardware.utils.setting.OptionSetting.create_from_registry"]], "create_from_registry() (rangesetting class method)": [[69, "cc_hardware.utils.setting.RangeSetting.create_from_registry"]], "create_from_registry() (setting class method)": [[69, "cc_hardware.utils.setting.Setting.create_from_registry"]], "custom (boolsetting attribute)": [[69, "cc_hardware.utils.setting.BoolSetting.custom"]], "custom (optionsetting attribute)": [[69, "cc_hardware.utils.setting.OptionSetting.custom"]], "custom (rangesetting attribute)": [[69, "cc_hardware.utils.setting.RangeSetting.custom"]], "custom (setting attribute)": [[69, "cc_hardware.utils.setting.Setting.custom"]], "default_factory() (boolsetting class method)": [[69, "cc_hardware.utils.setting.BoolSetting.default_factory"]], "default_factory() (optionsetting class method)": [[69, "cc_hardware.utils.setting.OptionSetting.default_factory"]], "default_factory() (rangesetting class method)": [[69, "cc_hardware.utils.setting.RangeSetting.default_factory"]], "default_factory() (setting class method)": [[69, "cc_hardware.utils.setting.Setting.default_factory"]], "from_enum() (optionsetting class method)": [[69, "cc_hardware.utils.setting.OptionSetting.from_enum"]], "instantiate() (boolsetting class method)": [[69, "cc_hardware.utils.setting.BoolSetting.instantiate"]], "instantiate() (optionsetting class method)": [[69, "cc_hardware.utils.setting.OptionSetting.instantiate"]], "instantiate() (rangesetting class method)": [[69, "cc_hardware.utils.setting.RangeSetting.instantiate"]], "instantiate() (setting class method)": [[69, "cc_hardware.utils.setting.Setting.instantiate"]], "load() (boolsetting class method)": [[69, "cc_hardware.utils.setting.BoolSetting.load"]], "load() (optionsetting class method)": [[69, "cc_hardware.utils.setting.OptionSetting.load"]], "load() (rangesetting class method)": [[69, "cc_hardware.utils.setting.RangeSetting.load"]], "load() (setting class method)": [[69, "cc_hardware.utils.setting.Setting.load"]], "merge_with() (boolsetting method)": [[69, "cc_hardware.utils.setting.BoolSetting.merge_with"]], "merge_with() (optionsetting method)": [[69, "cc_hardware.utils.setting.OptionSetting.merge_with"]], "merge_with() (rangesetting method)": [[69, "cc_hardware.utils.setting.RangeSetting.merge_with"]], "merge_with() (setting method)": [[69, "cc_hardware.utils.setting.Setting.merge_with"]], "register() (boolsetting class method)": [[69, "cc_hardware.utils.setting.BoolSetting.register"]], "register() (optionsetting class method)": [[69, "cc_hardware.utils.setting.OptionSetting.register"]], "register() (rangesetting class method)": [[69, "cc_hardware.utils.setting.RangeSetting.register"]], "register() (setting class method)": [[69, "cc_hardware.utils.setting.Setting.register"]], "registered() (boolsetting method)": [[69, "cc_hardware.utils.setting.BoolSetting.registered"]], "registered() (optionsetting method)": [[69, "cc_hardware.utils.setting.OptionSetting.registered"]], "registered() (rangesetting method)": [[69, "cc_hardware.utils.setting.RangeSetting.registered"]], "registered() (setting method)": [[69, "cc_hardware.utils.setting.Setting.registered"]], "registry() (boolsetting method)": [[69, "cc_hardware.utils.setting.BoolSetting.registry"]], "registry() (optionsetting method)": [[69, "cc_hardware.utils.setting.OptionSetting.registry"]], "registry() (rangesetting method)": [[69, "cc_hardware.utils.setting.RangeSetting.registry"]], "registry() (setting method)": [[69, "cc_hardware.utils.setting.Setting.registry"]], "save() (boolsetting method)": [[69, "cc_hardware.utils.setting.BoolSetting.save"]], "save() (optionsetting method)": [[69, "cc_hardware.utils.setting.OptionSetting.save"]], "save() (rangesetting method)": [[69, "cc_hardware.utils.setting.RangeSetting.save"]], "save() (setting method)": [[69, "cc_hardware.utils.setting.Setting.save"]], "to_yaml() (boolsetting method)": [[69, "cc_hardware.utils.setting.BoolSetting.to_yaml"]], "to_yaml() (optionsetting method)": [[69, "cc_hardware.utils.setting.OptionSetting.to_yaml"]], "to_yaml() (rangesetting method)": [[69, "cc_hardware.utils.setting.RangeSetting.to_yaml"]], "to_yaml() (setting method)": [[69, "cc_hardware.utils.setting.Setting.to_yaml"]], "update() (boolsetting method)": [[69, "cc_hardware.utils.setting.BoolSetting.update"]], "update() (optionsetting method)": [[69, "cc_hardware.utils.setting.OptionSetting.update"]], "update() (rangesetting method)": [[69, "cc_hardware.utils.setting.RangeSetting.update"]], "cc_hardware.utils.transformations": [[70, "module-cc_hardware.utils.transformations"]]}})