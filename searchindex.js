Search.setIndex({"docnames": ["contributing", "examples/index", "examples/spad_dashboard", "examples/spad_gantry_capture", "examples/stepper_motor_controller", "index", "usage/api", "usage/api/cc_hardware/algos/algorithm/index", "usage/api/cc_hardware/algos/aruco/index", "usage/api/cc_hardware/algos/index", "usage/api/cc_hardware/drivers/cameras/camera/index", "usage/api/cc_hardware/drivers/cameras/flir/index", "usage/api/cc_hardware/drivers/cameras/index", "usage/api/cc_hardware/drivers/cameras/pkl/index", "usage/api/cc_hardware/drivers/cameras/realsense/index", "usage/api/cc_hardware/drivers/index", "usage/api/cc_hardware/drivers/safe_serial/index", "usage/api/cc_hardware/drivers/sensor/index", "usage/api/cc_hardware/drivers/spads/dashboards/dash/index", "usage/api/cc_hardware/drivers/spads/dashboards/dashboard/index", "usage/api/cc_hardware/drivers/spads/dashboards/index", "usage/api/cc_hardware/drivers/spads/dashboards/matplotlib/index", "usage/api/cc_hardware/drivers/spads/dashboards/pyqtgraph/index", "usage/api/cc_hardware/drivers/spads/index", "usage/api/cc_hardware/drivers/spads/pkl/index", "usage/api/cc_hardware/drivers/spads/spad/index", "usage/api/cc_hardware/drivers/spads/tmf8828/index", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index", "usage/api/cc_hardware/drivers/stepper_motors/index", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index", "usage/api/cc_hardware/index", "usage/api/cc_hardware/utils/asyncio_utils/index", "usage/api/cc_hardware/utils/blocking_deque/index", "usage/api/cc_hardware/utils/config/index", "usage/api/cc_hardware/utils/constants/index", "usage/api/cc_hardware/utils/file_handlers/index", "usage/api/cc_hardware/utils/index", "usage/api/cc_hardware/utils/logger/index", "usage/api/cc_hardware/utils/manager/index", "usage/api/cc_hardware/utils/misc/index", "usage/api/cc_hardware/utils/plotting/index", "usage/api/cc_hardware/utils/registry/index", "usage/api/cc_hardware/utils/serial_utils/index", "usage/api/cc_hardware/utils/setting/index", "usage/api/cc_hardware/utils/singleton/index", "usage/api/cc_hardware/utils/transformations/index", "usage/index"], "filenames": ["contributing.md", "examples/index.md", "examples/spad_dashboard.md", "examples/spad_gantry_capture.md", "examples/stepper_motor_controller.md", "index.md", "usage/api.md", "usage/api/cc_hardware/algos/algorithm/index.rst", "usage/api/cc_hardware/algos/aruco/index.rst", "usage/api/cc_hardware/algos/index.rst", "usage/api/cc_hardware/drivers/cameras/camera/index.rst", "usage/api/cc_hardware/drivers/cameras/flir/index.rst", "usage/api/cc_hardware/drivers/cameras/index.rst", "usage/api/cc_hardware/drivers/cameras/pkl/index.rst", "usage/api/cc_hardware/drivers/cameras/realsense/index.rst", "usage/api/cc_hardware/drivers/index.rst", "usage/api/cc_hardware/drivers/safe_serial/index.rst", "usage/api/cc_hardware/drivers/sensor/index.rst", "usage/api/cc_hardware/drivers/spads/dashboards/dash/index.rst", "usage/api/cc_hardware/drivers/spads/dashboards/dashboard/index.rst", "usage/api/cc_hardware/drivers/spads/dashboards/index.rst", "usage/api/cc_hardware/drivers/spads/dashboards/matplotlib/index.rst", "usage/api/cc_hardware/drivers/spads/dashboards/pyqtgraph/index.rst", "usage/api/cc_hardware/drivers/spads/index.rst", "usage/api/cc_hardware/drivers/spads/pkl/index.rst", "usage/api/cc_hardware/drivers/spads/spad/index.rst", "usage/api/cc_hardware/drivers/spads/tmf8828/index.rst", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index.rst", "usage/api/cc_hardware/index.rst", "usage/api/cc_hardware/utils/asyncio_utils/index.rst", "usage/api/cc_hardware/utils/blocking_deque/index.rst", "usage/api/cc_hardware/utils/config/index.rst", "usage/api/cc_hardware/utils/constants/index.rst", "usage/api/cc_hardware/utils/file_handlers/index.rst", "usage/api/cc_hardware/utils/index.rst", "usage/api/cc_hardware/utils/logger/index.rst", "usage/api/cc_hardware/utils/manager/index.rst", "usage/api/cc_hardware/utils/misc/index.rst", "usage/api/cc_hardware/utils/plotting/index.rst", "usage/api/cc_hardware/utils/registry/index.rst", "usage/api/cc_hardware/utils/serial_utils/index.rst", "usage/api/cc_hardware/utils/setting/index.rst", "usage/api/cc_hardware/utils/singleton/index.rst", "usage/api/cc_hardware/utils/transformations/index.rst", "usage/index.md"], "titles": ["Contributing", "Examples", "SPAD Dashboard", "Stepper Gantry Collab", "Stepper Motor Controller", "Camera Culture Hardware Repo", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.aruco</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.camera</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.flir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.realsense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.safe_serial</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.sensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.dashboards.dash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.dashboards.dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.dashboards</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.dashboards.matplotlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.dashboards.pyqtgraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.tmf8828</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.vl53l8ch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.kinesis_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_controller</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_motor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_system</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.telemetrix_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.asyncio_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.blocking_deque</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.file_handlers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.plotting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.registry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.serial_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.setting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.transformations</span></code>", "Reference"], "terms": {"repositori": [0, 5], "i": [0, 2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48], "fairli": [0, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "easi": 0, "so": [0, 11], "pleas": 0, "see": [0, 15, 26, 28, 32, 41], "below": 0, "instruct": [0, 11], "how": [0, 1, 15, 26, 28, 32, 41], "actual": [0, 24, 41], "make": [0, 5, 35, 36], "thi": [0, 5, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 49], "project": 0, "There": [0, 19], "ar": [0, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 37, 39, 40, 41, 42, 46, 47], "two": 0, "form": 0, "simpl": [0, 11, 14, 29], "ad": [0, 15, 26, 28, 32, 41], "content": 0, "within": [0, 5, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "doc": 0, "folder": 0, "all": [0, 5, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 35, 37, 39, 40, 41, 42, 45, 46, 47], "written": [0, 15, 16, 39, 41], "markdown": 0, "convert": [0, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 37, 40, 47], "html": 0, "through": [0, 33], "myst_pars": 0, "sphinx": 0, "To": [0, 5, 11], "well": [0, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "you": [0, 5, 11, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 31, 33, 37, 40, 41, 47], "want": [0, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 41, 47], "packag": [0, 1, 11, 41], "symlink": [0, 5], "A": [0, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 39, 40, 41, 45, 46, 47, 48], "conda": 0, "virtualenv": 0, "add": [0, 2, 3, 4, 7, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 41, 42, 47], "isol": 0, "python": [0, 11], "environ": [0, 36], "reduc": 0, "conflict": 0, "amongst": 0, "It": [0, 11, 14, 15, 16, 19, 20, 23, 26, 27, 28, 29, 31, 37, 39, 40, 41, 42, 48], "highli": 0, "recommend": 0, "us": [0, 1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 42, 45, 46, 47, 48], "one": [0, 11, 14, 15, 16, 48], "normal": 0, "git": [0, 5], "http": 0, "github": [0, 5], "com": [0, 5], "camera": [0, 8, 15, 42], "cultur": 0, "cc": [0, 12, 23, 27, 28, 37, 40], "hardwar": [0, 12, 15, 23, 24, 27, 28, 29, 31, 32, 33, 37, 40], "cd": [0, 5], "sinc": [0, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "organ": [0, 26], "monorepo": [0, 5], "need": [0, 5, 11, 48], "poetri": [0, 5], "The": [0, 2, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48], "develop": [0, 5, 26], "mode": [0, 3, 4, 5, 22, 26, 27, 41, 44], "e": [0, 5, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "symbol": 0, "link": 0, "immedi": 0, "reflect": [0, 5], "pip": [0, 5, 11], "action": 0, "automat": [0, 5, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "site": [0, 11], "page": 0, "host": 0, "static": [0, 39], "updat": [0, 2, 3, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 47], "have": [0, 5, 15, 26, 28, 31, 32, 37, 40, 41], "push": 0, "main": [0, 3, 4, 19, 20, 23, 27], "branch": 0, "onc": 0, "rebuild": 0, "ensur": [0, 10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27, 28, 29, 31, 32, 36, 39, 40, 41, 42, 45, 48], "error": [0, 7, 15, 16, 28, 29, 31, 32, 33, 41], "befor": [0, 15, 16, 29, 41, 42], "do": [0, 11, 41], "mai": [0, 7, 11, 15, 23, 25, 28, 31, 41], "get": [0, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 39, 40, 41, 45, 47], "an": [0, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 43, 45, 46, 47, 48], "email": 0, "from": [0, 2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 33, 36, 37, 39, 40, 41, 42, 43, 44, 47, 48], "someth": [0, 15, 16], "bad": 0, "happen": [0, 15, 16], "tag": 0, "exampl": [0, 11, 15, 19, 26, 28, 32, 39, 41, 42, 48], "v3": 0, "0": [0, 2, 3, 4, 11, 14, 29, 38], "1": [0, 2, 8, 11, 15, 16, 19, 20, 23, 25, 26, 27, 28, 29, 32, 39], "follow": [0, 5, 11], "pkg": [0, 5], "algo": [0, 5, 6], "contain": [0, 5, 7, 8, 10, 11, 12, 13, 15, 24, 26, 33, 42], "algorithm": [0, 5, 8, 9], "process": [0, 5, 8, 17, 19, 20, 23, 26, 27, 41], "data": [0, 3, 4, 5, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 37, 39, 40, 44, 47], "driver": [0, 2, 3, 4, 5, 6], "interfac": [0, 5, 7, 11, 14, 15, 16, 22, 26, 27, 28, 29, 31, 33, 44], "util": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "function": [0, 5, 8, 19, 20, 23, 27, 39, 42, 48], "class": [0, 5, 43, 46, 49], "tool": [0, 2, 5], "work": [0, 5, 46, 49], "calibr": [0, 5, 10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27], "visual": [0, 5, 18, 19, 21, 22, 44], "script": [0, 5, 26, 27, 46], "addit": [0, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 33, 37, 40, 42, 46, 47, 48], "licens": 0, "pyproject": [0, 5], "toml": [0, 5], "descript": [0, 3, 4], "If": [0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 41, 45, 46, 47], "plan": 0, "visit": 0, "correspond": [0, 26, 37, 40], "under": 0, "each": [0, 2, 5, 7, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 37, 39, 40, 42, 47], "should": [0, 5, 7, 15, 19, 20, 23, 28, 29, 30, 31, 32, 33, 37, 39, 40, 41, 47], "readm": [0, 5], "md": [0, 5], "cc_hardwar": [0, 1, 2, 3, 4, 5, 6], "__init__": [0, 5, 48], "py": [0, 5], "googl": 0, "": [0, 3, 4, 5, 7, 10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 37, 38, 40, 41, 47], "style": [0, 21, 22, 44], "These": [0, 33], "also": [0, 5, 15, 16, 28, 30, 31, 33, 39, 40, 41, 45, 48], "gener": [0, 42, 47], "tutori": 0, "fix": [0, 22], "exist": [0, 3, 4, 17, 39, 41, 48], "_static": 0, "persist": 0, "css": 0, "custom": [0, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 37, 40, 41, 47], "differ": [0, 15, 16, 19, 26, 29, 41, 47], "default": [0, 4, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 37, 39, 40, 41, 42, 44, 47], "furo": 0, "theme": 0, "imag": [0, 8, 11, 13, 14], "favicon": 0, "etc": 0, "usag": [0, 48], "refer": [0, 15, 23, 25, 28, 29, 31, 32, 33], "guid": 0, "eyesofcambrian": 0, "conf": 0, "set": [0, 2, 3, 4, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 33, 37, 40, 41, 44], "relat": [0, 15, 23, 25], "extens": 0, "index": [0, 30, 35, 36, 39], "home": [0, 15, 28, 29, 31, 32, 33], "try": 0, "maintain": [0, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "describ": [0, 5], "abov": 0, "tab": 0, "onli": [0, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 46, 47, 48], "singl": [0, 15, 16, 23, 25, 26, 32, 39, 48], "background": [0, 11, 14, 26, 27], "ha": [0, 7, 11, 15, 26, 28, 29, 31, 32, 33, 41, 47], "multipl": [0, 5, 15, 16, 26, 27, 28, 29, 32, 33, 35, 39], "creat": [0, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 41, 44, 45, 47, 48], "titl": [0, 47], "same": [0, 15, 28, 29, 31, 32, 33, 48], "insert": 0, "name": [0, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 45, 46, 47], "without": [0, 5, 24, 39], "tabl": 0, "insid": 0, "restructuredtext": 0, "which": [0, 15, 27, 28, 29, 31, 32, 33, 41, 42], "both": [0, 8, 14, 30, 40, 45, 48], "advantag": 0, "disadvantag": 0, "allow": [0, 5, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 30, 37, 40, 41, 42, 45, 47, 48], "u": 0, "understand": 0, "languag": 0, "compil": 0, "down": [0, 15, 28, 29, 31, 32, 33], "featur": [0, 19, 29], "librari": [0, 11, 14, 29, 33], "websit": 0, "wai": [0, 5, 47], "easiest": 0, "makefil": [0, 27], "bat": 0, "provid": [0, 1, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 39, 40, 41, 45, 47, 48, 49], "directli": [0, 33], "necessari": [0, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47, 48], "depend": [0, 5, 15, 23, 25, 28, 31, 41], "run": [0, 2, 3, 4, 5, 7, 8, 11, 18, 19, 20, 21, 22, 23, 26, 42], "command": [0, 5, 11, 15, 28, 29, 31, 32, 33], "dev": 0, "clean": 0, "view": 0, "go": [0, 11], "browser": [0, 18], "open": [0, 8, 13, 41], "locat": [0, 15, 28, 29, 31, 32, 33], "autobuild": 0, "extrem": 0, "when": [0, 5, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 31, 36, 37, 39, 40, 41, 42, 47], "made": [0, 26], "pypi": 0, "tl": 0, "dr": 0, "we": [1, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 37, 40, 47], "few": [1, 16], "spad": [1, 3, 15, 44], "dashboard": [1, 3, 23], "stepper": [1, 15, 28, 29, 30, 31, 32, 33], "gantri": [1, 15, 28, 32], "collab": 1, "motor": [1, 15, 28, 29, 30, 31, 32, 33], "control": [1, 2, 3, 15, 28, 29, 30, 31, 32, 33], "import": [2, 3, 4, 5, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 41, 42, 45, 47, 48], "spaddashboard": [2, 3, 18, 19, 20, 21, 22, 23], "spaddashboardconfig": [2, 18, 19, 20, 21, 22, 23], "spadsensor": [2, 3, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 44], "spadsensorconfig": [2, 15, 23, 25, 27], "cli": 2, "register_cli": 2, "run_cli": 2, "get_logg": [2, 3, 4, 41], "manag": [2, 3, 4, 15, 23, 25, 27, 40, 47], "def": [2, 3, 4, 11, 42, 48], "my_callback": [2, 19], "call": [2, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 37, 40, 41, 42, 47, 48], "logger": [2, 3, 4, 40], "interv": [2, 39], "arg": [2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 45, 47, 48], "instanc": [2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 41, 44, 45, 47, 48], "callback": [2, 19, 20, 23, 35], "global": 2, "10": [2, 3, 4, 11, 15, 16, 39, 44, 48], "info": [2, 3, 4, 41], "spad_dashboard": 2, "sensor": [2, 3, 8, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 44, 47], "up": [2, 15, 16, 18, 19, 20, 21, 22, 23, 40, 41, 43], "configur": [2, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 37, 40, 47], "object": [2, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 39, 40, 45, 47], "setup": [2, 3, 4, 18, 19, 20, 21, 22, 23, 26, 29, 42], "_sensor": 2, "create_inst": [2, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "user_callback": [2, 19, 20, 23], "_dashboard": 2, "loop": [2, 3, 4, 19, 20, 23, 42], "frame": [2, 18, 19, 20, 21, 22, 23, 39, 44], "int": [2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 33, 36, 39, 41], "bool": [2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 37, 39, 40, 42, 47], "current": [2, 5, 15, 18, 19, 20, 21, 23, 28, 29, 30, 31, 32, 33, 41, 47], "number": [2, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 33, 36, 39, 47], "unus": 2, "here": [2, 7, 33], "return": [2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 45, 46, 47, 48], "whether": [2, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 37, 40, 44, 47], "continu": 2, "true": [2, 3, 4, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 37, 39, 40, 41, 44, 47], "__name__": [2, 3, 4], "__main__": [2, 3, 4], "time": [3, 4, 15, 16, 19, 21, 22, 26, 27, 47], "datetim": [3, 4], "pathlib": [3, 4], "path": [3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 43, 45, 47], "stepper_motor": [3, 4, 15], "steppermotorsystem": [3, 4, 15, 28, 29, 32, 33], "stepper_control": [3, 4, 15, 28], "snakesteppercontrol": [3, 4, 30], "file_handl": [3, 4, 40], "pklhandler": [3, 4, 39], "uncom": [3, 4], "debug": [3, 4], "level": [3, 4, 41], "log": [3, 4, 15, 16, 41], "now": [3, 4], "logdir": [3, 4], "strftime": [3, 4], "y": [3, 4, 19, 20, 21, 23, 27], "m": [3, 4, 38], "d": [3, 4], "h": [3, 4], "spad_nam": 3, "str": [3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 39, 40, 41, 42, 45, 47], "vl53l8chsensor": [3, 27], "spad_port": 3, "stepper_system_nam": [3, 4], "singledrive1axisgantri": [3, 4, 33], "stepper_port": [3, 4], "controller_config": [3, 4], "list": [3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 35, 37, 39, 40, 46, 47], "dict": [3, 4, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 37, 40, 42, 47], "x": [3, 4, 27], "rang": [3, 4, 15, 23, 25, 27, 47], "16": [3, 4], "sampl": [3, 4, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27], "dashboard_nam": 3, "pyqtgraphdashboard": [3, 19, 22], "output_pkl": [3, 4], "pkl": [3, 4, 12, 15, 23, 39], "mkdir": [3, 4], "parent": [3, 4, 15, 16, 22], "exist_ok": [3, 4], "create_from_registri": [3, 4, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "port": [3, 4, 15, 16, 26, 27, 29, 33, 46], "is_okai": [3, 7, 8, 10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 42], "fatal": 3, "fail": [3, 11], "initi": [3, 4, 7, 11, 14, 17, 22, 29, 33], "stepper_system": [3, 4, 15, 28, 29, 33], "assert": [3, 4, 48], "f": [3, 4], "output": [3, 4, 21, 22, 26, 39, 41], "file": [3, 4, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 37, 39, 40, 41, 44, 47], "alreadi": [3, 4], "writer": [3, 4, 8, 39], "iter": [3, 4, 13, 15, 24, 26, 28, 30, 32], "kwarg": [3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 45, 46, 47, 48], "start": [3, 4, 15, 16, 27, 28, 29, 31, 32, 33, 39, 42], "histogram": [3, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "accumul": [3, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27], "po": [3, 4], "get_posit": [3, 4, 30], "none": [3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 41, 42, 44, 45, 46, 47], "fals": [3, 4, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 37, 39, 40, 41, 42, 44, 47], "move_to": [3, 4, 15, 28, 29, 31, 32, 33], "append": [3, 4, 36, 39, 41], "sleep": [3, 4], "25": [3, 4], "argpars": [3, 4], "parser": [3, 4], "argumentpars": [3, 4], "demo": [3, 4], "add_argu": [3, 4], "help": [3, 4], "requir": [3, 33, 36], "parse_arg": [3, 4], "gantry_port": 3, "system": [4, 15, 23, 25, 28, 29, 32, 41], "instal": 5, "can": [5, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 41, 42, 45, 47], "clone": 5, "chang": [5, 10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27, 41], "code": [5, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "them": [5, 11, 14, 15, 26, 28, 29, 30, 31, 32, 33, 40, 45, 47], "reinstal": 5, "don": [5, 15, 28, 31], "t": [5, 15, 28, 31, 41], "behavior": [5, 15, 24, 28, 31, 36], "subdirectori": 5, "directori": [5, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 41, 47], "separ": 5, "done": 5, "support": [5, 11, 17, 18, 19, 20, 21, 22, 23, 26, 29, 30, 39, 40, 45, 47, 48], "package_nam": 5, "In": 5, "module_nam": 5, "implement": [7, 11, 14, 15, 16, 18, 19, 21, 22, 26, 28, 29, 31, 32, 48], "registri": [7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 47], "abc": [7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 48], "abstract": [7, 10, 11, 12, 13, 14, 15, 17, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 48], "result": [7, 8, 35], "subclass": [7, 15, 17, 19, 20, 23, 28, 30, 31, 40, 41, 45, 48], "paramet": [7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 39, 40, 42, 44, 45, 46, 47, 48], "method": [7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 39, 40, 41, 45, 47], "specifi": [7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 36, 37, 39, 40, 41, 47], "type": [7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 42, 43, 45, 47], "properti": [7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 42], "okai": [7, 8, 42], "otherwis": [7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 41, 45, 47], "either": [7, 15, 16, 27], "been": [7, 26, 41, 47], "properli": [7, 8, 10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27, 28, 29, 31, 32, 39, 42], "encount": [7, 41], "close": [7, 8, 10, 11, 12, 13, 14, 15, 17, 19, 20, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 39, 41, 42], "releas": [7, 8, 10, 12, 15, 17, 23, 25, 28, 29, 31, 32, 41, 42], "ani": [7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 36, 37, 39, 40, 41, 42, 43, 47], "resourc": [7, 8, 10, 12, 13, 15, 17, 23, 25, 28, 29, 31, 32, 41, 42], "overrid": [7, 11, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47, 48], "own": [7, 11, 15, 26, 28, 32], "local": 8, "marker": 8, "arucolocalizationalgorithm": 8, "aruco_dict": 8, "marker_s": 8, "origin_id": 8, "num_sampl": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27], "marker_id": 8, "detect": [8, 15, 28, 29, 31, 32, 33], "comput": [8, 15, 28, 31], "pose": 8, "rel": [8, 15, 28, 29, 31, 33], "origin": [8, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 41, 47], "show": [8, 44], "save": [8, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 44, 47], "filenam": [8, 21, 41, 44], "return_imag": 8, "option": [8, 11, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 37, 39, 40, 42, 47], "displai": [8, 19, 20, 22, 23, 44], "video": [8, 39], "dictionari": [8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 42, 45, 47], "check": [8, 10, 11, 12, 13, 14, 15, 16, 17, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 40, 42, 43, 46], "associ": 8, "aruco": 9, "base": [10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 37, 39, 40, 43, 44, 45, 47, 48], "config": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 40, 47], "extend": [10, 12, 15], "defin": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "specif": [10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 33, 35, 37, 39, 40, 47], "averag": [10, 11, 12, 15, 23, 24, 25, 26, 27], "keyword": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 42, 45, 46, 47, 48], "argument": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 42, 45, 46, 47, 48], "np": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 39], "ndarrai": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 27, 39], "arrai": [10, 11, 12, 13, 15, 26], "distortion_coeffici": [10, 11, 12, 13, 14, 15], "numpi": [10, 11, 12, 13, 14, 15], "distort": [10, 11, 12, 13, 14, 15], "coeffici": [10, 11, 12, 13, 14, 15], "repres": [10, 11, 12, 13, 15, 23, 25, 26, 27, 28, 29, 31, 32, 33], "intrinsic_matrix": [10, 11, 12, 13, 14, 15], "intrins": [10, 11, 12, 13, 14, 15], "matrix": [10, 11, 12, 13, 14, 15], "3x3": [10, 11, 12, 13, 15, 26], "resolut": [10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27], "tupl": [10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 27], "width": [10, 11, 12, 13, 14, 15, 23, 24, 25, 26], "height": [10, 11, 12, 13, 14, 15, 23, 24, 25, 26], "sensorconfig": [10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27], "retriev": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 36, 48], "given": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 46, 47], "via": [10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27, 29], "sent": [10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27], "kei": [10, 11, 12, 13, 14, 15, 17, 22, 23, 24, 25, 26, 27, 30, 33, 39, 47], "must": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 37, 40, 41, 42, 47], "match": [10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27], "field": [10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27], "oper": [10, 12, 15, 16, 17, 23, 25, 26, 27, 28, 29, 31, 32, 33, 42], "__del__": [10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27, 39], "destructor": [10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27], "classmethod": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47, 48], "regist": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47, 48], "class_typ": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "class_nam": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "module_path": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "lazili": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "load": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 45, 47], "itself": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "decor": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47, 48], "where": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 39, 40, 45, 47], "found": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "g": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "my_modul": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "my_submodul": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "full": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "final": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "perform": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 43, 45, 47], "lazi": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "instanti": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "posit": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 40, 45, 47, 48], "pass": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 41, 45, 46, 47], "constructor": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 41, 45, 47, 48], "request": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 45, 47], "rais": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "valueerror": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "map": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 41, 45, 47], "enumer": [10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 47], "flircamera": 11, "wrapper": [11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 32, 33, 35, 36, 37, 40, 47], "around": [11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 32, 33, 36, 37, 40, 47], "captur": [11, 14, 26], "singleton": [11, 14, 40], "new": [11, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "grasshopperflircamera": 11, "special": 11, "grasshopp": 11, "model": 11, "inherit": [11, 13, 15, 23, 24, 25, 26, 27], "036": 11, "145": 11, "001": 11, "155": 11, "1815": 11, "5": 11, "1817": 11, "753": 11, "721": 11, "299": 11, "531": 11, "352": 11, "self": [11, 15, 19, 20, 23, 26, 27, 28, 32, 39, 41, 48], "spinnak": 11, "usual": [11, 33], "As": 11, "write": [11, 15, 16, 39, 41], "2024": 11, "09": 11, "21": 11, "3": [11, 15, 26, 28, 32, 41], "newer": 11, "version": [11, 41], "step": [11, 15, 22, 28, 31, 33], "after": [11, 42], "re": 11, "tar": 11, "xvzf": 11, "spinnaker_python": 11, "cp": 11, "o": [11, 41], "arch": 11, "gz": 11, "whl": 11, "But": 11, "replac": [11, 41], "your": 11, "For": 11, "11": 11, "m2": 11, "mac": 11, "would": [11, 47], "turn": 11, "4": 11, "172": 11, "cp310": 11, "macosx_13_0_arm64": 11, "mv": 11, "cp311": 11, "And": 11, "_pyspin": 11, "cpython": 11, "310": 11, "darwin": 11, "311": 11, "offici": 11, "caus": 11, "issu": [11, 15, 28, 29, 31, 32, 33, 41], "risk": 11, "camera_index": [11, 14], "thread": [11, 14, 15, 16, 17, 19, 20, 23, 36, 41], "store": [11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 39, 40, 47], "queue": [11, 14], "avail": [11, 13, 15, 16, 19, 27, 46], "stream": [11, 14, 41], "stop": [11, 14, 15, 16, 26, 27, 42], "deiniti": [11, 14], "flir": [12, 15], "realsens": [12, 15], "modul": [12, 15, 20, 23, 28, 40, 49], "pre": [13, 24], "record": [13, 24, 39, 41], "pklcamera": 13, "pkl_path": [13, 24], "read": [13, 15, 16, 39, 47], "pickl": [13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 32, 37, 39, 40, 47], "exhaust": [13, 24], "still": [13, 24], "activ": [13, 24, 26], "placehold": 13, "potenti": 13, "cleanup": [13, 42], "logic": [13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "intel": 14, "devic": [14, 15, 16, 29, 46], "realsensecamera": 14, "pyrealsens": 14, "d435i": 14, "color": [14, 15, 26, 28, 32], "depth": [14, 26], "return_depth": 14, "start_pipeline_onc": 14, "force_autoexposur": 14, "exposur": 14, "rgb": 14, "return_rgb": 14, "readi": [14, 17], "notimplementederror": 14, "yet": 14, "tmf8828": [15, 23], "vl53l8ch": [15, 23], "kinesis_stepp": [15, 28], "telemetrix_stepp": [15, 28], "safe_seri": 15, "safeseri": [15, 16], "lock_typ": [15, 16], "multiprocess": [15, 16], "safe": [15, 16, 28, 29, 31, 32, 33, 36], "serial": [15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 41, 46, 47], "synchron": [15, 16, 35, 36], "lock": [15, 16, 41], "handl": [15, 16, 17, 22, 27, 41, 42], "format": [15, 16, 41], "wait": [15, 16, 17, 28, 29, 31, 32, 33, 36], "reset": [15, 16, 17, 26, 27], "establish": [15, 16, 28, 29, 31, 32, 33], "connect": [15, 16, 24, 26, 27, 28, 29, 31, 32, 33], "second": [15, 16, 44], "2": [15, 16, 26, 28, 32, 35, 41], "forc": [15, 16], "invalid": [15, 16], "warn": [15, 16], "size": [15, 16, 18, 19, 20, 21, 22, 23], "byte": [15, 16, 27], "wait_for_start_talk": [15, 16], "timeout": [15, 16, 26], "until": [15, 16, 17, 19, 20, 23, 28, 29, 31, 32, 33, 42], "talk": [15, 16], "success": [15, 16, 27], "float": [15, 16, 19, 20, 23, 26, 28, 29, 30, 31, 32, 33], "maximum": [15, 16, 18, 19, 20, 21, 22, 23, 29, 41, 47], "give": [15, 16], "receiv": [15, 16, 26, 27, 28, 29, 31, 32, 33], "wait_for_stop_talk": [15, 16], "write_and_wait_for_start_talk": [15, 16], "tri": [15, 16], "resend": [15, 16], "attempt": [15, 16, 33, 36], "write_and_wait_for_stop_talk": [15, 16], "return_data": [15, 16], "upon": [15, 16], "statu": [15, 16, 28, 31], "write_and_wait_for_start_and_stop_talk": [15, 16], "event": [15, 16, 17, 22, 41], "__getattr__": [15, 16, 28, 29, 32, 33, 36], "forward": [15, 16], "attribut": [15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 32, 36, 37, 40, 41, 47], "access": [15, 16, 26, 28, 29, 32, 33, 36, 39, 41], "appli": [15, 16], "prevent": [15, 16], "concurr": [15, 16], "valu": [15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 39, 41, 47, 48], "cchardwareconfig": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "hydra_config": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "hydracontainerconfig": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "get_inst": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "auto_cr": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "fulli": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "qualifi": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "first": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 39, 40, 47], "omegaconf": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "dictconfig": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "uninstanti": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "nest": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "proper": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "deseri": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "print": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 39, 40, 47], "yaml": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "string": [15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 36, 37, 40, 47], "necessarili": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "_convert_": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "listconfig": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "convers": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "mean": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "structur": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "dataclass": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "equival": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "compos": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "config_dir": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "config_nam": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "return_hydra_config": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "hydra": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 43, 47], "api": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 29, 37, 40, 47, 50], "hydraconfig": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "pattern": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47, 48], "instantiate_kwarg": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "select": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "merge_with": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "other": [15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 32, 37, 40, 41, 47], "merg": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "anoth": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "copi": [15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 37, 40, 47], "deepcopi": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "__getstate__": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "__setstate__": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "slow": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "unpickl": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "header": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "top": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "to_yaml": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "some": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 37, 40, 47], "represent": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 36, 37, 40, 47], "ll": [15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 33, 37, 40, 47], "state": [15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 37, 40, 47], "__str__": [15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 32, 37, 40, 47], "photon": [15, 23, 25], "avalanch": [15, 23, 25], "diod": [15, 23, 25], "design": [15, 23, 25], "measur": [15, 23, 25, 26], "collect": [15, 23, 25, 26, 28, 32], "analyz": [15, 23, 25], "sum": [15, 23, 25], "vari": [15, 23, 25], "num_bin": [15, 23, 24, 25, 26, 27], "bin": [15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "indic": [15, 23, 25, 26], "discret": [15, 23, 25], "total": [15, 23, 25, 30], "distanc": [15, 23, 25], "equal": [15, 23, 25], "multipli": [15, 23, 25], "spatial": [15, 23, 24, 25], "pixel": [15, 23, 25, 26, 27], "point": [15, 23, 25, 28, 29, 31, 32, 33], "respect": [15, 23, 25], "dimens": [15, 23, 25], "dummysteppermotor": [15, 28, 31], "dummi": [15, 28, 31, 32], "doe": [15, 28, 31, 32, 40, 43, 47], "noth": [15, 28, 31, 32], "test": [15, 24, 28, 31], "ax": [15, 28, 29, 31, 32, 33], "attach": [15, 28, 29, 31, 32, 33, 41], "steppermotor": [15, 28, 29, 31, 32, 33], "unifi": [15, 28, 31, 33], "common": [15, 24, 26, 27, 28, 31], "move": [15, 28, 29, 30, 31, 32, 33], "includ": [15, 27, 28, 31, 48], "compat": [15, 28, 31, 47], "expect": [15, 27, 28, 31], "shut": [15, 28, 29, 31, 32, 33], "power": [15, 28, 29, 31, 32, 33], "avoid": [15, 28, 29, 31, 32], "damag": [15, 28, 29, 31, 32], "memori": [15, 28, 29, 31, 32, 39], "leak": [15, 28, 29, 31, 32], "its": [15, 17, 28, 29, 30, 31, 32, 33, 40, 45, 46], "zero": [15, 28, 29, 31, 32, 33], "predefin": [15, 28, 29, 31, 32, 33], "could": [15, 28, 29, 31, 32, 33, 41], "involv": [15, 28, 29, 31, 32, 33], "limit": [15, 19, 20, 21, 23, 28, 29, 31, 32, 33], "switch": [15, 28, 29, 31, 32, 33], "trigger": [15, 28, 29, 31, 32, 33], "known": [15, 28, 29, 31, 32, 33], "absolut": [15, 28, 29, 31, 33], "target": [15, 28, 29, 31, 32, 33], "interpret": [15, 28, 31], "characterist": [15, 28, 31], "angl": [15, 28, 31], "move_bi": [15, 28, 29, 31, 32, 33], "relative_posit": [15, 28, 29, 31, 33], "amount": [15, 28, 29, 31, 33], "degre": [15, 28, 31], "unit": [15, 28, 29, 31, 32, 33], "wait_for_mov": [15, 28, 29, 31, 32, 33], "complet": [15, 26, 28, 29, 31, 32, 33], "block": [15, 19, 20, 23, 28, 29, 31, 32, 33, 36], "execut": [15, 18, 19, 21, 22, 28, 29, 31, 32, 33], "reach": [15, 28, 29, 31, 32, 33], "motion": [15, 28, 29, 31, 32, 33], "healthi": [15, 28, 29, 31, 32, 33], "verifi": [15, 28, 29, 31, 32, 33], "whole": [15, 28, 29, 32], "multi": [15, 26, 28, 29, 32, 36], "axi": [15, 19, 20, 21, 23, 28, 29, 30, 32, 33], "rotat": [15, 28, 32], "stage": [15, 28, 32], "steppermotorsystemaxi": [15, 28, 29, 32], "passthrough": [15, 28, 29, 32, 33], "underli": [15, 28, 29, 32, 33, 36, 41], "kwd": [15, 26, 27, 28, 32], "pair": [15, 26, 28, 32], "enum": [15, 26, 27, 28, 32, 47], "red": [15, 26, 28, 32], "blue": [15, 26, 28, 32], "green": [15, 26, 28, 32], "lookup": [15, 26, 28, 32, 41], "over": [15, 24, 26, 28, 32], "know": [15, 26, 28, 32], "mani": [15, 26, 28, 32], "member": [15, 26, 27, 28, 32], "thei": [15, 26, 28, 32, 41], "len": [15, 26, 28, 32], "document": [15, 26, 28, 32], "detail": [15, 26, 28, 32], "__repr__": [15, 26, 27, 28, 32, 36, 41], "repr": [15, 26, 27, 28, 32, 41], "__dir__": [15, 26, 27, 28, 32], "public": [15, 26, 27, 28, 32], "interest": [15, 26, 27, 28, 32, 41], "__format__": [15, 26, 27, 28, 32], "format_spec": [15, 26, 27, 28, 32], "formatt": [15, 26, 27, 28, 32, 41], "empti": [15, 26, 27, 28, 30, 32, 36], "typeerror": [15, 26, 27, 28, 32], "__hash__": [15, 26, 27, 28, 32], "hash": [15, 26, 27, 28, 32], "__reduce_ex__": [15, 26, 27, 28, 32], "proto": [15, 26, 27, 28, 32], "helper": [15, 26, 27, 28, 32, 47], "commun": [16, 26, 27], "conveni": 16, "sensordata": [17, 26, 27], "row": [17, 26, 27], "get_data": [17, 26, 27], "sensordatathread": 17, "clear": [17, 26], "dashdashboardconfig": 18, "dashdashboard": [18, 19], "plotli": [18, 19], "web": [18, 19], "layout": [18, 21, 22], "figur": 18, "applic": [18, 22, 41, 48], "n_interv": 18, "existing_fig": 18, "min_bin": [18, 19, 20, 21, 22, 23, 44], "minimum": [18, 19, 20, 21, 22, 23, 47], "variabl": [18, 19, 20, 21, 22, 23, 24, 26, 27, 37, 40, 47], "max_bin": [18, 19, 20, 21, 22, 23, 44], "real": [19, 21, 22], "three": 19, "matplotlibdashboard": [19, 21], "matplotlib": [19, 20, 44], "pyqtgraph": [19, 20], "dash": [19, 20], "user": [19, 20, 22, 23, 41], "num_fram": [19, 20, 23], "000": [19, 20, 23], "autoscal": [19, 20, 23], "ylim": [19, 20, 23], "channel_mask": [19, 20, 23], "channel": [19, 20, 21, 23, 26, 29], "callabl": [19, 20, 23, 39, 41, 42], "accept": [19, 20, 23, 42], "independ": [19, 20, 23], "capabl": [19, 20, 23], "being": [19, 20, 23, 41, 48], "non": [19, 20, 23], "matplotlibdashboardconfig": 21, "plot": [21, 22, 40], "adjust_ylim": 21, "adjust": 21, "save_anim": 21, "anim": [21, 44], "funcanim": 21, "pyqtgraphdashboardconfig": 22, "dashboardwindow": 22, "window": [22, 29], "panel": 22, "right": 22, "init_ui": 22, "keypressev": 22, "press": 22, "exit": 22, "fullscreen": [22, 44], "headless": 22, "pklspadsensor": 24, "fake": 24, "simul": 24, "_pkl_path": 24, "_data": 24, "entri": 24, "_data_iter": 24, "_resolut": 24, "op": 24, "8x8": [26, 27], "zone": 26, "flight": [26, 27], "am": 26, "wide": 26, "vcsel": 26, "4x4": [26, 27], "3x6": 26, "multizon": 26, "tmf8828sensor": 26, "wa": [26, 41, 47], "tmf882x": 26, "arduino": [26, 46], "shield": 26, "spadid": 26, "get_num_pixel": 26, "id": [26, 33], "get_num_channel": 26, "get_active_channels_per_subcaptur": 26, "per": [26, 33, 44], "subcaptur": 26, "get_resolut": 26, "rangemod": 26, "tmf8828histogram": 26, "spad_id": 26, "temporari": 26, "intern": [26, 41], "has_data": [26, 27], "id15": 26, "range_mod": 26, "long": 26, "across": [26, 48], "enabl": [26, 33], "high": 26, "baudrat": [26, 27], "baud": [26, 27], "rate": [26, 27], "framework": 27, "rangingmod": 27, "vl53l8chconfig": 27, "uint16_t": 27, "ranging_mod": 27, "ranging_frequency_hz": 27, "frequenc": 27, "hz": 27, "integration_time_m": 27, "integr": 27, "millisecond": 27, "cnh_start_bin": 27, "cnh": 27, "cnh_num_bin": 27, "cnh_subsampl": 27, "subsampl": 27, "agg_start_x": 27, "aggreg": 27, "coordin": 27, "agg_start_i": 27, "agg_merge_x": 27, "agg_merge_i": 27, "agg_col": 27, "column": 27, "agg_row": 27, "pack": 27, "vl53l8chsharedconfig": 27, "share": [27, 36, 48], "vl53l8chconfig4x4": 27, "vl53l8chconfig8x8": 27, "vl53l8chhistogram": 27, "num_pixel": 27, "acquisit": [27, 41], "individu": [27, 47], "grid": 27, "kinesi": 29, "kinesissteppermotor": 29, "thorlab": 29, "c": [29, 38], "pylablib": 29, "throlab": 29, "kinesismotor": 29, "linux": 29, "is_rack_system": 29, "scale": 29, "movement": 29, "part": 29, "rack": 29, "factor": 29, "max_veloc": 29, "acceler": 29, "lower_limit": 29, "upper_limit": 29, "clip_at_limit": 29, "initial_posit": 29, "reference_posit": 29, "check_hom": 29, "veloc": 29, "lower": 29, "upper": 29, "clip": 29, "dure": [29, 41], "opposit": [29, 33], "successfulli": 29, "kinesisrotationstag": 29, "kinesissteppermotorsystem": 29, "azimuthelevationsystem": 29, "azimuth": 29, "elev": 29, "steppercontrol": 30, "factori": [30, 40, 45, 47], "direct": [30, 33, 40, 45], "registr": [30, 40, 45], "defer": [30, 40, 45], "axis_config": 30, "exce": 30, "dummysteppersystem": 32, "telemetrixsteppermotor": 33, "telemetrixsteppermotorsystem": 33, "telemetrix": 33, "cncshield": 33, "board": 33, "distance_pin": 33, "direction_pin": 33, "enable_pin": 33, "cm_per_rev": 33, "steps_per_rev": 33, "speed": [33, 38], "flip_direct": 33, "note": 33, "effect": 33, "set_current_posit": 33, "explicitli": 33, "pin": 33, "centimet": 33, "revolut": 33, "cm": 33, "set_target_position_cm": 33, "relative_cm": 33, "set_absolute_target_position_cm": 33, "position_cm": 33, "cm_to_rev": 33, "revs_to_cm": 33, "rev": 33, "stepper_": 33, "motorx": 33, "target_posit": 33, "equat": 33, "_board": 33, "stepper_target_posit": 33, "input": [33, 39], "auto": 33, "telemetrixsteppermotorx": 33, "telemetrixsteppermotori": 33, "telemetrixsteppermotorz": 33, "telemetrixsteppermotorxrevers": 33, "telemetrixsteppermotoryrevers": 33, "telemetrixsteppermotorzrevers": 33, "dualdrive2axisgantry_x": 33, "dualdrive2axisgantry_y1": 33, "dualdrive2axisgantry_y2": 33, "dualdrive2axisgantri": 33, "singledrive1axisgantry_x": 33, "singledrive1axisgantry_i": 33, "asynchron": 35, "call_async": 35, "fn": 35, "wrap": [35, 36, 41], "call_async_gath": 35, "call_async_valu": 35, "idx": 35, "dequ": 36, "item": 36, "blockingdequ": 36, "condit": 36, "suitabl": 36, "notifi": 36, "manner": 36, "__getitem__": 36, "__len__": [36, 39], "compon": [37, 40, 42], "300000000": 38, "light": 38, "overwrit": 39, "update_index_kwarg": 39, "random": 39, "entir": 39, "handler": [39, 41], "another_kei": 39, "another_valu": 39, "update_index": 39, "prune_fn": 39, "lambda": 39, "_": 39, "build": 39, "scan": 39, "_index": 39, "filter": [39, 41], "take": 39, "exclud": 39, "load_al": 39, "extract": 39, "videowrit": 39, "fp": [39, 44], "flush_interv": 39, "buffer": 39, "period": 39, "flush": [39, 41], "mp4": 39, "30": 39, "remain": 39, "delet": 39, "asyncio_util": 40, "blocking_dequ": 40, "constant": 40, "misc": 40, "serial_util": 40, "transform": 40, "get_object": [40, 43], "look": [40, 43], "entiti": [40, 43], "dotpath": [40, 43], "lift": [40, 43], "recurs": [40, 45], "approach": [40, 45], "ancestor": [40, 45], "tqdm": 41, "messag": 41, "consol": 41, "filehandl": 41, "streamhandl": 41, "doesn": 41, "emit": 41, "becaus": 41, "delai": 41, "superclass": 41, "w": 41, "_close": 41, "42378": 41, "setstream": 41, "old": 41, "wasn": 41, "createlock": 41, "acquir": 41, "setlevel": 41, "condition": 41, "emiss": 41, "setformatt": 41, "fmt": 41, "handleerror": 41, "occur": 41, "except": 41, "raiseexcept": 41, "silent": 41, "ignor": 41, "what": 41, "mostli": 41, "most": 41, "care": 41, "about": 41, "more": 41, "howev": 41, "wish": 41, "addfilt": 41, "removefilt": 41, "remov": 41, "determin": 41, "loggabl": 41, "consult": 41, "veto": 41, "place": 41, "further": 41, "just": [41, 42], "12": 41, "logrecord": 41, "instead": 41, "modifi": [41, 47], "tqdmstreamhandl": 41, "trail": 41, "newlin": 41, "inform": 41, "present": 41, "traceback": [41, 42], "print_except": 41, "encod": 41, "tidi": 41, "_handler": 41, "overridden": [41, 47], "loggermaxlevelfilt": 41, "max_level": 41, "deem": 41, "appropri": 41, "context": 42, "100": 42, "protocol": 42, "essenti": 42, "begin": 42, "__enter__": 42, "__exit__": 42, "exc_typ": 42, "exc_valu": 42, "miscellan": 43, "set_matplotlib_styl": 44, "use_scienceplot": 44, "transient_gui": 44, "normalize_per_pixel": 44, "gui": 44, "transient": 44, "find_device_by_label": 46, "label": 46, "find": 46, "volum": 46, "search": 46, "find_port": 46, "cl": [46, 48], "arduino_upload": 46, "upload": 46, "sketch": 46, "ui": 47, "dirti": 47, "last": 47, "ideal": 47, "731": 47, "default_factori": 47, "sensorset": 47, "rangeset": 47, "valid": 47, "min": 47, "max": 47, "optionset": 47, "from_enum": 47, "metaclass": 48, "combin": 48, "singleton_meta": 48, "singletonabcmeta": 48, "mysingleton": 48, "instance1": 48, "instance2": 48, "singletonmeta": 48, "__call__": 48, "_py_abc": 48, "abcmeta": 48, "enforc": 48, "while": 48, "virtual": 48, "__instancecheck__": 48, "isinst": 48, "__subclasscheck__": 48, "issubclass": 48, "3d": 49, "space": 49}, "objects": {"": [[34, 0, 0, "-", "cc_hardware"]], "cc_hardware": [[9, 0, 0, "-", "algos"], [15, 0, 0, "-", "drivers"], [40, 0, 0, "-", "utils"]], "cc_hardware.algos": [[7, 0, 0, "-", "algorithm"], [8, 0, 0, "-", "aruco"]], "cc_hardware.algos.algorithm": [[7, 1, 1, "", "Algorithm"]], "cc_hardware.algos.algorithm.Algorithm": [[7, 2, 1, "", "close"], [7, 3, 1, "", "is_okay"], [7, 2, 1, "", "run"]], "cc_hardware.algos.aruco": [[8, 1, 1, "", "ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm": [[8, 2, 1, "", "close"], [8, 3, 1, "", "is_okay"], [8, 2, 1, "", "run"]], "cc_hardware.drivers": [[15, 1, 1, "", "Camera"], [15, 1, 1, "", "DummyStepperMotor"], [15, 1, 1, "", "SPADSensor"], [15, 1, 1, "", "SPADSensorConfig"], [15, 1, 1, "", "SafeSerial"], [15, 1, 1, "", "Sensor"], [15, 1, 1, "", "SensorConfig"], [15, 1, 1, "", "StepperMotor"], [15, 1, 1, "", "StepperMotorSystem"], [15, 1, 1, "", "StepperMotorSystemAxis"], [12, 0, 0, "-", "cameras"], [16, 0, 0, "-", "safe_serial"], [17, 0, 0, "-", "sensor"], [23, 0, 0, "-", "spads"], [28, 0, 0, "-", "stepper_motors"]], "cc_hardware.drivers.Camera": [[15, 2, 1, "", "__del__"], [15, 2, 1, "", "accumulate"], [15, 2, 1, "", "calibrate"], [15, 2, 1, "", "close"], [15, 3, 1, "", "config"], [15, 2, 1, "", "create_from_registry"], [15, 3, 1, "", "distortion_coefficients"], [15, 3, 1, "", "intrinsic_matrix"], [15, 3, 1, "", "is_okay"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 3, 1, "", "resolution"], [15, 3, 1, "", "settings"], [15, 2, 1, "", "update"]], "cc_hardware.drivers.SPADSensor": [[15, 2, 1, "", "__del__"], [15, 2, 1, "", "accumulate"], [15, 2, 1, "", "calibrate"], [15, 2, 1, "", "close"], [15, 3, 1, "", "config"], [15, 2, 1, "", "create_from_registry"], [15, 3, 1, "", "is_okay"], [15, 3, 1, "", "num_bins"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 3, 1, "", "resolution"], [15, 3, 1, "", "settings"], [15, 2, 1, "", "update"]], "cc_hardware.drivers.SPADSensorConfig": [[15, 2, 1, "", "__getstate__"], [15, 2, 1, "", "__setstate__"], [15, 2, 1, "", "__str__"], [15, 2, 1, "", "compose"], [15, 4, 1, "", "config"], [15, 2, 1, "", "copy"], [15, 2, 1, "", "create"], [15, 2, 1, "", "create_from_registry"], [15, 2, 1, "", "create_instance"], [15, 4, 1, "", "custom"], [15, 2, 1, "", "get_instance"], [15, 2, 1, "", "instantiate"], [15, 2, 1, "", "load"], [15, 2, 1, "", "merge_with"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 2, 1, "", "save"], [15, 3, 1, "", "settings"], [15, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.SafeSerial": [[15, 2, 1, "", "__getattr__"], [15, 2, 1, "", "create"], [15, 2, 1, "", "read"], [15, 2, 1, "", "wait_for_start_talk"], [15, 2, 1, "", "wait_for_stop_talk"], [15, 2, 1, "", "write"], [15, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [15, 2, 1, "", "write_and_wait_for_start_talk"], [15, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.Sensor": [[15, 2, 1, "", "__del__"], [15, 2, 1, "", "calibrate"], [15, 2, 1, "", "close"], [15, 3, 1, "", "config"], [15, 2, 1, "", "create_from_registry"], [15, 3, 1, "", "is_okay"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 3, 1, "", "settings"], [15, 2, 1, "", "update"]], "cc_hardware.drivers.SensorConfig": [[15, 2, 1, "", "__getstate__"], [15, 2, 1, "", "__setstate__"], [15, 2, 1, "", "__str__"], [15, 2, 1, "", "compose"], [15, 4, 1, "", "config"], [15, 2, 1, "", "copy"], [15, 2, 1, "", "create"], [15, 2, 1, "", "create_from_registry"], [15, 2, 1, "", "create_instance"], [15, 4, 1, "", "custom"], [15, 2, 1, "", "get_instance"], [15, 2, 1, "", "instantiate"], [15, 2, 1, "", "load"], [15, 2, 1, "", "merge_with"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 2, 1, "", "save"], [15, 3, 1, "", "settings"], [15, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.StepperMotor": [[15, 2, 1, "", "close"], [15, 2, 1, "", "create_from_registry"], [15, 2, 1, "", "home"], [15, 3, 1, "", "is_okay"], [15, 2, 1, "", "move_by"], [15, 2, 1, "", "move_to"], [15, 3, 1, "", "position"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.StepperMotorSystem": [[15, 2, 1, "", "__getattr__"], [15, 2, 1, "", "close"], [15, 2, 1, "", "create_from_registry"], [15, 2, 1, "", "home"], [15, 3, 1, "", "is_okay"], [15, 2, 1, "", "move_by"], [15, 2, 1, "", "move_to"], [15, 3, 1, "", "position"], [15, 2, 1, "", "register"], [15, 2, 1, "", "registered"], [15, 2, 1, "", "registry"], [15, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.StepperMotorSystemAxis": [[15, 2, 1, "", "__dir__"], [15, 2, 1, "", "__format__"], [15, 2, 1, "", "__hash__"], [15, 2, 1, "", "__reduce_ex__"], [15, 2, 1, "", "__repr__"], [15, 2, 1, "", "__str__"], [15, 2, 1, "", "name"], [15, 2, 1, "", "value"]], "cc_hardware.drivers.cameras": [[12, 1, 1, "", "Camera"], [10, 0, 0, "-", "camera"], [11, 0, 0, "-", "flir"], [13, 0, 0, "-", "pkl"], [14, 0, 0, "-", "realsense"]], "cc_hardware.drivers.cameras.Camera": [[12, 2, 1, "", "__del__"], [12, 2, 1, "", "accumulate"], [12, 2, 1, "", "calibrate"], [12, 2, 1, "", "close"], [12, 3, 1, "", "config"], [12, 2, 1, "", "create_from_registry"], [12, 3, 1, "", "distortion_coefficients"], [12, 3, 1, "", "intrinsic_matrix"], [12, 3, 1, "", "is_okay"], [12, 2, 1, "", "register"], [12, 2, 1, "", "registered"], [12, 2, 1, "", "registry"], [12, 3, 1, "", "resolution"], [12, 3, 1, "", "settings"], [12, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.camera": [[10, 1, 1, "", "Camera"]], "cc_hardware.drivers.cameras.camera.Camera": [[10, 2, 1, "", "__del__"], [10, 2, 1, "", "accumulate"], [10, 2, 1, "", "calibrate"], [10, 2, 1, "", "close"], [10, 3, 1, "", "config"], [10, 2, 1, "", "create_from_registry"], [10, 3, 1, "", "distortion_coefficients"], [10, 3, 1, "", "intrinsic_matrix"], [10, 3, 1, "", "is_okay"], [10, 2, 1, "", "register"], [10, 2, 1, "", "registered"], [10, 2, 1, "", "registry"], [10, 3, 1, "", "resolution"], [10, 3, 1, "", "settings"], [10, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.flir": [[11, 1, 1, "", "FlirCamera"], [11, 1, 1, "", "GrasshopperFlirCamera"]], "cc_hardware.drivers.cameras.flir.FlirCamera": [[11, 2, 1, "", "__del__"], [11, 2, 1, "", "accumulate"], [11, 2, 1, "", "calibrate"], [11, 2, 1, "", "close"], [11, 3, 1, "", "config"], [11, 2, 1, "", "create_from_registry"], [11, 3, 1, "", "distortion_coefficients"], [11, 3, 1, "", "intrinsic_matrix"], [11, 3, 1, "", "is_okay"], [11, 2, 1, "", "register"], [11, 2, 1, "", "registered"], [11, 2, 1, "", "registry"], [11, 3, 1, "", "resolution"], [11, 3, 1, "", "settings"], [11, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera": [[11, 2, 1, "", "__del__"], [11, 2, 1, "", "accumulate"], [11, 2, 1, "", "calibrate"], [11, 2, 1, "", "close"], [11, 3, 1, "", "config"], [11, 2, 1, "", "create_from_registry"], [11, 3, 1, "", "distortion_coefficients"], [11, 3, 1, "", "intrinsic_matrix"], [11, 3, 1, "", "is_okay"], [11, 2, 1, "", "register"], [11, 2, 1, "", "registered"], [11, 2, 1, "", "registry"], [11, 3, 1, "", "resolution"], [11, 3, 1, "", "settings"], [11, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.pkl": [[13, 1, 1, "", "PklCamera"]], "cc_hardware.drivers.cameras.pkl.PklCamera": [[13, 2, 1, "", "__del__"], [13, 2, 1, "", "accumulate"], [13, 2, 1, "", "calibrate"], [13, 2, 1, "", "close"], [13, 3, 1, "", "config"], [13, 2, 1, "", "create_from_registry"], [13, 3, 1, "", "distortion_coefficients"], [13, 3, 1, "", "intrinsic_matrix"], [13, 3, 1, "", "is_okay"], [13, 2, 1, "", "register"], [13, 2, 1, "", "registered"], [13, 2, 1, "", "registry"], [13, 3, 1, "", "resolution"], [13, 3, 1, "", "settings"], [13, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.realsense": [[14, 1, 1, "", "RealsenseCamera"]], "cc_hardware.drivers.cameras.realsense.RealsenseCamera": [[14, 2, 1, "", "__del__"], [14, 2, 1, "", "accumulate"], [14, 2, 1, "", "calibrate"], [14, 2, 1, "", "close"], [14, 3, 1, "", "config"], [14, 2, 1, "", "create_from_registry"], [14, 3, 1, "", "distortion_coefficients"], [14, 3, 1, "", "intrinsic_matrix"], [14, 3, 1, "", "is_okay"], [14, 2, 1, "", "register"], [14, 2, 1, "", "registered"], [14, 2, 1, "", "registry"], [14, 3, 1, "", "resolution"], [14, 3, 1, "", "settings"], [14, 2, 1, "", "update"]], "cc_hardware.drivers.safe_serial": [[16, 1, 1, "", "SafeSerial"]], "cc_hardware.drivers.safe_serial.SafeSerial": [[16, 2, 1, "", "__getattr__"], [16, 2, 1, "", "create"], [16, 2, 1, "", "read"], [16, 2, 1, "", "wait_for_start_talk"], [16, 2, 1, "", "wait_for_stop_talk"], [16, 2, 1, "", "write"], [16, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [16, 2, 1, "", "write_and_wait_for_start_talk"], [16, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.sensor": [[17, 1, 1, "", "Sensor"], [17, 1, 1, "", "SensorConfig"], [17, 1, 1, "", "SensorData"], [17, 1, 1, "", "SensorDataThreaded"]], "cc_hardware.drivers.sensor.Sensor": [[17, 2, 1, "", "__del__"], [17, 2, 1, "", "calibrate"], [17, 2, 1, "", "close"], [17, 3, 1, "", "config"], [17, 2, 1, "", "create_from_registry"], [17, 3, 1, "", "is_okay"], [17, 2, 1, "", "register"], [17, 2, 1, "", "registered"], [17, 2, 1, "", "registry"], [17, 3, 1, "", "settings"], [17, 2, 1, "", "update"]], "cc_hardware.drivers.sensor.SensorConfig": [[17, 2, 1, "", "__getstate__"], [17, 2, 1, "", "__setstate__"], [17, 2, 1, "", "__str__"], [17, 2, 1, "", "compose"], [17, 4, 1, "", "config"], [17, 2, 1, "", "copy"], [17, 2, 1, "", "create"], [17, 2, 1, "", "create_from_registry"], [17, 2, 1, "", "create_instance"], [17, 4, 1, "", "custom"], [17, 2, 1, "", "get_instance"], [17, 2, 1, "", "instantiate"], [17, 2, 1, "", "load"], [17, 2, 1, "", "merge_with"], [17, 2, 1, "", "register"], [17, 2, 1, "", "registered"], [17, 2, 1, "", "registry"], [17, 2, 1, "", "save"], [17, 3, 1, "", "settings"], [17, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.sensor.SensorData": [[17, 2, 1, "", "get_data"], [17, 2, 1, "", "process"], [17, 2, 1, "", "reset"]], "cc_hardware.drivers.sensor.SensorDataThreaded": [[17, 2, 1, "", "get_data"], [17, 2, 1, "", "process"], [17, 2, 1, "", "reset"]], "cc_hardware.drivers.spads": [[23, 1, 1, "", "SPADDashboard"], [23, 1, 1, "", "SPADDashboardConfig"], [23, 1, 1, "", "SPADSensor"], [23, 1, 1, "", "SPADSensorConfig"], [20, 0, 0, "-", "dashboards"], [24, 0, 0, "-", "pkl"], [25, 0, 0, "-", "spad"], [26, 0, 0, "-", "tmf8828"], [27, 0, 0, "-", "vl53l8ch"]], "cc_hardware.drivers.spads.SPADDashboard": [[23, 3, 1, "", "config"], [23, 2, 1, "", "create_from_registry"], [23, 3, 1, "", "max_bin"], [23, 3, 1, "", "min_bin"], [23, 2, 1, "", "register"], [23, 2, 1, "", "registered"], [23, 2, 1, "", "registry"], [23, 2, 1, "", "run"], [23, 3, 1, "", "sensor"], [23, 2, 1, "", "setup"], [23, 2, 1, "", "update"]], "cc_hardware.drivers.spads.SPADDashboardConfig": [[23, 2, 1, "", "__getstate__"], [23, 2, 1, "", "__setstate__"], [23, 2, 1, "", "__str__"], [23, 2, 1, "", "compose"], [23, 4, 1, "", "config"], [23, 2, 1, "", "copy"], [23, 2, 1, "", "create"], [23, 2, 1, "", "create_from_registry"], [23, 2, 1, "", "create_instance"], [23, 4, 1, "", "custom"], [23, 2, 1, "", "get_instance"], [23, 2, 1, "", "instantiate"], [23, 2, 1, "", "load"], [23, 2, 1, "", "merge_with"], [23, 2, 1, "", "register"], [23, 2, 1, "", "registered"], [23, 2, 1, "", "registry"], [23, 2, 1, "", "save"], [23, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.SPADSensor": [[23, 2, 1, "", "__del__"], [23, 2, 1, "", "accumulate"], [23, 2, 1, "", "calibrate"], [23, 2, 1, "", "close"], [23, 3, 1, "", "config"], [23, 2, 1, "", "create_from_registry"], [23, 3, 1, "", "is_okay"], [23, 3, 1, "", "num_bins"], [23, 2, 1, "", "register"], [23, 2, 1, "", "registered"], [23, 2, 1, "", "registry"], [23, 3, 1, "", "resolution"], [23, 3, 1, "", "settings"], [23, 2, 1, "", "update"]], "cc_hardware.drivers.spads.SPADSensorConfig": [[23, 2, 1, "", "__getstate__"], [23, 2, 1, "", "__setstate__"], [23, 2, 1, "", "__str__"], [23, 2, 1, "", "compose"], [23, 4, 1, "", "config"], [23, 2, 1, "", "copy"], [23, 2, 1, "", "create"], [23, 2, 1, "", "create_from_registry"], [23, 2, 1, "", "create_instance"], [23, 4, 1, "", "custom"], [23, 2, 1, "", "get_instance"], [23, 2, 1, "", "instantiate"], [23, 2, 1, "", "load"], [23, 2, 1, "", "merge_with"], [23, 2, 1, "", "register"], [23, 2, 1, "", "registered"], [23, 2, 1, "", "registry"], [23, 2, 1, "", "save"], [23, 3, 1, "", "settings"], [23, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.dashboards": [[20, 1, 1, "", "SPADDashboard"], [20, 1, 1, "", "SPADDashboardConfig"], [18, 0, 0, "-", "dash"], [19, 0, 0, "-", "dashboard"], [21, 0, 0, "-", "matplotlib"], [22, 0, 0, "-", "pyqtgraph"]], "cc_hardware.drivers.spads.dashboards.SPADDashboard": [[20, 3, 1, "", "config"], [20, 2, 1, "", "create_from_registry"], [20, 3, 1, "", "max_bin"], [20, 3, 1, "", "min_bin"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 2, 1, "", "run"], [20, 3, 1, "", "sensor"], [20, 2, 1, "", "setup"], [20, 2, 1, "", "update"]], "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig": [[20, 2, 1, "", "__getstate__"], [20, 2, 1, "", "__setstate__"], [20, 2, 1, "", "__str__"], [20, 2, 1, "", "compose"], [20, 4, 1, "", "config"], [20, 2, 1, "", "copy"], [20, 2, 1, "", "create"], [20, 2, 1, "", "create_from_registry"], [20, 2, 1, "", "create_instance"], [20, 4, 1, "", "custom"], [20, 2, 1, "", "get_instance"], [20, 2, 1, "", "instantiate"], [20, 2, 1, "", "load"], [20, 2, 1, "", "merge_with"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 2, 1, "", "save"], [20, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.dashboards.dash": [[18, 1, 1, "", "DashDashboard"], [18, 1, 1, "", "DashDashboardConfig"]], "cc_hardware.drivers.spads.dashboards.dash.DashDashboard": [[18, 3, 1, "", "config"], [18, 2, 1, "", "create_from_registry"], [18, 3, 1, "", "max_bin"], [18, 3, 1, "", "min_bin"], [18, 2, 1, "", "register"], [18, 2, 1, "", "registered"], [18, 2, 1, "", "registry"], [18, 2, 1, "", "run"], [18, 3, 1, "", "sensor"], [18, 2, 1, "", "setup"], [18, 2, 1, "", "update"]], "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig": [[18, 2, 1, "", "__getstate__"], [18, 2, 1, "", "__setstate__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "compose"], [18, 4, 1, "", "config"], [18, 2, 1, "", "copy"], [18, 2, 1, "", "create"], [18, 2, 1, "", "create_from_registry"], [18, 2, 1, "", "create_instance"], [18, 4, 1, "", "custom"], [18, 2, 1, "", "get_instance"], [18, 2, 1, "", "instantiate"], [18, 2, 1, "", "load"], [18, 2, 1, "", "merge_with"], [18, 2, 1, "", "register"], [18, 2, 1, "", "registered"], [18, 2, 1, "", "registry"], [18, 2, 1, "", "save"], [18, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.dashboards.dashboard": [[19, 1, 1, "", "SPADDashboard"], [19, 1, 1, "", "SPADDashboardConfig"]], "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard": [[19, 3, 1, "", "config"], [19, 2, 1, "", "create_from_registry"], [19, 3, 1, "", "max_bin"], [19, 3, 1, "", "min_bin"], [19, 2, 1, "", "register"], [19, 2, 1, "", "registered"], [19, 2, 1, "", "registry"], [19, 2, 1, "", "run"], [19, 3, 1, "", "sensor"], [19, 2, 1, "", "setup"], [19, 2, 1, "", "update"]], "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig": [[19, 2, 1, "", "__getstate__"], [19, 2, 1, "", "__setstate__"], [19, 2, 1, "", "__str__"], [19, 2, 1, "", "compose"], [19, 4, 1, "", "config"], [19, 2, 1, "", "copy"], [19, 2, 1, "", "create"], [19, 2, 1, "", "create_from_registry"], [19, 2, 1, "", "create_instance"], [19, 4, 1, "", "custom"], [19, 2, 1, "", "get_instance"], [19, 2, 1, "", "instantiate"], [19, 2, 1, "", "load"], [19, 2, 1, "", "merge_with"], [19, 2, 1, "", "register"], [19, 2, 1, "", "registered"], [19, 2, 1, "", "registry"], [19, 2, 1, "", "save"], [19, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.dashboards.matplotlib": [[21, 1, 1, "", "MatplotlibDashboard"], [21, 1, 1, "", "MatplotlibDashboardConfig"]], "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard": [[21, 2, 1, "", "adjust_ylim"], [21, 3, 1, "", "config"], [21, 2, 1, "", "create_from_registry"], [21, 3, 1, "", "max_bin"], [21, 3, 1, "", "min_bin"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 2, 1, "", "run"], [21, 2, 1, "", "save_animation"], [21, 3, 1, "", "sensor"], [21, 2, 1, "", "setup"], [21, 2, 1, "", "update"]], "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig": [[21, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__setstate__"], [21, 2, 1, "", "__str__"], [21, 2, 1, "", "compose"], [21, 4, 1, "", "config"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "create"], [21, 2, 1, "", "create_from_registry"], [21, 2, 1, "", "create_instance"], [21, 4, 1, "", "custom"], [21, 2, 1, "", "get_instance"], [21, 2, 1, "", "instantiate"], [21, 2, 1, "", "load"], [21, 2, 1, "", "merge_with"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 2, 1, "", "save"], [21, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.dashboards.pyqtgraph": [[22, 1, 1, "", "DashboardWindow"], [22, 1, 1, "", "PyQtGraphDashboard"], [22, 1, 1, "", "PyQtGraphDashboardConfig"]], "cc_hardware.drivers.spads.dashboards.pyqtgraph.DashboardWindow": [[22, 2, 1, "", "init_ui"], [22, 2, 1, "", "keyPressEvent"]], "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard": [[22, 3, 1, "", "config"], [22, 2, 1, "", "create_from_registry"], [22, 3, 1, "", "max_bin"], [22, 3, 1, "", "min_bin"], [22, 2, 1, "", "register"], [22, 2, 1, "", "registered"], [22, 2, 1, "", "registry"], [22, 2, 1, "", "run"], [22, 3, 1, "", "sensor"], [22, 2, 1, "", "setup"], [22, 2, 1, "", "update"]], "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig": [[22, 2, 1, "", "__getstate__"], [22, 2, 1, "", "__setstate__"], [22, 2, 1, "", "__str__"], [22, 2, 1, "", "compose"], [22, 4, 1, "", "config"], [22, 2, 1, "", "copy"], [22, 2, 1, "", "create"], [22, 2, 1, "", "create_from_registry"], [22, 2, 1, "", "create_instance"], [22, 4, 1, "", "custom"], [22, 2, 1, "", "get_instance"], [22, 2, 1, "", "instantiate"], [22, 2, 1, "", "load"], [22, 2, 1, "", "merge_with"], [22, 2, 1, "", "register"], [22, 2, 1, "", "registered"], [22, 2, 1, "", "registry"], [22, 2, 1, "", "save"], [22, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.pkl": [[24, 1, 1, "", "PklSPADSensor"]], "cc_hardware.drivers.spads.pkl.PklSPADSensor": [[24, 2, 1, "", "__del__"], [24, 2, 1, "", "accumulate"], [24, 2, 1, "", "calibrate"], [24, 2, 1, "", "close"], [24, 3, 1, "", "config"], [24, 2, 1, "", "create_from_registry"], [24, 3, 1, "", "is_okay"], [24, 3, 1, "", "num_bins"], [24, 2, 1, "", "register"], [24, 2, 1, "", "registered"], [24, 2, 1, "", "registry"], [24, 3, 1, "", "resolution"], [24, 3, 1, "", "settings"], [24, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad": [[25, 1, 1, "", "SPADSensor"], [25, 1, 1, "", "SPADSensorConfig"]], "cc_hardware.drivers.spads.spad.SPADSensor": [[25, 2, 1, "", "__del__"], [25, 2, 1, "", "accumulate"], [25, 2, 1, "", "calibrate"], [25, 2, 1, "", "close"], [25, 3, 1, "", "config"], [25, 2, 1, "", "create_from_registry"], [25, 3, 1, "", "is_okay"], [25, 3, 1, "", "num_bins"], [25, 2, 1, "", "register"], [25, 2, 1, "", "registered"], [25, 2, 1, "", "registry"], [25, 3, 1, "", "resolution"], [25, 3, 1, "", "settings"], [25, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad.SPADSensorConfig": [[25, 2, 1, "", "__getstate__"], [25, 2, 1, "", "__setstate__"], [25, 2, 1, "", "__str__"], [25, 2, 1, "", "compose"], [25, 4, 1, "", "config"], [25, 2, 1, "", "copy"], [25, 2, 1, "", "create"], [25, 2, 1, "", "create_from_registry"], [25, 2, 1, "", "create_instance"], [25, 4, 1, "", "custom"], [25, 2, 1, "", "get_instance"], [25, 2, 1, "", "instantiate"], [25, 2, 1, "", "load"], [25, 2, 1, "", "merge_with"], [25, 2, 1, "", "register"], [25, 2, 1, "", "registered"], [25, 2, 1, "", "registry"], [25, 2, 1, "", "save"], [25, 3, 1, "", "settings"], [25, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.tmf8828": [[26, 1, 1, "", "RangeMode"], [26, 1, 1, "", "SPADID"], [26, 1, 1, "", "TMF8828Histogram"], [26, 1, 1, "", "TMF8828Sensor"]], "cc_hardware.drivers.spads.tmf8828.RangeMode": [[26, 2, 1, "", "__dir__"], [26, 2, 1, "", "__format__"], [26, 2, 1, "", "__hash__"], [26, 2, 1, "", "__reduce_ex__"], [26, 2, 1, "", "__repr__"], [26, 2, 1, "", "__str__"], [26, 2, 1, "", "name"], [26, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.SPADID": [[26, 2, 1, "", "__dir__"], [26, 2, 1, "", "__format__"], [26, 2, 1, "", "__hash__"], [26, 2, 1, "", "__reduce_ex__"], [26, 2, 1, "", "__repr__"], [26, 2, 1, "", "__str__"], [26, 2, 1, "", "get_active_channels_per_subcapture"], [26, 2, 1, "", "get_num_channels"], [26, 2, 1, "", "get_num_pixels"], [26, 2, 1, "", "get_resolution"], [26, 2, 1, "", "name"], [26, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram": [[26, 2, 1, "", "get_data"], [26, 3, 1, "", "has_data"], [26, 2, 1, "", "process"], [26, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor": [[26, 2, 1, "", "__del__"], [26, 2, 1, "", "accumulate"], [26, 2, 1, "", "calibrate"], [26, 2, 1, "", "close"], [26, 3, 1, "", "config"], [26, 2, 1, "", "create_from_registry"], [26, 3, 1, "", "is_okay"], [26, 3, 1, "", "num_bins"], [26, 2, 1, "", "register"], [26, 2, 1, "", "registered"], [26, 2, 1, "", "registry"], [26, 3, 1, "", "resolution"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "update"]], "cc_hardware.drivers.spads.vl53l8ch": [[27, 1, 1, "", "RangingMode"], [27, 1, 1, "", "VL53L8CHConfig"], [27, 1, 1, "", "VL53L8CHConfig4x4"], [27, 1, 1, "", "VL53L8CHConfig8x8"], [27, 1, 1, "", "VL53L8CHHistogram"], [27, 1, 1, "", "VL53L8CHSensor"], [27, 1, 1, "", "VL53L8CHSharedConfig"]], "cc_hardware.drivers.spads.vl53l8ch.RangingMode": [[27, 2, 1, "", "__dir__"], [27, 2, 1, "", "__format__"], [27, 2, 1, "", "__hash__"], [27, 2, 1, "", "__reduce_ex__"], [27, 2, 1, "", "__repr__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "name"], [27, 2, 1, "", "value"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig": [[27, 2, 1, "", "__getstate__"], [27, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "compose"], [27, 4, 1, "", "config"], [27, 2, 1, "", "copy"], [27, 2, 1, "", "create"], [27, 2, 1, "", "create_from_registry"], [27, 2, 1, "", "create_instance"], [27, 4, 1, "", "custom"], [27, 2, 1, "", "get_instance"], [27, 2, 1, "", "instantiate"], [27, 2, 1, "", "load"], [27, 2, 1, "", "merge_with"], [27, 2, 1, "", "pack"], [27, 2, 1, "", "register"], [27, 2, 1, "", "registered"], [27, 2, 1, "", "registry"], [27, 2, 1, "", "save"], [27, 3, 1, "", "settings"], [27, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4": [[27, 2, 1, "", "__getstate__"], [27, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "compose"], [27, 4, 1, "", "config"], [27, 2, 1, "", "copy"], [27, 2, 1, "", "create"], [27, 2, 1, "", "create_from_registry"], [27, 2, 1, "", "create_instance"], [27, 4, 1, "", "custom"], [27, 2, 1, "", "get_instance"], [27, 2, 1, "", "instantiate"], [27, 2, 1, "", "load"], [27, 2, 1, "", "merge_with"], [27, 2, 1, "", "pack"], [27, 2, 1, "", "register"], [27, 2, 1, "", "registered"], [27, 2, 1, "", "registry"], [27, 2, 1, "", "save"], [27, 3, 1, "", "settings"], [27, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8": [[27, 2, 1, "", "__getstate__"], [27, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "compose"], [27, 4, 1, "", "config"], [27, 2, 1, "", "copy"], [27, 2, 1, "", "create"], [27, 2, 1, "", "create_from_registry"], [27, 2, 1, "", "create_instance"], [27, 4, 1, "", "custom"], [27, 2, 1, "", "get_instance"], [27, 2, 1, "", "instantiate"], [27, 2, 1, "", "load"], [27, 2, 1, "", "merge_with"], [27, 2, 1, "", "pack"], [27, 2, 1, "", "register"], [27, 2, 1, "", "registered"], [27, 2, 1, "", "registry"], [27, 2, 1, "", "save"], [27, 3, 1, "", "settings"], [27, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram": [[27, 2, 1, "", "get_data"], [27, 3, 1, "", "has_data"], [27, 2, 1, "", "process"], [27, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor": [[27, 2, 1, "", "__del__"], [27, 2, 1, "", "accumulate"], [27, 2, 1, "", "calibrate"], [27, 2, 1, "", "close"], [27, 3, 1, "", "config"], [27, 2, 1, "", "create_from_registry"], [27, 3, 1, "", "is_okay"], [27, 3, 1, "", "num_bins"], [27, 2, 1, "", "register"], [27, 2, 1, "", "registered"], [27, 2, 1, "", "registry"], [27, 3, 1, "", "resolution"], [27, 3, 1, "", "settings"], [27, 2, 1, "", "update"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig": [[27, 2, 1, "", "__getstate__"], [27, 2, 1, "", "__setstate__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "compose"], [27, 4, 1, "", "config"], [27, 2, 1, "", "copy"], [27, 2, 1, "", "create"], [27, 2, 1, "", "create_from_registry"], [27, 2, 1, "", "create_instance"], [27, 4, 1, "", "custom"], [27, 2, 1, "", "get_instance"], [27, 2, 1, "", "instantiate"], [27, 2, 1, "", "load"], [27, 2, 1, "", "merge_with"], [27, 2, 1, "", "pack"], [27, 2, 1, "", "register"], [27, 2, 1, "", "registered"], [27, 2, 1, "", "registry"], [27, 2, 1, "", "save"], [27, 3, 1, "", "settings"], [27, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors": [[28, 1, 1, "", "DummyStepperMotor"], [28, 1, 1, "", "StepperMotor"], [28, 1, 1, "", "StepperMotorSystem"], [28, 1, 1, "", "StepperMotorSystemAxis"], [29, 0, 0, "-", "kinesis_stepper"], [30, 0, 0, "-", "stepper_controller"], [31, 0, 0, "-", "stepper_motor"], [32, 0, 0, "-", "stepper_system"], [33, 0, 0, "-", "telemetrix_stepper"]], "cc_hardware.drivers.stepper_motors.StepperMotor": [[28, 2, 1, "", "close"], [28, 2, 1, "", "create_from_registry"], [28, 2, 1, "", "home"], [28, 3, 1, "", "is_okay"], [28, 2, 1, "", "move_by"], [28, 2, 1, "", "move_to"], [28, 3, 1, "", "position"], [28, 2, 1, "", "register"], [28, 2, 1, "", "registered"], [28, 2, 1, "", "registry"], [28, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystem": [[28, 2, 1, "", "__getattr__"], [28, 2, 1, "", "close"], [28, 2, 1, "", "create_from_registry"], [28, 2, 1, "", "home"], [28, 3, 1, "", "is_okay"], [28, 2, 1, "", "move_by"], [28, 2, 1, "", "move_to"], [28, 3, 1, "", "position"], [28, 2, 1, "", "register"], [28, 2, 1, "", "registered"], [28, 2, 1, "", "registry"], [28, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis": [[28, 2, 1, "", "__dir__"], [28, 2, 1, "", "__format__"], [28, 2, 1, "", "__hash__"], [28, 2, 1, "", "__reduce_ex__"], [28, 2, 1, "", "__repr__"], [28, 2, 1, "", "__str__"], [28, 2, 1, "", "name"], [28, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[29, 1, 1, "", "AzimuthElevationSystem"], [29, 1, 1, "", "KinesisRotationStage"], [29, 1, 1, "", "KinesisStepperMotor"], [29, 1, 1, "", "KinesisStepperMotorSystem"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem": [[29, 2, 1, "", "__getattr__"], [29, 2, 1, "", "close"], [29, 2, 1, "", "create_from_registry"], [29, 2, 1, "", "home"], [29, 3, 1, "", "is_okay"], [29, 2, 1, "", "move_by"], [29, 2, 1, "", "move_to"], [29, 3, 1, "", "position"], [29, 2, 1, "", "register"], [29, 2, 1, "", "registered"], [29, 2, 1, "", "registry"], [29, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage": [[29, 2, 1, "", "close"], [29, 2, 1, "", "create_from_registry"], [29, 2, 1, "", "home"], [29, 2, 1, "", "initialize"], [29, 3, 1, "", "is_okay"], [29, 3, 1, "", "lower_limit"], [29, 2, 1, "", "move_by"], [29, 2, 1, "", "move_to"], [29, 3, 1, "", "position"], [29, 2, 1, "", "register"], [29, 2, 1, "", "registered"], [29, 2, 1, "", "registry"], [29, 3, 1, "", "upper_limit"], [29, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor": [[29, 2, 1, "", "close"], [29, 2, 1, "", "create_from_registry"], [29, 2, 1, "", "home"], [29, 2, 1, "", "initialize"], [29, 3, 1, "", "is_okay"], [29, 3, 1, "", "lower_limit"], [29, 2, 1, "", "move_by"], [29, 2, 1, "", "move_to"], [29, 3, 1, "", "position"], [29, 2, 1, "", "register"], [29, 2, 1, "", "registered"], [29, 2, 1, "", "registry"], [29, 3, 1, "", "upper_limit"], [29, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem": [[29, 2, 1, "", "__getattr__"], [29, 2, 1, "", "close"], [29, 2, 1, "", "create_from_registry"], [29, 2, 1, "", "home"], [29, 3, 1, "", "is_okay"], [29, 2, 1, "", "move_by"], [29, 2, 1, "", "move_to"], [29, 3, 1, "", "position"], [29, 2, 1, "", "register"], [29, 2, 1, "", "registered"], [29, 2, 1, "", "registry"], [29, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[30, 1, 1, "", "SnakeStepperController"], [30, 1, 1, "", "StepperController"]], "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController": [[30, 2, 1, "", "create_from_registry"], [30, 2, 1, "", "get_position"], [30, 2, 1, "", "register"], [30, 2, 1, "", "registered"], [30, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController": [[30, 2, 1, "", "create_from_registry"], [30, 2, 1, "", "get_position"], [30, 2, 1, "", "register"], [30, 2, 1, "", "registered"], [30, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[31, 1, 1, "", "DummyStepperMotor"], [31, 1, 1, "", "StepperMotor"]], "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor": [[31, 2, 1, "", "close"], [31, 2, 1, "", "create_from_registry"], [31, 2, 1, "", "home"], [31, 3, 1, "", "is_okay"], [31, 2, 1, "", "move_by"], [31, 2, 1, "", "move_to"], [31, 3, 1, "", "position"], [31, 2, 1, "", "register"], [31, 2, 1, "", "registered"], [31, 2, 1, "", "registry"], [31, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[32, 1, 1, "", "DummyStepperSystem"], [32, 1, 1, "", "StepperMotorSystem"], [32, 1, 1, "", "StepperMotorSystemAxis"]], "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "create_from_registry"], [32, 2, 1, "", "home"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "create_from_registry"], [32, 2, 1, "", "home"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "register"], [32, 2, 1, "", "registered"], [32, 2, 1, "", "registry"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis": [[32, 2, 1, "", "__dir__"], [32, 2, 1, "", "__format__"], [32, 2, 1, "", "__hash__"], [32, 2, 1, "", "__reduce_ex__"], [32, 2, 1, "", "__repr__"], [32, 2, 1, "", "__str__"], [32, 2, 1, "", "name"], [32, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[33, 1, 1, "", "DualDrive2AxisGantry"], [33, 1, 1, "", "DualDrive2AxisGantry_X"], [33, 1, 1, "", "DualDrive2AxisGantry_Y1"], [33, 1, 1, "", "DualDrive2AxisGantry_Y2"], [33, 1, 1, "", "SingleDrive1AxisGantry"], [33, 1, 1, "", "SingleDrive1AxisGantry_X"], [33, 1, 1, "", "SingleDrive1AxisGantry_Y"], [33, 1, 1, "", "TelemetrixStepperMotor"], [33, 1, 1, "", "TelemetrixStepperMotorSystem"], [33, 1, 1, "", "TelemetrixStepperMotorX"], [33, 1, 1, "", "TelemetrixStepperMotorXReversed"], [33, 1, 1, "", "TelemetrixStepperMotorY"], [33, 1, 1, "", "TelemetrixStepperMotorYReversed"], [33, 1, 1, "", "TelemetrixStepperMotorZ"], [33, 1, 1, "", "TelemetrixStepperMotorZReversed"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed": [[33, 2, 1, "", "__getattr__"], [33, 2, 1, "", "close"], [33, 2, 1, "", "cm_to_revs"], [33, 2, 1, "", "create_from_registry"], [33, 2, 1, "", "home"], [33, 3, 1, "", "id"], [33, 3, 1, "", "is_okay"], [33, 2, 1, "", "move_by"], [33, 2, 1, "", "move_to"], [33, 3, 1, "", "position"], [33, 2, 1, "", "register"], [33, 2, 1, "", "registered"], [33, 2, 1, "", "registry"], [33, 2, 1, "", "revs_to_cm"], [33, 2, 1, "", "set_absolute_target_position_cm"], [33, 2, 1, "", "set_target_position_cm"], [33, 2, 1, "", "wait_for_move"]], "cc_hardware.utils": [[40, 1, 1, "", "CCHardwareConfig"], [40, 1, 1, "", "Registry"], [35, 0, 0, "-", "asyncio_utils"], [36, 0, 0, "-", "blocking_deque"], [37, 0, 0, "-", "config"], [38, 0, 0, "-", "constants"], [39, 0, 0, "-", "file_handlers"], [40, 5, 1, "", "get_object"], [41, 0, 0, "-", "logger"], [42, 0, 0, "-", "manager"], [43, 0, 0, "-", "misc"], [44, 0, 0, "-", "plotting"], [40, 5, 1, "", "register"], [45, 0, 0, "-", "registry"], [46, 0, 0, "-", "serial_utils"], [47, 0, 0, "-", "setting"], [48, 0, 0, "-", "singleton"], [49, 0, 0, "-", "transformations"]], "cc_hardware.utils.CCHardwareConfig": [[40, 2, 1, "", "__getstate__"], [40, 2, 1, "", "__setstate__"], [40, 2, 1, "", "__str__"], [40, 2, 1, "", "compose"], [40, 4, 1, "", "config"], [40, 2, 1, "", "copy"], [40, 2, 1, "", "create"], [40, 2, 1, "", "create_from_registry"], [40, 2, 1, "", "create_instance"], [40, 4, 1, "", "custom"], [40, 2, 1, "", "get_instance"], [40, 2, 1, "", "instantiate"], [40, 2, 1, "", "load"], [40, 2, 1, "", "merge_with"], [40, 2, 1, "", "register"], [40, 2, 1, "", "registered"], [40, 2, 1, "", "registry"], [40, 2, 1, "", "save"], [40, 2, 1, "", "to_yaml"]], "cc_hardware.utils.Registry": [[40, 2, 1, "", "create_from_registry"], [40, 2, 1, "", "register"], [40, 2, 1, "", "registered"], [40, 2, 1, "", "registry"]], "cc_hardware.utils.asyncio_utils": [[35, 5, 1, "", "call_async"], [35, 5, 1, "", "call_async_gather"], [35, 5, 1, "", "call_async_value"]], "cc_hardware.utils.blocking_deque": [[36, 1, 1, "", "BlockingDeque"]], "cc_hardware.utils.blocking_deque.BlockingDeque": [[36, 2, 1, "", "__getattr__"], [36, 2, 1, "", "__getitem__"], [36, 2, 1, "", "__len__"], [36, 2, 1, "", "__repr__"], [36, 2, 1, "", "append"]], "cc_hardware.utils.config": [[37, 1, 1, "", "CCHardwareConfig"]], "cc_hardware.utils.config.CCHardwareConfig": [[37, 2, 1, "", "__getstate__"], [37, 2, 1, "", "__setstate__"], [37, 2, 1, "", "__str__"], [37, 2, 1, "", "compose"], [37, 4, 1, "", "config"], [37, 2, 1, "", "copy"], [37, 2, 1, "", "create"], [37, 2, 1, "", "create_from_registry"], [37, 2, 1, "", "create_instance"], [37, 4, 1, "", "custom"], [37, 2, 1, "", "get_instance"], [37, 2, 1, "", "instantiate"], [37, 2, 1, "", "load"], [37, 2, 1, "", "merge_with"], [37, 2, 1, "", "register"], [37, 2, 1, "", "registered"], [37, 2, 1, "", "registry"], [37, 2, 1, "", "save"], [37, 2, 1, "", "to_yaml"]], "cc_hardware.utils.constants": [[38, 6, 1, "", "C"]], "cc_hardware.utils.file_handlers": [[39, 1, 1, "", "PklHandler"], [39, 1, 1, "", "VideoWriter"]], "cc_hardware.utils.file_handlers.PklHandler": [[39, 2, 1, "", "__len__"], [39, 2, 1, "", "append"], [39, 2, 1, "", "load"], [39, 2, 1, "", "load_all"], [39, 2, 1, "", "update_index"], [39, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.VideoWriter": [[39, 2, 1, "", "__del__"], [39, 2, 1, "", "append"], [39, 2, 1, "", "close"]], "cc_hardware.utils.logger": [[41, 1, 1, "", "FileHandler"], [41, 1, 1, "", "LoggerMaxLevelFilter"], [41, 1, 1, "", "TqdmStreamHandler"]], "cc_hardware.utils.logger.FileHandler": [[41, 2, 1, "", "__repr__"], [41, 2, 1, "", "acquire"], [41, 2, 1, "", "addFilter"], [41, 2, 1, "", "close"], [41, 2, 1, "", "createLock"], [41, 2, 1, "", "emit"], [41, 2, 1, "", "filter"], [41, 2, 1, "", "flush"], [41, 2, 1, "", "format"], [41, 2, 1, "", "handle"], [41, 2, 1, "", "handleError"], [41, 2, 1, "", "release"], [41, 2, 1, "", "removeFilter"], [41, 2, 1, "", "setFormatter"], [41, 2, 1, "", "setLevel"], [41, 2, 1, "", "setStream"]], "cc_hardware.utils.logger.LoggerMaxLevelFilter": [[41, 2, 1, "", "filter"]], "cc_hardware.utils.logger.TqdmStreamHandler": [[41, 2, 1, "", "__repr__"], [41, 2, 1, "", "acquire"], [41, 2, 1, "", "addFilter"], [41, 2, 1, "", "close"], [41, 2, 1, "", "createLock"], [41, 2, 1, "", "emit"], [41, 2, 1, "", "filter"], [41, 2, 1, "", "flush"], [41, 2, 1, "", "format"], [41, 2, 1, "", "handle"], [41, 2, 1, "", "handleError"], [41, 2, 1, "", "release"], [41, 2, 1, "", "removeFilter"], [41, 2, 1, "", "setFormatter"], [41, 2, 1, "", "setLevel"], [41, 2, 1, "", "setStream"]], "cc_hardware.utils.manager": [[42, 1, 1, "", "Component"], [42, 1, 1, "", "Manager"]], "cc_hardware.utils.manager.Component": [[42, 2, 1, "", "close"], [42, 3, 1, "", "is_okay"]], "cc_hardware.utils.manager.Manager": [[42, 2, 1, "", "__enter__"], [42, 2, 1, "", "__exit__"], [42, 2, 1, "", "add"], [42, 2, 1, "", "close"], [42, 3, 1, "", "components"], [42, 3, 1, "", "is_okay"], [42, 2, 1, "", "run"]], "cc_hardware.utils.misc": [[43, 5, 1, "", "get_object"]], "cc_hardware.utils.plotting": [[44, 5, 1, "", "set_matplotlib_style"], [44, 5, 1, "", "transient_gui"]], "cc_hardware.utils.registry": [[45, 1, 1, "", "Registry"], [45, 5, 1, "", "register"]], "cc_hardware.utils.registry.Registry": [[45, 2, 1, "", "create_from_registry"], [45, 2, 1, "", "register"], [45, 2, 1, "", "registered"], [45, 2, 1, "", "registry"]], "cc_hardware.utils.serial_utils": [[46, 5, 1, "", "arduino_upload"], [46, 5, 1, "", "find_device_by_label"], [46, 5, 1, "", "find_ports"]], "cc_hardware.utils.setting": [[47, 1, 1, "", "OptionSetting"], [47, 1, 1, "", "RangeSetting"], [47, 1, 1, "", "Setting"]], "cc_hardware.utils.setting.OptionSetting": [[47, 2, 1, "", "__getstate__"], [47, 2, 1, "", "__setstate__"], [47, 2, 1, "", "__str__"], [47, 2, 1, "", "compose"], [47, 4, 1, "", "config"], [47, 2, 1, "", "copy"], [47, 2, 1, "", "create"], [47, 2, 1, "", "create_from_registry"], [47, 2, 1, "", "create_instance"], [47, 4, 1, "", "custom"], [47, 2, 1, "", "default_factory"], [47, 2, 1, "", "from_enum"], [47, 2, 1, "", "get_instance"], [47, 2, 1, "", "instantiate"], [47, 2, 1, "", "load"], [47, 2, 1, "", "merge_with"], [47, 2, 1, "", "register"], [47, 2, 1, "", "registered"], [47, 2, 1, "", "registry"], [47, 2, 1, "", "save"], [47, 2, 1, "", "to_yaml"], [47, 2, 1, "", "update"]], "cc_hardware.utils.setting.RangeSetting": [[47, 2, 1, "", "__getstate__"], [47, 2, 1, "", "__setstate__"], [47, 2, 1, "", "__str__"], [47, 2, 1, "", "compose"], [47, 4, 1, "", "config"], [47, 2, 1, "", "copy"], [47, 2, 1, "", "create"], [47, 2, 1, "", "create_from_registry"], [47, 2, 1, "", "create_instance"], [47, 4, 1, "", "custom"], [47, 2, 1, "", "default_factory"], [47, 2, 1, "", "get_instance"], [47, 2, 1, "", "instantiate"], [47, 2, 1, "", "load"], [47, 2, 1, "", "merge_with"], [47, 2, 1, "", "register"], [47, 2, 1, "", "registered"], [47, 2, 1, "", "registry"], [47, 2, 1, "", "save"], [47, 2, 1, "", "to_yaml"], [47, 2, 1, "", "update"]], "cc_hardware.utils.setting.Setting": [[47, 2, 1, "", "__getstate__"], [47, 2, 1, "", "__setstate__"], [47, 2, 1, "", "__str__"], [47, 2, 1, "", "compose"], [47, 4, 1, "", "config"], [47, 2, 1, "", "copy"], [47, 2, 1, "", "create"], [47, 2, 1, "", "create_from_registry"], [47, 2, 1, "", "create_instance"], [47, 4, 1, "", "custom"], [47, 2, 1, "", "default_factory"], [47, 2, 1, "", "get_instance"], [47, 2, 1, "", "instantiate"], [47, 2, 1, "", "load"], [47, 2, 1, "", "merge_with"], [47, 2, 1, "", "register"], [47, 2, 1, "", "registered"], [47, 2, 1, "", "registry"], [47, 2, 1, "", "save"], [47, 2, 1, "", "to_yaml"]], "cc_hardware.utils.singleton": [[48, 1, 1, "", "SingletonABCMeta"], [48, 1, 1, "", "SingletonMeta"]], "cc_hardware.utils.singleton.SingletonABCMeta": [[48, 2, 1, "", "__call__"], [48, 2, 1, "", "__instancecheck__"], [48, 2, 1, "", "__subclasscheck__"], [48, 2, 1, "", "instance"], [48, 2, 1, "", "register"]], "cc_hardware.utils.singleton.SingletonMeta": [[48, 2, 1, "", "__call__"], [48, 2, 1, "", "instance"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"contribut": 0, "setup": 0, "clone": 0, "repo": [0, 5], "instal": [0, 11], "deploi": 0, "your": 0, "chang": 0, "guidelin": 0, "file": 0, "structur": [0, 5], "edit": 0, "sourc": 0, "code": 0, "comment": 0, "document": 0, "build": 0, "exampl": 1, "avail": 1, "spad": [2, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "dashboard": [2, 18, 19, 20, 21, 22], "stepper": [3, 4], "gantri": 3, "collab": 3, "motor": 4, "control": 4, "camera": [5, 10, 11, 12, 13, 14], "cultur": 5, "hardwar": 5, "get": 5, "start": 5, "packag": [5, 6, 12, 15, 20, 23, 28, 40], "api": 6, "refer": [6, 50], "cc_hardwar": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "algo": [7, 8, 9], "algorithm": 7, "modul": [7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48], "content": [7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "class": [7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 39, 40, 41, 42, 45, 47, 48], "aruco": 8, "submodul": [9, 12, 15, 20, 23, 28, 40], "driver": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "flir": 11, "pyspin": 11, "pkl": [13, 24], "realsens": 14, "subpackag": 15, "safe_seri": 16, "sensor": 17, "dash": 18, "matplotlib": 21, "pyqtgraph": 22, "tmf8828": 26, "vl53l8ch": 27, "stepper_motor": [28, 29, 30, 31, 32, 33], "kinesis_stepp": 29, "stepper_control": 30, "stepper_system": 32, "telemetrix_stepp": 33, "util": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "asyncio_util": 35, "function": [35, 40, 43, 44, 45, 46], "blocking_dequ": 36, "config": 37, "constant": 38, "file_handl": 39, "logger": 41, "manag": 42, "misc": 43, "plot": 44, "registri": 45, "serial_util": 46, "set": 47, "singleton": 48, "transform": 49}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Setup": [[0, "setup"]], "Cloning the Repo": [[0, "cloning-the-repo"]], "Installing": [[0, "installing"]], "Deploy your Changes": [[0, "deploy-your-changes"]], "Guidelines": [[0, "guidelines"]], "File Structure": [[0, "file-structure"]], "Editing the Source Code": [[0, "editing-the-source-code"]], "Commenting": [[0, "commenting"]], "Editing the Documentation": [[0, "editing-the-documentation"]], "Building the Documentation": [[0, "building-the-documentation"]], "Examples": [[1, "examples"]], "Available Examples": [[1, "available-examples"]], "SPAD Dashboard": [[2, "spad-dashboard"]], "Stepper Gantry Collab": [[3, "stepper-gantry-collab"]], "Stepper Motor Controller": [[4, "stepper-motor-controller"]], "Camera Culture Hardware Repo": [[5, "camera-culture-hardware-repo"]], "Getting Started": [[5, "getting-started"]], "Repo Structure": [[5, "repo-structure"]], "Package Structure": [[5, "package-structure"]], "API Reference": [[6, "api-reference"]], "Packages": [[6, "packages"]], "cc_hardware.algos.algorithm": [[7, "module-cc_hardware.algos.algorithm"]], "Module Contents": [[7, "module-contents"], [8, "module-contents"], [10, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [21, "module-contents"], [22, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"]], "Classes": [[7, "classes"], [8, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [36, "classes"], [37, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [45, "classes"], [47, "classes"], [48, "classes"]], "cc_hardware.algos.aruco": [[8, "module-cc_hardware.algos.aruco"]], "cc_hardware.algos": [[9, "module-cc_hardware.algos"]], "Submodules": [[9, "submodules"], [12, "submodules"], [15, "submodules"], [20, "submodules"], [23, "submodules"], [28, "submodules"], [40, "submodules"]], "cc_hardware.drivers.cameras.camera": [[10, "module-cc_hardware.drivers.cameras.camera"]], "cc_hardware.drivers.cameras.flir": [[11, "module-cc_hardware.drivers.cameras.flir"]], "PySpin Installation": [[11, "pyspin-installation"]], "cc_hardware.drivers.cameras": [[12, "module-cc_hardware.drivers.cameras"]], "Package Contents": [[12, "package-contents"], [15, "package-contents"], [20, "package-contents"], [23, "package-contents"], [28, "package-contents"], [40, "package-contents"]], "cc_hardware.drivers.cameras.pkl": [[13, "module-cc_hardware.drivers.cameras.pkl"]], "cc_hardware.drivers.cameras.realsense": [[14, "module-cc_hardware.drivers.cameras.realsense"]], "cc_hardware.drivers": [[15, "module-cc_hardware.drivers"]], "Subpackages": [[15, "subpackages"]], "cc_hardware.drivers.safe_serial": [[16, "module-cc_hardware.drivers.safe_serial"]], "cc_hardware.drivers.sensor": [[17, "module-cc_hardware.drivers.sensor"]], "cc_hardware.drivers.spads.dashboards.dash": [[18, "module-cc_hardware.drivers.spads.dashboards.dash"]], "cc_hardware.drivers.spads.dashboards.dashboard": [[19, "module-cc_hardware.drivers.spads.dashboards.dashboard"]], "cc_hardware.drivers.spads.dashboards": [[20, "module-cc_hardware.drivers.spads.dashboards"]], "cc_hardware.drivers.spads.dashboards.matplotlib": [[21, "module-cc_hardware.drivers.spads.dashboards.matplotlib"]], "cc_hardware.drivers.spads.dashboards.pyqtgraph": [[22, "module-cc_hardware.drivers.spads.dashboards.pyqtgraph"]], "cc_hardware.drivers.spads": [[23, "module-cc_hardware.drivers.spads"]], "cc_hardware.drivers.spads.pkl": [[24, "module-cc_hardware.drivers.spads.pkl"]], "cc_hardware.drivers.spads.spad": [[25, "module-cc_hardware.drivers.spads.spad"]], "cc_hardware.drivers.spads.tmf8828": [[26, "module-cc_hardware.drivers.spads.tmf8828"]], "cc_hardware.drivers.spads.vl53l8ch": [[27, "module-cc_hardware.drivers.spads.vl53l8ch"]], "cc_hardware.drivers.stepper_motors": [[28, "module-cc_hardware.drivers.stepper_motors"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[29, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[30, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[31, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[32, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[33, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "cc_hardware": [[34, "module-cc_hardware"]], "cc_hardware.utils.asyncio_utils": [[35, "module-cc_hardware.utils.asyncio_utils"]], "Functions": [[35, "functions"], [40, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [46, "functions"]], "cc_hardware.utils.blocking_deque": [[36, "module-cc_hardware.utils.blocking_deque"]], "cc_hardware.utils.config": [[37, "module-cc_hardware.utils.config"]], "cc_hardware.utils.constants": [[38, "module-cc_hardware.utils.constants"]], "cc_hardware.utils.file_handlers": [[39, "module-cc_hardware.utils.file_handlers"]], "cc_hardware.utils": [[40, "module-cc_hardware.utils"]], "cc_hardware.utils.logger": [[41, "module-cc_hardware.utils.logger"]], "cc_hardware.utils.manager": [[42, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.misc": [[43, "module-cc_hardware.utils.misc"]], "cc_hardware.utils.plotting": [[44, "module-cc_hardware.utils.plotting"]], "cc_hardware.utils.registry": [[45, "module-cc_hardware.utils.registry"]], "cc_hardware.utils.serial_utils": [[46, "module-cc_hardware.utils.serial_utils"]], "cc_hardware.utils.setting": [[47, "module-cc_hardware.utils.setting"]], "cc_hardware.utils.singleton": [[48, "module-cc_hardware.utils.singleton"]], "cc_hardware.utils.transformations": [[49, "module-cc_hardware.utils.transformations"]], "Reference": [[50, "reference"]]}, "indexentries": {"algorithm (class in cc_hardware.algos.algorithm)": [[7, "cc_hardware.algos.algorithm.Algorithm"]], "cc_hardware.algos.algorithm": [[7, "module-cc_hardware.algos.algorithm"]], "close() (algorithm method)": [[7, "cc_hardware.algos.algorithm.Algorithm.close"]], "is_okay (algorithm property)": [[7, "cc_hardware.algos.algorithm.Algorithm.is_okay"]], "module": [[7, "module-cc_hardware.algos.algorithm"], [8, "module-cc_hardware.algos.aruco"], [9, "module-cc_hardware.algos"], [10, "module-cc_hardware.drivers.cameras.camera"], [11, "module-cc_hardware.drivers.cameras.flir"], [12, "module-cc_hardware.drivers.cameras"], [13, "module-cc_hardware.drivers.cameras.pkl"], [14, "module-cc_hardware.drivers.cameras.realsense"], [15, "module-cc_hardware.drivers"], [16, "module-cc_hardware.drivers.safe_serial"], [17, "module-cc_hardware.drivers.sensor"], [18, "module-cc_hardware.drivers.spads.dashboards.dash"], [19, "module-cc_hardware.drivers.spads.dashboards.dashboard"], [20, "module-cc_hardware.drivers.spads.dashboards"], [21, "module-cc_hardware.drivers.spads.dashboards.matplotlib"], [22, "module-cc_hardware.drivers.spads.dashboards.pyqtgraph"], [23, "module-cc_hardware.drivers.spads"], [24, "module-cc_hardware.drivers.spads.pkl"], [25, "module-cc_hardware.drivers.spads.spad"], [26, "module-cc_hardware.drivers.spads.tmf8828"], [27, "module-cc_hardware.drivers.spads.vl53l8ch"], [28, "module-cc_hardware.drivers.stepper_motors"], [29, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"], [30, "module-cc_hardware.drivers.stepper_motors.stepper_controller"], [31, "module-cc_hardware.drivers.stepper_motors.stepper_motor"], [32, "module-cc_hardware.drivers.stepper_motors.stepper_system"], [33, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"], [34, "module-cc_hardware"], [35, "module-cc_hardware.utils.asyncio_utils"], [36, "module-cc_hardware.utils.blocking_deque"], [37, "module-cc_hardware.utils.config"], [38, "module-cc_hardware.utils.constants"], [39, "module-cc_hardware.utils.file_handlers"], [40, "module-cc_hardware.utils"], [41, "module-cc_hardware.utils.logger"], [42, "module-cc_hardware.utils.manager"], [43, "module-cc_hardware.utils.misc"], [44, "module-cc_hardware.utils.plotting"], [45, "module-cc_hardware.utils.registry"], [46, "module-cc_hardware.utils.serial_utils"], [47, "module-cc_hardware.utils.setting"], [48, "module-cc_hardware.utils.singleton"], [49, "module-cc_hardware.utils.transformations"]], "run() (algorithm method)": [[7, "cc_hardware.algos.algorithm.Algorithm.run"]], "arucolocalizationalgorithm (class in cc_hardware.algos.aruco)": [[8, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco": [[8, "module-cc_hardware.algos.aruco"]], "close() (arucolocalizationalgorithm method)": [[8, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.close"]], "is_okay (arucolocalizationalgorithm property)": [[8, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.is_okay"]], "run() (arucolocalizationalgorithm method)": [[8, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.run"]], "cc_hardware.algos": [[9, "module-cc_hardware.algos"]], "camera (class in cc_hardware.drivers.cameras.camera)": [[10, "cc_hardware.drivers.cameras.camera.Camera"]], "__del__() (camera method)": [[10, "cc_hardware.drivers.cameras.camera.Camera.__del__"], [12, "cc_hardware.drivers.cameras.Camera.__del__"], [15, "cc_hardware.drivers.Camera.__del__"]], "accumulate() (camera method)": [[10, "cc_hardware.drivers.cameras.camera.Camera.accumulate"], [12, "cc_hardware.drivers.cameras.Camera.accumulate"], [15, "cc_hardware.drivers.Camera.accumulate"]], "calibrate() (camera method)": [[10, "cc_hardware.drivers.cameras.camera.Camera.calibrate"], [12, "cc_hardware.drivers.cameras.Camera.calibrate"], [15, "cc_hardware.drivers.Camera.calibrate"]], "cc_hardware.drivers.cameras.camera": [[10, "module-cc_hardware.drivers.cameras.camera"]], "close() (camera method)": [[10, "cc_hardware.drivers.cameras.camera.Camera.close"], [12, "cc_hardware.drivers.cameras.Camera.close"], [15, "cc_hardware.drivers.Camera.close"]], "config (camera property)": [[10, "cc_hardware.drivers.cameras.camera.Camera.config"], [12, "cc_hardware.drivers.cameras.Camera.config"], [15, "cc_hardware.drivers.Camera.config"]], "create_from_registry() (camera class method)": [[10, "cc_hardware.drivers.cameras.camera.Camera.create_from_registry"], [12, "cc_hardware.drivers.cameras.Camera.create_from_registry"], [15, "cc_hardware.drivers.Camera.create_from_registry"]], "distortion_coefficients (camera property)": [[10, "cc_hardware.drivers.cameras.camera.Camera.distortion_coefficients"], [12, "cc_hardware.drivers.cameras.Camera.distortion_coefficients"], [15, "cc_hardware.drivers.Camera.distortion_coefficients"]], "intrinsic_matrix (camera property)": [[10, "cc_hardware.drivers.cameras.camera.Camera.intrinsic_matrix"], [12, "cc_hardware.drivers.cameras.Camera.intrinsic_matrix"], [15, "cc_hardware.drivers.Camera.intrinsic_matrix"]], "is_okay (camera property)": [[10, "cc_hardware.drivers.cameras.camera.Camera.is_okay"], [12, "cc_hardware.drivers.cameras.Camera.is_okay"], [15, "cc_hardware.drivers.Camera.is_okay"]], "register() (camera class method)": [[10, "cc_hardware.drivers.cameras.camera.Camera.register"], [12, "cc_hardware.drivers.cameras.Camera.register"], [15, "cc_hardware.drivers.Camera.register"]], "registered() (camera method)": [[10, "cc_hardware.drivers.cameras.camera.Camera.registered"], [12, "cc_hardware.drivers.cameras.Camera.registered"], [15, "cc_hardware.drivers.Camera.registered"]], "registry() (camera method)": [[10, "cc_hardware.drivers.cameras.camera.Camera.registry"], [12, "cc_hardware.drivers.cameras.Camera.registry"], [15, "cc_hardware.drivers.Camera.registry"]], "resolution (camera property)": [[10, "cc_hardware.drivers.cameras.camera.Camera.resolution"], [12, "cc_hardware.drivers.cameras.Camera.resolution"], [15, "cc_hardware.drivers.Camera.resolution"]], "settings (camera property)": [[10, "cc_hardware.drivers.cameras.camera.Camera.settings"], [12, "cc_hardware.drivers.cameras.Camera.settings"], [15, "cc_hardware.drivers.Camera.settings"]], "update() (camera method)": [[10, "cc_hardware.drivers.cameras.camera.Camera.update"], [12, "cc_hardware.drivers.cameras.Camera.update"], [15, "cc_hardware.drivers.Camera.update"]], "flircamera (class in cc_hardware.drivers.cameras.flir)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera"]], "grasshopperflircamera (class in cc_hardware.drivers.cameras.flir)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera"]], "__del__() (flircamera method)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.__del__"]], "__del__() (grasshopperflircamera method)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.__del__"]], "accumulate() (flircamera method)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.accumulate"]], "accumulate() (grasshopperflircamera method)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.accumulate"]], "calibrate() (flircamera method)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.calibrate"]], "calibrate() (grasshopperflircamera method)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.calibrate"]], "cc_hardware.drivers.cameras.flir": [[11, "module-cc_hardware.drivers.cameras.flir"]], "close() (flircamera method)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.close"]], "close() (grasshopperflircamera method)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.close"]], "config (flircamera property)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.config"]], "config (grasshopperflircamera property)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.config"]], "create_from_registry() (flircamera class method)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.create_from_registry"]], "create_from_registry() (grasshopperflircamera class method)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.create_from_registry"]], "distortion_coefficients (flircamera property)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.distortion_coefficients"]], "distortion_coefficients (grasshopperflircamera property)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.distortion_coefficients"]], "intrinsic_matrix (flircamera property)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.intrinsic_matrix"]], "intrinsic_matrix (grasshopperflircamera property)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.intrinsic_matrix"]], "is_okay (flircamera property)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.is_okay"]], "is_okay (grasshopperflircamera property)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.is_okay"]], "register() (flircamera class method)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.register"]], "register() (grasshopperflircamera class method)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.register"]], "registered() (flircamera method)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.registered"]], "registered() (grasshopperflircamera method)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.registered"]], "registry() (flircamera method)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.registry"]], "registry() (grasshopperflircamera method)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.registry"]], "resolution (flircamera property)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.resolution"]], "resolution (grasshopperflircamera property)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.resolution"]], "settings (flircamera property)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.settings"]], "settings (grasshopperflircamera property)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.settings"]], "update() (flircamera method)": [[11, "cc_hardware.drivers.cameras.flir.FlirCamera.update"]], "update() (grasshopperflircamera method)": [[11, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.update"]], "camera (class in cc_hardware.drivers.cameras)": [[12, "cc_hardware.drivers.cameras.Camera"]], "cc_hardware.drivers.cameras": [[12, "module-cc_hardware.drivers.cameras"]], "pklcamera (class in cc_hardware.drivers.cameras.pkl)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera"]], "__del__() (pklcamera method)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.__del__"]], "accumulate() (pklcamera method)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.accumulate"]], "calibrate() (pklcamera method)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.calibrate"]], "cc_hardware.drivers.cameras.pkl": [[13, "module-cc_hardware.drivers.cameras.pkl"]], "close() (pklcamera method)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.close"]], "config (pklcamera property)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.config"]], "create_from_registry() (pklcamera class method)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.create_from_registry"]], "distortion_coefficients (pklcamera property)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.distortion_coefficients"]], "intrinsic_matrix (pklcamera property)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.intrinsic_matrix"]], "is_okay (pklcamera property)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.is_okay"]], "register() (pklcamera class method)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.register"]], "registered() (pklcamera method)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.registered"]], "registry() (pklcamera method)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.registry"]], "resolution (pklcamera property)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.resolution"]], "settings (pklcamera property)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.settings"]], "update() (pklcamera method)": [[13, "cc_hardware.drivers.cameras.pkl.PklCamera.update"]], "realsensecamera (class in cc_hardware.drivers.cameras.realsense)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera"]], "__del__() (realsensecamera method)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.__del__"]], "accumulate() (realsensecamera method)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.accumulate"]], "calibrate() (realsensecamera method)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.calibrate"]], "cc_hardware.drivers.cameras.realsense": [[14, "module-cc_hardware.drivers.cameras.realsense"]], "close() (realsensecamera method)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.close"]], "config (realsensecamera property)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.config"]], "create_from_registry() (realsensecamera class method)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.create_from_registry"]], "distortion_coefficients (realsensecamera property)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.distortion_coefficients"]], "intrinsic_matrix (realsensecamera property)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.intrinsic_matrix"]], "is_okay (realsensecamera property)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.is_okay"]], "register() (realsensecamera class method)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.register"]], "registered() (realsensecamera method)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.registered"]], "registry() (realsensecamera method)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.registry"]], "resolution (realsensecamera property)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.resolution"]], "settings (realsensecamera property)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.settings"]], "update() (realsensecamera method)": [[14, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.update"]], "camera (class in cc_hardware.drivers)": [[15, "cc_hardware.drivers.Camera"]], "dummysteppermotor (class in cc_hardware.drivers)": [[15, "cc_hardware.drivers.DummyStepperMotor"]], "spadsensor (class in cc_hardware.drivers)": [[15, "cc_hardware.drivers.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers)": [[15, "cc_hardware.drivers.SPADSensorConfig"]], "safeserial (class in cc_hardware.drivers)": [[15, "cc_hardware.drivers.SafeSerial"]], "sensor (class in cc_hardware.drivers)": [[15, "cc_hardware.drivers.Sensor"]], "sensorconfig (class in cc_hardware.drivers)": [[15, "cc_hardware.drivers.SensorConfig"]], "steppermotor (class in cc_hardware.drivers)": [[15, "cc_hardware.drivers.StepperMotor"]], "steppermotorsystem (class in cc_hardware.drivers)": [[15, "cc_hardware.drivers.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers)": [[15, "cc_hardware.drivers.StepperMotorSystemAxis"]], "__del__() (spadsensor method)": [[15, "cc_hardware.drivers.SPADSensor.__del__"], [23, "cc_hardware.drivers.spads.SPADSensor.__del__"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.__del__"]], "__del__() (sensor method)": [[15, "cc_hardware.drivers.Sensor.__del__"], [17, "cc_hardware.drivers.sensor.Sensor.__del__"]], "__dir__() (steppermotorsystemaxis method)": [[15, "cc_hardware.drivers.StepperMotorSystemAxis.__dir__"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__dir__"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__dir__"]], "__format__() (steppermotorsystemaxis method)": [[15, "cc_hardware.drivers.StepperMotorSystemAxis.__format__"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__format__"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__format__"]], "__getattr__() (safeserial method)": [[15, "cc_hardware.drivers.SafeSerial.__getattr__"], [16, "cc_hardware.drivers.safe_serial.SafeSerial.__getattr__"]], "__getattr__() (steppermotorsystem method)": [[15, "cc_hardware.drivers.StepperMotorSystem.__getattr__"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.__getattr__"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.__getattr__"]], "__getstate__() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.__getstate__"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.__getstate__"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__getstate__"]], "__getstate__() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.__getstate__"], [17, "cc_hardware.drivers.sensor.SensorConfig.__getstate__"]], "__hash__() (steppermotorsystemaxis method)": [[15, "cc_hardware.drivers.StepperMotorSystemAxis.__hash__"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__hash__"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__hash__"]], "__reduce_ex__() (steppermotorsystemaxis method)": [[15, "cc_hardware.drivers.StepperMotorSystemAxis.__reduce_ex__"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__reduce_ex__"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__reduce_ex__"]], "__repr__() (steppermotorsystemaxis method)": [[15, "cc_hardware.drivers.StepperMotorSystemAxis.__repr__"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__repr__"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__repr__"]], "__setstate__() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.__setstate__"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.__setstate__"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__setstate__"]], "__setstate__() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.__setstate__"], [17, "cc_hardware.drivers.sensor.SensorConfig.__setstate__"]], "__str__() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.__str__"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.__str__"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__str__"]], "__str__() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.__str__"], [17, "cc_hardware.drivers.sensor.SensorConfig.__str__"]], "__str__() (steppermotorsystemaxis method)": [[15, "cc_hardware.drivers.StepperMotorSystemAxis.__str__"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__str__"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__str__"]], "accumulate() (spadsensor method)": [[15, "cc_hardware.drivers.SPADSensor.accumulate"], [23, "cc_hardware.drivers.spads.SPADSensor.accumulate"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.accumulate"]], "calibrate() (spadsensor method)": [[15, "cc_hardware.drivers.SPADSensor.calibrate"], [23, "cc_hardware.drivers.spads.SPADSensor.calibrate"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.calibrate"]], "calibrate() (sensor method)": [[15, "cc_hardware.drivers.Sensor.calibrate"], [17, "cc_hardware.drivers.sensor.Sensor.calibrate"]], "cc_hardware.drivers": [[15, "module-cc_hardware.drivers"]], "close() (spadsensor method)": [[15, "cc_hardware.drivers.SPADSensor.close"], [23, "cc_hardware.drivers.spads.SPADSensor.close"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.close"]], "close() (sensor method)": [[15, "cc_hardware.drivers.Sensor.close"], [17, "cc_hardware.drivers.sensor.Sensor.close"]], "close() (steppermotor method)": [[15, "cc_hardware.drivers.StepperMotor.close"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.close"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.close"]], "close() (steppermotorsystem method)": [[15, "cc_hardware.drivers.StepperMotorSystem.close"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.close"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.close"]], "compose() (spadsensorconfig class method)": [[15, "cc_hardware.drivers.SPADSensorConfig.compose"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.compose"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.compose"]], "compose() (sensorconfig class method)": [[15, "cc_hardware.drivers.SensorConfig.compose"], [17, "cc_hardware.drivers.sensor.SensorConfig.compose"]], "config (spadsensor property)": [[15, "cc_hardware.drivers.SPADSensor.config"], [23, "cc_hardware.drivers.spads.SPADSensor.config"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.config"]], "config (spadsensorconfig attribute)": [[15, "cc_hardware.drivers.SPADSensorConfig.config"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.config"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.config"]], "config (sensor property)": [[15, "cc_hardware.drivers.Sensor.config"], [17, "cc_hardware.drivers.sensor.Sensor.config"]], "config (sensorconfig attribute)": [[15, "cc_hardware.drivers.SensorConfig.config"], [17, "cc_hardware.drivers.sensor.SensorConfig.config"]], "copy() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.copy"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.copy"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.copy"]], "copy() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.copy"], [17, "cc_hardware.drivers.sensor.SensorConfig.copy"]], "create() (spadsensorconfig class method)": [[15, "cc_hardware.drivers.SPADSensorConfig.create"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.create"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.create"]], "create() (safeserial class method)": [[15, "cc_hardware.drivers.SafeSerial.create"], [16, "cc_hardware.drivers.safe_serial.SafeSerial.create"]], "create() (sensorconfig class method)": [[15, "cc_hardware.drivers.SensorConfig.create"], [17, "cc_hardware.drivers.sensor.SensorConfig.create"]], "create_from_registry() (spadsensor class method)": [[15, "cc_hardware.drivers.SPADSensor.create_from_registry"], [23, "cc_hardware.drivers.spads.SPADSensor.create_from_registry"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.create_from_registry"]], "create_from_registry() (spadsensorconfig class method)": [[15, "cc_hardware.drivers.SPADSensorConfig.create_from_registry"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.create_from_registry"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.create_from_registry"]], "create_from_registry() (sensor class method)": [[15, "cc_hardware.drivers.Sensor.create_from_registry"], [17, "cc_hardware.drivers.sensor.Sensor.create_from_registry"]], "create_from_registry() (sensorconfig class method)": [[15, "cc_hardware.drivers.SensorConfig.create_from_registry"], [17, "cc_hardware.drivers.sensor.SensorConfig.create_from_registry"]], "create_from_registry() (steppermotor class method)": [[15, "cc_hardware.drivers.StepperMotor.create_from_registry"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.create_from_registry"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.create_from_registry"]], "create_from_registry() (steppermotorsystem class method)": [[15, "cc_hardware.drivers.StepperMotorSystem.create_from_registry"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.create_from_registry"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.create_from_registry"]], "create_instance() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.create_instance"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.create_instance"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.create_instance"]], "create_instance() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.create_instance"], [17, "cc_hardware.drivers.sensor.SensorConfig.create_instance"]], "custom (spadsensorconfig attribute)": [[15, "cc_hardware.drivers.SPADSensorConfig.custom"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.custom"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.custom"]], "custom (sensorconfig attribute)": [[15, "cc_hardware.drivers.SensorConfig.custom"], [17, "cc_hardware.drivers.sensor.SensorConfig.custom"]], "get_instance() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.get_instance"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.get_instance"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.get_instance"]], "get_instance() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.get_instance"], [17, "cc_hardware.drivers.sensor.SensorConfig.get_instance"]], "home() (steppermotor method)": [[15, "cc_hardware.drivers.StepperMotor.home"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.home"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.home"]], "home() (steppermotorsystem method)": [[15, "cc_hardware.drivers.StepperMotorSystem.home"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.home"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.home"]], "instantiate() (spadsensorconfig class method)": [[15, "cc_hardware.drivers.SPADSensorConfig.instantiate"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.instantiate"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.instantiate"]], "instantiate() (sensorconfig class method)": [[15, "cc_hardware.drivers.SensorConfig.instantiate"], [17, "cc_hardware.drivers.sensor.SensorConfig.instantiate"]], "is_okay (spadsensor property)": [[15, "cc_hardware.drivers.SPADSensor.is_okay"], [23, "cc_hardware.drivers.spads.SPADSensor.is_okay"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.is_okay"]], "is_okay (sensor property)": [[15, "cc_hardware.drivers.Sensor.is_okay"], [17, "cc_hardware.drivers.sensor.Sensor.is_okay"]], "is_okay (steppermotor property)": [[15, "cc_hardware.drivers.StepperMotor.is_okay"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.is_okay"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.is_okay"]], "is_okay (steppermotorsystem property)": [[15, "cc_hardware.drivers.StepperMotorSystem.is_okay"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.is_okay"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.is_okay"]], "load() (spadsensorconfig class method)": [[15, "cc_hardware.drivers.SPADSensorConfig.load"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.load"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.load"]], "load() (sensorconfig class method)": [[15, "cc_hardware.drivers.SensorConfig.load"], [17, "cc_hardware.drivers.sensor.SensorConfig.load"]], "merge_with() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.merge_with"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.merge_with"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.merge_with"]], "merge_with() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.merge_with"], [17, "cc_hardware.drivers.sensor.SensorConfig.merge_with"]], "move_by() (steppermotor method)": [[15, "cc_hardware.drivers.StepperMotor.move_by"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.move_by"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_by"]], "move_by() (steppermotorsystem method)": [[15, "cc_hardware.drivers.StepperMotorSystem.move_by"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_by"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_by"]], "move_to() (steppermotor method)": [[15, "cc_hardware.drivers.StepperMotor.move_to"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.move_to"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_to"]], "move_to() (steppermotorsystem method)": [[15, "cc_hardware.drivers.StepperMotorSystem.move_to"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_to"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_to"]], "name() (steppermotorsystemaxis method)": [[15, "cc_hardware.drivers.StepperMotorSystemAxis.name"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.name"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.name"]], "num_bins (spadsensor property)": [[15, "cc_hardware.drivers.SPADSensor.num_bins"], [23, "cc_hardware.drivers.spads.SPADSensor.num_bins"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.num_bins"]], "position (steppermotor property)": [[15, "cc_hardware.drivers.StepperMotor.position"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.position"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.position"]], "position (steppermotorsystem property)": [[15, "cc_hardware.drivers.StepperMotorSystem.position"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.position"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.position"]], "read() (safeserial method)": [[15, "cc_hardware.drivers.SafeSerial.read"], [16, "cc_hardware.drivers.safe_serial.SafeSerial.read"]], "register() (spadsensor class method)": [[15, "cc_hardware.drivers.SPADSensor.register"], [23, "cc_hardware.drivers.spads.SPADSensor.register"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.register"]], "register() (spadsensorconfig class method)": [[15, "cc_hardware.drivers.SPADSensorConfig.register"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.register"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.register"]], "register() (sensor class method)": [[15, "cc_hardware.drivers.Sensor.register"], [17, "cc_hardware.drivers.sensor.Sensor.register"]], "register() (sensorconfig class method)": [[15, "cc_hardware.drivers.SensorConfig.register"], [17, "cc_hardware.drivers.sensor.SensorConfig.register"]], "register() (steppermotor class method)": [[15, "cc_hardware.drivers.StepperMotor.register"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.register"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.register"]], "register() (steppermotorsystem class method)": [[15, "cc_hardware.drivers.StepperMotorSystem.register"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.register"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.register"]], "registered() (spadsensor method)": [[15, "cc_hardware.drivers.SPADSensor.registered"], [23, "cc_hardware.drivers.spads.SPADSensor.registered"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.registered"]], "registered() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.registered"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.registered"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.registered"]], "registered() (sensor method)": [[15, "cc_hardware.drivers.Sensor.registered"], [17, "cc_hardware.drivers.sensor.Sensor.registered"]], "registered() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.registered"], [17, "cc_hardware.drivers.sensor.SensorConfig.registered"]], "registered() (steppermotor method)": [[15, "cc_hardware.drivers.StepperMotor.registered"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.registered"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.registered"]], "registered() (steppermotorsystem method)": [[15, "cc_hardware.drivers.StepperMotorSystem.registered"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.registered"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.registered"]], "registry() (spadsensor method)": [[15, "cc_hardware.drivers.SPADSensor.registry"], [23, "cc_hardware.drivers.spads.SPADSensor.registry"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.registry"]], "registry() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.registry"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.registry"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.registry"]], "registry() (sensor method)": [[15, "cc_hardware.drivers.Sensor.registry"], [17, "cc_hardware.drivers.sensor.Sensor.registry"]], "registry() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.registry"], [17, "cc_hardware.drivers.sensor.SensorConfig.registry"]], "registry() (steppermotor method)": [[15, "cc_hardware.drivers.StepperMotor.registry"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.registry"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.registry"]], "registry() (steppermotorsystem method)": [[15, "cc_hardware.drivers.StepperMotorSystem.registry"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.registry"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.registry"]], "resolution (spadsensor property)": [[15, "cc_hardware.drivers.SPADSensor.resolution"], [23, "cc_hardware.drivers.spads.SPADSensor.resolution"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.resolution"]], "save() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.save"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.save"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.save"]], "save() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.save"], [17, "cc_hardware.drivers.sensor.SensorConfig.save"]], "settings (spadsensor property)": [[15, "cc_hardware.drivers.SPADSensor.settings"], [23, "cc_hardware.drivers.spads.SPADSensor.settings"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.settings"]], "settings (spadsensorconfig property)": [[15, "cc_hardware.drivers.SPADSensorConfig.settings"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.settings"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.settings"]], "settings (sensor property)": [[15, "cc_hardware.drivers.Sensor.settings"], [17, "cc_hardware.drivers.sensor.Sensor.settings"]], "settings (sensorconfig property)": [[15, "cc_hardware.drivers.SensorConfig.settings"], [17, "cc_hardware.drivers.sensor.SensorConfig.settings"]], "to_yaml() (spadsensorconfig method)": [[15, "cc_hardware.drivers.SPADSensorConfig.to_yaml"], [23, "cc_hardware.drivers.spads.SPADSensorConfig.to_yaml"], [25, "cc_hardware.drivers.spads.spad.SPADSensorConfig.to_yaml"]], "to_yaml() (sensorconfig method)": [[15, "cc_hardware.drivers.SensorConfig.to_yaml"], [17, "cc_hardware.drivers.sensor.SensorConfig.to_yaml"]], "update() (spadsensor method)": [[15, "cc_hardware.drivers.SPADSensor.update"], [23, "cc_hardware.drivers.spads.SPADSensor.update"], [25, "cc_hardware.drivers.spads.spad.SPADSensor.update"]], "update() (sensor method)": [[15, "cc_hardware.drivers.Sensor.update"], [17, "cc_hardware.drivers.sensor.Sensor.update"]], "value() (steppermotorsystemaxis method)": [[15, "cc_hardware.drivers.StepperMotorSystemAxis.value"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.value"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.value"]], "wait_for_move() (steppermotor method)": [[15, "cc_hardware.drivers.StepperMotor.wait_for_move"], [28, "cc_hardware.drivers.stepper_motors.StepperMotor.wait_for_move"], [31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.wait_for_move"]], "wait_for_move() (steppermotorsystem method)": [[15, "cc_hardware.drivers.StepperMotorSystem.wait_for_move"], [28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.wait_for_move"], [32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.wait_for_move"]], "wait_for_start_talk() (safeserial method)": [[15, "cc_hardware.drivers.SafeSerial.wait_for_start_talk"], [16, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_start_talk"]], "wait_for_stop_talk() (safeserial method)": [[15, "cc_hardware.drivers.SafeSerial.wait_for_stop_talk"], [16, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_stop_talk"]], "write() (safeserial method)": [[15, "cc_hardware.drivers.SafeSerial.write"], [16, "cc_hardware.drivers.safe_serial.SafeSerial.write"]], "write_and_wait_for_start_and_stop_talk() (safeserial method)": [[15, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_and_stop_talk"], [16, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_and_stop_talk"]], "write_and_wait_for_start_talk() (safeserial method)": [[15, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_talk"], [16, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_talk"]], "write_and_wait_for_stop_talk() (safeserial method)": [[15, "cc_hardware.drivers.SafeSerial.write_and_wait_for_stop_talk"], [16, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_stop_talk"]], "safeserial (class in cc_hardware.drivers.safe_serial)": [[16, "cc_hardware.drivers.safe_serial.SafeSerial"]], "cc_hardware.drivers.safe_serial": [[16, "module-cc_hardware.drivers.safe_serial"]], "sensor (class in cc_hardware.drivers.sensor)": [[17, "cc_hardware.drivers.sensor.Sensor"]], "sensorconfig (class in cc_hardware.drivers.sensor)": [[17, "cc_hardware.drivers.sensor.SensorConfig"]], "sensordata (class in cc_hardware.drivers.sensor)": [[17, "cc_hardware.drivers.sensor.SensorData"]], "sensordatathreaded (class in cc_hardware.drivers.sensor)": [[17, "cc_hardware.drivers.sensor.SensorDataThreaded"]], "cc_hardware.drivers.sensor": [[17, "module-cc_hardware.drivers.sensor"]], "get_data() (sensordata method)": [[17, "cc_hardware.drivers.sensor.SensorData.get_data"]], "get_data() (sensordatathreaded method)": [[17, "cc_hardware.drivers.sensor.SensorDataThreaded.get_data"]], "process() (sensordata method)": [[17, "cc_hardware.drivers.sensor.SensorData.process"]], "process() (sensordatathreaded method)": [[17, "cc_hardware.drivers.sensor.SensorDataThreaded.process"]], "reset() (sensordata method)": [[17, "cc_hardware.drivers.sensor.SensorData.reset"]], "reset() (sensordatathreaded method)": [[17, "cc_hardware.drivers.sensor.SensorDataThreaded.reset"]], "dashdashboard (class in cc_hardware.drivers.spads.dashboards.dash)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard"]], "dashdashboardconfig (class in cc_hardware.drivers.spads.dashboards.dash)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig"]], "__getstate__() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.__getstate__"]], "__setstate__() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.__setstate__"]], "__str__() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.__str__"]], "cc_hardware.drivers.spads.dashboards.dash": [[18, "module-cc_hardware.drivers.spads.dashboards.dash"]], "compose() (dashdashboardconfig class method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.compose"]], "config (dashdashboard property)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.config"]], "config (dashdashboardconfig attribute)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.config"]], "copy() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.copy"]], "create() (dashdashboardconfig class method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.create"]], "create_from_registry() (dashdashboard class method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.create_from_registry"]], "create_from_registry() (dashdashboardconfig class method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.create_from_registry"]], "create_instance() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.create_instance"]], "custom (dashdashboardconfig attribute)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.custom"]], "get_instance() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.get_instance"]], "instantiate() (dashdashboardconfig class method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.instantiate"]], "load() (dashdashboardconfig class method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.load"]], "max_bin (dashdashboard property)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.max_bin"]], "merge_with() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.merge_with"]], "min_bin (dashdashboard property)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.min_bin"]], "register() (dashdashboard class method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.register"]], "register() (dashdashboardconfig class method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.register"]], "registered() (dashdashboard method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.registered"]], "registered() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.registered"]], "registry() (dashdashboard method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.registry"]], "registry() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.registry"]], "run() (dashdashboard method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.run"]], "save() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.save"]], "sensor (dashdashboard property)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.sensor"]], "setup() (dashdashboard method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.setup"]], "to_yaml() (dashdashboardconfig method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboardConfig.to_yaml"]], "update() (dashdashboard method)": [[18, "cc_hardware.drivers.spads.dashboards.dash.DashDashboard.update"]], "spaddashboard (class in cc_hardware.drivers.spads.dashboards.dashboard)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.drivers.spads.dashboards.dashboard)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig"]], "__getstate__() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.__getstate__"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.__getstate__"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.__getstate__"]], "__setstate__() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.__setstate__"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.__setstate__"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.__setstate__"]], "__str__() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.__str__"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.__str__"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.__str__"]], "cc_hardware.drivers.spads.dashboards.dashboard": [[19, "module-cc_hardware.drivers.spads.dashboards.dashboard"]], "compose() (spaddashboardconfig class method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.compose"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.compose"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.compose"]], "config (spaddashboard property)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.config"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.config"], [23, "cc_hardware.drivers.spads.SPADDashboard.config"]], "config (spaddashboardconfig attribute)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.config"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.config"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.config"]], "copy() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.copy"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.copy"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.copy"]], "create() (spaddashboardconfig class method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.create"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.create"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.create"]], "create_from_registry() (spaddashboard class method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.create_from_registry"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.create_from_registry"], [23, "cc_hardware.drivers.spads.SPADDashboard.create_from_registry"]], "create_from_registry() (spaddashboardconfig class method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.create_from_registry"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.create_from_registry"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.create_from_registry"]], "create_instance() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.create_instance"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.create_instance"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.create_instance"]], "custom (spaddashboardconfig attribute)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.custom"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.custom"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.custom"]], "get_instance() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.get_instance"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.get_instance"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.get_instance"]], "instantiate() (spaddashboardconfig class method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.instantiate"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.instantiate"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.instantiate"]], "load() (spaddashboardconfig class method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.load"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.load"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.load"]], "max_bin (spaddashboard property)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.max_bin"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.max_bin"], [23, "cc_hardware.drivers.spads.SPADDashboard.max_bin"]], "merge_with() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.merge_with"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.merge_with"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.merge_with"]], "min_bin (spaddashboard property)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.min_bin"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.min_bin"], [23, "cc_hardware.drivers.spads.SPADDashboard.min_bin"]], "register() (spaddashboard class method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.register"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.register"], [23, "cc_hardware.drivers.spads.SPADDashboard.register"]], "register() (spaddashboardconfig class method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.register"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.register"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.register"]], "registered() (spaddashboard method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.registered"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.registered"], [23, "cc_hardware.drivers.spads.SPADDashboard.registered"]], "registered() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.registered"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.registered"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.registered"]], "registry() (spaddashboard method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.registry"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.registry"], [23, "cc_hardware.drivers.spads.SPADDashboard.registry"]], "registry() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.registry"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.registry"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.registry"]], "run() (spaddashboard method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.run"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.run"], [23, "cc_hardware.drivers.spads.SPADDashboard.run"]], "save() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.save"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.save"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.save"]], "sensor (spaddashboard property)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.sensor"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.sensor"], [23, "cc_hardware.drivers.spads.SPADDashboard.sensor"]], "setup() (spaddashboard method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.setup"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.setup"], [23, "cc_hardware.drivers.spads.SPADDashboard.setup"]], "to_yaml() (spaddashboardconfig method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboardConfig.to_yaml"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig.to_yaml"], [23, "cc_hardware.drivers.spads.SPADDashboardConfig.to_yaml"]], "update() (spaddashboard method)": [[19, "cc_hardware.drivers.spads.dashboards.dashboard.SPADDashboard.update"], [20, "cc_hardware.drivers.spads.dashboards.SPADDashboard.update"], [23, "cc_hardware.drivers.spads.SPADDashboard.update"]], "spaddashboard (class in cc_hardware.drivers.spads.dashboards)": [[20, "cc_hardware.drivers.spads.dashboards.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.drivers.spads.dashboards)": [[20, "cc_hardware.drivers.spads.dashboards.SPADDashboardConfig"]], "cc_hardware.drivers.spads.dashboards": [[20, "module-cc_hardware.drivers.spads.dashboards"]], "matplotlibdashboard (class in cc_hardware.drivers.spads.dashboards.matplotlib)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard"]], "matplotlibdashboardconfig (class in cc_hardware.drivers.spads.dashboards.matplotlib)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig"]], "__getstate__() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.__getstate__"]], "__setstate__() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.__setstate__"]], "__str__() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.__str__"]], "adjust_ylim() (matplotlibdashboard method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.adjust_ylim"]], "cc_hardware.drivers.spads.dashboards.matplotlib": [[21, "module-cc_hardware.drivers.spads.dashboards.matplotlib"]], "compose() (matplotlibdashboardconfig class method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.compose"]], "config (matplotlibdashboard property)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.config"]], "config (matplotlibdashboardconfig attribute)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.config"]], "copy() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.copy"]], "create() (matplotlibdashboardconfig class method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.create"]], "create_from_registry() (matplotlibdashboard class method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.create_from_registry"]], "create_from_registry() (matplotlibdashboardconfig class method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.create_from_registry"]], "create_instance() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.create_instance"]], "custom (matplotlibdashboardconfig attribute)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.custom"]], "get_instance() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.get_instance"]], "instantiate() (matplotlibdashboardconfig class method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.instantiate"]], "load() (matplotlibdashboardconfig class method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.load"]], "max_bin (matplotlibdashboard property)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.max_bin"]], "merge_with() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.merge_with"]], "min_bin (matplotlibdashboard property)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.min_bin"]], "register() (matplotlibdashboard class method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.register"]], "register() (matplotlibdashboardconfig class method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.register"]], "registered() (matplotlibdashboard method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.registered"]], "registered() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.registered"]], "registry() (matplotlibdashboard method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.registry"]], "registry() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.registry"]], "run() (matplotlibdashboard method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.run"]], "save() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.save"]], "save_animation() (matplotlibdashboard method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.save_animation"]], "sensor (matplotlibdashboard property)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.sensor"]], "setup() (matplotlibdashboard method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.setup"]], "to_yaml() (matplotlibdashboardconfig method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboardConfig.to_yaml"]], "update() (matplotlibdashboard method)": [[21, "cc_hardware.drivers.spads.dashboards.matplotlib.MatplotlibDashboard.update"]], "dashboardwindow (class in cc_hardware.drivers.spads.dashboards.pyqtgraph)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.DashboardWindow"]], "pyqtgraphdashboard (class in cc_hardware.drivers.spads.dashboards.pyqtgraph)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard"]], "pyqtgraphdashboardconfig (class in cc_hardware.drivers.spads.dashboards.pyqtgraph)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig"]], "__getstate__() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.__getstate__"]], "__setstate__() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.__setstate__"]], "__str__() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.__str__"]], "cc_hardware.drivers.spads.dashboards.pyqtgraph": [[22, "module-cc_hardware.drivers.spads.dashboards.pyqtgraph"]], "compose() (pyqtgraphdashboardconfig class method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.compose"]], "config (pyqtgraphdashboard property)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.config"]], "config (pyqtgraphdashboardconfig attribute)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.config"]], "copy() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.copy"]], "create() (pyqtgraphdashboardconfig class method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.create"]], "create_from_registry() (pyqtgraphdashboard class method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.create_from_registry"]], "create_from_registry() (pyqtgraphdashboardconfig class method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.create_from_registry"]], "create_instance() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.create_instance"]], "custom (pyqtgraphdashboardconfig attribute)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.custom"]], "get_instance() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.get_instance"]], "init_ui() (dashboardwindow method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.DashboardWindow.init_ui"]], "instantiate() (pyqtgraphdashboardconfig class method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.instantiate"]], "keypressevent() (dashboardwindow method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.DashboardWindow.keyPressEvent"]], "load() (pyqtgraphdashboardconfig class method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.load"]], "max_bin (pyqtgraphdashboard property)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.max_bin"]], "merge_with() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.merge_with"]], "min_bin (pyqtgraphdashboard property)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.min_bin"]], "register() (pyqtgraphdashboard class method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.register"]], "register() (pyqtgraphdashboardconfig class method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.register"]], "registered() (pyqtgraphdashboard method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.registered"]], "registered() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.registered"]], "registry() (pyqtgraphdashboard method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.registry"]], "registry() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.registry"]], "run() (pyqtgraphdashboard method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.run"]], "save() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.save"]], "sensor (pyqtgraphdashboard property)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.sensor"]], "setup() (pyqtgraphdashboard method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.setup"]], "to_yaml() (pyqtgraphdashboardconfig method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboardConfig.to_yaml"]], "update() (pyqtgraphdashboard method)": [[22, "cc_hardware.drivers.spads.dashboards.pyqtgraph.PyQtGraphDashboard.update"]], "spaddashboard (class in cc_hardware.drivers.spads)": [[23, "cc_hardware.drivers.spads.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.drivers.spads)": [[23, "cc_hardware.drivers.spads.SPADDashboardConfig"]], "spadsensor (class in cc_hardware.drivers.spads)": [[23, "cc_hardware.drivers.spads.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads)": [[23, "cc_hardware.drivers.spads.SPADSensorConfig"]], "cc_hardware.drivers.spads": [[23, "module-cc_hardware.drivers.spads"]], "pklspadsensor (class in cc_hardware.drivers.spads.pkl)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor"]], "__del__() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.__del__"]], "accumulate() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.accumulate"]], "calibrate() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.calibrate"]], "cc_hardware.drivers.spads.pkl": [[24, "module-cc_hardware.drivers.spads.pkl"]], "close() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.close"]], "config (pklspadsensor property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.config"]], "create_from_registry() (pklspadsensor class method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.create_from_registry"]], "is_okay (pklspadsensor property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.is_okay"]], "num_bins (pklspadsensor property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.num_bins"]], "register() (pklspadsensor class method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.register"]], "registered() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.registered"]], "registry() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.registry"]], "resolution (pklspadsensor property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.resolution"]], "settings (pklspadsensor property)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.settings"]], "update() (pklspadsensor method)": [[24, "cc_hardware.drivers.spads.pkl.PklSPADSensor.update"]], "spadsensor (class in cc_hardware.drivers.spads.spad)": [[25, "cc_hardware.drivers.spads.spad.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads.spad)": [[25, "cc_hardware.drivers.spads.spad.SPADSensorConfig"]], "cc_hardware.drivers.spads.spad": [[25, "module-cc_hardware.drivers.spads.spad"]], "rangemode (class in cc_hardware.drivers.spads.tmf8828)": [[26, "cc_hardware.drivers.spads.tmf8828.RangeMode"]], "spadid (class in cc_hardware.drivers.spads.tmf8828)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID"]], "tmf8828histogram (class in cc_hardware.drivers.spads.tmf8828)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram"]], "tmf8828sensor (class in cc_hardware.drivers.spads.tmf8828)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor"]], "__del__() (tmf8828sensor method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.__del__"]], "__dir__() (rangemode method)": [[26, "cc_hardware.drivers.spads.tmf8828.RangeMode.__dir__"]], "__dir__() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.__dir__"]], "__format__() (rangemode method)": [[26, "cc_hardware.drivers.spads.tmf8828.RangeMode.__format__"]], "__format__() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.__format__"]], "__hash__() (rangemode method)": [[26, "cc_hardware.drivers.spads.tmf8828.RangeMode.__hash__"]], "__hash__() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.__hash__"]], "__reduce_ex__() (rangemode method)": [[26, "cc_hardware.drivers.spads.tmf8828.RangeMode.__reduce_ex__"]], "__reduce_ex__() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.__reduce_ex__"]], "__repr__() (rangemode method)": [[26, "cc_hardware.drivers.spads.tmf8828.RangeMode.__repr__"]], "__repr__() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.__repr__"]], "__str__() (rangemode method)": [[26, "cc_hardware.drivers.spads.tmf8828.RangeMode.__str__"]], "__str__() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.__str__"]], "accumulate() (tmf8828sensor method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.accumulate"]], "calibrate() (tmf8828sensor method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.calibrate"]], "cc_hardware.drivers.spads.tmf8828": [[26, "module-cc_hardware.drivers.spads.tmf8828"]], "close() (tmf8828sensor method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.close"]], "config (tmf8828sensor property)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.config"]], "create_from_registry() (tmf8828sensor class method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.create_from_registry"]], "get_active_channels_per_subcapture() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.get_active_channels_per_subcapture"]], "get_data() (tmf8828histogram method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.get_data"]], "get_num_channels() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.get_num_channels"]], "get_num_pixels() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.get_num_pixels"]], "get_resolution() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.get_resolution"]], "has_data (tmf8828histogram property)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.has_data"]], "is_okay (tmf8828sensor property)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.is_okay"]], "name() (rangemode method)": [[26, "cc_hardware.drivers.spads.tmf8828.RangeMode.name"]], "name() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.name"]], "num_bins (tmf8828sensor property)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.num_bins"]], "process() (tmf8828histogram method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.process"]], "register() (tmf8828sensor class method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.register"]], "registered() (tmf8828sensor method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.registered"]], "registry() (tmf8828sensor method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.registry"]], "reset() (tmf8828histogram method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.reset"]], "resolution (tmf8828sensor property)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.resolution"]], "settings (tmf8828sensor property)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.settings"]], "update() (tmf8828sensor method)": [[26, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.update"]], "value() (rangemode method)": [[26, "cc_hardware.drivers.spads.tmf8828.RangeMode.value"]], "value() (spadid method)": [[26, "cc_hardware.drivers.spads.tmf8828.SPADID.value"]], "rangingmode (class in cc_hardware.drivers.spads.vl53l8ch)": [[27, "cc_hardware.drivers.spads.vl53l8ch.RangingMode"]], "vl53l8chconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig"]], "vl53l8chconfig4x4 (class in cc_hardware.drivers.spads.vl53l8ch)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4"]], "vl53l8chconfig8x8 (class in cc_hardware.drivers.spads.vl53l8ch)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8"]], "vl53l8chhistogram (class in cc_hardware.drivers.spads.vl53l8ch)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram"]], "vl53l8chsensor (class in cc_hardware.drivers.spads.vl53l8ch)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor"]], "vl53l8chsharedconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig"]], "__del__() (vl53l8chsensor method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.__del__"]], "__dir__() (rangingmode method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__dir__"]], "__format__() (rangingmode method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__format__"]], "__getstate__() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__getstate__"]], "__getstate__() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__getstate__"]], "__getstate__() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__getstate__"]], "__getstate__() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__getstate__"]], "__hash__() (rangingmode method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__hash__"]], "__reduce_ex__() (rangingmode method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__reduce_ex__"]], "__repr__() (rangingmode method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__repr__"]], "__setstate__() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__setstate__"]], "__setstate__() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__setstate__"]], "__setstate__() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__setstate__"]], "__setstate__() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__setstate__"]], "__str__() (rangingmode method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__str__"]], "__str__() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__str__"]], "__str__() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__str__"]], "__str__() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__str__"]], "__str__() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__str__"]], "accumulate() (vl53l8chsensor method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.accumulate"]], "calibrate() (vl53l8chsensor method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.calibrate"]], "cc_hardware.drivers.spads.vl53l8ch": [[27, "module-cc_hardware.drivers.spads.vl53l8ch"]], "close() (vl53l8chsensor method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.close"]], "compose() (vl53l8chconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.compose"]], "compose() (vl53l8chconfig4x4 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.compose"]], "compose() (vl53l8chconfig8x8 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.compose"]], "compose() (vl53l8chsharedconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.compose"]], "config (vl53l8chconfig attribute)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.config"]], "config (vl53l8chconfig4x4 attribute)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.config"]], "config (vl53l8chconfig8x8 attribute)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.config"]], "config (vl53l8chsensor property)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.config"]], "config (vl53l8chsharedconfig attribute)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.config"]], "copy() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.copy"]], "copy() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.copy"]], "copy() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.copy"]], "copy() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.copy"]], "create() (vl53l8chconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.create"]], "create() (vl53l8chconfig4x4 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.create"]], "create() (vl53l8chconfig8x8 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.create"]], "create() (vl53l8chsharedconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.create"]], "create_from_registry() (vl53l8chconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.create_from_registry"]], "create_from_registry() (vl53l8chconfig4x4 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.create_from_registry"]], "create_from_registry() (vl53l8chconfig8x8 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.create_from_registry"]], "create_from_registry() (vl53l8chsensor class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.create_from_registry"]], "create_from_registry() (vl53l8chsharedconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.create_from_registry"]], "create_instance() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.create_instance"]], "create_instance() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.create_instance"]], "create_instance() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.create_instance"]], "create_instance() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.create_instance"]], "custom (vl53l8chconfig attribute)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.custom"]], "custom (vl53l8chconfig4x4 attribute)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.custom"]], "custom (vl53l8chconfig8x8 attribute)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.custom"]], "custom (vl53l8chsharedconfig attribute)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.custom"]], "get_data() (vl53l8chhistogram method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.get_data"]], "get_instance() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.get_instance"]], "get_instance() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.get_instance"]], "get_instance() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.get_instance"]], "get_instance() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.get_instance"]], "has_data (vl53l8chhistogram property)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.has_data"]], "instantiate() (vl53l8chconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.instantiate"]], "instantiate() (vl53l8chconfig4x4 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.instantiate"]], "instantiate() (vl53l8chconfig8x8 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.instantiate"]], "instantiate() (vl53l8chsharedconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.instantiate"]], "is_okay (vl53l8chsensor property)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.is_okay"]], "load() (vl53l8chconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.load"]], "load() (vl53l8chconfig4x4 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.load"]], "load() (vl53l8chconfig8x8 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.load"]], "load() (vl53l8chsharedconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.load"]], "merge_with() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.merge_with"]], "merge_with() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.merge_with"]], "merge_with() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.merge_with"]], "merge_with() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.merge_with"]], "name() (rangingmode method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.name"]], "num_bins (vl53l8chsensor property)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.num_bins"]], "pack() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.pack"]], "pack() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.pack"]], "pack() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.pack"]], "pack() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.pack"]], "process() (vl53l8chhistogram method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.process"]], "register() (vl53l8chconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.register"]], "register() (vl53l8chconfig4x4 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.register"]], "register() (vl53l8chconfig8x8 class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.register"]], "register() (vl53l8chsensor class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.register"]], "register() (vl53l8chsharedconfig class method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.register"]], "registered() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.registered"]], "registered() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.registered"]], "registered() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.registered"]], "registered() (vl53l8chsensor method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.registered"]], "registered() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.registered"]], "registry() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.registry"]], "registry() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.registry"]], "registry() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.registry"]], "registry() (vl53l8chsensor method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.registry"]], "registry() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.registry"]], "reset() (vl53l8chhistogram method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.reset"]], "resolution (vl53l8chsensor property)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.resolution"]], "save() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.save"]], "save() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.save"]], "save() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.save"]], "save() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.save"]], "settings (vl53l8chconfig property)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.settings"]], "settings (vl53l8chconfig4x4 property)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.settings"]], "settings (vl53l8chconfig8x8 property)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.settings"]], "settings (vl53l8chsensor property)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.settings"]], "settings (vl53l8chsharedconfig property)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.settings"]], "to_yaml() (vl53l8chconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.to_yaml"]], "to_yaml() (vl53l8chconfig4x4 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.to_yaml"]], "to_yaml() (vl53l8chconfig8x8 method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.to_yaml"]], "to_yaml() (vl53l8chsharedconfig method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.to_yaml"]], "update() (vl53l8chsensor method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.update"]], "value() (rangingmode method)": [[27, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.value"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors)": [[28, "cc_hardware.drivers.stepper_motors.DummyStepperMotor"]], "steppermotor (class in cc_hardware.drivers.stepper_motors)": [[28, "cc_hardware.drivers.stepper_motors.StepperMotor"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors)": [[28, "cc_hardware.drivers.stepper_motors.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors)": [[28, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis"]], "cc_hardware.drivers.stepper_motors": [[28, "module-cc_hardware.drivers.stepper_motors"]], "azimuthelevationsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem"]], "kinesisrotationstage (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage"]], "kinesissteppermotor (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor"]], "kinesissteppermotorsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem"]], "__getattr__() (azimuthelevationsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.__getattr__"]], "__getattr__() (kinesissteppermotorsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.__getattr__"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[29, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "close() (azimuthelevationsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.close"]], "close() (kinesisrotationstage method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.close"]], "close() (kinesissteppermotor method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.close"]], "close() (kinesissteppermotorsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.close"]], "create_from_registry() (azimuthelevationsystem class method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.create_from_registry"]], "create_from_registry() (kinesisrotationstage class method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.create_from_registry"]], "create_from_registry() (kinesissteppermotor class method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.create_from_registry"]], "create_from_registry() (kinesissteppermotorsystem class method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.create_from_registry"]], "home() (azimuthelevationsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.home"]], "home() (kinesisrotationstage method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.home"]], "home() (kinesissteppermotor method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.home"]], "home() (kinesissteppermotorsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.home"]], "initialize() (kinesisrotationstage method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.initialize"]], "initialize() (kinesissteppermotor method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.initialize"]], "is_okay (azimuthelevationsystem property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.is_okay"]], "is_okay (kinesisrotationstage property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.is_okay"]], "is_okay (kinesissteppermotor property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.is_okay"]], "is_okay (kinesissteppermotorsystem property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.is_okay"]], "lower_limit (kinesisrotationstage property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.lower_limit"]], "lower_limit (kinesissteppermotor property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.lower_limit"]], "move_by() (azimuthelevationsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.move_by"]], "move_by() (kinesisrotationstage method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_by"]], "move_by() (kinesissteppermotor method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_by"]], "move_by() (kinesissteppermotorsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.move_by"]], "move_to() (azimuthelevationsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.move_to"]], "move_to() (kinesisrotationstage method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_to"]], "move_to() (kinesissteppermotor method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_to"]], "move_to() (kinesissteppermotorsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.move_to"]], "position (azimuthelevationsystem property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.position"]], "position (kinesisrotationstage property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.position"]], "position (kinesissteppermotor property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.position"]], "position (kinesissteppermotorsystem property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.position"]], "register() (azimuthelevationsystem class method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.register"]], "register() (kinesisrotationstage class method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.register"]], "register() (kinesissteppermotor class method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.register"]], "register() (kinesissteppermotorsystem class method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.register"]], "registered() (azimuthelevationsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.registered"]], "registered() (kinesisrotationstage method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.registered"]], "registered() (kinesissteppermotor method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.registered"]], "registered() (kinesissteppermotorsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.registered"]], "registry() (azimuthelevationsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.registry"]], "registry() (kinesisrotationstage method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.registry"]], "registry() (kinesissteppermotor method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.registry"]], "registry() (kinesissteppermotorsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.registry"]], "upper_limit (kinesisrotationstage property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.upper_limit"]], "upper_limit (kinesissteppermotor property)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.upper_limit"]], "wait_for_move() (azimuthelevationsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.wait_for_move"]], "wait_for_move() (kinesisrotationstage method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.wait_for_move"]], "wait_for_move() (kinesissteppermotor method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.wait_for_move"]], "wait_for_move() (kinesissteppermotorsystem method)": [[29, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.wait_for_move"]], "snakesteppercontroller (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController"]], "steppercontroller (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[30, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "create_from_registry() (snakesteppercontroller class method)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.create_from_registry"]], "create_from_registry() (steppercontroller class method)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.create_from_registry"]], "get_position() (snakesteppercontroller method)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.get_position"]], "get_position() (steppercontroller method)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.get_position"]], "register() (snakesteppercontroller class method)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.register"]], "register() (steppercontroller class method)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.register"]], "registered() (snakesteppercontroller method)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.registered"]], "registered() (steppercontroller method)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.registered"]], "registry() (snakesteppercontroller method)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.registry"]], "registry() (steppercontroller method)": [[30, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.registry"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[31, "cc_hardware.drivers.stepper_motors.stepper_motor.DummyStepperMotor"]], "steppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[31, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[31, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "dummysteppersystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis"]], "__getattr__() (dummysteppersystem method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.__getattr__"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[32, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "close() (dummysteppersystem method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.close"]], "create_from_registry() (dummysteppersystem class method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.create_from_registry"]], "home() (dummysteppersystem method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.home"]], "is_okay (dummysteppersystem property)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.is_okay"]], "move_by() (dummysteppersystem method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_by"]], "move_to() (dummysteppersystem method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_to"]], "position (dummysteppersystem property)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.position"]], "register() (dummysteppersystem class method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.register"]], "registered() (dummysteppersystem method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.registered"]], "registry() (dummysteppersystem method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.registry"]], "wait_for_move() (dummysteppersystem method)": [[32, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.wait_for_move"]], "dualdrive2axisgantry (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry"]], "dualdrive2axisgantry_x (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X"]], "dualdrive2axisgantry_y1 (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1"]], "dualdrive2axisgantry_y2 (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2"]], "singledrive1axisgantry (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry"]], "singledrive1axisgantry_x (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X"]], "singledrive1axisgantry_y (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y"]], "telemetrixsteppermotor (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor"]], "telemetrixsteppermotorsystem (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem"]], "telemetrixsteppermotorx (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX"]], "telemetrixsteppermotorxreversed (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed"]], "telemetrixsteppermotory (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY"]], "telemetrixsteppermotoryreversed (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed"]], "telemetrixsteppermotorz (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ"]], "telemetrixsteppermotorzreversed (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed"]], "__getattr__() (dualdrive2axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.__getattr__"]], "__getattr__() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.__getattr__"]], "__getattr__() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.__getattr__"]], "__getattr__() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.__getattr__"]], "__getattr__() (singledrive1axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.__getattr__"]], "__getattr__() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.__getattr__"]], "__getattr__() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.__getattr__"]], "__getattr__() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.__getattr__"]], "__getattr__() (telemetrixsteppermotorsystem method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.__getattr__"]], "__getattr__() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.__getattr__"]], "__getattr__() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.__getattr__"]], "__getattr__() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.__getattr__"]], "__getattr__() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.__getattr__"]], "__getattr__() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.__getattr__"]], "__getattr__() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.__getattr__"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[33, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "close() (dualdrive2axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.close"]], "close() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.close"]], "close() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.close"]], "close() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.close"]], "close() (singledrive1axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.close"]], "close() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.close"]], "close() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.close"]], "close() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.close"]], "close() (telemetrixsteppermotorsystem method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.close"]], "close() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.close"]], "close() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.close"]], "close() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.close"]], "close() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.close"]], "close() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.close"]], "close() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.close"]], "cm_to_revs() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.cm_to_revs"]], "cm_to_revs() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.cm_to_revs"]], "cm_to_revs() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.cm_to_revs"]], "cm_to_revs() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.cm_to_revs"]], "cm_to_revs() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.cm_to_revs"]], "create_from_registry() (dualdrive2axisgantry class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.create_from_registry"]], "create_from_registry() (dualdrive2axisgantry_x class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.create_from_registry"]], "create_from_registry() (dualdrive2axisgantry_y1 class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.create_from_registry"]], "create_from_registry() (dualdrive2axisgantry_y2 class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.create_from_registry"]], "create_from_registry() (singledrive1axisgantry class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.create_from_registry"]], "create_from_registry() (singledrive1axisgantry_x class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.create_from_registry"]], "create_from_registry() (singledrive1axisgantry_y class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.create_from_registry"]], "create_from_registry() (telemetrixsteppermotor class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.create_from_registry"]], "create_from_registry() (telemetrixsteppermotorsystem class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.create_from_registry"]], "create_from_registry() (telemetrixsteppermotorx class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.create_from_registry"]], "create_from_registry() (telemetrixsteppermotorxreversed class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.create_from_registry"]], "create_from_registry() (telemetrixsteppermotory class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.create_from_registry"]], "create_from_registry() (telemetrixsteppermotoryreversed class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.create_from_registry"]], "create_from_registry() (telemetrixsteppermotorz class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.create_from_registry"]], "create_from_registry() (telemetrixsteppermotorzreversed class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.create_from_registry"]], "home() (dualdrive2axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.home"]], "home() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.home"]], "home() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.home"]], "home() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.home"]], "home() (singledrive1axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.home"]], "home() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.home"]], "home() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.home"]], "home() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.home"]], "home() (telemetrixsteppermotorsystem method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.home"]], "home() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.home"]], "home() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.home"]], "home() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.home"]], "home() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.home"]], "home() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.home"]], "home() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.home"]], "id (dualdrive2axisgantry_x property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.id"]], "id (dualdrive2axisgantry_y1 property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.id"]], "id (dualdrive2axisgantry_y2 property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.id"]], "id (singledrive1axisgantry_x property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.id"]], "id (singledrive1axisgantry_y property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.id"]], "id (telemetrixsteppermotor property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.id"]], "id (telemetrixsteppermotorx property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.id"]], "id (telemetrixsteppermotorxreversed property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.id"]], "id (telemetrixsteppermotory property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.id"]], "id (telemetrixsteppermotoryreversed property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.id"]], "id (telemetrixsteppermotorz property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.id"]], "id (telemetrixsteppermotorzreversed property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.id"]], "is_okay (dualdrive2axisgantry property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.is_okay"]], "is_okay (dualdrive2axisgantry_x property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.is_okay"]], "is_okay (dualdrive2axisgantry_y1 property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.is_okay"]], "is_okay (dualdrive2axisgantry_y2 property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.is_okay"]], "is_okay (singledrive1axisgantry property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.is_okay"]], "is_okay (singledrive1axisgantry_x property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.is_okay"]], "is_okay (singledrive1axisgantry_y property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.is_okay"]], "is_okay (telemetrixsteppermotor property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.is_okay"]], "is_okay (telemetrixsteppermotorsystem property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.is_okay"]], "is_okay (telemetrixsteppermotorx property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.is_okay"]], "is_okay (telemetrixsteppermotorxreversed property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.is_okay"]], "is_okay (telemetrixsteppermotory property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.is_okay"]], "is_okay (telemetrixsteppermotoryreversed property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.is_okay"]], "is_okay (telemetrixsteppermotorz property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.is_okay"]], "is_okay (telemetrixsteppermotorzreversed property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.is_okay"]], "move_by() (dualdrive2axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.move_by"]], "move_by() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.move_by"]], "move_by() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.move_by"]], "move_by() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.move_by"]], "move_by() (singledrive1axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.move_by"]], "move_by() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.move_by"]], "move_by() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.move_by"]], "move_by() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_by"]], "move_by() (telemetrixsteppermotorsystem method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.move_by"]], "move_by() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.move_by"]], "move_by() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.move_by"]], "move_by() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.move_by"]], "move_by() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.move_by"]], "move_by() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.move_by"]], "move_by() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.move_by"]], "move_to() (dualdrive2axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.move_to"]], "move_to() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.move_to"]], "move_to() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.move_to"]], "move_to() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.move_to"]], "move_to() (singledrive1axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.move_to"]], "move_to() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.move_to"]], "move_to() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.move_to"]], "move_to() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_to"]], "move_to() (telemetrixsteppermotorsystem method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.move_to"]], "move_to() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.move_to"]], "move_to() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.move_to"]], "move_to() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.move_to"]], "move_to() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.move_to"]], "move_to() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.move_to"]], "move_to() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.move_to"]], "position (dualdrive2axisgantry property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.position"]], "position (dualdrive2axisgantry_x property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.position"]], "position (dualdrive2axisgantry_y1 property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.position"]], "position (dualdrive2axisgantry_y2 property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.position"]], "position (singledrive1axisgantry property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.position"]], "position (singledrive1axisgantry_x property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.position"]], "position (singledrive1axisgantry_y property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.position"]], "position (telemetrixsteppermotor property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.position"]], "position (telemetrixsteppermotorsystem property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.position"]], "position (telemetrixsteppermotorx property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.position"]], "position (telemetrixsteppermotorxreversed property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.position"]], "position (telemetrixsteppermotory property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.position"]], "position (telemetrixsteppermotoryreversed property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.position"]], "position (telemetrixsteppermotorz property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.position"]], "position (telemetrixsteppermotorzreversed property)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.position"]], "register() (dualdrive2axisgantry class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.register"]], "register() (dualdrive2axisgantry_x class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.register"]], "register() (dualdrive2axisgantry_y1 class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.register"]], "register() (dualdrive2axisgantry_y2 class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.register"]], "register() (singledrive1axisgantry class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.register"]], "register() (singledrive1axisgantry_x class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.register"]], "register() (singledrive1axisgantry_y class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.register"]], "register() (telemetrixsteppermotor class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.register"]], "register() (telemetrixsteppermotorsystem class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.register"]], "register() (telemetrixsteppermotorx class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.register"]], "register() (telemetrixsteppermotorxreversed class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.register"]], "register() (telemetrixsteppermotory class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.register"]], "register() (telemetrixsteppermotoryreversed class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.register"]], "register() (telemetrixsteppermotorz class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.register"]], "register() (telemetrixsteppermotorzreversed class method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.register"]], "registered() (dualdrive2axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.registered"]], "registered() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.registered"]], "registered() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.registered"]], "registered() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.registered"]], "registered() (singledrive1axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.registered"]], "registered() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.registered"]], "registered() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.registered"]], "registered() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.registered"]], "registered() (telemetrixsteppermotorsystem method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.registered"]], "registered() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.registered"]], "registered() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.registered"]], "registered() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.registered"]], "registered() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.registered"]], "registered() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.registered"]], "registered() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.registered"]], "registry() (dualdrive2axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.registry"]], "registry() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.registry"]], "registry() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.registry"]], "registry() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.registry"]], "registry() (singledrive1axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.registry"]], "registry() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.registry"]], "registry() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.registry"]], "registry() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.registry"]], "registry() (telemetrixsteppermotorsystem method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.registry"]], "registry() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.registry"]], "registry() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.registry"]], "registry() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.registry"]], "registry() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.registry"]], "registry() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.registry"]], "registry() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.registry"]], "revs_to_cm() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.revs_to_cm"]], "revs_to_cm() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.revs_to_cm"]], "revs_to_cm() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.revs_to_cm"]], "revs_to_cm() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.revs_to_cm"]], "revs_to_cm() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.revs_to_cm"]], "set_absolute_target_position_cm() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.set_absolute_target_position_cm"]], "set_target_position_cm() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.set_target_position_cm"]], "set_target_position_cm() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.set_target_position_cm"]], "set_target_position_cm() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.set_target_position_cm"]], "set_target_position_cm() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.set_target_position_cm"]], "set_target_position_cm() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.set_target_position_cm"]], "wait_for_move() (dualdrive2axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.wait_for_move"]], "wait_for_move() (dualdrive2axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.wait_for_move"]], "wait_for_move() (dualdrive2axisgantry_y1 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.wait_for_move"]], "wait_for_move() (dualdrive2axisgantry_y2 method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.wait_for_move"]], "wait_for_move() (singledrive1axisgantry method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.wait_for_move"]], "wait_for_move() (singledrive1axisgantry_x method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.wait_for_move"]], "wait_for_move() (singledrive1axisgantry_y method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.wait_for_move"]], "wait_for_move() (telemetrixsteppermotor method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorsystem method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorx method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorxreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.wait_for_move"]], "wait_for_move() (telemetrixsteppermotory method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.wait_for_move"]], "wait_for_move() (telemetrixsteppermotoryreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorz method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorzreversed method)": [[33, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.wait_for_move"]], "cc_hardware": [[34, "module-cc_hardware"]], "call_async() (in module cc_hardware.utils.asyncio_utils)": [[35, "cc_hardware.utils.asyncio_utils.call_async"]], "call_async_gather() (in module cc_hardware.utils.asyncio_utils)": [[35, "cc_hardware.utils.asyncio_utils.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.asyncio_utils)": [[35, "cc_hardware.utils.asyncio_utils.call_async_value"]], "cc_hardware.utils.asyncio_utils": [[35, "module-cc_hardware.utils.asyncio_utils"]], "blockingdeque (class in cc_hardware.utils.blocking_deque)": [[36, "cc_hardware.utils.blocking_deque.BlockingDeque"]], "__getattr__() (blockingdeque method)": [[36, "cc_hardware.utils.blocking_deque.BlockingDeque.__getattr__"]], "__getitem__() (blockingdeque method)": [[36, "cc_hardware.utils.blocking_deque.BlockingDeque.__getitem__"]], "__len__() (blockingdeque method)": [[36, "cc_hardware.utils.blocking_deque.BlockingDeque.__len__"]], "__repr__() (blockingdeque method)": [[36, "cc_hardware.utils.blocking_deque.BlockingDeque.__repr__"]], "append() (blockingdeque method)": [[36, "cc_hardware.utils.blocking_deque.BlockingDeque.append"]], "cc_hardware.utils.blocking_deque": [[36, "module-cc_hardware.utils.blocking_deque"]], "cchardwareconfig (class in cc_hardware.utils.config)": [[37, "cc_hardware.utils.config.CCHardwareConfig"]], "__getstate__() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.__getstate__"], [40, "cc_hardware.utils.CCHardwareConfig.__getstate__"]], "__setstate__() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.__setstate__"], [40, "cc_hardware.utils.CCHardwareConfig.__setstate__"]], "__str__() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.__str__"], [40, "cc_hardware.utils.CCHardwareConfig.__str__"]], "cc_hardware.utils.config": [[37, "module-cc_hardware.utils.config"]], "compose() (cchardwareconfig class method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.compose"], [40, "cc_hardware.utils.CCHardwareConfig.compose"]], "config (cchardwareconfig attribute)": [[37, "cc_hardware.utils.config.CCHardwareConfig.config"], [40, "cc_hardware.utils.CCHardwareConfig.config"]], "copy() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.copy"], [40, "cc_hardware.utils.CCHardwareConfig.copy"]], "create() (cchardwareconfig class method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.create"], [40, "cc_hardware.utils.CCHardwareConfig.create"]], "create_from_registry() (cchardwareconfig class method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.create_from_registry"], [40, "cc_hardware.utils.CCHardwareConfig.create_from_registry"]], "create_instance() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.create_instance"], [40, "cc_hardware.utils.CCHardwareConfig.create_instance"]], "custom (cchardwareconfig attribute)": [[37, "cc_hardware.utils.config.CCHardwareConfig.custom"], [40, "cc_hardware.utils.CCHardwareConfig.custom"]], "get_instance() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.get_instance"], [40, "cc_hardware.utils.CCHardwareConfig.get_instance"]], "instantiate() (cchardwareconfig class method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.instantiate"], [40, "cc_hardware.utils.CCHardwareConfig.instantiate"]], "load() (cchardwareconfig class method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.load"], [40, "cc_hardware.utils.CCHardwareConfig.load"]], "merge_with() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.merge_with"], [40, "cc_hardware.utils.CCHardwareConfig.merge_with"]], "register() (cchardwareconfig class method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.register"], [40, "cc_hardware.utils.CCHardwareConfig.register"]], "registered() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.registered"], [40, "cc_hardware.utils.CCHardwareConfig.registered"]], "registry() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.registry"], [40, "cc_hardware.utils.CCHardwareConfig.registry"]], "save() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.save"], [40, "cc_hardware.utils.CCHardwareConfig.save"]], "to_yaml() (cchardwareconfig method)": [[37, "cc_hardware.utils.config.CCHardwareConfig.to_yaml"], [40, "cc_hardware.utils.CCHardwareConfig.to_yaml"]], "c (in module cc_hardware.utils.constants)": [[38, "cc_hardware.utils.constants.C"]], "cc_hardware.utils.constants": [[38, "module-cc_hardware.utils.constants"]], "pklhandler (class in cc_hardware.utils.file_handlers)": [[39, "cc_hardware.utils.file_handlers.PklHandler"]], "videowriter (class in cc_hardware.utils.file_handlers)": [[39, "cc_hardware.utils.file_handlers.VideoWriter"]], "__del__() (videowriter method)": [[39, "cc_hardware.utils.file_handlers.VideoWriter.__del__"]], "__len__() (pklhandler method)": [[39, "cc_hardware.utils.file_handlers.PklHandler.__len__"]], "append() (pklhandler method)": [[39, "cc_hardware.utils.file_handlers.PklHandler.append"]], "append() (videowriter method)": [[39, "cc_hardware.utils.file_handlers.VideoWriter.append"]], "cc_hardware.utils.file_handlers": [[39, "module-cc_hardware.utils.file_handlers"]], "close() (videowriter method)": [[39, "cc_hardware.utils.file_handlers.VideoWriter.close"]], "load() (pklhandler method)": [[39, "cc_hardware.utils.file_handlers.PklHandler.load"]], "load_all() (pklhandler static method)": [[39, "cc_hardware.utils.file_handlers.PklHandler.load_all"]], "update_index() (pklhandler method)": [[39, "cc_hardware.utils.file_handlers.PklHandler.update_index"]], "write() (pklhandler method)": [[39, "cc_hardware.utils.file_handlers.PklHandler.write"]], "cchardwareconfig (class in cc_hardware.utils)": [[40, "cc_hardware.utils.CCHardwareConfig"]], "registry (class in cc_hardware.utils)": [[40, "cc_hardware.utils.Registry"]], "cc_hardware.utils": [[40, "module-cc_hardware.utils"]], "create_from_registry() (registry class method)": [[40, "cc_hardware.utils.Registry.create_from_registry"], [45, "cc_hardware.utils.registry.Registry.create_from_registry"]], "get_object() (in module cc_hardware.utils)": [[40, "cc_hardware.utils.get_object"]], "register() (registry class method)": [[40, "cc_hardware.utils.Registry.register"], [45, "cc_hardware.utils.registry.Registry.register"]], "register() (in module cc_hardware.utils)": [[40, "cc_hardware.utils.register"]], "registered() (registry method)": [[40, "cc_hardware.utils.Registry.registered"], [45, "cc_hardware.utils.registry.Registry.registered"]], "registry() (registry method)": [[40, "cc_hardware.utils.Registry.registry"], [45, "cc_hardware.utils.registry.Registry.registry"]], "filehandler (class in cc_hardware.utils.logger)": [[41, "cc_hardware.utils.logger.FileHandler"]], "loggermaxlevelfilter (class in cc_hardware.utils.logger)": [[41, "cc_hardware.utils.logger.LoggerMaxLevelFilter"]], "tqdmstreamhandler (class in cc_hardware.utils.logger)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler"]], "__repr__() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.__repr__"]], "__repr__() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.__repr__"]], "acquire() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.acquire"]], "acquire() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.acquire"]], "addfilter() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.addFilter"]], "addfilter() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.addFilter"]], "cc_hardware.utils.logger": [[41, "module-cc_hardware.utils.logger"]], "close() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.close"]], "close() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.close"]], "createlock() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.createLock"]], "createlock() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.createLock"]], "emit() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.emit"]], "emit() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.emit"]], "filter() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.filter"]], "filter() (loggermaxlevelfilter method)": [[41, "cc_hardware.utils.logger.LoggerMaxLevelFilter.filter"]], "filter() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.filter"]], "flush() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.flush"]], "flush() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.flush"]], "format() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.format"]], "format() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.format"]], "handle() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.handle"]], "handle() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.handle"]], "handleerror() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.handleError"]], "handleerror() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.handleError"]], "release() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.release"]], "release() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.release"]], "removefilter() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.removeFilter"]], "removefilter() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.removeFilter"]], "setformatter() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.setFormatter"]], "setformatter() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.setFormatter"]], "setlevel() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.setLevel"]], "setlevel() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.setLevel"]], "setstream() (filehandler method)": [[41, "cc_hardware.utils.logger.FileHandler.setStream"]], "setstream() (tqdmstreamhandler method)": [[41, "cc_hardware.utils.logger.TqdmStreamHandler.setStream"]], "component (class in cc_hardware.utils.manager)": [[42, "cc_hardware.utils.manager.Component"]], "manager (class in cc_hardware.utils.manager)": [[42, "cc_hardware.utils.manager.Manager"]], "__enter__() (manager method)": [[42, "cc_hardware.utils.manager.Manager.__enter__"]], "__exit__() (manager method)": [[42, "cc_hardware.utils.manager.Manager.__exit__"]], "add() (manager method)": [[42, "cc_hardware.utils.manager.Manager.add"]], "cc_hardware.utils.manager": [[42, "module-cc_hardware.utils.manager"]], "close() (component method)": [[42, "cc_hardware.utils.manager.Component.close"]], "close() (manager method)": [[42, "cc_hardware.utils.manager.Manager.close"]], "components (manager property)": [[42, "cc_hardware.utils.manager.Manager.components"]], "is_okay (component property)": [[42, "cc_hardware.utils.manager.Component.is_okay"]], "is_okay (manager property)": [[42, "cc_hardware.utils.manager.Manager.is_okay"]], "run() (manager method)": [[42, "cc_hardware.utils.manager.Manager.run"]], "cc_hardware.utils.misc": [[43, "module-cc_hardware.utils.misc"]], "get_object() (in module cc_hardware.utils.misc)": [[43, "cc_hardware.utils.misc.get_object"]], "cc_hardware.utils.plotting": [[44, "module-cc_hardware.utils.plotting"]], "set_matplotlib_style() (in module cc_hardware.utils.plotting)": [[44, "cc_hardware.utils.plotting.set_matplotlib_style"]], "transient_gui() (in module cc_hardware.utils.plotting)": [[44, "cc_hardware.utils.plotting.transient_gui"]], "registry (class in cc_hardware.utils.registry)": [[45, "cc_hardware.utils.registry.Registry"]], "cc_hardware.utils.registry": [[45, "module-cc_hardware.utils.registry"]], "register() (in module cc_hardware.utils.registry)": [[45, "cc_hardware.utils.registry.register"]], "arduino_upload() (in module cc_hardware.utils.serial_utils)": [[46, "cc_hardware.utils.serial_utils.arduino_upload"]], "cc_hardware.utils.serial_utils": [[46, "module-cc_hardware.utils.serial_utils"]], "find_device_by_label() (in module cc_hardware.utils.serial_utils)": [[46, "cc_hardware.utils.serial_utils.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.serial_utils)": [[46, "cc_hardware.utils.serial_utils.find_ports"]], "optionsetting (class in cc_hardware.utils.setting)": [[47, "cc_hardware.utils.setting.OptionSetting"]], "rangesetting (class in cc_hardware.utils.setting)": [[47, "cc_hardware.utils.setting.RangeSetting"]], "setting (class in cc_hardware.utils.setting)": [[47, "cc_hardware.utils.setting.Setting"]], "__getstate__() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.__getstate__"]], "__getstate__() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.__getstate__"]], "__getstate__() (setting method)": [[47, "cc_hardware.utils.setting.Setting.__getstate__"]], "__setstate__() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.__setstate__"]], "__setstate__() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.__setstate__"]], "__setstate__() (setting method)": [[47, "cc_hardware.utils.setting.Setting.__setstate__"]], "__str__() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.__str__"]], "__str__() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.__str__"]], "__str__() (setting method)": [[47, "cc_hardware.utils.setting.Setting.__str__"]], "cc_hardware.utils.setting": [[47, "module-cc_hardware.utils.setting"]], "compose() (optionsetting class method)": [[47, "cc_hardware.utils.setting.OptionSetting.compose"]], "compose() (rangesetting class method)": [[47, "cc_hardware.utils.setting.RangeSetting.compose"]], "compose() (setting class method)": [[47, "cc_hardware.utils.setting.Setting.compose"]], "config (optionsetting attribute)": [[47, "cc_hardware.utils.setting.OptionSetting.config"]], "config (rangesetting attribute)": [[47, "cc_hardware.utils.setting.RangeSetting.config"]], "config (setting attribute)": [[47, "cc_hardware.utils.setting.Setting.config"]], "copy() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.copy"]], "copy() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.copy"]], "copy() (setting method)": [[47, "cc_hardware.utils.setting.Setting.copy"]], "create() (optionsetting class method)": [[47, "cc_hardware.utils.setting.OptionSetting.create"]], "create() (rangesetting class method)": [[47, "cc_hardware.utils.setting.RangeSetting.create"]], "create() (setting class method)": [[47, "cc_hardware.utils.setting.Setting.create"]], "create_from_registry() (optionsetting class method)": [[47, "cc_hardware.utils.setting.OptionSetting.create_from_registry"]], "create_from_registry() (rangesetting class method)": [[47, "cc_hardware.utils.setting.RangeSetting.create_from_registry"]], "create_from_registry() (setting class method)": [[47, "cc_hardware.utils.setting.Setting.create_from_registry"]], "create_instance() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.create_instance"]], "create_instance() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.create_instance"]], "create_instance() (setting method)": [[47, "cc_hardware.utils.setting.Setting.create_instance"]], "custom (optionsetting attribute)": [[47, "cc_hardware.utils.setting.OptionSetting.custom"]], "custom (rangesetting attribute)": [[47, "cc_hardware.utils.setting.RangeSetting.custom"]], "custom (setting attribute)": [[47, "cc_hardware.utils.setting.Setting.custom"]], "default_factory() (optionsetting class method)": [[47, "cc_hardware.utils.setting.OptionSetting.default_factory"]], "default_factory() (rangesetting class method)": [[47, "cc_hardware.utils.setting.RangeSetting.default_factory"]], "default_factory() (setting class method)": [[47, "cc_hardware.utils.setting.Setting.default_factory"]], "from_enum() (optionsetting class method)": [[47, "cc_hardware.utils.setting.OptionSetting.from_enum"]], "get_instance() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.get_instance"]], "get_instance() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.get_instance"]], "get_instance() (setting method)": [[47, "cc_hardware.utils.setting.Setting.get_instance"]], "instantiate() (optionsetting class method)": [[47, "cc_hardware.utils.setting.OptionSetting.instantiate"]], "instantiate() (rangesetting class method)": [[47, "cc_hardware.utils.setting.RangeSetting.instantiate"]], "instantiate() (setting class method)": [[47, "cc_hardware.utils.setting.Setting.instantiate"]], "load() (optionsetting class method)": [[47, "cc_hardware.utils.setting.OptionSetting.load"]], "load() (rangesetting class method)": [[47, "cc_hardware.utils.setting.RangeSetting.load"]], "load() (setting class method)": [[47, "cc_hardware.utils.setting.Setting.load"]], "merge_with() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.merge_with"]], "merge_with() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.merge_with"]], "merge_with() (setting method)": [[47, "cc_hardware.utils.setting.Setting.merge_with"]], "register() (optionsetting class method)": [[47, "cc_hardware.utils.setting.OptionSetting.register"]], "register() (rangesetting class method)": [[47, "cc_hardware.utils.setting.RangeSetting.register"]], "register() (setting class method)": [[47, "cc_hardware.utils.setting.Setting.register"]], "registered() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.registered"]], "registered() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.registered"]], "registered() (setting method)": [[47, "cc_hardware.utils.setting.Setting.registered"]], "registry() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.registry"]], "registry() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.registry"]], "registry() (setting method)": [[47, "cc_hardware.utils.setting.Setting.registry"]], "save() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.save"]], "save() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.save"]], "save() (setting method)": [[47, "cc_hardware.utils.setting.Setting.save"]], "to_yaml() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.to_yaml"]], "to_yaml() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.to_yaml"]], "to_yaml() (setting method)": [[47, "cc_hardware.utils.setting.Setting.to_yaml"]], "update() (optionsetting method)": [[47, "cc_hardware.utils.setting.OptionSetting.update"]], "update() (rangesetting method)": [[47, "cc_hardware.utils.setting.RangeSetting.update"]], "singletonabcmeta (class in cc_hardware.utils.singleton)": [[48, "cc_hardware.utils.singleton.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.singleton)": [[48, "cc_hardware.utils.singleton.SingletonMeta"]], "__call__() (singletonabcmeta method)": [[48, "cc_hardware.utils.singleton.SingletonABCMeta.__call__"]], "__call__() (singletonmeta method)": [[48, "cc_hardware.utils.singleton.SingletonMeta.__call__"]], "__instancecheck__() (singletonabcmeta method)": [[48, "cc_hardware.utils.singleton.SingletonABCMeta.__instancecheck__"]], "__subclasscheck__() (singletonabcmeta method)": [[48, "cc_hardware.utils.singleton.SingletonABCMeta.__subclasscheck__"]], "cc_hardware.utils.singleton": [[48, "module-cc_hardware.utils.singleton"]], "instance() (singletonabcmeta class method)": [[48, "cc_hardware.utils.singleton.SingletonABCMeta.instance"]], "instance() (singletonmeta class method)": [[48, "cc_hardware.utils.singleton.SingletonMeta.instance"]], "register() (singletonabcmeta method)": [[48, "cc_hardware.utils.singleton.SingletonABCMeta.register"]], "cc_hardware.utils.transformations": [[49, "module-cc_hardware.utils.transformations"]]}})