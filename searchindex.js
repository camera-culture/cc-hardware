Search.setIndex({"docnames": ["contributing", "examples/algo_nlos", "examples/camera_viewer", "examples/index", "examples/spad_dashboard", "examples/spad_gantry_capture", "examples/stepper_motor_controller", "index", "usage/api", "usage/api/cc_hardware/algos/algorithm/index", "usage/api/cc_hardware/algos/aruco/index", "usage/api/cc_hardware/algos/index", "usage/api/cc_hardware/drivers/cameras/camera/index", "usage/api/cc_hardware/drivers/cameras/flir/index", "usage/api/cc_hardware/drivers/cameras/index", "usage/api/cc_hardware/drivers/cameras/pkl/index", "usage/api/cc_hardware/drivers/cameras/realsense/index", "usage/api/cc_hardware/drivers/cameras/usb/index", "usage/api/cc_hardware/drivers/index", "usage/api/cc_hardware/drivers/safe_serial/index", "usage/api/cc_hardware/drivers/sensor/index", "usage/api/cc_hardware/drivers/spads/index", "usage/api/cc_hardware/drivers/spads/pkl/index", "usage/api/cc_hardware/drivers/spads/spad/index", "usage/api/cc_hardware/drivers/spads/spad_wrappers/index", "usage/api/cc_hardware/drivers/spads/tmf8828/index", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index", "usage/api/cc_hardware/drivers/stepper_motors/index", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index", "usage/api/cc_hardware/index", "usage/api/cc_hardware/tools/calibration/index", "usage/api/cc_hardware/tools/camera_viewer/index", "usage/api/cc_hardware/tools/dashboards/dash/index", "usage/api/cc_hardware/tools/dashboards/dashboard/index", "usage/api/cc_hardware/tools/dashboards/index", "usage/api/cc_hardware/tools/dashboards/matplotlib/index", "usage/api/cc_hardware/tools/dashboards/pyqtgraph/index", "usage/api/cc_hardware/tools/flash/index", "usage/api/cc_hardware/tools/index", "usage/api/cc_hardware/tools/jogger/index", "usage/api/cc_hardware/utils/constants/index", "usage/api/cc_hardware/utils/file_handlers/index", "usage/api/cc_hardware/utils/index", "usage/api/cc_hardware/utils/logger/index", "usage/api/cc_hardware/utils/manager/index", "usage/api/cc_hardware/utils/matplotlib/index", "usage/api/cc_hardware/utils/misc/asyncio_utils/index", "usage/api/cc_hardware/utils/misc/blocking_deque/index", "usage/api/cc_hardware/utils/misc/index", "usage/api/cc_hardware/utils/misc/misc/index", "usage/api/cc_hardware/utils/misc/serial_utils/index", "usage/api/cc_hardware/utils/misc/singleton/index", "usage/api/cc_hardware/utils/registry/index", "usage/api/cc_hardware/utils/setting/index", "usage/api/cc_hardware/utils/transformations/index", "usage/index"], "filenames": ["contributing.md", "examples/algo_nlos.md", "examples/camera_viewer.md", "examples/index.md", "examples/spad_dashboard.md", "examples/spad_gantry_capture.md", "examples/stepper_motor_controller.md", "index.md", "usage/api.md", "usage/api/cc_hardware/algos/algorithm/index.rst", "usage/api/cc_hardware/algos/aruco/index.rst", "usage/api/cc_hardware/algos/index.rst", "usage/api/cc_hardware/drivers/cameras/camera/index.rst", "usage/api/cc_hardware/drivers/cameras/flir/index.rst", "usage/api/cc_hardware/drivers/cameras/index.rst", "usage/api/cc_hardware/drivers/cameras/pkl/index.rst", "usage/api/cc_hardware/drivers/cameras/realsense/index.rst", "usage/api/cc_hardware/drivers/cameras/usb/index.rst", "usage/api/cc_hardware/drivers/index.rst", "usage/api/cc_hardware/drivers/safe_serial/index.rst", "usage/api/cc_hardware/drivers/sensor/index.rst", "usage/api/cc_hardware/drivers/spads/index.rst", "usage/api/cc_hardware/drivers/spads/pkl/index.rst", "usage/api/cc_hardware/drivers/spads/spad/index.rst", "usage/api/cc_hardware/drivers/spads/spad_wrappers/index.rst", "usage/api/cc_hardware/drivers/spads/tmf8828/index.rst", "usage/api/cc_hardware/drivers/spads/vl53l8ch/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/kinesis_stepper/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_controller/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_motor/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/stepper_system/index.rst", "usage/api/cc_hardware/drivers/stepper_motors/telemetrix_stepper/index.rst", "usage/api/cc_hardware/index.rst", "usage/api/cc_hardware/tools/calibration/index.rst", "usage/api/cc_hardware/tools/camera_viewer/index.rst", "usage/api/cc_hardware/tools/dashboards/dash/index.rst", "usage/api/cc_hardware/tools/dashboards/dashboard/index.rst", "usage/api/cc_hardware/tools/dashboards/index.rst", "usage/api/cc_hardware/tools/dashboards/matplotlib/index.rst", "usage/api/cc_hardware/tools/dashboards/pyqtgraph/index.rst", "usage/api/cc_hardware/tools/flash/index.rst", "usage/api/cc_hardware/tools/index.rst", "usage/api/cc_hardware/tools/jogger/index.rst", "usage/api/cc_hardware/utils/constants/index.rst", "usage/api/cc_hardware/utils/file_handlers/index.rst", "usage/api/cc_hardware/utils/index.rst", "usage/api/cc_hardware/utils/logger/index.rst", "usage/api/cc_hardware/utils/manager/index.rst", "usage/api/cc_hardware/utils/matplotlib/index.rst", "usage/api/cc_hardware/utils/misc/asyncio_utils/index.rst", "usage/api/cc_hardware/utils/misc/blocking_deque/index.rst", "usage/api/cc_hardware/utils/misc/index.rst", "usage/api/cc_hardware/utils/misc/misc/index.rst", "usage/api/cc_hardware/utils/misc/serial_utils/index.rst", "usage/api/cc_hardware/utils/misc/singleton/index.rst", "usage/api/cc_hardware/utils/registry/index.rst", "usage/api/cc_hardware/utils/setting/index.rst", "usage/api/cc_hardware/utils/transformations/index.rst", "usage/index.md"], "titles": ["Contributing", "Non-line-of-sight (NLOS) Detection", "Camera Viewer", "Examples", "SPAD Dashboard", "Stepper Gantry Collab", "Stepper Motor Controller", "Camera Culture Hardware Repo", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos.aruco</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.algos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.camera</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.flir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.realsense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.cameras.usb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.safe_serial</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.sensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.pkl</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.spad_wrappers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.tmf8828</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.spads.vl53l8ch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.kinesis_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_controller</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_motor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.stepper_system</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.drivers.stepper_motors.telemetrix_stepper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.camera_viewer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboards.dash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboards.dashboard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboards</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboards.matplotlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.dashboards.pyqtgraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.flash</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.tools.jogger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.constants</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.file_handlers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.matplotlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.asyncio_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.blocking_deque</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.serial_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.misc.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.registry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.setting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cc_hardware.utils.transformations</span></code>", "Reference"], "terms": {"repositori": [0, 7], "i": [0, 2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 42, 43, 45, 46, 47, 48, 51, 52, 53, 55, 56, 57], "fairli": [0, 12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "easi": 0, "so": [0, 4, 13, 43], "pleas": [0, 4], "see": [0, 18, 25, 27, 31, 47], "below": 0, "instruct": [0, 13], "how": [0, 1, 2, 3, 4, 5, 6, 18, 25, 27, 31, 47], "actual": [0, 4, 22, 43, 47], "make": [0, 46, 50, 51, 52], "thi": [0, 1, 2, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 58], "project": 0, "There": [0, 4, 5, 37], "ar": [0, 4, 5, 7, 10, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 37, 43, 45, 46, 47, 48, 52, 54], "two": [0, 5], "form": 0, "simpl": [0, 1, 2, 13, 16, 28], "ad": [0, 18, 25, 27, 31, 43, 47], "content": 0, "within": [0, 7, 12, 14, 18, 20, 21, 22, 23, 24, 25, 26, 37, 38, 46, 48, 57], "doc": 0, "folder": 0, "all": [0, 7, 9, 12, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 37, 38, 39, 43, 45, 46, 47, 48, 50, 52, 54, 56, 57], "written": [0, 18, 19, 45, 47], "markdown": 0, "convert": [0, 12, 14, 18, 20, 21, 23, 24, 25, 26, 32, 37, 38, 46, 48, 57], "html": 0, "through": [0, 32], "myst_pars": 0, "sphinx": 0, "To": [0, 13], "well": [0, 12, 14, 16, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "you": [0, 4, 5, 7, 12, 13, 14, 17, 18, 20, 21, 23, 24, 25, 26, 27, 30, 32, 37, 38, 43, 46, 47, 48, 57], "want": [0, 12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 43, 46, 47, 48, 57], "packag": [0, 3, 13, 47], "symlink": 0, "A": [0, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 42, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57], "conda": 0, "virtualenv": 0, "add": [0, 2, 4, 6, 9, 12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 43, 46, 47, 48, 57], "isol": 0, "python": [0, 4, 13], "environ": [0, 46, 51, 52], "reduc": 0, "conflict": 0, "amongst": 0, "It": [0, 1, 13, 16, 18, 19, 25, 26, 27, 28, 30, 37, 38, 45, 46, 47, 48, 55], "highli": 0, "recommend": 0, "us": [0, 1, 3, 4, 5, 6, 7, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 36, 37, 38, 39, 40, 43, 46, 47, 48, 51, 52, 54, 55, 56, 57], "one": [0, 9, 12, 13, 14, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 34, 37, 38, 42, 46, 48, 52, 55, 56, 57], "normal": 0, "git": [0, 7], "http": 0, "github": [0, 7], "com": [0, 7], "camera": [0, 1, 3, 5, 10, 18, 35, 48], "cultur": 0, "cc": [0, 7, 14, 21, 26, 27, 46, 48], "hardwar": [0, 14, 18, 21, 22, 26, 27, 28, 30, 34, 41, 46, 48], "cd": [0, 7], "sinc": [0, 12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "organ": [0, 25], "monorepo": [0, 7], "need": [0, 13, 46, 52, 55], "poetri": [0, 7], "The": [0, 4, 5, 6, 7, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 42, 43, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57], "develop": [0, 25], "mode": [0, 6, 25, 26, 34, 40, 47], "e": [0, 7, 12, 14, 17, 18, 20, 21, 23, 24, 25, 26, 27, 30, 31, 37, 38, 46, 48, 57], "symbol": 0, "link": 0, "immedi": 0, "reflect": 0, "pip": [0, 7, 13], "action": 0, "automat": [0, 5, 7], "site": [0, 13], "page": 0, "host": 0, "static": [0, 45], "updat": [0, 4, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 36, 37, 38, 39, 40, 57], "have": [0, 7, 18, 25, 27, 30, 31, 43, 47], "push": 0, "main": [0, 4, 6, 26, 37, 38], "branch": 0, "onc": [0, 17], "rebuild": 0, "ensur": [0, 12, 13, 14, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 30, 43, 45, 46, 47, 48, 51, 52, 55, 56], "error": [0, 9, 18, 19, 27, 28, 30, 43, 47], "befor": [0, 4, 18, 19, 28, 46, 47, 48], "do": [0, 1, 13, 26, 43, 47], "mai": [0, 9, 13, 18, 21, 23, 24, 27, 30, 43, 47], "get": [0, 9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 43, 45, 46, 47, 48, 51, 52, 56, 57], "an": [0, 1, 4, 9, 10, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57], "email": 0, "from": [0, 1, 2, 4, 6, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 37, 38, 42, 43, 45, 46, 47, 48, 51, 52, 53, 55, 56, 57], "someth": [0, 18, 19], "bad": 0, "happen": [0, 18, 19], "tag": 0, "exampl": [0, 4, 5, 6, 13, 18, 25, 27, 29, 31, 37, 42, 45, 46, 47, 48, 55, 56], "v3": 0, "0": [0, 4, 6, 13, 17, 22, 28, 44, 46, 48], "1": [0, 2, 4, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 37, 38, 45], "follow": [0, 4, 7, 13], "pkg": [0, 7], "algo": [0, 7, 8], "contain": [0, 7, 9, 10, 12, 13, 14, 15, 18, 25, 32, 48], "algorithm": [0, 7, 10, 11], "process": [0, 4, 7, 10, 20, 25, 26, 37, 38, 43, 47], "data": [0, 1, 4, 6, 7, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 36, 37, 38, 39, 40, 45, 46, 48, 49, 57], "driver": [0, 2, 4, 6, 7, 8, 37, 38], "interfac": [0, 7, 9, 13, 16, 18, 19, 25, 26, 27, 28, 30, 32, 40, 42, 43], "util": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 38, 39, 40, 42], "function": [0, 7, 10, 24, 26, 37, 38, 45, 48, 55], "class": [0, 4, 7, 53, 54, 58], "tool": [0, 4, 7, 8, 33], "work": [0, 7, 54, 58], "calibr": [0, 7, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 33, 42], "visual": [0, 4, 7, 36, 37, 39, 40, 49], "script": [0, 7, 25, 26, 46, 52, 54], "addit": [0, 9, 12, 14, 18, 19, 20, 21, 23, 24, 25, 26, 28, 32, 34, 37, 38, 46, 48, 52, 54, 55, 57], "licens": 0, "pyproject": [0, 7], "toml": [0, 7], "descript": [0, 6], "If": [0, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 52, 54, 56, 57], "plan": 0, "visit": 0, "correspond": [0, 25], "under": 0, "each": [0, 4, 7, 9, 12, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26, 34, 36, 37, 38, 39, 45, 46, 48, 57], "should": [0, 7, 9, 18, 27, 28, 29, 30, 37, 38, 43, 45, 47, 57], "readm": [0, 7], "md": [0, 7], "cc_hardwar": [0, 2, 3, 4, 6, 7, 8], "__init__": [0, 7, 55, 56], "py": [0, 7], "googl": 0, "": [0, 1, 6, 9, 12, 13, 14, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 37, 38, 44, 46, 47, 48, 57], "style": [0, 39, 40, 49], "These": [0, 32], "also": [0, 4, 18, 19, 27, 29, 30, 32, 42, 45, 46, 47, 52, 55, 56], "gener": [0, 5, 17, 57], "tutori": 0, "fix": [0, 40], "exist": [0, 6, 24, 45, 46, 47, 52, 55], "_static": 0, "persist": 0, "css": 0, "custom": [0, 12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 40, 43, 46, 47, 48, 57], "differ": [0, 18, 19, 25, 28, 37, 47, 57], "default": [0, 6, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 37, 38, 43, 45, 46, 47, 48, 49, 57], "furo": 0, "theme": 0, "imag": [0, 1, 10, 13, 15, 16], "favicon": 0, "etc": 0, "usag": [0, 46, 52, 55], "refer": [0, 4, 18, 21, 23, 24, 27, 28, 30, 32], "guid": 0, "eyesofcambrian": 0, "conf": 0, "set": [0, 4, 6, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 32, 36, 37, 38, 39, 40, 43, 46, 47, 48, 49], "relat": [0, 18, 21, 23], "extens": 0, "index": [0, 17, 22, 29, 45, 46, 50, 51, 52], "home": [0, 18, 27, 28, 30, 32], "try": 0, "maintain": [0, 12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "describ": [0, 7], "abov": 0, "tab": 0, "onli": [0, 9, 12, 13, 14, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 52, 54, 55, 56, 57], "singl": [0, 17, 18, 19, 21, 23, 25, 31, 45, 46, 52, 55], "background": [0, 13, 16, 17, 25, 26], "ha": [0, 9, 13, 18, 25, 27, 28, 30, 43, 47, 57], "multipl": [0, 7, 18, 19, 25, 26, 27, 28, 31, 32, 45, 46, 50, 52], "creat": [0, 6, 9, 12, 13, 14, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 42, 46, 47, 48, 52, 55, 56, 57], "titl": [0, 57], "same": [0, 18, 27, 28, 30, 46, 52, 55], "insert": 0, "name": [0, 6, 9, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 42, 43, 46, 47, 48, 51, 52, 54, 56, 57], "without": [0, 22, 45], "tabl": 0, "insid": 0, "restructuredtext": 0, "which": [0, 4, 5, 18, 27, 28, 30, 31, 32, 43, 46, 47, 48], "both": [0, 10, 16, 29, 42, 46, 55, 56], "advantag": 0, "disadvantag": 0, "allow": [0, 12, 14, 17, 18, 20, 21, 23, 24, 25, 26, 37, 38, 40, 43, 46, 47, 48, 52, 55, 57], "u": 0, "understand": 0, "languag": 0, "compil": 0, "down": [0, 18, 27, 28, 30, 32], "featur": [0, 28, 37], "librari": [0, 13, 16, 28, 32], "websit": 0, "wai": [0, 7, 57], "easiest": 0, "makefil": [0, 26], "bat": 0, "provid": [0, 3, 9, 12, 13, 14, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 40, 42, 45, 46, 47, 50, 51, 55, 56, 57, 58], "directli": [0, 17, 29, 32, 42, 46, 56], "necessari": [0, 9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 52, 55, 56, 57], "depend": [0, 18, 21, 23, 24, 27, 30, 43, 47], "run": [0, 2, 4, 6, 7, 9, 10, 13, 17, 25, 36, 37, 38, 39, 40, 46, 48], "command": [0, 7, 13, 18, 27, 28, 30, 42], "dev": 0, "clean": 0, "view": [0, 2, 35], "go": [0, 13], "browser": [0, 36], "open": [0, 10, 15, 47], "locat": [0, 18, 27, 28, 30], "autobuild": 0, "extrem": 0, "when": [0, 4, 7, 12, 14, 18, 20, 21, 23, 24, 25, 26, 27, 30, 37, 38, 43, 45, 46, 47, 48, 51, 57], "made": [0, 12, 13, 14, 18, 20, 21, 23, 24, 25], "pypi": 0, "tl": 0, "dr": 0, "demo": [1, 4, 5, 6], "show": [1, 2, 4, 5, 6, 10], "train": 1, "network": 1, "object": [1, 4, 6, 9, 12, 13, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 42, 45, 46, 48, 51, 56, 57], "around": [1, 12, 13, 14, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 37, 38, 46, 48, 51, 57], "corner": 1, "spad": [1, 2, 3, 5, 18, 36, 37, 38, 39, 40], "demonstr": [1, 2, 6], "captur": [1, 2, 13, 16, 17, 25, 43], "realsens": [1, 14, 18], "sensor": [1, 4, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 30, 34, 36, 37, 38, 39, 49, 57], "extract": [1, 45], "posit": [1, 9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 42, 45, 46, 48, 52, 55, 56, 57], "person": 1, "mlp": 1, "feed": [2, 35], "import": [2, 4, 6, 7, 37, 47, 48, 55, 56], "cv2": 2, "cameraconfig": [2, 12, 14, 16, 17, 18], "get_logg": [2, 4, 6, 47], "register_cli": [2, 4, 5], "run_cli": [2, 4], "def": [2, 4, 6, 13, 48, 55, 56], "camera_view": [2, 33, 42], "num_fram": [2, 37, 38], "int": [2, 4, 6, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 32, 36, 37, 38, 39, 43, 45, 46, 47, 48, 51, 52], "resolut": [2, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26], "tupl": [2, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26], "none": [2, 6, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 52, 54, 56, 57], "manag": [2, 4, 6, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 36, 38, 39, 40, 46, 57], "setup": [2, 4, 6, 28, 36, 37, 38, 39, 40, 46, 48], "_camera": 2, "create_from_config": [2, 4, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48], "loop": [2, 4, 6, 37, 38, 46, 48], "iter": [2, 6, 15, 18, 25, 27, 29, 31, 46, 48], "bool": [2, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 37, 38, 40, 45, 46, 48, 57], "info": [2, 4, 6, 47], "f": [2, 6], "finish": 2, "frame": [2, 4, 17, 36, 37, 38, 39, 40, 45], "return": [2, 4, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 42, 43, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57], "fals": [2, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 37, 38, 43, 45, 46, 47, 48, 57], "accumul": [2, 4, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 36, 37, 38, 39], "resiz": 2, "imshow": 2, "waitkei": 2, "0xff": 2, "ord": 2, "q": 2, "true": [2, 4, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 37, 38, 40, 43, 45, 46, 47, 48, 49, 52, 53, 57], "__name__": [2, 4, 6], "__main__": [2, 4, 6], "we": [3, 4, 7, 12, 14, 17, 18, 20, 21, 23, 24, 25, 26, 32, 37, 38, 46, 48, 57], "few": [3, 19], "dashboard": [3, 33, 42], "stepper": [3, 18, 27, 28, 29, 30, 31, 32], "gantri": [3, 18, 27, 31, 43], "collab": 3, "motor": [3, 18, 27, 28, 29, 30, 31, 32], "control": [3, 4, 5, 18, 27, 28, 29, 30, 31, 32, 43], "viewer": 3, "non": [3, 37, 38], "line": [3, 42], "sight": 3, "nlo": 3, "detect": [3, 10, 18, 27, 28, 30, 32], "can": [4, 5, 7, 9, 13, 17, 18, 19, 21, 23, 24, 25, 27, 29, 30, 31, 32, 37, 42, 43, 46, 47, 48, 56], "current": [4, 7, 17, 18, 27, 28, 29, 30, 32, 36, 37, 38, 39, 47, 57], "number": [4, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 32, 36, 37, 38, 39, 45, 46, 51, 52, 57], "support": [4, 7, 13, 17, 25, 28, 29, 37, 38, 42, 45, 46, 55, 56, 57], "document": [4, 18, 25, 27, 31], "more": [4, 5, 43, 47], "inform": [4, 47], "exampel": 4, "regist": [4, 9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 52, 55, 56, 57], "explicit": [4, 5], "callback": [4, 37, 38, 46, 50, 52], "In": [4, 7, 26], "case": 4, "explicitli": [4, 6, 32], "just": [4, 43, 46, 47, 48], "call": [4, 12, 14, 17, 18, 20, 21, 23, 24, 25, 26, 32, 37, 38, 43, 46, 47, 48, 52, 55, 57], "becom": 4, "help": [4, 6], "block": [4, 18, 27, 28, 30, 37, 38, 46, 51, 52], "file": [4, 6, 12, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 34, 37, 38, 39, 40, 45, 46, 47, 48, 57], "spadwrapp": [4, 24], "user": [4, 26, 37, 38, 40, 43, 47], "wrap": [4, 24, 43, 46, 47, 50, 51, 52], "spadmergewrapp": [4, 24], "merg": [4, 12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "neighbor": 4, "pixel": [4, 18, 21, 23, 24, 25, 26], "togeth": 4, "spadsensor": [4, 18, 21, 22, 23, 24, 25, 26, 37, 38], "merge_al": [4, 24], "spaddashboard": [4, 36, 37, 38, 39, 40], "group": 4, "wrapper": [4, 12, 13, 14, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 31, 32, 37, 38, 46, 48, 50, 51, 52, 57], "like": [4, 43], "spadmovingaveragewrapp": [4, 24], "window_s": [4, 24], "5": [4, 13], "spadsensorconfig": [4, 18, 21, 23, 24, 25, 26], "spaddashboardconfig": [4, 36, 37, 38, 39, 40], "my_callback": [4, 37], "logger": [4, 6, 46], "interv": [4, 45], "arg": [4, 6, 9, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 42, 46, 47, 48, 51, 52, 55, 56, 57], "instanc": [4, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 43, 46, 47, 48, 52, 55, 56, 57], "global": 4, "10": [4, 6, 13, 18, 19, 45, 55], "up": [4, 18, 19, 36, 37, 38, 39, 40, 43, 46, 47, 52, 53], "configur": [4, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 30, 36, 37, 38, 39, 40, 46, 48], "_sensor": 4, "user_callback": [4, 37, 38], "_dashboard": 4, "create_from_registri": [4, 6, 9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 56, 57], "config": [4, 12, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 36, 37, 38, 39, 40, 46, 48, 57], "unus": 4, "here": [4, 9, 32], "histogram": [4, 18, 21, 22, 23, 24, 25, 26, 36, 37, 38, 39, 40], "along": 5, "separ": [5, 7], "api": [5, 12, 14, 18, 20, 21, 23, 24, 25, 26, 28, 37, 38, 46, 48, 57, 59], "first": [5, 45], "v1": 5, "argpars": [5, 6], "code": [5, 12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "instanti": [5, 9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 56, 57], "second": [5, 18, 19], "v2": 5, "decor": [5, 46, 52, 55, 56], "cli": 5, "defin": [6, 12, 14, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 37, 38, 46, 48, 57], "initi": [6, 9, 13, 16, 17, 20, 28, 32, 40], "itself": 6, "system": [6, 18, 21, 23, 27, 28, 31, 43, 47], "time": [6, 17, 18, 19, 25, 26, 37, 39, 40, 57], "datetim": 6, "pathlib": 6, "path": [6, 7, 9, 10, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 40, 42, 45, 46, 48, 52, 53, 56, 57], "stepper_motor": [6, 18], "steppermotorsystem": [6, 18, 27, 28, 31, 32], "stepper_control": [6, 18, 27], "snakesteppercontrol": [6, 29], "file_handl": [6, 46], "pklhandler": [6, 45], "uncom": 6, "debug": 6, "level": [6, 43, 47], "log": [6, 18, 19, 43, 47], "now": 6, "logdir": 6, "strftime": 6, "y": [6, 26, 37, 38, 39], "m": [6, 44], "d": 6, "h": 6, "stepper_system_nam": 6, "str": [6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 42, 43, 45, 46, 47, 48, 51, 52, 56, 57], "singledrive1axisgantri": [6, 32], "stepper_port": 6, "controller_config": 6, "list": [6, 10, 12, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 37, 38, 45, 46, 48, 50, 52, 54, 57], "dict": [6, 10, 12, 13, 14, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 37, 38, 46, 48, 57], "x": [6, 26], "rang": [6, 18, 21, 23, 24, 25, 26, 34, 57], "16": 6, "sampl": [6, 12, 13, 14, 15, 16, 18, 21, 22, 23, 24, 25, 26], "output_pkl": 6, "pkl": [6, 14, 18, 21, 45], "mkdir": 6, "parent": [6, 18, 19, 40], "exist_ok": 6, "stepper_system": [6, 18, 27, 28, 32], "port": [6, 18, 19, 25, 26, 28, 32, 34, 46, 52, 54], "assert": [6, 55], "output": [6, 25, 39, 40, 43, 45, 47], "alreadi": 6, "writer": [6, 10, 45], "kwarg": [6, 9, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 37, 38, 42, 46, 47, 48, 51, 52, 54, 55, 56, 57], "start": [6, 17, 18, 19, 26, 27, 28, 30, 45, 48], "po": 6, "get_posit": [6, 29], "move_to": [6, 18, 27, 28, 30, 31, 32], "append": [6, 45, 46, 47, 51, 52], "sleep": 6, "25": 6, "parser": 6, "argumentpars": 6, "add_argu": 6, "parse_arg": 6, "instal": 7, "clone": 7, "publish": 7, "io": 7, "subdirectori": 7, "directori": [7, 12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 47, 48, 57], "done": 7, "package_nam": 7, "module_nam": 7, "implement": [9, 13, 16, 17, 18, 19, 25, 27, 28, 30, 34, 36, 37, 39, 40, 43, 46, 52, 55], "registri": [9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 42, 46, 48, 57], "abc": [9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 38, 39, 40, 46, 48, 52, 55], "abstract": [9, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30, 37, 38, 46, 48, 52, 55], "result": [9, 10, 46, 50, 52], "subclass": [9, 18, 20, 27, 29, 30, 37, 38, 42, 43, 46, 47, 52, 55, 56], "paramet": [9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 42, 45, 46, 48, 51, 52, 54, 55, 56, 57], "method": [9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 42, 43, 45, 46, 47, 48, 50, 52, 56, 57], "specifi": [9, 10, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 27, 28, 30, 31, 32, 37, 43, 45, 46, 47, 51, 52], "type": [9, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 34, 37, 38, 42, 46, 48, 52, 53, 56, 57], "properti": [9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 37, 38, 46, 48], "is_okai": [9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 30, 32, 37, 38, 46, 48], "okai": [9, 10, 46, 48], "otherwis": [9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 42, 43, 46, 47, 48, 56, 57], "either": [9, 18, 19, 26], "been": [9, 25, 43, 47, 57], "properli": [9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 30, 45, 46, 48], "encount": [9, 43, 47], "close": [9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 37, 38, 43, 45, 46, 47, 48], "releas": [9, 10, 12, 14, 17, 18, 20, 21, 23, 24, 27, 28, 30, 37, 38, 43, 46, 47, 48], "ani": [9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 51, 52, 53, 56, 57], "resourc": [9, 10, 12, 14, 15, 17, 18, 20, 21, 23, 24, 27, 28, 30, 37, 38, 43, 46, 47, 48], "overrid": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 52, 55, 57], "own": [9, 13, 18, 25, 27, 31], "classmethod": [9, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 52, 55, 56, 57], "class_typ": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 56, 57], "class_nam": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 56, 57], "module_path": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 56, 57], "friend": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 56, 57], "self": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 42, 43, 45, 46, 47, 48, 52, 55, 56, 57], "lazi": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 56, 57], "load": [9, 12, 13, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 45, 46, 48, 56, 57], "string": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 51, 52, 56, 57], "anoth": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 56, 57], "associ": [9, 10, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 56, 57], "perform": [9, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 34, 37, 38, 42, 46, 48, 52, 53, 56, 57], "argument": [9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 42, 45, 46, 48, 52, 54, 55, 56, 57], "pass": [9, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 37, 38, 42, 43, 46, 47, 48, 52, 54, 56, 57], "constructor": [9, 12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 34, 37, 38, 42, 46, 47, 48, 52, 55, 56, 57], "keyword": [9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 42, 45, 46, 48, 52, 54, 55, 56, 57], "request": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 46, 48, 51, 52, 56, 57], "dictionari": [9, 10, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 42, 46, 48, 56, 57], "map": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 38, 42, 43, 46, 47, 48, 56, 57], "enumer": [9, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 42, 46, 48, 56, 57], "local": 10, "marker": 10, "arucolocalizationalgorithm": 10, "aruco_dict": 10, "marker_s": 10, "origin_id": 10, "num_sampl": [10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26], "marker_id": 10, "comput": [10, 18, 27, 30], "pose": 10, "rel": [10, 18, 27, 28, 30, 32], "origin": [10, 12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 43, 46, 47, 48, 57], "save": [10, 12, 14, 18, 20, 21, 23, 24, 25, 26, 34, 37, 38, 39, 40, 46, 48, 57], "filenam": [10, 34, 39, 47], "return_imag": 10, "option": [10, 12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 28, 37, 38, 45, 46, 48, 57], "whether": [10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 37, 38, 40, 46, 48, 57], "displai": [10, 37, 38, 40], "video": [10, 45], "check": [10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 32, 37, 38, 46, 48, 52, 53, 54], "aruco": 11, "base": [12, 13, 14, 18, 20, 21, 22, 23, 25, 27, 29, 30, 36, 37, 38, 39, 40, 42, 45, 46, 48, 52, 53, 55, 56, 57], "sensorconfig": [12, 13, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26], "hydra_config": [12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 36, 38, 39, 40, 46, 48, 57], "hydracontainerconfig": [12, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 36, 37, 38, 39, 40, 46, 48, 57], "retriev": [12, 13, 14, 17, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 51, 52, 55], "omegaconf": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "dictconfig": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "uninstanti": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "nest": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "proper": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "serial": [12, 14, 18, 19, 20, 21, 23, 24, 25, 26, 37, 38, 43, 46, 47, 48, 52, 54, 57], "deseri": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "print": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 45, 46, 48, 56, 57], "yaml": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "specif": [12, 13, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 30, 32, 34, 37, 38, 45, 46, 48, 50, 52, 57], "logic": [12, 14, 15, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "where": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 45, 46, 48, 51, 52, 57], "store": [12, 13, 14, 16, 17, 18, 20, 21, 23, 24, 25, 26, 37, 38, 43, 45, 46, 48, 57], "necessarili": [12, 14, 18, 20, 21, 23, 24, 25, 26, 29, 37, 38, 42, 46, 48, 56, 57], "_convert_": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "listconfig": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "convers": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "mean": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "structur": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "dataclass": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "equival": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "compos": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "config_dir": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "config_nam": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "return_hydra_config": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "hydra": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 52, 53, 57], "hydraconfig": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "pattern": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 52, 55, 57], "instantiate_kwarg": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "select": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "merge_with": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "other": [12, 14, 18, 20, 21, 23, 24, 25, 26, 27, 30, 31, 37, 38, 43, 46, 47, 48, 57], "copi": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "new": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "deepcopi": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "__getstate__": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "__setstate__": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "slow": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "pickl": [12, 14, 15, 18, 20, 21, 23, 24, 25, 26, 27, 31, 37, 38, 45, 46, 48, 57], "unpickl": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "header": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "top": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "to_yaml": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "some": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 57], "represent": [12, 14, 18, 20, 21, 23, 24, 25, 26, 37, 38, 46, 48, 51, 52, 57], "attribut": [12, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31, 37, 38, 46, 47, 48, 51, 52, 57], "ll": [12, 14, 18, 20, 21, 23, 24, 25, 26, 32, 37, 38, 46, 48, 57], "state": [12, 14, 18, 20, 21, 23, 24, 25, 26, 27, 28, 30, 32, 37, 38, 46, 48, 57], "__str__": [12, 14, 18, 20, 21, 23, 24, 25, 26, 27, 31, 37, 38, 46, 48, 57], "compon": [12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 36, 37, 38, 39, 40, 46, 48], "extend": [12, 14, 18], "averag": [12, 13, 14, 18, 21, 22, 23, 24, 25, 26], "np": [12, 13, 14, 15, 16, 17, 18, 20, 22, 25, 26, 36, 37, 38, 39, 45], "ndarrai": [12, 13, 14, 15, 16, 17, 18, 20, 22, 25, 26, 36, 37, 38, 39, 45], "arrai": [12, 13, 14, 15, 18, 25], "distortion_coeffici": [12, 13, 14, 15, 16, 17, 18], "numpi": [12, 13, 14, 15, 16, 17, 18], "distort": [12, 13, 14, 15, 16, 17, 18], "coeffici": [12, 13, 14, 15, 16, 17, 18], "repres": [12, 13, 14, 15, 18, 21, 23, 24, 25, 26, 27, 28, 30], "intrinsic_matrix": [12, 13, 14, 15, 16, 17, 18], "intrins": [12, 13, 14, 15, 16, 17, 18], "matrix": [12, 13, 14, 15, 16, 17, 18], "3x3": [12, 13, 14, 15, 18, 25], "width": [12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25], "height": [12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25], "chang": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 43, 47], "given": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 29, 34, 46, 52, 54], "via": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 28], "sent": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26], "kei": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 29, 32, 40, 45, 57], "must": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 27, 30, 43, 46, 47, 48], "match": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26], "field": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26], "wa": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 43, 47, 57], "were": [12, 13, 14, 18, 20, 21, 23, 24, 25], "oper": [12, 14, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 32, 37, 38, 46, 48], "__del__": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26, 45], "destructor": [12, 13, 14, 18, 20, 21, 23, 24, 25, 26], "t": [12, 13, 14, 17, 18, 20, 21, 23, 24, 25, 26, 27, 30, 37, 38, 46, 47, 48], "flircamera": 13, "singleton": [13, 16, 46, 52], "grasshopperflircamera": 13, "special": 13, "grasshopp": 13, "model": 13, "inherit": [13, 15, 18, 21, 22, 23, 25, 26, 29, 42, 46, 56], "036": 13, "145": 13, "001": 13, "155": 13, "1815": 13, "1817": 13, "753": 13, "721": 13, "299": 13, "531": 13, "352": 13, "spinnak": 13, "usual": [13, 32], "As": 13, "write": [13, 18, 19, 45, 47], "2024": 13, "09": 13, "21": 13, "3": [13, 18, 25, 27, 31, 43, 47], "newer": 13, "version": [13, 43, 47], "step": [13, 18, 27, 30, 32, 40], "after": [13, 46, 48], "re": 13, "tar": 13, "xvzf": 13, "spinnaker_python": 13, "cp": 13, "o": [13, 43, 47], "arch": 13, "gz": 13, "whl": 13, "But": 13, "fail": 13, "replac": [13, 43, 47], "your": 13, "For": 13, "11": 13, "m2": 13, "mac": 13, "would": [13, 57], "turn": 13, "4": 13, "172": 13, "cp310": 13, "macosx_13_0_arm64": 13, "mv": 13, "cp311": 13, "And": 13, "_pyspin": 13, "cpython": 13, "310": 13, "darwin": 13, "311": 13, "offici": 13, "caus": 13, "issu": [13, 18, 27, 28, 30, 47], "risk": 13, "camera_index": [13, 17], "thread": [13, 16, 17, 18, 19, 37, 38, 43, 46, 47, 51, 52], "them": [13, 16, 17, 18, 25, 27, 28, 30, 31, 32, 57], "queue": [13, 16, 17], "avail": [13, 15, 18, 19, 26, 37, 46, 52, 54], "stream": [13, 16, 47], "stop": [13, 16, 17, 18, 19, 25, 26, 46, 48], "deiniti": [13, 16], "flir": [14, 18], "modul": [14, 18, 21, 27, 38, 42, 46, 58], "pre": [15, 22, 26], "record": [15, 22, 43, 45, 47], "pklcamera": 15, "pkl_path": 15, "read": [15, 18, 19, 45, 57], "exhaust": 15, "still": 15, "activ": [15, 25], "placehold": 15, "potenti": 15, "cleanup": [15, 46, 48], "intel": 16, "devic": [16, 18, 19, 26, 28, 34, 41, 46, 52, 54], "realsensecamera": 16, "pyrealsens": 16, "d435i": 16, "color": [16, 18, 25, 27, 31], "depth": [16, 17, 25], "return_depth": [16, 17], "realsenseconfig": 16, "rgb": [16, 17], "r": 16, "return_rgb": [16, 17], "return_ir": 16, "readi": 16, "rais": [16, 17, 18, 19, 25, 26, 27, 31, 43], "notimplementederror": [16, 17, 43], "yet": [16, 17], "usbcameraconfig": 17, "variabl": [17, 18, 20, 25, 26, 37, 38, 57], "identifi": 17, "g": [17, 18, 27, 30], "start_capture_onc": 17, "keep": 17, "until": [17, 18, 19, 27, 28, 30, 37, 38, 46, 48], "exposur": 17, "desir": 17, "valu": [17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 43, 45, 46, 47, 48, 50, 51, 52, 55, 56, 57], "note": [17, 32], "vari": [17, 18, 21, 23, 24], "platform": 17, "force_autoexposur": 17, "attempt": [17, 18, 19, 32, 51], "enabl": [17, 25, 26, 32], "auto": [17, 32], "Not": 17, "usbcamera": 17, "ignor": [17, 24, 43, 47], "don": [17, 18, 27, 30], "known": [17, 18, 27, 28, 30], "fallback": 17, "tmf8828": [18, 21, 34], "vl53l8ch": [18, 21], "kinesis_stepp": [18, 27], "telemetrix_stepp": [18, 27], "safe_seri": 18, "safeseri": [18, 19], "lock_typ": [18, 19], "multiprocess": [18, 19], "safe": [18, 19, 27, 28, 30, 32, 46, 51, 52], "synchron": [18, 19, 46, 50, 51, 52], "lock": [18, 19, 43, 47], "handl": [18, 19, 20, 26, 40, 43, 46, 47, 48], "format": [18, 19, 43, 47], "wait": [18, 19, 27, 28, 30, 32, 46, 51, 52], "reset": [18, 19, 20, 25, 26], "establish": [18, 19, 27, 28, 30], "connect": [18, 19, 22, 25, 26, 27, 28, 30, 32], "2": [18, 19, 25, 27, 31, 43, 46, 47, 50, 52], "forc": [18, 19], "found": [18, 19], "invalid": [18, 19], "warn": [18, 19], "size": [18, 19, 24, 37, 38], "byte": [18, 19, 26], "wait_for_start_talk": [18, 19], "timeout": [18, 19, 25], "talk": [18, 19], "success": [18, 19, 26], "float": [18, 19, 25, 27, 28, 29, 30, 31, 32, 37, 38], "maximum": [18, 19, 28, 37, 38, 47, 57], "give": [18, 19], "receiv": [18, 19, 25, 26, 27, 28, 30], "wait_for_stop_talk": [18, 19], "write_and_wait_for_start_talk": [18, 19], "tri": [18, 19], "resend": [18, 19], "write_and_wait_for_stop_talk": [18, 19], "return_data": [18, 19], "upon": [18, 19], "statu": [18, 19, 27, 30], "write_and_wait_for_start_and_stop_talk": [18, 19], "event": [18, 19, 40, 43, 47], "__getattr__": [18, 19, 27, 28, 31, 32, 46, 51, 52], "forward": [18, 19], "access": [18, 19, 25, 27, 28, 31, 32, 43, 45, 46, 47, 51, 52], "appli": [18, 19], "prevent": [18, 19], "concurr": [18, 19], "photon": [18, 21, 23], "avalanch": [18, 21, 23], "diod": [18, 21, 23], "design": [18, 21, 23, 24], "measur": [18, 21, 23, 24, 25], "collect": [18, 21, 23, 24, 25, 27, 31], "analyz": [18, 21, 23], "sum": [18, 21, 23, 24], "num_bin": [18, 21, 22, 23, 24, 25, 26], "bin": [18, 21, 22, 23, 24, 25, 26, 37, 38], "indic": [18, 21, 23, 24, 25], "discret": [18, 21, 23, 24], "total": [18, 21, 23, 24, 29], "distanc": [18, 21, 23, 24], "equal": [18, 21, 23, 24], "multipli": [18, 21, 23, 24], "spatial": [18, 21, 23, 24], "point": [18, 21, 23, 24, 27, 28, 30], "respect": [18, 21, 23, 24], "dimens": [18, 21, 23, 24], "dummysteppermotor": [18, 27, 30], "dummi": [18, 27, 30, 31], "doe": [18, 27, 30, 31, 43, 46, 52, 53, 57], "noth": [18, 27, 30, 31, 43], "test": [18, 22, 27, 30], "ax": [18, 27, 28, 30, 31, 32], "attach": [18, 27, 28, 30, 31, 32, 43, 47], "steppermotor": [18, 27, 28, 30, 31, 32], "unifi": [18, 27, 30, 32], "common": [18, 22, 25, 26, 27, 30], "move": [18, 24, 27, 28, 29, 30, 31, 32], "includ": [18, 26, 27, 30, 55], "compat": [18, 27, 30, 57], "expect": [18, 26, 27, 30], "behavior": [18, 22, 27, 30, 46, 51, 52], "shut": [18, 27, 28, 30, 32], "power": [18, 27, 28, 30], "avoid": [18, 27, 28, 30], "damag": [18, 27, 28, 30], "memori": [18, 27, 28, 30, 45], "leak": [18, 27, 28, 30], "its": [18, 20, 27, 28, 29, 30, 32, 42, 46, 52, 54, 56], "zero": [18, 27, 28, 30, 32], "predefin": [18, 27, 28, 30], "could": [18, 27, 28, 30, 43, 47], "involv": [18, 27, 28, 30], "limit": [18, 27, 28, 30, 37, 38, 39], "switch": [18, 27, 28, 30], "trigger": [18, 27, 28, 30], "absolut": [18, 27, 28, 30, 32], "target": [18, 27, 28, 30, 32], "interpret": [18, 27, 30], "characterist": [18, 27, 30], "angl": [18, 27, 30], "move_bi": [18, 27, 28, 30, 31, 32], "relative_posit": [18, 27, 28, 30, 32], "amount": [18, 27, 28, 30, 32], "degre": [18, 27, 30], "unit": [18, 27, 28, 30, 31], "wait_for_mov": [18, 27, 28, 30, 32], "complet": [18, 25, 27, 28, 30, 32], "execut": [18, 27, 28, 30, 36, 37, 39, 40], "reach": [18, 27, 28, 30], "motion": [18, 27, 28, 30], "healthi": [18, 27, 28, 30, 32], "verifi": [18, 27, 28, 30], "whole": [18, 27, 28, 31], "multi": [18, 25, 27, 28, 31, 46, 51, 52], "axi": [18, 27, 28, 29, 31, 32, 37, 38, 39], "rotat": [18, 27, 31], "stage": [18, 27, 31], "steppermotorsystemaxi": [18, 27, 28, 31], "passthrough": [18, 27, 28, 31, 32], "underli": [18, 27, 28, 31, 32, 43, 46, 47, 51, 52], "kwd": [18, 25, 26, 27, 31], "pair": [18, 25, 27, 31], "enum": [18, 25, 26, 27, 31, 57], "red": [18, 25, 27, 31], "blue": [18, 25, 27, 31], "green": [18, 25, 27, 31], "lookup": [18, 25, 27, 31, 43, 47], "over": [18, 25, 27, 31], "know": [18, 25, 27, 31], "mani": [18, 25, 27, 29, 31, 42, 46, 56], "member": [18, 25, 26, 27, 31], "thei": [18, 25, 27, 31, 43, 47], "len": [18, 25, 27, 31], "detail": [18, 25, 27, 31], "__repr__": [18, 25, 26, 27, 31, 43, 46, 47, 51, 52], "repr": [18, 25, 26, 27, 31, 43, 47], "__dir__": [18, 25, 26, 27, 31], "public": [18, 25, 26, 27, 31], "interest": [18, 25, 26, 27, 31, 43, 47], "__format__": [18, 25, 26, 27, 31], "format_spec": [18, 25, 26, 27, 31], "formatt": [18, 25, 26, 27, 31, 43, 47], "empti": [18, 25, 26, 27, 29, 31, 46, 51, 52], "typeerror": [18, 25, 26, 27, 31], "__hash__": [18, 25, 26, 27, 31], "hash": [18, 25, 26, 27, 31], "__reduce_ex__": [18, 25, 26, 27, 31], "proto": [18, 25, 26, 27, 31], "helper": [18, 25, 26, 27, 31, 57], "commun": [19, 25, 26], "conveni": 19, "sensordata": [20, 25, 26], "row": [20, 24, 25, 26], "get_data": [20, 25, 26], "pklspadsensor": 22, "fake": 22, "simul": 22, "pklspadsensorconfig": 22, "return_entri": 22, "entri": 22, "next": 22, "Will": 22, "handler": [22, 43, 45, 47], "op": 22, "spadwrapperconfig": 24, "expos": 24, "simplifi": 24, "spadmergewrapperconfig": 24, "merge_row": 24, "merge_col": 24, "column": [24, 26], "spadmovingaveragewrapperconfig": 24, "window": [24, 28, 40], "8x8": [25, 26], "zone": 25, "flight": [25, 26], "am": 25, "wide": 25, "vcsel": 25, "4x4": [25, 26], "3x6": 25, "multizon": 25, "tmf8828sensor": 25, "tmf882x": [25, 34], "arduino": [25, 46, 52, 54], "shield": 25, "spadid": [25, 34], "get_num_pixel": 25, "id": [25, 32], "get_num_channel": 25, "channel": [25, 28, 37, 38, 39], "get_active_channels_per_subcaptur": 25, "per": [25, 32], "subcaptur": 25, "get_resolut": 25, "rangemod": [25, 34], "tmf8828config": 25, "spad_id": [25, 34], "range_mod": [25, 34], "long": [25, 34], "short": [25, 34], "tmf8828histogram": 25, "clear": 25, "temporari": 25, "intern": [25, 43, 47], "has_data": [25, 26], "across": [25, 55], "high": 25, "baudrat": [25, 26], "baud": [25, 26], "rate": [25, 26], "framework": 26, "rangingmod": 26, "vl53l8chconfig": 26, "uint16_t": 26, "ranging_mod": 26, "ranging_frequency_hz": 26, "frequenc": 26, "hz": 26, "integration_time_m": 26, "integr": 26, "millisecond": 26, "cnh_start_bin": 26, "cnh": 26, "cnh_num_bin": 26, "cnh_subsampl": 26, "subsampl": 26, "agg_start_x": 26, "aggreg": 26, "coordin": 26, "agg_start_i": 26, "agg_merge_x": 26, "agg_merge_i": 26, "agg_col": 26, "agg_row": 26, "add_back_ambi": 26, "flag": 26, "back": 26, "ambient": 26, "light": [26, 44], "preprocess": 26, "remov": [26, 43, 47], "calcul": 26, "never": 26, "pack": 26, "vl53l8chsharedconfig": 26, "share": [26, 46, 51, 52, 55], "vl53l8chconfig4x4": 26, "vl53l8chconfig8x8": 26, "vl53l8chhistogram": 26, "num_pixel": 26, "vl53l8chsensor": 26, "acquisit": [26, 43, 47], "individu": [26, 57], "grid": 26, "kinesi": 28, "kinesissteppermotor": 28, "thorlab": 28, "c": [28, 44], "pylablib": 28, "throlab": 28, "kinesismotor": 28, "linux": 28, "is_rack_system": 28, "scale": 28, "movement": 28, "part": 28, "rack": 28, "factor": 28, "max_veloc": 28, "acceler": 28, "lower_limit": 28, "upper_limit": 28, "clip_at_limit": 28, "initial_posit": 28, "reference_posit": 28, "check_hom": 28, "veloc": 28, "lower": 28, "upper": 28, "clip": 28, "dure": [28, 43, 47], "opposit": [28, 32], "successfulli": 28, "kinesisrotationstag": 28, "kinesissteppermotorsystem": 28, "azimuthelevationsystem": 28, "azimuth": 28, "elev": 28, "steppercontrol": 29, "plu": [29, 42, 46, 56], "factori": [29, 42, 46, 56, 57], "direct": [29, 32, 42, 46, 56], "registr": [29, 42, 46, 56], "myregistri": [29, 42, 46, 56], "foo": [29, 42, 46, 56], "bar": [29, 42, 46, 56], "my_modul": [29, 42, 46, 56], "submodul": [29, 56], "axis_config": 29, "exce": 29, "dummysteppersystem": 31, "telemetrixsteppermotor": 32, "telemetrixsteppermotorsystem": 32, "telemetrix": 32, "cncshield": 32, "board": 32, "distance_pin": 32, "direction_pin": 32, "enable_pin": 32, "cm_per_rev": 32, "steps_per_rev": 32, "speed": [32, 44], "flip_direct": 32, "effect": 32, "set_current_posit": 32, "pin": 32, "centimet": 32, "revolut": 32, "cm": 32, "set_target_position_cm": 32, "relative_cm": 32, "set_absolute_target_position_cm": 32, "position_cm": 32, "cm_to_rev": 32, "revs_to_cm": 32, "rev": 32, "stepper_": 32, "motorx": 32, "target_posit": 32, "equat": 32, "_board": 32, "stepper_target_posit": 32, "requir": [32, 46, 51, 52], "input": [32, 45], "telemetrixsteppermotorx": 32, "telemetrixsteppermotori": 32, "telemetrixsteppermotorz": 32, "telemetrixsteppermotorxrevers": 32, "telemetrixsteppermotoryrevers": 32, "telemetrixsteppermotorzrevers": 32, "dualdrive2axisgantry_x": 32, "dualdrive2axisgantry_y1": 32, "dualdrive2axisgantry_y2": 32, "dualdrive2axisgantri": 32, "singledrive1axisgantry_x": 32, "singledrive1axisgantry_i": 32, "dash": [33, 37, 38, 42], "matplotlib": [33, 37, 38, 42, 46], "pyqtgraph": [33, 37, 38, 42], "flash": [33, 42], "jogger": [33, 42], "tmf8828_calibr": 34, "id6": 34, "id15": 34, "four": 34, "legaci": 34, "twice": 34, "dashdashboardconfig": 36, "dashdashboard": [36, 37], "plotli": [36, 37], "web": [36, 37], "layout": [36, 39, 40], "figur": 36, "applic": [36, 40, 43, 47, 55], "n_interv": 36, "existing_fig": 36, "real": [37, 39, 40], "three": 37, "matplotlibdashboard": [37, 39], "pyqtgraphdashboard": [37, 40], "000": [37, 38], "min_bin": [37, 38], "minimum": [37, 38, 57], "max_bin": [37, 38], "autoscal": [37, 38], "ylim": [37, 38], "channel_mask": [37, 38], "callabl": [37, 38, 43, 45, 46, 47, 48], "accept": [37, 38, 46, 48], "independ": [37, 38], "capabl": [37, 38], "being": [37, 38, 43, 46, 47, 52, 55], "save_anim": 39, "anim": 39, "funcanim": 39, "matplotlibdashboardconfig": 39, "plot": [39, 40, 49], "adjust_ylim": 39, "adjust": 39, "pyqtgraphdashboardconfig": 40, "dashboardwindow": 40, "panel": 40, "right": 40, "init_ui": 40, "keypressev": 40, "press": 40, "exit": 40, "fullscreen": 40, "headless": 40, "firmwar": 41, "toolregistri": 42, "joystick": 43, "outputcaptur": 43, "buffer": [43, 45], "stdout": 43, "stderr": 43, "logbufferhandl": 43, "filter": [43, 45, 47], "emit": [43, 47], "whatev": 43, "take": [43, 45], "intend": 43, "createlock": [43, 47], "acquir": [43, 47], "setlevel": [43, 47], "condition": [43, 47], "emiss": [43, 47], "setformatt": [43, 47], "fmt": [43, 47], "flush": [43, 45, 47], "tidi": [43, 47], "_handler": [43, 47], "overridden": [43, 47, 57], "handleerror": [43, 47], "occur": [43, 47], "except": [43, 47], "raiseexcept": [43, 47], "silent": [43, 47], "what": [43, 47], "mostli": [43, 47], "most": [43, 47], "care": [43, 47], "about": [43, 47], "howev": [43, 47], "wish": [43, 47], "addfilt": [43, 47], "removefilt": [43, 47], "determin": [43, 47], "loggabl": [43, 47], "consult": [43, 47], "veto": [43, 47], "place": [43, 47], "further": [43, 47], "12": [43, 47], "logrecord": [43, 47], "instead": [43, 47], "modifi": [43, 47, 57], "300000000": 44, "overwrit": 45, "update_index_kwarg": 45, "random": 45, "entir": 45, "another_kei": 45, "another_valu": 45, "update_index": 45, "prune_fn": 45, "lambda": 45, "_": [45, 46, 48], "build": 45, "scan": 45, "_index": 45, "exclud": 45, "load_al": 45, "__len__": [45, 46, 51, 52], "pklreader": 45, "videowrit": 45, "fp": 45, "flush_interv": 45, "period": 45, "mp4": 45, "30": 45, "remain": 45, "delet": 45, "constant": 46, "transform": 46, "essenti": [46, 48], "context": [46, 48], "counter": [46, 48], "begin": [46, 48], "continu": [46, 48], "__enter__": [46, 48], "__exit__": [46, 48], "__": [46, 48], "call_async": [46, 50, 52], "fn": [46, 50, 52], "asynchron": [46, 50, 52], "call_async_gath": [46, 50, 52], "call_async_valu": [46, 50, 52], "idx": [46, 50, 52], "singletonabcmeta": [46, 52, 55], "metaclass": [46, 52, 55], "combin": [46, 52, 55], "enforc": [46, 52, 55], "while": [46, 52, 55], "virtual": [46, 52, 55], "__instancecheck__": [46, 52, 55], "isinst": [46, 52, 55], "cl": [46, 52, 54, 55], "__subclasscheck__": [46, 52, 55], "issubclass": [46, 52, 55], "__call__": [46, 52, 55], "singletonmeta": [46, 52, 55], "blockingdequ": [46, 51, 52], "dequ": [46, 51, 52], "item": [46, 51, 52], "condit": [46, 51, 52], "suitabl": [46, 51, 52], "notifi": [46, 51, 52], "manner": [46, 51, 52], "__getitem__": [46, 51, 52], "find_device_by_label": [46, 52, 54], "label": [46, 52, 54], "find": [46, 52, 54], "volum": [46, 52, 54], "search": [46, 52, 54], "find_port": [46, 52, 54], "arduino_upload": [46, 52, 54], "upload": [46, 52, 54], "sketch": [46, 52, 54], "get_object": [46, 52, 53], "verbos": [46, 52, 53], "look": [46, 52, 53], "entiti": [46, 52, 53], "dotpath": [46, 52, 53], "lift": [46, 52, 53], "recurs": [46, 56], "approach": [46, 56], "ancestor": [46, 56], "tqdm": 47, "messag": 47, "consol": 47, "filehandl": 47, "streamhandl": 47, "doesn": 47, "becaus": 47, "delai": 47, "superclass": 47, "w": 47, "_close": 47, "42378": 47, "setstream": 47, "old": 47, "wasn": 47, "tqdmstreamhandl": 47, "trail": 47, "newlin": 47, "present": 47, "traceback": 47, "print_except": 47, "encod": 47, "loggermaxlevelfilt": 47, "max_level": 47, "deem": 47, "appropri": 47, "100": 48, "set_matplotlib_styl": 49, "use_scienceplot": 49, "asyncio_util": 52, "blocking_dequ": 52, "serial_util": 52, "_py_abc": [52, 55], "abcmeta": [52, 55], "miscellan": 53, "singleton_meta": 55, "mysingleton": 55, "instance1": 55, "instance2": 55, "my_registri": 56, "myclass": 56, "hello": 56, "lazili": 56, "myotherclass": 56, "other_inst": 56, "some_arg": 56, "ui": 57, "dirti": 57, "last": 57, "ideal": 57, "731": 57, "default_factori": 57, "sensorset": 57, "rangeset": 57, "valid": 57, "min": 57, "max": 57, "optionset": 57, "from_enum": 57, "boolset": 57, "boolean": 57, "3d": 58, "space": 58}, "objects": {"": [[33, 0, 0, "-", "cc_hardware"]], "cc_hardware": [[11, 0, 0, "-", "algos"], [18, 0, 0, "-", "drivers"], [42, 0, 0, "-", "tools"], [46, 0, 0, "-", "utils"]], "cc_hardware.algos": [[9, 0, 0, "-", "algorithm"], [10, 0, 0, "-", "aruco"]], "cc_hardware.algos.algorithm": [[9, 1, 1, "", "Algorithm"]], "cc_hardware.algos.algorithm.Algorithm": [[9, 2, 1, "", "close"], [9, 2, 1, "", "create_from_registry"], [9, 3, 1, "", "is_okay"], [9, 2, 1, "", "register"], [9, 2, 1, "", "registered"], [9, 2, 1, "", "registry"], [9, 2, 1, "", "run"]], "cc_hardware.algos.aruco": [[10, 1, 1, "", "ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm": [[10, 2, 1, "", "close"], [10, 3, 1, "", "is_okay"], [10, 2, 1, "", "run"]], "cc_hardware.drivers": [[18, 1, 1, "", "Camera"], [18, 1, 1, "", "CameraConfig"], [18, 1, 1, "", "DummyStepperMotor"], [18, 1, 1, "", "SPADSensor"], [18, 1, 1, "", "SPADSensorConfig"], [18, 1, 1, "", "SafeSerial"], [18, 1, 1, "", "Sensor"], [18, 1, 1, "", "SensorConfig"], [18, 1, 1, "", "StepperMotor"], [18, 1, 1, "", "StepperMotorSystem"], [18, 1, 1, "", "StepperMotorSystemAxis"], [14, 0, 0, "-", "cameras"], [19, 0, 0, "-", "safe_serial"], [20, 0, 0, "-", "sensor"], [21, 0, 0, "-", "spads"], [27, 0, 0, "-", "stepper_motors"]], "cc_hardware.drivers.Camera": [[18, 2, 1, "", "__del__"], [18, 2, 1, "", "accumulate"], [18, 2, 1, "", "calibrate"], [18, 2, 1, "", "close"], [18, 3, 1, "", "config"], [18, 2, 1, "", "create_from_config"], [18, 2, 1, "", "create_from_registry"], [18, 3, 1, "", "distortion_coefficients"], [18, 3, 1, "", "intrinsic_matrix"], [18, 3, 1, "", "is_okay"], [18, 2, 1, "", "register"], [18, 2, 1, "", "registered"], [18, 2, 1, "", "registry"], [18, 3, 1, "", "resolution"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "update"]], "cc_hardware.drivers.CameraConfig": [[18, 2, 1, "", "__getstate__"], [18, 2, 1, "", "__setstate__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "compose"], [18, 4, 1, "", "config"], [18, 2, 1, "", "copy"], [18, 2, 1, "", "create"], [18, 2, 1, "", "create_from_registry"], [18, 4, 1, "", "custom"], [18, 2, 1, "", "instantiate"], [18, 2, 1, "", "load"], [18, 2, 1, "", "merge_with"], [18, 2, 1, "", "register"], [18, 2, 1, "", "registered"], [18, 2, 1, "", "registry"], [18, 2, 1, "", "save"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.SPADSensor": [[18, 2, 1, "", "__del__"], [18, 2, 1, "", "accumulate"], [18, 2, 1, "", "calibrate"], [18, 2, 1, "", "close"], [18, 3, 1, "", "config"], [18, 2, 1, "", "create_from_config"], [18, 2, 1, "", "create_from_registry"], [18, 3, 1, "", "is_okay"], [18, 3, 1, "", "num_bins"], [18, 2, 1, "", "register"], [18, 2, 1, "", "registered"], [18, 2, 1, "", "registry"], [18, 3, 1, "", "resolution"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "update"]], "cc_hardware.drivers.SPADSensorConfig": [[18, 2, 1, "", "__getstate__"], [18, 2, 1, "", "__setstate__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "compose"], [18, 4, 1, "", "config"], [18, 2, 1, "", "copy"], [18, 2, 1, "", "create"], [18, 2, 1, "", "create_from_registry"], [18, 4, 1, "", "custom"], [18, 2, 1, "", "instantiate"], [18, 2, 1, "", "load"], [18, 2, 1, "", "merge_with"], [18, 2, 1, "", "register"], [18, 2, 1, "", "registered"], [18, 2, 1, "", "registry"], [18, 2, 1, "", "save"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.SafeSerial": [[18, 2, 1, "", "__getattr__"], [18, 2, 1, "", "create"], [18, 2, 1, "", "read"], [18, 2, 1, "", "wait_for_start_talk"], [18, 2, 1, "", "wait_for_stop_talk"], [18, 2, 1, "", "write"], [18, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [18, 2, 1, "", "write_and_wait_for_start_talk"], [18, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.Sensor": [[18, 2, 1, "", "__del__"], [18, 2, 1, "", "calibrate"], [18, 2, 1, "", "close"], [18, 3, 1, "", "config"], [18, 2, 1, "", "create_from_config"], [18, 2, 1, "", "create_from_registry"], [18, 3, 1, "", "is_okay"], [18, 2, 1, "", "register"], [18, 2, 1, "", "registered"], [18, 2, 1, "", "registry"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "update"]], "cc_hardware.drivers.SensorConfig": [[18, 2, 1, "", "__getstate__"], [18, 2, 1, "", "__setstate__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "compose"], [18, 4, 1, "", "config"], [18, 2, 1, "", "copy"], [18, 2, 1, "", "create"], [18, 2, 1, "", "create_from_registry"], [18, 4, 1, "", "custom"], [18, 2, 1, "", "instantiate"], [18, 2, 1, "", "load"], [18, 2, 1, "", "merge_with"], [18, 2, 1, "", "register"], [18, 2, 1, "", "registered"], [18, 2, 1, "", "registry"], [18, 2, 1, "", "save"], [18, 3, 1, "", "settings"], [18, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.StepperMotor": [[18, 2, 1, "", "close"], [18, 2, 1, "", "create_from_registry"], [18, 2, 1, "", "home"], [18, 3, 1, "", "is_okay"], [18, 2, 1, "", "move_by"], [18, 2, 1, "", "move_to"], [18, 3, 1, "", "position"], [18, 2, 1, "", "register"], [18, 2, 1, "", "registered"], [18, 2, 1, "", "registry"], [18, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.StepperMotorSystem": [[18, 2, 1, "", "__getattr__"], [18, 2, 1, "", "move_by"], [18, 2, 1, "", "move_to"]], "cc_hardware.drivers.StepperMotorSystemAxis": [[18, 2, 1, "", "__dir__"], [18, 2, 1, "", "__format__"], [18, 2, 1, "", "__hash__"], [18, 2, 1, "", "__reduce_ex__"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "name"], [18, 2, 1, "", "value"]], "cc_hardware.drivers.cameras": [[14, 1, 1, "", "Camera"], [14, 1, 1, "", "CameraConfig"], [12, 0, 0, "-", "camera"], [13, 0, 0, "-", "flir"], [15, 0, 0, "-", "pkl"], [16, 0, 0, "-", "realsense"], [17, 0, 0, "-", "usb"]], "cc_hardware.drivers.cameras.Camera": [[14, 2, 1, "", "__del__"], [14, 2, 1, "", "accumulate"], [14, 2, 1, "", "calibrate"], [14, 2, 1, "", "close"], [14, 3, 1, "", "config"], [14, 2, 1, "", "create_from_config"], [14, 2, 1, "", "create_from_registry"], [14, 3, 1, "", "distortion_coefficients"], [14, 3, 1, "", "intrinsic_matrix"], [14, 3, 1, "", "is_okay"], [14, 2, 1, "", "register"], [14, 2, 1, "", "registered"], [14, 2, 1, "", "registry"], [14, 3, 1, "", "resolution"], [14, 3, 1, "", "settings"], [14, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.CameraConfig": [[14, 2, 1, "", "__getstate__"], [14, 2, 1, "", "__setstate__"], [14, 2, 1, "", "__str__"], [14, 2, 1, "", "compose"], [14, 4, 1, "", "config"], [14, 2, 1, "", "copy"], [14, 2, 1, "", "create"], [14, 2, 1, "", "create_from_registry"], [14, 4, 1, "", "custom"], [14, 2, 1, "", "instantiate"], [14, 2, 1, "", "load"], [14, 2, 1, "", "merge_with"], [14, 2, 1, "", "register"], [14, 2, 1, "", "registered"], [14, 2, 1, "", "registry"], [14, 2, 1, "", "save"], [14, 3, 1, "", "settings"], [14, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.cameras.camera": [[12, 1, 1, "", "Camera"], [12, 1, 1, "", "CameraConfig"]], "cc_hardware.drivers.cameras.camera.Camera": [[12, 2, 1, "", "__del__"], [12, 2, 1, "", "accumulate"], [12, 2, 1, "", "calibrate"], [12, 2, 1, "", "close"], [12, 3, 1, "", "config"], [12, 2, 1, "", "create_from_config"], [12, 2, 1, "", "create_from_registry"], [12, 3, 1, "", "distortion_coefficients"], [12, 3, 1, "", "intrinsic_matrix"], [12, 3, 1, "", "is_okay"], [12, 2, 1, "", "register"], [12, 2, 1, "", "registered"], [12, 2, 1, "", "registry"], [12, 3, 1, "", "resolution"], [12, 3, 1, "", "settings"], [12, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.camera.CameraConfig": [[12, 2, 1, "", "__getstate__"], [12, 2, 1, "", "__setstate__"], [12, 2, 1, "", "__str__"], [12, 2, 1, "", "compose"], [12, 4, 1, "", "config"], [12, 2, 1, "", "copy"], [12, 2, 1, "", "create"], [12, 2, 1, "", "create_from_registry"], [12, 4, 1, "", "custom"], [12, 2, 1, "", "instantiate"], [12, 2, 1, "", "load"], [12, 2, 1, "", "merge_with"], [12, 2, 1, "", "register"], [12, 2, 1, "", "registered"], [12, 2, 1, "", "registry"], [12, 2, 1, "", "save"], [12, 3, 1, "", "settings"], [12, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.cameras.flir": [[13, 1, 1, "", "FlirCamera"], [13, 1, 1, "", "GrasshopperFlirCamera"]], "cc_hardware.drivers.cameras.flir.FlirCamera": [[13, 2, 1, "", "__del__"], [13, 2, 1, "", "accumulate"], [13, 2, 1, "", "calibrate"], [13, 2, 1, "", "close"], [13, 3, 1, "", "config"], [13, 2, 1, "", "create_from_config"], [13, 2, 1, "", "create_from_registry"], [13, 3, 1, "", "distortion_coefficients"], [13, 3, 1, "", "intrinsic_matrix"], [13, 3, 1, "", "is_okay"], [13, 2, 1, "", "register"], [13, 2, 1, "", "registered"], [13, 2, 1, "", "registry"], [13, 3, 1, "", "resolution"], [13, 3, 1, "", "settings"], [13, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera": [[13, 2, 1, "", "__del__"], [13, 2, 1, "", "accumulate"], [13, 2, 1, "", "calibrate"], [13, 2, 1, "", "close"], [13, 3, 1, "", "config"], [13, 2, 1, "", "create_from_config"], [13, 2, 1, "", "create_from_registry"], [13, 3, 1, "", "distortion_coefficients"], [13, 3, 1, "", "intrinsic_matrix"], [13, 3, 1, "", "is_okay"], [13, 2, 1, "", "register"], [13, 2, 1, "", "registered"], [13, 2, 1, "", "registry"], [13, 3, 1, "", "resolution"], [13, 3, 1, "", "settings"], [13, 2, 1, "", "update"]], "cc_hardware.drivers.cameras.pkl": [[15, 1, 1, "", "PklCamera"]], "cc_hardware.drivers.cameras.pkl.PklCamera": [[15, 2, 1, "", "accumulate"], [15, 2, 1, "", "close"], [15, 3, 1, "", "distortion_coefficients"], [15, 3, 1, "", "intrinsic_matrix"], [15, 3, 1, "", "is_okay"], [15, 3, 1, "", "resolution"]], "cc_hardware.drivers.cameras.realsense": [[16, 1, 1, "", "RealsenseCamera"], [16, 1, 1, "", "RealsenseConfig"]], "cc_hardware.drivers.cameras.realsense.RealsenseCamera": [[16, 2, 1, "", "accumulate"], [16, 2, 1, "", "close"], [16, 3, 1, "", "config"], [16, 3, 1, "", "distortion_coefficients"], [16, 3, 1, "", "intrinsic_matrix"], [16, 3, 1, "", "is_okay"], [16, 3, 1, "", "resolution"]], "cc_hardware.drivers.cameras.usb": [[17, 1, 1, "", "USBCamera"], [17, 1, 1, "", "USBCameraConfig"]], "cc_hardware.drivers.cameras.usb.USBCamera": [[17, 2, 1, "", "accumulate"], [17, 2, 1, "", "close"], [17, 3, 1, "", "distortion_coefficients"], [17, 3, 1, "", "intrinsic_matrix"], [17, 3, 1, "", "is_okay"], [17, 3, 1, "", "resolution"]], "cc_hardware.drivers.safe_serial": [[19, 1, 1, "", "SafeSerial"]], "cc_hardware.drivers.safe_serial.SafeSerial": [[19, 2, 1, "", "__getattr__"], [19, 2, 1, "", "create"], [19, 2, 1, "", "read"], [19, 2, 1, "", "wait_for_start_talk"], [19, 2, 1, "", "wait_for_stop_talk"], [19, 2, 1, "", "write"], [19, 2, 1, "", "write_and_wait_for_start_and_stop_talk"], [19, 2, 1, "", "write_and_wait_for_start_talk"], [19, 2, 1, "", "write_and_wait_for_stop_talk"]], "cc_hardware.drivers.sensor": [[20, 1, 1, "", "Sensor"], [20, 1, 1, "", "SensorConfig"], [20, 1, 1, "", "SensorData"]], "cc_hardware.drivers.sensor.Sensor": [[20, 2, 1, "", "__del__"], [20, 2, 1, "", "calibrate"], [20, 2, 1, "", "close"], [20, 3, 1, "", "config"], [20, 2, 1, "", "create_from_config"], [20, 2, 1, "", "create_from_registry"], [20, 3, 1, "", "is_okay"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "update"]], "cc_hardware.drivers.sensor.SensorConfig": [[20, 2, 1, "", "__getstate__"], [20, 2, 1, "", "__setstate__"], [20, 2, 1, "", "__str__"], [20, 2, 1, "", "compose"], [20, 4, 1, "", "config"], [20, 2, 1, "", "copy"], [20, 2, 1, "", "create"], [20, 2, 1, "", "create_from_registry"], [20, 4, 1, "", "custom"], [20, 2, 1, "", "instantiate"], [20, 2, 1, "", "load"], [20, 2, 1, "", "merge_with"], [20, 2, 1, "", "register"], [20, 2, 1, "", "registered"], [20, 2, 1, "", "registry"], [20, 2, 1, "", "save"], [20, 3, 1, "", "settings"], [20, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.sensor.SensorData": [[20, 2, 1, "", "get_data"], [20, 2, 1, "", "process"], [20, 2, 1, "", "reset"]], "cc_hardware.drivers.spads": [[21, 1, 1, "", "SPADSensor"], [21, 1, 1, "", "SPADSensorConfig"], [22, 0, 0, "-", "pkl"], [23, 0, 0, "-", "spad"], [24, 0, 0, "-", "spad_wrappers"], [25, 0, 0, "-", "tmf8828"], [26, 0, 0, "-", "vl53l8ch"]], "cc_hardware.drivers.spads.SPADSensor": [[21, 2, 1, "", "__del__"], [21, 2, 1, "", "accumulate"], [21, 2, 1, "", "calibrate"], [21, 2, 1, "", "close"], [21, 3, 1, "", "config"], [21, 2, 1, "", "create_from_config"], [21, 2, 1, "", "create_from_registry"], [21, 3, 1, "", "is_okay"], [21, 3, 1, "", "num_bins"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 3, 1, "", "resolution"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "update"]], "cc_hardware.drivers.spads.SPADSensorConfig": [[21, 2, 1, "", "__getstate__"], [21, 2, 1, "", "__setstate__"], [21, 2, 1, "", "__str__"], [21, 2, 1, "", "compose"], [21, 4, 1, "", "config"], [21, 2, 1, "", "copy"], [21, 2, 1, "", "create"], [21, 2, 1, "", "create_from_registry"], [21, 4, 1, "", "custom"], [21, 2, 1, "", "instantiate"], [21, 2, 1, "", "load"], [21, 2, 1, "", "merge_with"], [21, 2, 1, "", "register"], [21, 2, 1, "", "registered"], [21, 2, 1, "", "registry"], [21, 2, 1, "", "save"], [21, 3, 1, "", "settings"], [21, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.pkl": [[22, 1, 1, "", "PklSPADSensor"]], "cc_hardware.drivers.spads.pkl.PklSPADSensor": [[22, 2, 1, "", "accumulate"], [22, 2, 1, "", "close"], [22, 3, 1, "", "num_bins"], [22, 3, 1, "", "resolution"]], "cc_hardware.drivers.spads.spad": [[23, 1, 1, "", "SPADSensor"], [23, 1, 1, "", "SPADSensorConfig"]], "cc_hardware.drivers.spads.spad.SPADSensor": [[23, 2, 1, "", "__del__"], [23, 2, 1, "", "accumulate"], [23, 2, 1, "", "calibrate"], [23, 2, 1, "", "close"], [23, 3, 1, "", "config"], [23, 2, 1, "", "create_from_config"], [23, 2, 1, "", "create_from_registry"], [23, 3, 1, "", "is_okay"], [23, 3, 1, "", "num_bins"], [23, 2, 1, "", "register"], [23, 2, 1, "", "registered"], [23, 2, 1, "", "registry"], [23, 3, 1, "", "resolution"], [23, 3, 1, "", "settings"], [23, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad.SPADSensorConfig": [[23, 2, 1, "", "__getstate__"], [23, 2, 1, "", "__setstate__"], [23, 2, 1, "", "__str__"], [23, 2, 1, "", "compose"], [23, 4, 1, "", "config"], [23, 2, 1, "", "copy"], [23, 2, 1, "", "create"], [23, 2, 1, "", "create_from_registry"], [23, 4, 1, "", "custom"], [23, 2, 1, "", "instantiate"], [23, 2, 1, "", "load"], [23, 2, 1, "", "merge_with"], [23, 2, 1, "", "register"], [23, 2, 1, "", "registered"], [23, 2, 1, "", "registry"], [23, 2, 1, "", "save"], [23, 3, 1, "", "settings"], [23, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.spad_wrappers": [[24, 1, 1, "", "SPADMergeWrapper"], [24, 1, 1, "", "SPADMergeWrapperConfig"], [24, 1, 1, "", "SPADMovingAverageWrapper"], [24, 1, 1, "", "SPADMovingAverageWrapperConfig"], [24, 1, 1, "", "SPADWrapper"], [24, 1, 1, "", "SPADWrapperConfig"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper": [[24, 2, 1, "", "__del__"], [24, 2, 1, "", "accumulate"], [24, 2, 1, "", "calibrate"], [24, 2, 1, "", "close"], [24, 3, 1, "", "config"], [24, 2, 1, "", "create_from_config"], [24, 2, 1, "", "create_from_registry"], [24, 3, 1, "", "is_okay"], [24, 3, 1, "", "num_bins"], [24, 2, 1, "", "register"], [24, 2, 1, "", "registered"], [24, 2, 1, "", "registry"], [24, 3, 1, "", "resolution"], [24, 3, 1, "", "settings"], [24, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig": [[24, 2, 1, "", "__getstate__"], [24, 2, 1, "", "__setstate__"], [24, 2, 1, "", "__str__"], [24, 2, 1, "", "compose"], [24, 4, 1, "", "config"], [24, 2, 1, "", "copy"], [24, 2, 1, "", "create"], [24, 2, 1, "", "create_from_registry"], [24, 4, 1, "", "custom"], [24, 2, 1, "", "instantiate"], [24, 2, 1, "", "load"], [24, 2, 1, "", "merge_with"], [24, 2, 1, "", "register"], [24, 2, 1, "", "registered"], [24, 2, 1, "", "registry"], [24, 2, 1, "", "save"], [24, 3, 1, "", "settings"], [24, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper": [[24, 2, 1, "", "__del__"], [24, 2, 1, "", "accumulate"], [24, 2, 1, "", "calibrate"], [24, 2, 1, "", "close"], [24, 3, 1, "", "config"], [24, 2, 1, "", "create_from_config"], [24, 2, 1, "", "create_from_registry"], [24, 3, 1, "", "is_okay"], [24, 3, 1, "", "num_bins"], [24, 2, 1, "", "register"], [24, 2, 1, "", "registered"], [24, 2, 1, "", "registry"], [24, 3, 1, "", "resolution"], [24, 3, 1, "", "settings"], [24, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig": [[24, 2, 1, "", "__getstate__"], [24, 2, 1, "", "__setstate__"], [24, 2, 1, "", "__str__"], [24, 2, 1, "", "compose"], [24, 4, 1, "", "config"], [24, 2, 1, "", "copy"], [24, 2, 1, "", "create"], [24, 2, 1, "", "create_from_registry"], [24, 4, 1, "", "custom"], [24, 2, 1, "", "instantiate"], [24, 2, 1, "", "load"], [24, 2, 1, "", "merge_with"], [24, 2, 1, "", "register"], [24, 2, 1, "", "registered"], [24, 2, 1, "", "registry"], [24, 2, 1, "", "save"], [24, 3, 1, "", "settings"], [24, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper": [[24, 2, 1, "", "__del__"], [24, 2, 1, "", "accumulate"], [24, 2, 1, "", "calibrate"], [24, 2, 1, "", "close"], [24, 3, 1, "", "config"], [24, 2, 1, "", "create_from_config"], [24, 2, 1, "", "create_from_registry"], [24, 3, 1, "", "is_okay"], [24, 3, 1, "", "num_bins"], [24, 2, 1, "", "register"], [24, 2, 1, "", "registered"], [24, 2, 1, "", "registry"], [24, 3, 1, "", "resolution"], [24, 3, 1, "", "settings"], [24, 2, 1, "", "update"]], "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig": [[24, 2, 1, "", "__getstate__"], [24, 2, 1, "", "__setstate__"], [24, 2, 1, "", "__str__"], [24, 2, 1, "", "compose"], [24, 4, 1, "", "config"], [24, 2, 1, "", "copy"], [24, 2, 1, "", "create"], [24, 2, 1, "", "create_from_registry"], [24, 4, 1, "", "custom"], [24, 2, 1, "", "instantiate"], [24, 2, 1, "", "load"], [24, 2, 1, "", "merge_with"], [24, 2, 1, "", "register"], [24, 2, 1, "", "registered"], [24, 2, 1, "", "registry"], [24, 2, 1, "", "save"], [24, 3, 1, "", "settings"], [24, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.tmf8828": [[25, 1, 1, "", "RangeMode"], [25, 1, 1, "", "SPADID"], [25, 1, 1, "", "TMF8828Config"], [25, 1, 1, "", "TMF8828Histogram"], [25, 1, 1, "", "TMF8828Sensor"]], "cc_hardware.drivers.spads.tmf8828.RangeMode": [[25, 2, 1, "", "__dir__"], [25, 2, 1, "", "__format__"], [25, 2, 1, "", "__hash__"], [25, 2, 1, "", "__reduce_ex__"], [25, 2, 1, "", "__repr__"], [25, 2, 1, "", "__str__"], [25, 2, 1, "", "name"], [25, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.SPADID": [[25, 2, 1, "", "__dir__"], [25, 2, 1, "", "__format__"], [25, 2, 1, "", "__hash__"], [25, 2, 1, "", "__reduce_ex__"], [25, 2, 1, "", "__repr__"], [25, 2, 1, "", "__str__"], [25, 2, 1, "", "get_active_channels_per_subcapture"], [25, 2, 1, "", "get_num_channels"], [25, 2, 1, "", "get_num_pixels"], [25, 2, 1, "", "get_resolution"], [25, 2, 1, "", "name"], [25, 2, 1, "", "value"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Config": [[25, 2, 1, "", "__getstate__"], [25, 2, 1, "", "__setstate__"], [25, 2, 1, "", "__str__"], [25, 2, 1, "", "compose"], [25, 4, 1, "", "config"], [25, 2, 1, "", "copy"], [25, 2, 1, "", "create"], [25, 2, 1, "", "create_from_registry"], [25, 4, 1, "", "custom"], [25, 2, 1, "", "instantiate"], [25, 2, 1, "", "load"], [25, 2, 1, "", "merge_with"], [25, 2, 1, "", "register"], [25, 2, 1, "", "registered"], [25, 2, 1, "", "registry"], [25, 2, 1, "", "save"], [25, 3, 1, "", "settings"], [25, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram": [[25, 2, 1, "", "get_data"], [25, 3, 1, "", "has_data"], [25, 2, 1, "", "process"], [25, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor": [[25, 2, 1, "", "__del__"], [25, 2, 1, "", "accumulate"], [25, 2, 1, "", "calibrate"], [25, 2, 1, "", "close"], [25, 3, 1, "", "config"], [25, 2, 1, "", "create_from_config"], [25, 2, 1, "", "create_from_registry"], [25, 3, 1, "", "is_okay"], [25, 3, 1, "", "num_bins"], [25, 2, 1, "", "register"], [25, 2, 1, "", "registered"], [25, 2, 1, "", "registry"], [25, 3, 1, "", "resolution"], [25, 3, 1, "", "settings"], [25, 2, 1, "", "update"]], "cc_hardware.drivers.spads.vl53l8ch": [[26, 1, 1, "", "RangingMode"], [26, 1, 1, "", "VL53L8CHConfig"], [26, 1, 1, "", "VL53L8CHConfig4x4"], [26, 1, 1, "", "VL53L8CHConfig8x8"], [26, 1, 1, "", "VL53L8CHHistogram"], [26, 1, 1, "", "VL53L8CHSensor"], [26, 1, 1, "", "VL53L8CHSharedConfig"]], "cc_hardware.drivers.spads.vl53l8ch.RangingMode": [[26, 2, 1, "", "__dir__"], [26, 2, 1, "", "__format__"], [26, 2, 1, "", "__hash__"], [26, 2, 1, "", "__reduce_ex__"], [26, 2, 1, "", "__repr__"], [26, 2, 1, "", "__str__"], [26, 2, 1, "", "name"], [26, 2, 1, "", "value"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig": [[26, 2, 1, "", "__getstate__"], [26, 2, 1, "", "__setstate__"], [26, 2, 1, "", "__str__"], [26, 2, 1, "", "compose"], [26, 4, 1, "", "config"], [26, 2, 1, "", "copy"], [26, 2, 1, "", "create"], [26, 2, 1, "", "create_from_registry"], [26, 4, 1, "", "custom"], [26, 2, 1, "", "instantiate"], [26, 2, 1, "", "load"], [26, 2, 1, "", "merge_with"], [26, 2, 1, "", "pack"], [26, 2, 1, "", "register"], [26, 2, 1, "", "registered"], [26, 2, 1, "", "registry"], [26, 2, 1, "", "save"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4": [[26, 2, 1, "", "__getstate__"], [26, 2, 1, "", "__setstate__"], [26, 2, 1, "", "__str__"], [26, 2, 1, "", "compose"], [26, 4, 1, "", "config"], [26, 2, 1, "", "copy"], [26, 2, 1, "", "create"], [26, 2, 1, "", "create_from_registry"], [26, 4, 1, "", "custom"], [26, 2, 1, "", "instantiate"], [26, 2, 1, "", "load"], [26, 2, 1, "", "merge_with"], [26, 2, 1, "", "pack"], [26, 2, 1, "", "register"], [26, 2, 1, "", "registered"], [26, 2, 1, "", "registry"], [26, 2, 1, "", "save"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8": [[26, 2, 1, "", "__getstate__"], [26, 2, 1, "", "__setstate__"], [26, 2, 1, "", "__str__"], [26, 2, 1, "", "compose"], [26, 4, 1, "", "config"], [26, 2, 1, "", "copy"], [26, 2, 1, "", "create"], [26, 2, 1, "", "create_from_registry"], [26, 4, 1, "", "custom"], [26, 2, 1, "", "instantiate"], [26, 2, 1, "", "load"], [26, 2, 1, "", "merge_with"], [26, 2, 1, "", "pack"], [26, 2, 1, "", "register"], [26, 2, 1, "", "registered"], [26, 2, 1, "", "registry"], [26, 2, 1, "", "save"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram": [[26, 2, 1, "", "get_data"], [26, 3, 1, "", "has_data"], [26, 2, 1, "", "process"], [26, 2, 1, "", "reset"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor": [[26, 2, 1, "", "__del__"], [26, 2, 1, "", "accumulate"], [26, 2, 1, "", "calibrate"], [26, 2, 1, "", "close"], [26, 3, 1, "", "config"], [26, 2, 1, "", "create_from_config"], [26, 2, 1, "", "create_from_registry"], [26, 3, 1, "", "is_okay"], [26, 3, 1, "", "num_bins"], [26, 2, 1, "", "register"], [26, 2, 1, "", "registered"], [26, 2, 1, "", "registry"], [26, 3, 1, "", "resolution"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "update"]], "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig": [[26, 2, 1, "", "__getstate__"], [26, 2, 1, "", "__setstate__"], [26, 2, 1, "", "__str__"], [26, 2, 1, "", "compose"], [26, 4, 1, "", "config"], [26, 2, 1, "", "copy"], [26, 2, 1, "", "create"], [26, 2, 1, "", "create_from_registry"], [26, 4, 1, "", "custom"], [26, 2, 1, "", "instantiate"], [26, 2, 1, "", "load"], [26, 2, 1, "", "merge_with"], [26, 2, 1, "", "pack"], [26, 2, 1, "", "register"], [26, 2, 1, "", "registered"], [26, 2, 1, "", "registry"], [26, 2, 1, "", "save"], [26, 3, 1, "", "settings"], [26, 2, 1, "", "to_yaml"]], "cc_hardware.drivers.stepper_motors": [[27, 1, 1, "", "DummyStepperMotor"], [27, 1, 1, "", "StepperMotor"], [27, 1, 1, "", "StepperMotorSystem"], [27, 1, 1, "", "StepperMotorSystemAxis"], [28, 0, 0, "-", "kinesis_stepper"], [29, 0, 0, "-", "stepper_controller"], [30, 0, 0, "-", "stepper_motor"], [31, 0, 0, "-", "stepper_system"], [32, 0, 0, "-", "telemetrix_stepper"]], "cc_hardware.drivers.stepper_motors.StepperMotor": [[27, 2, 1, "", "close"], [27, 2, 1, "", "create_from_registry"], [27, 2, 1, "", "home"], [27, 3, 1, "", "is_okay"], [27, 2, 1, "", "move_by"], [27, 2, 1, "", "move_to"], [27, 3, 1, "", "position"], [27, 2, 1, "", "register"], [27, 2, 1, "", "registered"], [27, 2, 1, "", "registry"], [27, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystem": [[27, 2, 1, "", "__getattr__"], [27, 2, 1, "", "move_by"], [27, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis": [[27, 2, 1, "", "__dir__"], [27, 2, 1, "", "__format__"], [27, 2, 1, "", "__hash__"], [27, 2, 1, "", "__reduce_ex__"], [27, 2, 1, "", "__repr__"], [27, 2, 1, "", "__str__"], [27, 2, 1, "", "name"], [27, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[28, 1, 1, "", "AzimuthElevationSystem"], [28, 1, 1, "", "KinesisRotationStage"], [28, 1, 1, "", "KinesisStepperMotor"], [28, 1, 1, "", "KinesisStepperMotorSystem"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem": [[28, 2, 1, "", "__getattr__"], [28, 2, 1, "", "close"], [28, 2, 1, "", "create_from_registry"], [28, 2, 1, "", "home"], [28, 3, 1, "", "is_okay"], [28, 2, 1, "", "move_by"], [28, 2, 1, "", "move_to"], [28, 3, 1, "", "position"], [28, 2, 1, "", "register"], [28, 2, 1, "", "registered"], [28, 2, 1, "", "registry"], [28, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage": [[28, 2, 1, "", "close"], [28, 2, 1, "", "create_from_registry"], [28, 2, 1, "", "home"], [28, 2, 1, "", "initialize"], [28, 3, 1, "", "is_okay"], [28, 3, 1, "", "lower_limit"], [28, 2, 1, "", "move_by"], [28, 2, 1, "", "move_to"], [28, 3, 1, "", "position"], [28, 2, 1, "", "register"], [28, 2, 1, "", "registered"], [28, 2, 1, "", "registry"], [28, 3, 1, "", "upper_limit"], [28, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor": [[28, 2, 1, "", "close"], [28, 2, 1, "", "create_from_registry"], [28, 2, 1, "", "home"], [28, 2, 1, "", "initialize"], [28, 3, 1, "", "is_okay"], [28, 3, 1, "", "lower_limit"], [28, 2, 1, "", "move_by"], [28, 2, 1, "", "move_to"], [28, 3, 1, "", "position"], [28, 2, 1, "", "register"], [28, 2, 1, "", "registered"], [28, 2, 1, "", "registry"], [28, 3, 1, "", "upper_limit"], [28, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem": [[28, 2, 1, "", "__getattr__"], [28, 2, 1, "", "close"], [28, 2, 1, "", "create_from_registry"], [28, 2, 1, "", "home"], [28, 3, 1, "", "is_okay"], [28, 2, 1, "", "move_by"], [28, 2, 1, "", "move_to"], [28, 3, 1, "", "position"], [28, 2, 1, "", "register"], [28, 2, 1, "", "registered"], [28, 2, 1, "", "registry"], [28, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[29, 1, 1, "", "SnakeStepperController"], [29, 1, 1, "", "StepperController"]], "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController": [[29, 2, 1, "", "create_from_registry"], [29, 2, 1, "", "get_position"], [29, 2, 1, "", "register"], [29, 2, 1, "", "registered"], [29, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController": [[29, 2, 1, "", "create_from_registry"], [29, 2, 1, "", "get_position"], [29, 2, 1, "", "register"], [29, 2, 1, "", "registered"], [29, 2, 1, "", "registry"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[30, 1, 1, "", "DummyStepperMotor"], [30, 1, 1, "", "StepperMotor"]], "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor": [[30, 2, 1, "", "close"], [30, 2, 1, "", "create_from_registry"], [30, 2, 1, "", "home"], [30, 3, 1, "", "is_okay"], [30, 2, 1, "", "move_by"], [30, 2, 1, "", "move_to"], [30, 3, 1, "", "position"], [30, 2, 1, "", "register"], [30, 2, 1, "", "registered"], [30, 2, 1, "", "registry"], [30, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[31, 1, 1, "", "DummyStepperSystem"], [31, 1, 1, "", "StepperMotorSystem"], [31, 1, 1, "", "StepperMotorSystemAxis"]], "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem": [[31, 2, 1, "", "__getattr__"], [31, 2, 1, "", "move_by"], [31, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem": [[31, 2, 1, "", "__getattr__"], [31, 2, 1, "", "move_by"], [31, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis": [[31, 2, 1, "", "__dir__"], [31, 2, 1, "", "__format__"], [31, 2, 1, "", "__hash__"], [31, 2, 1, "", "__reduce_ex__"], [31, 2, 1, "", "__repr__"], [31, 2, 1, "", "__str__"], [31, 2, 1, "", "name"], [31, 2, 1, "", "value"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[32, 1, 1, "", "DualDrive2AxisGantry"], [32, 1, 1, "", "DualDrive2AxisGantry_X"], [32, 1, 1, "", "DualDrive2AxisGantry_Y1"], [32, 1, 1, "", "DualDrive2AxisGantry_Y2"], [32, 1, 1, "", "SingleDrive1AxisGantry"], [32, 1, 1, "", "SingleDrive1AxisGantry_X"], [32, 1, 1, "", "SingleDrive1AxisGantry_Y"], [32, 1, 1, "", "TelemetrixStepperMotor"], [32, 1, 1, "", "TelemetrixStepperMotorSystem"], [32, 1, 1, "", "TelemetrixStepperMotorX"], [32, 1, 1, "", "TelemetrixStepperMotorXReversed"], [32, 1, 1, "", "TelemetrixStepperMotorY"], [32, 1, 1, "", "TelemetrixStepperMotorYReversed"], [32, 1, 1, "", "TelemetrixStepperMotorZ"], [32, 1, 1, "", "TelemetrixStepperMotorZReversed"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed": [[32, 2, 1, "", "__getattr__"], [32, 2, 1, "", "close"], [32, 2, 1, "", "cm_to_revs"], [32, 2, 1, "", "home"], [32, 3, 1, "", "id"], [32, 3, 1, "", "is_okay"], [32, 2, 1, "", "move_by"], [32, 2, 1, "", "move_to"], [32, 3, 1, "", "position"], [32, 2, 1, "", "revs_to_cm"], [32, 2, 1, "", "set_absolute_target_position_cm"], [32, 2, 1, "", "set_target_position_cm"], [32, 2, 1, "", "wait_for_move"]], "cc_hardware.tools": [[42, 1, 1, "", "Registry"], [42, 1, 1, "", "ToolRegistry"], [34, 0, 0, "-", "calibration"], [35, 0, 0, "-", "camera_viewer"], [38, 0, 0, "-", "dashboards"], [41, 0, 0, "-", "flash"], [43, 0, 0, "-", "jogger"]], "cc_hardware.tools.Registry": [[42, 2, 1, "", "create_from_registry"], [42, 2, 1, "", "register"], [42, 2, 1, "", "registered"], [42, 2, 1, "", "registry"]], "cc_hardware.tools.ToolRegistry": [[42, 2, 1, "", "create_from_registry"], [42, 2, 1, "", "register"], [42, 2, 1, "", "registered"], [42, 2, 1, "", "registry"]], "cc_hardware.tools.calibration": [[34, 5, 1, "", "calibrate"], [34, 5, 1, "", "tmf8828_calibrate"]], "cc_hardware.tools.dashboards": [[38, 1, 1, "", "SPADDashboard"], [38, 1, 1, "", "SPADDashboardConfig"], [36, 0, 0, "-", "dash"], [37, 0, 0, "-", "dashboard"], [39, 0, 0, "-", "matplotlib"], [40, 0, 0, "-", "pyqtgraph"]], "cc_hardware.tools.dashboards.SPADDashboard": [[38, 2, 1, "", "close"], [38, 3, 1, "", "config"], [38, 2, 1, "", "create_from_config"], [38, 2, 1, "", "create_from_registry"], [38, 3, 1, "", "is_okay"], [38, 3, 1, "", "max_bin"], [38, 3, 1, "", "min_bin"], [38, 2, 1, "", "register"], [38, 2, 1, "", "registered"], [38, 2, 1, "", "registry"], [38, 2, 1, "", "run"], [38, 3, 1, "", "sensor"], [38, 2, 1, "", "setup"], [38, 2, 1, "", "update"]], "cc_hardware.tools.dashboards.SPADDashboardConfig": [[38, 2, 1, "", "__getstate__"], [38, 2, 1, "", "__setstate__"], [38, 2, 1, "", "__str__"], [38, 2, 1, "", "compose"], [38, 4, 1, "", "config"], [38, 2, 1, "", "copy"], [38, 2, 1, "", "create"], [38, 2, 1, "", "create_from_registry"], [38, 4, 1, "", "custom"], [38, 2, 1, "", "instantiate"], [38, 2, 1, "", "load"], [38, 2, 1, "", "merge_with"], [38, 2, 1, "", "register"], [38, 2, 1, "", "registered"], [38, 2, 1, "", "registry"], [38, 2, 1, "", "save"], [38, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboards.dash": [[36, 1, 1, "", "DashDashboard"], [36, 1, 1, "", "DashDashboardConfig"]], "cc_hardware.tools.dashboards.dash.DashDashboard": [[36, 2, 1, "", "run"], [36, 2, 1, "", "setup"], [36, 2, 1, "", "update"]], "cc_hardware.tools.dashboards.dashboard": [[37, 1, 1, "", "SPADDashboard"], [37, 1, 1, "", "SPADDashboardConfig"]], "cc_hardware.tools.dashboards.dashboard.SPADDashboard": [[37, 2, 1, "", "close"], [37, 3, 1, "", "config"], [37, 2, 1, "", "create_from_config"], [37, 2, 1, "", "create_from_registry"], [37, 3, 1, "", "is_okay"], [37, 3, 1, "", "max_bin"], [37, 3, 1, "", "min_bin"], [37, 2, 1, "", "register"], [37, 2, 1, "", "registered"], [37, 2, 1, "", "registry"], [37, 2, 1, "", "run"], [37, 3, 1, "", "sensor"], [37, 2, 1, "", "setup"], [37, 2, 1, "", "update"]], "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig": [[37, 2, 1, "", "__getstate__"], [37, 2, 1, "", "__setstate__"], [37, 2, 1, "", "__str__"], [37, 2, 1, "", "compose"], [37, 4, 1, "", "config"], [37, 2, 1, "", "copy"], [37, 2, 1, "", "create"], [37, 2, 1, "", "create_from_registry"], [37, 4, 1, "", "custom"], [37, 2, 1, "", "instantiate"], [37, 2, 1, "", "load"], [37, 2, 1, "", "merge_with"], [37, 2, 1, "", "register"], [37, 2, 1, "", "registered"], [37, 2, 1, "", "registry"], [37, 2, 1, "", "save"], [37, 2, 1, "", "to_yaml"]], "cc_hardware.tools.dashboards.matplotlib": [[39, 1, 1, "", "MatplotlibDashboard"], [39, 1, 1, "", "MatplotlibDashboardConfig"], [39, 5, 1, "", "save_animation"]], "cc_hardware.tools.dashboards.matplotlib.MatplotlibDashboard": [[39, 2, 1, "", "adjust_ylim"], [39, 2, 1, "", "run"], [39, 2, 1, "", "setup"], [39, 2, 1, "", "update"]], "cc_hardware.tools.dashboards.pyqtgraph": [[40, 1, 1, "", "DashboardWindow"], [40, 1, 1, "", "PyQtGraphDashboard"], [40, 1, 1, "", "PyQtGraphDashboardConfig"]], "cc_hardware.tools.dashboards.pyqtgraph.DashboardWindow": [[40, 2, 1, "", "init_ui"], [40, 2, 1, "", "keyPressEvent"]], "cc_hardware.tools.dashboards.pyqtgraph.PyQtGraphDashboard": [[40, 2, 1, "", "run"], [40, 2, 1, "", "setup"], [40, 2, 1, "", "update"]], "cc_hardware.tools.jogger": [[43, 1, 1, "", "LogBufferHandler"], [43, 1, 1, "", "OutputCapture"]], "cc_hardware.tools.jogger.LogBufferHandler": [[43, 2, 1, "", "__repr__"], [43, 2, 1, "", "acquire"], [43, 2, 1, "", "addFilter"], [43, 2, 1, "", "close"], [43, 2, 1, "", "createLock"], [43, 2, 1, "", "emit"], [43, 2, 1, "", "filter"], [43, 2, 1, "", "flush"], [43, 2, 1, "", "format"], [43, 2, 1, "", "handle"], [43, 2, 1, "", "handleError"], [43, 2, 1, "", "release"], [43, 2, 1, "", "removeFilter"], [43, 2, 1, "", "setFormatter"], [43, 2, 1, "", "setLevel"]], "cc_hardware.utils": [[46, 1, 1, "", "BlockingDeque"], [46, 1, 1, "", "Component"], [46, 1, 1, "", "Config"], [46, 1, 1, "", "Manager"], [46, 1, 1, "", "Registry"], [46, 1, 1, "", "SingletonABCMeta"], [46, 1, 1, "", "SingletonMeta"], [46, 5, 1, "", "arduino_upload"], [46, 5, 1, "", "call_async"], [46, 5, 1, "", "call_async_gather"], [46, 5, 1, "", "call_async_value"], [44, 0, 0, "-", "constants"], [45, 0, 0, "-", "file_handlers"], [46, 5, 1, "", "find_device_by_label"], [46, 5, 1, "", "find_ports"], [46, 5, 1, "", "get_object"], [47, 0, 0, "-", "logger"], [48, 0, 0, "-", "manager"], [49, 0, 0, "-", "matplotlib"], [52, 0, 0, "-", "misc"], [46, 5, 1, "", "register"], [56, 0, 0, "-", "registry"], [57, 0, 0, "-", "setting"], [58, 0, 0, "-", "transformations"]], "cc_hardware.utils.BlockingDeque": [[46, 2, 1, "", "__getattr__"], [46, 2, 1, "", "__getitem__"], [46, 2, 1, "", "__len__"], [46, 2, 1, "", "__repr__"], [46, 2, 1, "", "append"]], "cc_hardware.utils.Component": [[46, 2, 1, "", "close"], [46, 3, 1, "", "config"], [46, 2, 1, "", "create_from_config"], [46, 2, 1, "", "create_from_registry"], [46, 3, 1, "", "is_okay"], [46, 2, 1, "", "register"], [46, 2, 1, "", "registered"], [46, 2, 1, "", "registry"]], "cc_hardware.utils.Config": [[46, 2, 1, "", "__getstate__"], [46, 2, 1, "", "__setstate__"], [46, 2, 1, "", "__str__"], [46, 2, 1, "", "compose"], [46, 4, 1, "", "config"], [46, 2, 1, "", "copy"], [46, 2, 1, "", "create"], [46, 2, 1, "", "create_from_registry"], [46, 4, 1, "", "custom"], [46, 2, 1, "", "instantiate"], [46, 2, 1, "", "load"], [46, 2, 1, "", "merge_with"], [46, 2, 1, "", "register"], [46, 2, 1, "", "registered"], [46, 2, 1, "", "registry"], [46, 2, 1, "", "save"], [46, 2, 1, "", "to_yaml"]], "cc_hardware.utils.Manager": [[46, 2, 1, "", "__enter__"], [46, 2, 1, "", "__exit__"], [46, 2, 1, "", "add"], [46, 2, 1, "", "close"], [46, 3, 1, "", "components"], [46, 3, 1, "", "is_okay"], [46, 2, 1, "", "run"]], "cc_hardware.utils.Registry": [[46, 2, 1, "", "create_from_registry"], [46, 2, 1, "", "register"], [46, 2, 1, "", "registered"], [46, 2, 1, "", "registry"]], "cc_hardware.utils.SingletonABCMeta": [[46, 2, 1, "", "__call__"], [46, 2, 1, "", "__instancecheck__"], [46, 2, 1, "", "__subclasscheck__"], [46, 2, 1, "", "instance"], [46, 2, 1, "", "register"]], "cc_hardware.utils.SingletonMeta": [[46, 2, 1, "", "__call__"], [46, 2, 1, "", "instance"]], "cc_hardware.utils.constants": [[44, 6, 1, "", "C"]], "cc_hardware.utils.file_handlers": [[45, 1, 1, "", "PklHandler"], [45, 1, 1, "", "PklReader"], [45, 1, 1, "", "VideoWriter"]], "cc_hardware.utils.file_handlers.PklHandler": [[45, 2, 1, "", "__len__"], [45, 2, 1, "", "append"], [45, 2, 1, "", "load"], [45, 2, 1, "", "load_all"], [45, 2, 1, "", "update_index"], [45, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.PklReader": [[45, 2, 1, "", "__len__"], [45, 2, 1, "", "append"], [45, 2, 1, "", "load"], [45, 2, 1, "", "load_all"], [45, 2, 1, "", "update_index"], [45, 2, 1, "", "write"]], "cc_hardware.utils.file_handlers.VideoWriter": [[45, 2, 1, "", "__del__"], [45, 2, 1, "", "append"], [45, 2, 1, "", "close"]], "cc_hardware.utils.logger": [[47, 1, 1, "", "FileHandler"], [47, 1, 1, "", "LoggerMaxLevelFilter"], [47, 1, 1, "", "TqdmStreamHandler"]], "cc_hardware.utils.logger.FileHandler": [[47, 2, 1, "", "__repr__"], [47, 2, 1, "", "acquire"], [47, 2, 1, "", "addFilter"], [47, 2, 1, "", "close"], [47, 2, 1, "", "createLock"], [47, 2, 1, "", "emit"], [47, 2, 1, "", "filter"], [47, 2, 1, "", "flush"], [47, 2, 1, "", "format"], [47, 2, 1, "", "handle"], [47, 2, 1, "", "handleError"], [47, 2, 1, "", "release"], [47, 2, 1, "", "removeFilter"], [47, 2, 1, "", "setFormatter"], [47, 2, 1, "", "setLevel"], [47, 2, 1, "", "setStream"]], "cc_hardware.utils.logger.LoggerMaxLevelFilter": [[47, 2, 1, "", "filter"]], "cc_hardware.utils.logger.TqdmStreamHandler": [[47, 2, 1, "", "__repr__"], [47, 2, 1, "", "acquire"], [47, 2, 1, "", "addFilter"], [47, 2, 1, "", "close"], [47, 2, 1, "", "createLock"], [47, 2, 1, "", "emit"], [47, 2, 1, "", "filter"], [47, 2, 1, "", "flush"], [47, 2, 1, "", "format"], [47, 2, 1, "", "handle"], [47, 2, 1, "", "handleError"], [47, 2, 1, "", "release"], [47, 2, 1, "", "removeFilter"], [47, 2, 1, "", "setFormatter"], [47, 2, 1, "", "setLevel"], [47, 2, 1, "", "setStream"]], "cc_hardware.utils.manager": [[48, 1, 1, "", "Component"], [48, 1, 1, "", "Config"], [48, 1, 1, "", "Manager"]], "cc_hardware.utils.manager.Component": [[48, 2, 1, "", "close"], [48, 3, 1, "", "config"], [48, 2, 1, "", "create_from_config"], [48, 2, 1, "", "create_from_registry"], [48, 3, 1, "", "is_okay"], [48, 2, 1, "", "register"], [48, 2, 1, "", "registered"], [48, 2, 1, "", "registry"]], "cc_hardware.utils.manager.Config": [[48, 2, 1, "", "__getstate__"], [48, 2, 1, "", "__setstate__"], [48, 2, 1, "", "__str__"], [48, 2, 1, "", "compose"], [48, 4, 1, "", "config"], [48, 2, 1, "", "copy"], [48, 2, 1, "", "create"], [48, 2, 1, "", "create_from_registry"], [48, 4, 1, "", "custom"], [48, 2, 1, "", "instantiate"], [48, 2, 1, "", "load"], [48, 2, 1, "", "merge_with"], [48, 2, 1, "", "register"], [48, 2, 1, "", "registered"], [48, 2, 1, "", "registry"], [48, 2, 1, "", "save"], [48, 2, 1, "", "to_yaml"]], "cc_hardware.utils.manager.Manager": [[48, 2, 1, "", "__enter__"], [48, 2, 1, "", "__exit__"], [48, 2, 1, "", "add"], [48, 2, 1, "", "close"], [48, 3, 1, "", "components"], [48, 3, 1, "", "is_okay"], [48, 2, 1, "", "run"]], "cc_hardware.utils.matplotlib": [[49, 5, 1, "", "set_matplotlib_style"]], "cc_hardware.utils.misc": [[52, 1, 1, "", "BlockingDeque"], [52, 1, 1, "", "SingletonABCMeta"], [52, 1, 1, "", "SingletonMeta"], [52, 5, 1, "", "arduino_upload"], [50, 0, 0, "-", "asyncio_utils"], [51, 0, 0, "-", "blocking_deque"], [52, 5, 1, "", "call_async"], [52, 5, 1, "", "call_async_gather"], [52, 5, 1, "", "call_async_value"], [52, 5, 1, "", "find_device_by_label"], [52, 5, 1, "", "find_ports"], [52, 5, 1, "", "get_object"], [53, 0, 0, "-", "misc"], [54, 0, 0, "-", "serial_utils"], [55, 0, 0, "-", "singleton"]], "cc_hardware.utils.misc.BlockingDeque": [[52, 2, 1, "", "__getattr__"], [52, 2, 1, "", "__getitem__"], [52, 2, 1, "", "__len__"], [52, 2, 1, "", "__repr__"], [52, 2, 1, "", "append"]], "cc_hardware.utils.misc.SingletonABCMeta": [[52, 2, 1, "", "__call__"], [52, 2, 1, "", "__instancecheck__"], [52, 2, 1, "", "__subclasscheck__"], [52, 2, 1, "", "instance"], [52, 2, 1, "", "register"]], "cc_hardware.utils.misc.SingletonMeta": [[52, 2, 1, "", "__call__"], [52, 2, 1, "", "instance"]], "cc_hardware.utils.misc.asyncio_utils": [[50, 5, 1, "", "call_async"], [50, 5, 1, "", "call_async_gather"], [50, 5, 1, "", "call_async_value"]], "cc_hardware.utils.misc.blocking_deque": [[51, 1, 1, "", "BlockingDeque"]], "cc_hardware.utils.misc.blocking_deque.BlockingDeque": [[51, 2, 1, "", "__getattr__"], [51, 2, 1, "", "__getitem__"], [51, 2, 1, "", "__len__"], [51, 2, 1, "", "__repr__"], [51, 2, 1, "", "append"]], "cc_hardware.utils.misc.misc": [[53, 5, 1, "", "get_object"]], "cc_hardware.utils.misc.serial_utils": [[54, 5, 1, "", "arduino_upload"], [54, 5, 1, "", "find_device_by_label"], [54, 5, 1, "", "find_ports"]], "cc_hardware.utils.misc.singleton": [[55, 1, 1, "", "SingletonABCMeta"], [55, 1, 1, "", "SingletonMeta"]], "cc_hardware.utils.misc.singleton.SingletonABCMeta": [[55, 2, 1, "", "__call__"], [55, 2, 1, "", "__instancecheck__"], [55, 2, 1, "", "__subclasscheck__"], [55, 2, 1, "", "instance"], [55, 2, 1, "", "register"]], "cc_hardware.utils.misc.singleton.SingletonMeta": [[55, 2, 1, "", "__call__"], [55, 2, 1, "", "instance"]], "cc_hardware.utils.registry": [[56, 1, 1, "", "Registry"], [56, 5, 1, "", "register"]], "cc_hardware.utils.registry.Registry": [[56, 2, 1, "", "create_from_registry"], [56, 2, 1, "", "register"], [56, 2, 1, "", "registered"], [56, 2, 1, "", "registry"]], "cc_hardware.utils.setting": [[57, 1, 1, "", "BoolSetting"], [57, 1, 1, "", "OptionSetting"], [57, 1, 1, "", "RangeSetting"], [57, 1, 1, "", "Setting"]], "cc_hardware.utils.setting.BoolSetting": [[57, 2, 1, "", "__getstate__"], [57, 2, 1, "", "__setstate__"], [57, 2, 1, "", "__str__"], [57, 2, 1, "", "compose"], [57, 4, 1, "", "config"], [57, 2, 1, "", "copy"], [57, 2, 1, "", "create"], [57, 2, 1, "", "create_from_registry"], [57, 4, 1, "", "custom"], [57, 2, 1, "", "default_factory"], [57, 2, 1, "", "instantiate"], [57, 2, 1, "", "load"], [57, 2, 1, "", "merge_with"], [57, 2, 1, "", "register"], [57, 2, 1, "", "registered"], [57, 2, 1, "", "registry"], [57, 2, 1, "", "save"], [57, 2, 1, "", "to_yaml"], [57, 2, 1, "", "update"]], "cc_hardware.utils.setting.OptionSetting": [[57, 2, 1, "", "__getstate__"], [57, 2, 1, "", "__setstate__"], [57, 2, 1, "", "__str__"], [57, 2, 1, "", "compose"], [57, 4, 1, "", "config"], [57, 2, 1, "", "copy"], [57, 2, 1, "", "create"], [57, 2, 1, "", "create_from_registry"], [57, 4, 1, "", "custom"], [57, 2, 1, "", "default_factory"], [57, 2, 1, "", "from_enum"], [57, 2, 1, "", "instantiate"], [57, 2, 1, "", "load"], [57, 2, 1, "", "merge_with"], [57, 2, 1, "", "register"], [57, 2, 1, "", "registered"], [57, 2, 1, "", "registry"], [57, 2, 1, "", "save"], [57, 2, 1, "", "to_yaml"], [57, 2, 1, "", "update"]], "cc_hardware.utils.setting.RangeSetting": [[57, 2, 1, "", "__getstate__"], [57, 2, 1, "", "__setstate__"], [57, 2, 1, "", "__str__"], [57, 2, 1, "", "compose"], [57, 4, 1, "", "config"], [57, 2, 1, "", "copy"], [57, 2, 1, "", "create"], [57, 2, 1, "", "create_from_registry"], [57, 4, 1, "", "custom"], [57, 2, 1, "", "default_factory"], [57, 2, 1, "", "instantiate"], [57, 2, 1, "", "load"], [57, 2, 1, "", "merge_with"], [57, 2, 1, "", "register"], [57, 2, 1, "", "registered"], [57, 2, 1, "", "registry"], [57, 2, 1, "", "save"], [57, 2, 1, "", "to_yaml"], [57, 2, 1, "", "update"]], "cc_hardware.utils.setting.Setting": [[57, 2, 1, "", "__getstate__"], [57, 2, 1, "", "__setstate__"], [57, 2, 1, "", "__str__"], [57, 2, 1, "", "compose"], [57, 4, 1, "", "config"], [57, 2, 1, "", "copy"], [57, 2, 1, "", "create"], [57, 2, 1, "", "create_from_registry"], [57, 4, 1, "", "custom"], [57, 2, 1, "", "default_factory"], [57, 2, 1, "", "instantiate"], [57, 2, 1, "", "load"], [57, 2, 1, "", "merge_with"], [57, 2, 1, "", "register"], [57, 2, 1, "", "registered"], [57, 2, 1, "", "registry"], [57, 2, 1, "", "save"], [57, 2, 1, "", "to_yaml"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"contribut": 0, "setup": 0, "clone": 0, "repo": [0, 7], "instal": [0, 13], "deploi": 0, "your": 0, "chang": 0, "guidelin": 0, "file": 0, "structur": [0, 7], "edit": 0, "sourc": 0, "code": 0, "comment": 0, "document": [0, 7], "build": 0, "non": 1, "line": 1, "sight": 1, "nlo": 1, "detect": 1, "camera": [2, 7, 12, 13, 14, 15, 16, 17], "viewer": 2, "exampl": 3, "avail": 3, "spad": [4, 21, 22, 23, 24, 25, 26], "dashboard": [4, 36, 37, 38, 39, 40], "spad_dashboard": 4, "py": 4, "spad_wrapp": [4, 24], "stepper": [5, 6], "gantri": 5, "collab": 5, "motor": 6, "control": 6, "cultur": 7, "hardwar": 7, "get": 7, "start": 7, "websit": 7, "other": 7, "detail": 7, "packag": [7, 8, 14, 18, 21, 27, 38, 42, 46, 52], "api": 8, "refer": [8, 59], "cc_hardwar": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "algo": [9, 10, 11], "algorithm": 9, "modul": [9, 10, 12, 13, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 36, 37, 39, 40, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57], "content": [9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "class": [9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 51, 52, 55, 56, 57], "aruco": 10, "submodul": [11, 14, 18, 21, 27, 38, 42, 46, 52], "driver": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], "flir": 13, "pyspin": 13, "pkl": [15, 22], "realsens": 16, "usb": 17, "subpackag": [18, 33, 42], "safe_seri": 19, "sensor": 20, "tmf8828": 25, "vl53l8ch": 26, "stepper_motor": [27, 28, 29, 30, 31, 32], "kinesis_stepp": 28, "stepper_control": 29, "stepper_system": 31, "telemetrix_stepp": 32, "tool": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": 34, "function": [34, 39, 46, 49, 50, 52, 53, 54, 56], "camera_view": 35, "dash": 36, "matplotlib": [39, 49], "pyqtgraph": 40, "flash": 41, "jogger": 43, "util": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "constant": 44, "file_handl": 45, "logger": 47, "manag": 48, "misc": [50, 51, 52, 53, 54, 55], "asyncio_util": 50, "blocking_dequ": 51, "serial_util": 54, "singleton": 55, "registri": 56, "set": 57, "transform": 58}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"Contributing": [[0, "contributing"]], "Setup": [[0, "setup"]], "Cloning the Repo": [[0, "cloning-the-repo"]], "Installing": [[0, "installing"]], "Deploy your Changes": [[0, "deploy-your-changes"]], "Guidelines": [[0, "guidelines"]], "File Structure": [[0, "file-structure"]], "Editing the Source Code": [[0, "editing-the-source-code"]], "Commenting": [[0, "commenting"]], "Editing the Documentation": [[0, "editing-the-documentation"]], "Building the Documentation": [[0, "building-the-documentation"]], "Non-line-of-sight (NLOS) Detection": [[1, "non-line-of-sight-nlos-detection"]], "Camera Viewer": [[2, "camera-viewer"]], "Examples": [[3, "examples"]], "Available Examples": [[3, "available-examples"]], "SPAD Dashboard": [[4, "spad-dashboard"]], "spad_dashboard.py": [[4, "spad-dashboard-py"]], "spad_wrappers.py": [[4, "spad-wrappers-py"]], "Stepper Gantry Collab": [[5, "stepper-gantry-collab"]], "Stepper Motor Controller": [[6, "stepper-motor-controller"]], "Camera Culture Hardware Repo": [[7, "camera-culture-hardware-repo"]], "Getting Started": [[7, "getting-started"]], "Documentation Website": [[7, "documentation-website"]], "Other Details": [[7, "other-details"]], "Repo Structure": [[7, "repo-structure"]], "Package Structure": [[7, "package-structure"]], "API Reference": [[8, "api-reference"]], "Packages": [[8, "packages"]], "cc_hardware.algos.algorithm": [[9, "module-cc_hardware.algos.algorithm"]], "Module Contents": [[9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [34, "module-contents"], [36, "module-contents"], [37, "module-contents"], [39, "module-contents"], [40, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"]], "Classes": [[9, "classes"], [10, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [51, "classes"], [52, "classes"], [55, "classes"], [56, "classes"], [57, "classes"]], "cc_hardware.algos.aruco": [[10, "module-cc_hardware.algos.aruco"]], "cc_hardware.algos": [[11, "module-cc_hardware.algos"]], "Submodules": [[11, "submodules"], [14, "submodules"], [18, "submodules"], [21, "submodules"], [27, "submodules"], [38, "submodules"], [42, "submodules"], [46, "submodules"], [52, "submodules"]], "cc_hardware.drivers.cameras.camera": [[12, "module-cc_hardware.drivers.cameras.camera"]], "cc_hardware.drivers.cameras.flir": [[13, "module-cc_hardware.drivers.cameras.flir"]], "PySpin Installation": [[13, "pyspin-installation"]], "cc_hardware.drivers.cameras": [[14, "module-cc_hardware.drivers.cameras"]], "Package Contents": [[14, "package-contents"], [18, "package-contents"], [21, "package-contents"], [27, "package-contents"], [38, "package-contents"], [42, "package-contents"], [46, "package-contents"], [52, "package-contents"]], "cc_hardware.drivers.cameras.pkl": [[15, "module-cc_hardware.drivers.cameras.pkl"]], "cc_hardware.drivers.cameras.realsense": [[16, "module-cc_hardware.drivers.cameras.realsense"]], "cc_hardware.drivers.cameras.usb": [[17, "module-cc_hardware.drivers.cameras.usb"]], "cc_hardware.drivers": [[18, "module-cc_hardware.drivers"]], "Subpackages": [[18, "subpackages"], [33, "subpackages"], [42, "subpackages"]], "cc_hardware.drivers.safe_serial": [[19, "module-cc_hardware.drivers.safe_serial"]], "cc_hardware.drivers.sensor": [[20, "module-cc_hardware.drivers.sensor"]], "cc_hardware.drivers.spads": [[21, "module-cc_hardware.drivers.spads"]], "cc_hardware.drivers.spads.pkl": [[22, "module-cc_hardware.drivers.spads.pkl"]], "cc_hardware.drivers.spads.spad": [[23, "module-cc_hardware.drivers.spads.spad"]], "cc_hardware.drivers.spads.spad_wrappers": [[24, "module-cc_hardware.drivers.spads.spad_wrappers"]], "cc_hardware.drivers.spads.tmf8828": [[25, "module-cc_hardware.drivers.spads.tmf8828"]], "cc_hardware.drivers.spads.vl53l8ch": [[26, "module-cc_hardware.drivers.spads.vl53l8ch"]], "cc_hardware.drivers.stepper_motors": [[27, "module-cc_hardware.drivers.stepper_motors"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[28, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[29, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[30, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[31, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[32, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "cc_hardware": [[33, "module-cc_hardware"]], "cc_hardware.tools.calibration": [[34, "module-cc_hardware.tools.calibration"]], "Functions": [[34, "functions"], [39, "functions"], [46, "functions"], [49, "functions"], [50, "functions"], [52, "functions"], [53, "functions"], [54, "functions"], [56, "functions"]], "cc_hardware.tools.camera_viewer": [[35, "module-cc_hardware.tools.camera_viewer"]], "cc_hardware.tools.dashboards.dash": [[36, "module-cc_hardware.tools.dashboards.dash"]], "cc_hardware.tools.dashboards.dashboard": [[37, "module-cc_hardware.tools.dashboards.dashboard"]], "cc_hardware.tools.dashboards": [[38, "module-cc_hardware.tools.dashboards"]], "cc_hardware.tools.dashboards.matplotlib": [[39, "module-cc_hardware.tools.dashboards.matplotlib"]], "cc_hardware.tools.dashboards.pyqtgraph": [[40, "module-cc_hardware.tools.dashboards.pyqtgraph"]], "cc_hardware.tools.flash": [[41, "module-cc_hardware.tools.flash"]], "cc_hardware.tools": [[42, "module-cc_hardware.tools"]], "cc_hardware.tools.jogger": [[43, "module-cc_hardware.tools.jogger"]], "cc_hardware.utils.constants": [[44, "module-cc_hardware.utils.constants"]], "cc_hardware.utils.file_handlers": [[45, "module-cc_hardware.utils.file_handlers"]], "cc_hardware.utils": [[46, "module-cc_hardware.utils"]], "cc_hardware.utils.logger": [[47, "module-cc_hardware.utils.logger"]], "cc_hardware.utils.manager": [[48, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.matplotlib": [[49, "module-cc_hardware.utils.matplotlib"]], "cc_hardware.utils.misc.asyncio_utils": [[50, "module-cc_hardware.utils.misc.asyncio_utils"]], "cc_hardware.utils.misc.blocking_deque": [[51, "module-cc_hardware.utils.misc.blocking_deque"]], "cc_hardware.utils.misc": [[52, "module-cc_hardware.utils.misc"]], "cc_hardware.utils.misc.misc": [[53, "module-cc_hardware.utils.misc.misc"]], "cc_hardware.utils.misc.serial_utils": [[54, "module-cc_hardware.utils.misc.serial_utils"]], "cc_hardware.utils.misc.singleton": [[55, "module-cc_hardware.utils.misc.singleton"]], "cc_hardware.utils.registry": [[56, "module-cc_hardware.utils.registry"]], "cc_hardware.utils.setting": [[57, "module-cc_hardware.utils.setting"]], "cc_hardware.utils.transformations": [[58, "module-cc_hardware.utils.transformations"]], "Reference": [[59, "reference"]]}, "indexentries": {"algorithm (class in cc_hardware.algos.algorithm)": [[9, "cc_hardware.algos.algorithm.Algorithm"]], "cc_hardware.algos.algorithm": [[9, "module-cc_hardware.algos.algorithm"]], "close() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.close"]], "create_from_registry() (algorithm class method)": [[9, "cc_hardware.algos.algorithm.Algorithm.create_from_registry"]], "is_okay (algorithm property)": [[9, "cc_hardware.algos.algorithm.Algorithm.is_okay"]], "module": [[9, "module-cc_hardware.algos.algorithm"], [10, "module-cc_hardware.algos.aruco"], [11, "module-cc_hardware.algos"], [12, "module-cc_hardware.drivers.cameras.camera"], [13, "module-cc_hardware.drivers.cameras.flir"], [14, "module-cc_hardware.drivers.cameras"], [15, "module-cc_hardware.drivers.cameras.pkl"], [16, "module-cc_hardware.drivers.cameras.realsense"], [17, "module-cc_hardware.drivers.cameras.usb"], [18, "module-cc_hardware.drivers"], [19, "module-cc_hardware.drivers.safe_serial"], [20, "module-cc_hardware.drivers.sensor"], [21, "module-cc_hardware.drivers.spads"], [22, "module-cc_hardware.drivers.spads.pkl"], [23, "module-cc_hardware.drivers.spads.spad"], [24, "module-cc_hardware.drivers.spads.spad_wrappers"], [25, "module-cc_hardware.drivers.spads.tmf8828"], [26, "module-cc_hardware.drivers.spads.vl53l8ch"], [27, "module-cc_hardware.drivers.stepper_motors"], [28, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"], [29, "module-cc_hardware.drivers.stepper_motors.stepper_controller"], [30, "module-cc_hardware.drivers.stepper_motors.stepper_motor"], [31, "module-cc_hardware.drivers.stepper_motors.stepper_system"], [32, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"], [33, "module-cc_hardware"], [34, "module-cc_hardware.tools.calibration"], [35, "module-cc_hardware.tools.camera_viewer"], [36, "module-cc_hardware.tools.dashboards.dash"], [37, "module-cc_hardware.tools.dashboards.dashboard"], [38, "module-cc_hardware.tools.dashboards"], [39, "module-cc_hardware.tools.dashboards.matplotlib"], [40, "module-cc_hardware.tools.dashboards.pyqtgraph"], [41, "module-cc_hardware.tools.flash"], [42, "module-cc_hardware.tools"], [43, "module-cc_hardware.tools.jogger"], [44, "module-cc_hardware.utils.constants"], [45, "module-cc_hardware.utils.file_handlers"], [46, "module-cc_hardware.utils"], [47, "module-cc_hardware.utils.logger"], [48, "module-cc_hardware.utils.manager"], [49, "module-cc_hardware.utils.matplotlib"], [50, "module-cc_hardware.utils.misc.asyncio_utils"], [51, "module-cc_hardware.utils.misc.blocking_deque"], [52, "module-cc_hardware.utils.misc"], [53, "module-cc_hardware.utils.misc.misc"], [54, "module-cc_hardware.utils.misc.serial_utils"], [55, "module-cc_hardware.utils.misc.singleton"], [56, "module-cc_hardware.utils.registry"], [57, "module-cc_hardware.utils.setting"], [58, "module-cc_hardware.utils.transformations"]], "register() (algorithm class method)": [[9, "cc_hardware.algos.algorithm.Algorithm.register"]], "registered() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.registered"]], "registry() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.registry"]], "run() (algorithm method)": [[9, "cc_hardware.algos.algorithm.Algorithm.run"]], "arucolocalizationalgorithm (class in cc_hardware.algos.aruco)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm"]], "cc_hardware.algos.aruco": [[10, "module-cc_hardware.algos.aruco"]], "close() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.close"]], "is_okay (arucolocalizationalgorithm property)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.is_okay"]], "run() (arucolocalizationalgorithm method)": [[10, "cc_hardware.algos.aruco.ArucoLocalizationAlgorithm.run"]], "cc_hardware.algos": [[11, "module-cc_hardware.algos"]], "camera (class in cc_hardware.drivers.cameras.camera)": [[12, "cc_hardware.drivers.cameras.camera.Camera"]], "cameraconfig (class in cc_hardware.drivers.cameras.camera)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig"]], "__del__() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.__del__"], [14, "cc_hardware.drivers.cameras.Camera.__del__"], [18, "cc_hardware.drivers.Camera.__del__"]], "__getstate__() (cameraconfig method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.__getstate__"], [14, "cc_hardware.drivers.cameras.CameraConfig.__getstate__"], [18, "cc_hardware.drivers.CameraConfig.__getstate__"]], "__setstate__() (cameraconfig method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.__setstate__"], [14, "cc_hardware.drivers.cameras.CameraConfig.__setstate__"], [18, "cc_hardware.drivers.CameraConfig.__setstate__"]], "__str__() (cameraconfig method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.__str__"], [14, "cc_hardware.drivers.cameras.CameraConfig.__str__"], [18, "cc_hardware.drivers.CameraConfig.__str__"]], "accumulate() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.accumulate"], [14, "cc_hardware.drivers.cameras.Camera.accumulate"], [18, "cc_hardware.drivers.Camera.accumulate"]], "calibrate() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.calibrate"], [14, "cc_hardware.drivers.cameras.Camera.calibrate"], [18, "cc_hardware.drivers.Camera.calibrate"]], "cc_hardware.drivers.cameras.camera": [[12, "module-cc_hardware.drivers.cameras.camera"]], "close() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.close"], [14, "cc_hardware.drivers.cameras.Camera.close"], [18, "cc_hardware.drivers.Camera.close"]], "compose() (cameraconfig class method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.compose"], [14, "cc_hardware.drivers.cameras.CameraConfig.compose"], [18, "cc_hardware.drivers.CameraConfig.compose"]], "config (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.config"], [14, "cc_hardware.drivers.cameras.Camera.config"], [18, "cc_hardware.drivers.Camera.config"]], "config (cameraconfig attribute)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.config"], [14, "cc_hardware.drivers.cameras.CameraConfig.config"], [18, "cc_hardware.drivers.CameraConfig.config"]], "copy() (cameraconfig method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.copy"], [14, "cc_hardware.drivers.cameras.CameraConfig.copy"], [18, "cc_hardware.drivers.CameraConfig.copy"]], "create() (cameraconfig class method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.create"], [14, "cc_hardware.drivers.cameras.CameraConfig.create"], [18, "cc_hardware.drivers.CameraConfig.create"]], "create_from_config() (camera class method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.create_from_config"], [14, "cc_hardware.drivers.cameras.Camera.create_from_config"], [18, "cc_hardware.drivers.Camera.create_from_config"]], "create_from_registry() (camera class method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.create_from_registry"], [14, "cc_hardware.drivers.cameras.Camera.create_from_registry"], [18, "cc_hardware.drivers.Camera.create_from_registry"]], "create_from_registry() (cameraconfig class method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.create_from_registry"], [14, "cc_hardware.drivers.cameras.CameraConfig.create_from_registry"], [18, "cc_hardware.drivers.CameraConfig.create_from_registry"]], "custom (cameraconfig attribute)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.custom"], [14, "cc_hardware.drivers.cameras.CameraConfig.custom"], [18, "cc_hardware.drivers.CameraConfig.custom"]], "distortion_coefficients (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.distortion_coefficients"], [14, "cc_hardware.drivers.cameras.Camera.distortion_coefficients"], [18, "cc_hardware.drivers.Camera.distortion_coefficients"]], "instantiate() (cameraconfig class method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.instantiate"], [14, "cc_hardware.drivers.cameras.CameraConfig.instantiate"], [18, "cc_hardware.drivers.CameraConfig.instantiate"]], "intrinsic_matrix (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.intrinsic_matrix"], [14, "cc_hardware.drivers.cameras.Camera.intrinsic_matrix"], [18, "cc_hardware.drivers.Camera.intrinsic_matrix"]], "is_okay (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.is_okay"], [14, "cc_hardware.drivers.cameras.Camera.is_okay"], [18, "cc_hardware.drivers.Camera.is_okay"]], "load() (cameraconfig class method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.load"], [14, "cc_hardware.drivers.cameras.CameraConfig.load"], [18, "cc_hardware.drivers.CameraConfig.load"]], "merge_with() (cameraconfig method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.merge_with"], [14, "cc_hardware.drivers.cameras.CameraConfig.merge_with"], [18, "cc_hardware.drivers.CameraConfig.merge_with"]], "register() (camera class method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.register"], [14, "cc_hardware.drivers.cameras.Camera.register"], [18, "cc_hardware.drivers.Camera.register"]], "register() (cameraconfig class method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.register"], [14, "cc_hardware.drivers.cameras.CameraConfig.register"], [18, "cc_hardware.drivers.CameraConfig.register"]], "registered() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.registered"], [14, "cc_hardware.drivers.cameras.Camera.registered"], [18, "cc_hardware.drivers.Camera.registered"]], "registered() (cameraconfig method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.registered"], [14, "cc_hardware.drivers.cameras.CameraConfig.registered"], [18, "cc_hardware.drivers.CameraConfig.registered"]], "registry() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.registry"], [14, "cc_hardware.drivers.cameras.Camera.registry"], [18, "cc_hardware.drivers.Camera.registry"]], "registry() (cameraconfig method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.registry"], [14, "cc_hardware.drivers.cameras.CameraConfig.registry"], [18, "cc_hardware.drivers.CameraConfig.registry"]], "resolution (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.resolution"], [14, "cc_hardware.drivers.cameras.Camera.resolution"], [18, "cc_hardware.drivers.Camera.resolution"]], "save() (cameraconfig method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.save"], [14, "cc_hardware.drivers.cameras.CameraConfig.save"], [18, "cc_hardware.drivers.CameraConfig.save"]], "settings (camera property)": [[12, "cc_hardware.drivers.cameras.camera.Camera.settings"], [14, "cc_hardware.drivers.cameras.Camera.settings"], [18, "cc_hardware.drivers.Camera.settings"]], "settings (cameraconfig property)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.settings"], [14, "cc_hardware.drivers.cameras.CameraConfig.settings"], [18, "cc_hardware.drivers.CameraConfig.settings"]], "to_yaml() (cameraconfig method)": [[12, "cc_hardware.drivers.cameras.camera.CameraConfig.to_yaml"], [14, "cc_hardware.drivers.cameras.CameraConfig.to_yaml"], [18, "cc_hardware.drivers.CameraConfig.to_yaml"]], "update() (camera method)": [[12, "cc_hardware.drivers.cameras.camera.Camera.update"], [14, "cc_hardware.drivers.cameras.Camera.update"], [18, "cc_hardware.drivers.Camera.update"]], "flircamera (class in cc_hardware.drivers.cameras.flir)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera"]], "grasshopperflircamera (class in cc_hardware.drivers.cameras.flir)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera"]], "__del__() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.__del__"]], "__del__() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.__del__"]], "accumulate() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.accumulate"]], "accumulate() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.accumulate"]], "calibrate() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.calibrate"]], "calibrate() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.calibrate"]], "cc_hardware.drivers.cameras.flir": [[13, "module-cc_hardware.drivers.cameras.flir"]], "close() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.close"]], "close() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.close"]], "config (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.config"]], "config (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.config"]], "create_from_config() (flircamera class method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.create_from_config"]], "create_from_config() (grasshopperflircamera class method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.create_from_config"]], "create_from_registry() (flircamera class method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.create_from_registry"]], "create_from_registry() (grasshopperflircamera class method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.create_from_registry"]], "distortion_coefficients (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.distortion_coefficients"]], "distortion_coefficients (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.distortion_coefficients"]], "intrinsic_matrix (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.intrinsic_matrix"]], "intrinsic_matrix (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.intrinsic_matrix"]], "is_okay (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.is_okay"]], "is_okay (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.is_okay"]], "register() (flircamera class method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.register"]], "register() (grasshopperflircamera class method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.register"]], "registered() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.registered"]], "registered() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.registered"]], "registry() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.registry"]], "registry() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.registry"]], "resolution (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.resolution"]], "resolution (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.resolution"]], "settings (flircamera property)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.settings"]], "settings (grasshopperflircamera property)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.settings"]], "update() (flircamera method)": [[13, "cc_hardware.drivers.cameras.flir.FlirCamera.update"]], "update() (grasshopperflircamera method)": [[13, "cc_hardware.drivers.cameras.flir.GrasshopperFlirCamera.update"]], "camera (class in cc_hardware.drivers.cameras)": [[14, "cc_hardware.drivers.cameras.Camera"]], "cameraconfig (class in cc_hardware.drivers.cameras)": [[14, "cc_hardware.drivers.cameras.CameraConfig"]], "cc_hardware.drivers.cameras": [[14, "module-cc_hardware.drivers.cameras"]], "pklcamera (class in cc_hardware.drivers.cameras.pkl)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera"]], "accumulate() (pklcamera method)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.accumulate"]], "cc_hardware.drivers.cameras.pkl": [[15, "module-cc_hardware.drivers.cameras.pkl"]], "close() (pklcamera method)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.close"]], "distortion_coefficients (pklcamera property)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.distortion_coefficients"]], "intrinsic_matrix (pklcamera property)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.intrinsic_matrix"]], "is_okay (pklcamera property)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.is_okay"]], "resolution (pklcamera property)": [[15, "cc_hardware.drivers.cameras.pkl.PklCamera.resolution"]], "realsensecamera (class in cc_hardware.drivers.cameras.realsense)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera"]], "realsenseconfig (class in cc_hardware.drivers.cameras.realsense)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseConfig"]], "accumulate() (realsensecamera method)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.accumulate"]], "cc_hardware.drivers.cameras.realsense": [[16, "module-cc_hardware.drivers.cameras.realsense"]], "close() (realsensecamera method)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.close"]], "config (realsensecamera property)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.config"]], "distortion_coefficients (realsensecamera property)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.distortion_coefficients"]], "intrinsic_matrix (realsensecamera property)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.intrinsic_matrix"]], "is_okay (realsensecamera property)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.is_okay"]], "resolution (realsensecamera property)": [[16, "cc_hardware.drivers.cameras.realsense.RealsenseCamera.resolution"]], "usbcamera (class in cc_hardware.drivers.cameras.usb)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera"]], "usbcameraconfig (class in cc_hardware.drivers.cameras.usb)": [[17, "cc_hardware.drivers.cameras.usb.USBCameraConfig"]], "accumulate() (usbcamera method)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.accumulate"]], "cc_hardware.drivers.cameras.usb": [[17, "module-cc_hardware.drivers.cameras.usb"]], "close() (usbcamera method)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.close"]], "distortion_coefficients (usbcamera property)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.distortion_coefficients"]], "intrinsic_matrix (usbcamera property)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.intrinsic_matrix"]], "is_okay (usbcamera property)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.is_okay"]], "resolution (usbcamera property)": [[17, "cc_hardware.drivers.cameras.usb.USBCamera.resolution"]], "camera (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.Camera"]], "cameraconfig (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.CameraConfig"]], "dummysteppermotor (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.DummyStepperMotor"]], "spadsensor (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.SPADSensorConfig"]], "safeserial (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.SafeSerial"]], "sensor (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.Sensor"]], "sensorconfig (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.SensorConfig"]], "steppermotor (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.StepperMotor"]], "steppermotorsystem (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis"]], "__del__() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.__del__"], [21, "cc_hardware.drivers.spads.SPADSensor.__del__"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.__del__"]], "__del__() (sensor method)": [[18, "cc_hardware.drivers.Sensor.__del__"], [20, "cc_hardware.drivers.sensor.Sensor.__del__"]], "__dir__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__dir__"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__dir__"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__dir__"]], "__format__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__format__"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__format__"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__format__"]], "__getattr__() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.__getattr__"], [19, "cc_hardware.drivers.safe_serial.SafeSerial.__getattr__"]], "__getattr__() (steppermotorsystem method)": [[18, "cc_hardware.drivers.StepperMotorSystem.__getattr__"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.__getattr__"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.__getattr__"]], "__getstate__() (spadsensorconfig method)": [[18, "cc_hardware.drivers.SPADSensorConfig.__getstate__"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.__getstate__"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__getstate__"]], "__getstate__() (sensorconfig method)": [[18, "cc_hardware.drivers.SensorConfig.__getstate__"], [20, "cc_hardware.drivers.sensor.SensorConfig.__getstate__"]], "__hash__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__hash__"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__hash__"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__hash__"]], "__reduce_ex__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__reduce_ex__"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__reduce_ex__"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__reduce_ex__"]], "__repr__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__repr__"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__repr__"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__repr__"]], "__setstate__() (spadsensorconfig method)": [[18, "cc_hardware.drivers.SPADSensorConfig.__setstate__"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.__setstate__"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__setstate__"]], "__setstate__() (sensorconfig method)": [[18, "cc_hardware.drivers.SensorConfig.__setstate__"], [20, "cc_hardware.drivers.sensor.SensorConfig.__setstate__"]], "__str__() (spadsensorconfig method)": [[18, "cc_hardware.drivers.SPADSensorConfig.__str__"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.__str__"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.__str__"]], "__str__() (sensorconfig method)": [[18, "cc_hardware.drivers.SensorConfig.__str__"], [20, "cc_hardware.drivers.sensor.SensorConfig.__str__"]], "__str__() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.__str__"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.__str__"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.__str__"]], "accumulate() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.accumulate"], [21, "cc_hardware.drivers.spads.SPADSensor.accumulate"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.accumulate"]], "calibrate() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.calibrate"], [21, "cc_hardware.drivers.spads.SPADSensor.calibrate"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.calibrate"]], "calibrate() (sensor method)": [[18, "cc_hardware.drivers.Sensor.calibrate"], [20, "cc_hardware.drivers.sensor.Sensor.calibrate"]], "cc_hardware.drivers": [[18, "module-cc_hardware.drivers"]], "close() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.close"], [21, "cc_hardware.drivers.spads.SPADSensor.close"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.close"]], "close() (sensor method)": [[18, "cc_hardware.drivers.Sensor.close"], [20, "cc_hardware.drivers.sensor.Sensor.close"]], "close() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.close"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.close"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.close"]], "compose() (spadsensorconfig class method)": [[18, "cc_hardware.drivers.SPADSensorConfig.compose"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.compose"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.compose"]], "compose() (sensorconfig class method)": [[18, "cc_hardware.drivers.SensorConfig.compose"], [20, "cc_hardware.drivers.sensor.SensorConfig.compose"]], "config (spadsensor property)": [[18, "cc_hardware.drivers.SPADSensor.config"], [21, "cc_hardware.drivers.spads.SPADSensor.config"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.config"]], "config (spadsensorconfig attribute)": [[18, "cc_hardware.drivers.SPADSensorConfig.config"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.config"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.config"]], "config (sensor property)": [[18, "cc_hardware.drivers.Sensor.config"], [20, "cc_hardware.drivers.sensor.Sensor.config"]], "config (sensorconfig attribute)": [[18, "cc_hardware.drivers.SensorConfig.config"], [20, "cc_hardware.drivers.sensor.SensorConfig.config"]], "copy() (spadsensorconfig method)": [[18, "cc_hardware.drivers.SPADSensorConfig.copy"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.copy"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.copy"]], "copy() (sensorconfig method)": [[18, "cc_hardware.drivers.SensorConfig.copy"], [20, "cc_hardware.drivers.sensor.SensorConfig.copy"]], "create() (spadsensorconfig class method)": [[18, "cc_hardware.drivers.SPADSensorConfig.create"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.create"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.create"]], "create() (safeserial class method)": [[18, "cc_hardware.drivers.SafeSerial.create"], [19, "cc_hardware.drivers.safe_serial.SafeSerial.create"]], "create() (sensorconfig class method)": [[18, "cc_hardware.drivers.SensorConfig.create"], [20, "cc_hardware.drivers.sensor.SensorConfig.create"]], "create_from_config() (spadsensor class method)": [[18, "cc_hardware.drivers.SPADSensor.create_from_config"], [21, "cc_hardware.drivers.spads.SPADSensor.create_from_config"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.create_from_config"]], "create_from_config() (sensor class method)": [[18, "cc_hardware.drivers.Sensor.create_from_config"], [20, "cc_hardware.drivers.sensor.Sensor.create_from_config"]], "create_from_registry() (spadsensor class method)": [[18, "cc_hardware.drivers.SPADSensor.create_from_registry"], [21, "cc_hardware.drivers.spads.SPADSensor.create_from_registry"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.create_from_registry"]], "create_from_registry() (spadsensorconfig class method)": [[18, "cc_hardware.drivers.SPADSensorConfig.create_from_registry"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.create_from_registry"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.create_from_registry"]], "create_from_registry() (sensor class method)": [[18, "cc_hardware.drivers.Sensor.create_from_registry"], [20, "cc_hardware.drivers.sensor.Sensor.create_from_registry"]], "create_from_registry() (sensorconfig class method)": [[18, "cc_hardware.drivers.SensorConfig.create_from_registry"], [20, "cc_hardware.drivers.sensor.SensorConfig.create_from_registry"]], "create_from_registry() (steppermotor class method)": [[18, "cc_hardware.drivers.StepperMotor.create_from_registry"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.create_from_registry"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.create_from_registry"]], "custom (spadsensorconfig attribute)": [[18, "cc_hardware.drivers.SPADSensorConfig.custom"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.custom"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.custom"]], "custom (sensorconfig attribute)": [[18, "cc_hardware.drivers.SensorConfig.custom"], [20, "cc_hardware.drivers.sensor.SensorConfig.custom"]], "home() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.home"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.home"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.home"]], "instantiate() (spadsensorconfig class method)": [[18, "cc_hardware.drivers.SPADSensorConfig.instantiate"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.instantiate"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.instantiate"]], "instantiate() (sensorconfig class method)": [[18, "cc_hardware.drivers.SensorConfig.instantiate"], [20, "cc_hardware.drivers.sensor.SensorConfig.instantiate"]], "is_okay (spadsensor property)": [[18, "cc_hardware.drivers.SPADSensor.is_okay"], [21, "cc_hardware.drivers.spads.SPADSensor.is_okay"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.is_okay"]], "is_okay (sensor property)": [[18, "cc_hardware.drivers.Sensor.is_okay"], [20, "cc_hardware.drivers.sensor.Sensor.is_okay"]], "is_okay (steppermotor property)": [[18, "cc_hardware.drivers.StepperMotor.is_okay"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.is_okay"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.is_okay"]], "load() (spadsensorconfig class method)": [[18, "cc_hardware.drivers.SPADSensorConfig.load"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.load"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.load"]], "load() (sensorconfig class method)": [[18, "cc_hardware.drivers.SensorConfig.load"], [20, "cc_hardware.drivers.sensor.SensorConfig.load"]], "merge_with() (spadsensorconfig method)": [[18, "cc_hardware.drivers.SPADSensorConfig.merge_with"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.merge_with"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.merge_with"]], "merge_with() (sensorconfig method)": [[18, "cc_hardware.drivers.SensorConfig.merge_with"], [20, "cc_hardware.drivers.sensor.SensorConfig.merge_with"]], "move_by() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.move_by"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.move_by"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_by"]], "move_by() (steppermotorsystem method)": [[18, "cc_hardware.drivers.StepperMotorSystem.move_by"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_by"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_by"]], "move_to() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.move_to"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.move_to"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.move_to"]], "move_to() (steppermotorsystem method)": [[18, "cc_hardware.drivers.StepperMotorSystem.move_to"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystem.move_to"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem.move_to"]], "name() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.name"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.name"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.name"]], "num_bins (spadsensor property)": [[18, "cc_hardware.drivers.SPADSensor.num_bins"], [21, "cc_hardware.drivers.spads.SPADSensor.num_bins"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.num_bins"]], "position (steppermotor property)": [[18, "cc_hardware.drivers.StepperMotor.position"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.position"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.position"]], "read() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.read"], [19, "cc_hardware.drivers.safe_serial.SafeSerial.read"]], "register() (spadsensor class method)": [[18, "cc_hardware.drivers.SPADSensor.register"], [21, "cc_hardware.drivers.spads.SPADSensor.register"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.register"]], "register() (spadsensorconfig class method)": [[18, "cc_hardware.drivers.SPADSensorConfig.register"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.register"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.register"]], "register() (sensor class method)": [[18, "cc_hardware.drivers.Sensor.register"], [20, "cc_hardware.drivers.sensor.Sensor.register"]], "register() (sensorconfig class method)": [[18, "cc_hardware.drivers.SensorConfig.register"], [20, "cc_hardware.drivers.sensor.SensorConfig.register"]], "register() (steppermotor class method)": [[18, "cc_hardware.drivers.StepperMotor.register"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.register"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.register"]], "registered() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.registered"], [21, "cc_hardware.drivers.spads.SPADSensor.registered"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.registered"]], "registered() (spadsensorconfig method)": [[18, "cc_hardware.drivers.SPADSensorConfig.registered"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.registered"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.registered"]], "registered() (sensor method)": [[18, "cc_hardware.drivers.Sensor.registered"], [20, "cc_hardware.drivers.sensor.Sensor.registered"]], "registered() (sensorconfig method)": [[18, "cc_hardware.drivers.SensorConfig.registered"], [20, "cc_hardware.drivers.sensor.SensorConfig.registered"]], "registered() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.registered"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.registered"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.registered"]], "registry() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.registry"], [21, "cc_hardware.drivers.spads.SPADSensor.registry"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.registry"]], "registry() (spadsensorconfig method)": [[18, "cc_hardware.drivers.SPADSensorConfig.registry"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.registry"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.registry"]], "registry() (sensor method)": [[18, "cc_hardware.drivers.Sensor.registry"], [20, "cc_hardware.drivers.sensor.Sensor.registry"]], "registry() (sensorconfig method)": [[18, "cc_hardware.drivers.SensorConfig.registry"], [20, "cc_hardware.drivers.sensor.SensorConfig.registry"]], "registry() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.registry"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.registry"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.registry"]], "resolution (spadsensor property)": [[18, "cc_hardware.drivers.SPADSensor.resolution"], [21, "cc_hardware.drivers.spads.SPADSensor.resolution"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.resolution"]], "save() (spadsensorconfig method)": [[18, "cc_hardware.drivers.SPADSensorConfig.save"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.save"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.save"]], "save() (sensorconfig method)": [[18, "cc_hardware.drivers.SensorConfig.save"], [20, "cc_hardware.drivers.sensor.SensorConfig.save"]], "settings (spadsensor property)": [[18, "cc_hardware.drivers.SPADSensor.settings"], [21, "cc_hardware.drivers.spads.SPADSensor.settings"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.settings"]], "settings (spadsensorconfig property)": [[18, "cc_hardware.drivers.SPADSensorConfig.settings"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.settings"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.settings"]], "settings (sensor property)": [[18, "cc_hardware.drivers.Sensor.settings"], [20, "cc_hardware.drivers.sensor.Sensor.settings"]], "settings (sensorconfig property)": [[18, "cc_hardware.drivers.SensorConfig.settings"], [20, "cc_hardware.drivers.sensor.SensorConfig.settings"]], "to_yaml() (spadsensorconfig method)": [[18, "cc_hardware.drivers.SPADSensorConfig.to_yaml"], [21, "cc_hardware.drivers.spads.SPADSensorConfig.to_yaml"], [23, "cc_hardware.drivers.spads.spad.SPADSensorConfig.to_yaml"]], "to_yaml() (sensorconfig method)": [[18, "cc_hardware.drivers.SensorConfig.to_yaml"], [20, "cc_hardware.drivers.sensor.SensorConfig.to_yaml"]], "update() (spadsensor method)": [[18, "cc_hardware.drivers.SPADSensor.update"], [21, "cc_hardware.drivers.spads.SPADSensor.update"], [23, "cc_hardware.drivers.spads.spad.SPADSensor.update"]], "update() (sensor method)": [[18, "cc_hardware.drivers.Sensor.update"], [20, "cc_hardware.drivers.sensor.Sensor.update"]], "value() (steppermotorsystemaxis method)": [[18, "cc_hardware.drivers.StepperMotorSystemAxis.value"], [27, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis.value"], [31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis.value"]], "wait_for_move() (steppermotor method)": [[18, "cc_hardware.drivers.StepperMotor.wait_for_move"], [27, "cc_hardware.drivers.stepper_motors.StepperMotor.wait_for_move"], [30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor.wait_for_move"]], "wait_for_start_talk() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.wait_for_start_talk"], [19, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_start_talk"]], "wait_for_stop_talk() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.wait_for_stop_talk"], [19, "cc_hardware.drivers.safe_serial.SafeSerial.wait_for_stop_talk"]], "write() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.write"], [19, "cc_hardware.drivers.safe_serial.SafeSerial.write"]], "write_and_wait_for_start_and_stop_talk() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_and_stop_talk"], [19, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_and_stop_talk"]], "write_and_wait_for_start_talk() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.write_and_wait_for_start_talk"], [19, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_start_talk"]], "write_and_wait_for_stop_talk() (safeserial method)": [[18, "cc_hardware.drivers.SafeSerial.write_and_wait_for_stop_talk"], [19, "cc_hardware.drivers.safe_serial.SafeSerial.write_and_wait_for_stop_talk"]], "safeserial (class in cc_hardware.drivers.safe_serial)": [[19, "cc_hardware.drivers.safe_serial.SafeSerial"]], "cc_hardware.drivers.safe_serial": [[19, "module-cc_hardware.drivers.safe_serial"]], "sensor (class in cc_hardware.drivers.sensor)": [[20, "cc_hardware.drivers.sensor.Sensor"]], "sensorconfig (class in cc_hardware.drivers.sensor)": [[20, "cc_hardware.drivers.sensor.SensorConfig"]], "sensordata (class in cc_hardware.drivers.sensor)": [[20, "cc_hardware.drivers.sensor.SensorData"]], "cc_hardware.drivers.sensor": [[20, "module-cc_hardware.drivers.sensor"]], "get_data() (sensordata method)": [[20, "cc_hardware.drivers.sensor.SensorData.get_data"]], "process() (sensordata method)": [[20, "cc_hardware.drivers.sensor.SensorData.process"]], "reset() (sensordata method)": [[20, "cc_hardware.drivers.sensor.SensorData.reset"]], "spadsensor (class in cc_hardware.drivers.spads)": [[21, "cc_hardware.drivers.spads.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads)": [[21, "cc_hardware.drivers.spads.SPADSensorConfig"]], "cc_hardware.drivers.spads": [[21, "module-cc_hardware.drivers.spads"]], "pklspadsensor (class in cc_hardware.drivers.spads.pkl)": [[22, "cc_hardware.drivers.spads.pkl.PklSPADSensor"]], "accumulate() (pklspadsensor method)": [[22, "cc_hardware.drivers.spads.pkl.PklSPADSensor.accumulate"]], "cc_hardware.drivers.spads.pkl": [[22, "module-cc_hardware.drivers.spads.pkl"]], "close() (pklspadsensor method)": [[22, "cc_hardware.drivers.spads.pkl.PklSPADSensor.close"]], "num_bins (pklspadsensor property)": [[22, "cc_hardware.drivers.spads.pkl.PklSPADSensor.num_bins"]], "resolution (pklspadsensor property)": [[22, "cc_hardware.drivers.spads.pkl.PklSPADSensor.resolution"]], "spadsensor (class in cc_hardware.drivers.spads.spad)": [[23, "cc_hardware.drivers.spads.spad.SPADSensor"]], "spadsensorconfig (class in cc_hardware.drivers.spads.spad)": [[23, "cc_hardware.drivers.spads.spad.SPADSensorConfig"]], "cc_hardware.drivers.spads.spad": [[23, "module-cc_hardware.drivers.spads.spad"]], "spadmergewrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper"]], "spadmergewrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig"]], "spadmovingaveragewrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper"]], "spadmovingaveragewrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig"]], "spadwrapper (class in cc_hardware.drivers.spads.spad_wrappers)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper"]], "spadwrapperconfig (class in cc_hardware.drivers.spads.spad_wrappers)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig"]], "__del__() (spadmergewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.__del__"]], "__del__() (spadmovingaveragewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.__del__"]], "__del__() (spadwrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.__del__"]], "__getstate__() (spadmergewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.__getstate__"]], "__getstate__() (spadmovingaveragewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.__getstate__"]], "__getstate__() (spadwrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.__getstate__"]], "__setstate__() (spadmergewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.__setstate__"]], "__setstate__() (spadmovingaveragewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.__setstate__"]], "__setstate__() (spadwrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.__setstate__"]], "__str__() (spadmergewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.__str__"]], "__str__() (spadmovingaveragewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.__str__"]], "__str__() (spadwrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.__str__"]], "accumulate() (spadmergewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.accumulate"]], "accumulate() (spadmovingaveragewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.accumulate"]], "accumulate() (spadwrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.accumulate"]], "calibrate() (spadmergewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.calibrate"]], "calibrate() (spadmovingaveragewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.calibrate"]], "calibrate() (spadwrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.calibrate"]], "cc_hardware.drivers.spads.spad_wrappers": [[24, "module-cc_hardware.drivers.spads.spad_wrappers"]], "close() (spadmergewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.close"]], "close() (spadmovingaveragewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.close"]], "close() (spadwrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.close"]], "compose() (spadmergewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.compose"]], "compose() (spadmovingaveragewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.compose"]], "compose() (spadwrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.compose"]], "config (spadmergewrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.config"]], "config (spadmergewrapperconfig attribute)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.config"]], "config (spadmovingaveragewrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.config"]], "config (spadmovingaveragewrapperconfig attribute)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.config"]], "config (spadwrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.config"]], "config (spadwrapperconfig attribute)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.config"]], "copy() (spadmergewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.copy"]], "copy() (spadmovingaveragewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.copy"]], "copy() (spadwrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.copy"]], "create() (spadmergewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.create"]], "create() (spadmovingaveragewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.create"]], "create() (spadwrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.create"]], "create_from_config() (spadmergewrapper class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.create_from_config"]], "create_from_config() (spadmovingaveragewrapper class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.create_from_config"]], "create_from_config() (spadwrapper class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.create_from_config"]], "create_from_registry() (spadmergewrapper class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.create_from_registry"]], "create_from_registry() (spadmergewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.create_from_registry"]], "create_from_registry() (spadmovingaveragewrapper class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.create_from_registry"]], "create_from_registry() (spadmovingaveragewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.create_from_registry"]], "create_from_registry() (spadwrapper class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.create_from_registry"]], "create_from_registry() (spadwrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.create_from_registry"]], "custom (spadmergewrapperconfig attribute)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.custom"]], "custom (spadmovingaveragewrapperconfig attribute)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.custom"]], "custom (spadwrapperconfig attribute)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.custom"]], "instantiate() (spadmergewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.instantiate"]], "instantiate() (spadmovingaveragewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.instantiate"]], "instantiate() (spadwrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.instantiate"]], "is_okay (spadmergewrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.is_okay"]], "is_okay (spadmovingaveragewrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.is_okay"]], "is_okay (spadwrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.is_okay"]], "load() (spadmergewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.load"]], "load() (spadmovingaveragewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.load"]], "load() (spadwrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.load"]], "merge_with() (spadmergewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.merge_with"]], "merge_with() (spadmovingaveragewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.merge_with"]], "merge_with() (spadwrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.merge_with"]], "num_bins (spadmergewrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.num_bins"]], "num_bins (spadmovingaveragewrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.num_bins"]], "num_bins (spadwrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.num_bins"]], "register() (spadmergewrapper class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.register"]], "register() (spadmergewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.register"]], "register() (spadmovingaveragewrapper class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.register"]], "register() (spadmovingaveragewrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.register"]], "register() (spadwrapper class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.register"]], "register() (spadwrapperconfig class method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.register"]], "registered() (spadmergewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.registered"]], "registered() (spadmergewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.registered"]], "registered() (spadmovingaveragewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.registered"]], "registered() (spadmovingaveragewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.registered"]], "registered() (spadwrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.registered"]], "registered() (spadwrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.registered"]], "registry() (spadmergewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.registry"]], "registry() (spadmergewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.registry"]], "registry() (spadmovingaveragewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.registry"]], "registry() (spadmovingaveragewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.registry"]], "registry() (spadwrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.registry"]], "registry() (spadwrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.registry"]], "resolution (spadmergewrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.resolution"]], "resolution (spadmovingaveragewrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.resolution"]], "resolution (spadwrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.resolution"]], "save() (spadmergewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.save"]], "save() (spadmovingaveragewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.save"]], "save() (spadwrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.save"]], "settings (spadmergewrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.settings"]], "settings (spadmergewrapperconfig property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.settings"]], "settings (spadmovingaveragewrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.settings"]], "settings (spadmovingaveragewrapperconfig property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.settings"]], "settings (spadwrapper property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.settings"]], "settings (spadwrapperconfig property)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.settings"]], "to_yaml() (spadmergewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapperConfig.to_yaml"]], "to_yaml() (spadmovingaveragewrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapperConfig.to_yaml"]], "to_yaml() (spadwrapperconfig method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapperConfig.to_yaml"]], "update() (spadmergewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMergeWrapper.update"]], "update() (spadmovingaveragewrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADMovingAverageWrapper.update"]], "update() (spadwrapper method)": [[24, "cc_hardware.drivers.spads.spad_wrappers.SPADWrapper.update"]], "rangemode (class in cc_hardware.drivers.spads.tmf8828)": [[25, "cc_hardware.drivers.spads.tmf8828.RangeMode"]], "spadid (class in cc_hardware.drivers.spads.tmf8828)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID"]], "tmf8828config (class in cc_hardware.drivers.spads.tmf8828)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config"]], "tmf8828histogram (class in cc_hardware.drivers.spads.tmf8828)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram"]], "tmf8828sensor (class in cc_hardware.drivers.spads.tmf8828)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor"]], "__del__() (tmf8828sensor method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.__del__"]], "__dir__() (rangemode method)": [[25, "cc_hardware.drivers.spads.tmf8828.RangeMode.__dir__"]], "__dir__() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.__dir__"]], "__format__() (rangemode method)": [[25, "cc_hardware.drivers.spads.tmf8828.RangeMode.__format__"]], "__format__() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.__format__"]], "__getstate__() (tmf8828config method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.__getstate__"]], "__hash__() (rangemode method)": [[25, "cc_hardware.drivers.spads.tmf8828.RangeMode.__hash__"]], "__hash__() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.__hash__"]], "__reduce_ex__() (rangemode method)": [[25, "cc_hardware.drivers.spads.tmf8828.RangeMode.__reduce_ex__"]], "__reduce_ex__() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.__reduce_ex__"]], "__repr__() (rangemode method)": [[25, "cc_hardware.drivers.spads.tmf8828.RangeMode.__repr__"]], "__repr__() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.__repr__"]], "__setstate__() (tmf8828config method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.__setstate__"]], "__str__() (rangemode method)": [[25, "cc_hardware.drivers.spads.tmf8828.RangeMode.__str__"]], "__str__() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.__str__"]], "__str__() (tmf8828config method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.__str__"]], "accumulate() (tmf8828sensor method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.accumulate"]], "calibrate() (tmf8828sensor method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.calibrate"]], "cc_hardware.drivers.spads.tmf8828": [[25, "module-cc_hardware.drivers.spads.tmf8828"]], "close() (tmf8828sensor method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.close"]], "compose() (tmf8828config class method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.compose"]], "config (tmf8828config attribute)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.config"]], "config (tmf8828sensor property)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.config"]], "copy() (tmf8828config method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.copy"]], "create() (tmf8828config class method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.create"]], "create_from_config() (tmf8828sensor class method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.create_from_config"]], "create_from_registry() (tmf8828config class method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.create_from_registry"]], "create_from_registry() (tmf8828sensor class method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.create_from_registry"]], "custom (tmf8828config attribute)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.custom"]], "get_active_channels_per_subcapture() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.get_active_channels_per_subcapture"]], "get_data() (tmf8828histogram method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.get_data"]], "get_num_channels() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.get_num_channels"]], "get_num_pixels() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.get_num_pixels"]], "get_resolution() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.get_resolution"]], "has_data (tmf8828histogram property)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.has_data"]], "instantiate() (tmf8828config class method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.instantiate"]], "is_okay (tmf8828sensor property)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.is_okay"]], "load() (tmf8828config class method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.load"]], "merge_with() (tmf8828config method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.merge_with"]], "name() (rangemode method)": [[25, "cc_hardware.drivers.spads.tmf8828.RangeMode.name"]], "name() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.name"]], "num_bins (tmf8828sensor property)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.num_bins"]], "process() (tmf8828histogram method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.process"]], "register() (tmf8828config class method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.register"]], "register() (tmf8828sensor class method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.register"]], "registered() (tmf8828config method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.registered"]], "registered() (tmf8828sensor method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.registered"]], "registry() (tmf8828config method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.registry"]], "registry() (tmf8828sensor method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.registry"]], "reset() (tmf8828histogram method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Histogram.reset"]], "resolution (tmf8828sensor property)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.resolution"]], "save() (tmf8828config method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.save"]], "settings (tmf8828config property)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.settings"]], "settings (tmf8828sensor property)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.settings"]], "to_yaml() (tmf8828config method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Config.to_yaml"]], "update() (tmf8828sensor method)": [[25, "cc_hardware.drivers.spads.tmf8828.TMF8828Sensor.update"]], "value() (rangemode method)": [[25, "cc_hardware.drivers.spads.tmf8828.RangeMode.value"]], "value() (spadid method)": [[25, "cc_hardware.drivers.spads.tmf8828.SPADID.value"]], "rangingmode (class in cc_hardware.drivers.spads.vl53l8ch)": [[26, "cc_hardware.drivers.spads.vl53l8ch.RangingMode"]], "vl53l8chconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig"]], "vl53l8chconfig4x4 (class in cc_hardware.drivers.spads.vl53l8ch)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4"]], "vl53l8chconfig8x8 (class in cc_hardware.drivers.spads.vl53l8ch)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8"]], "vl53l8chhistogram (class in cc_hardware.drivers.spads.vl53l8ch)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram"]], "vl53l8chsensor (class in cc_hardware.drivers.spads.vl53l8ch)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor"]], "vl53l8chsharedconfig (class in cc_hardware.drivers.spads.vl53l8ch)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig"]], "__del__() (vl53l8chsensor method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.__del__"]], "__dir__() (rangingmode method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__dir__"]], "__format__() (rangingmode method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__format__"]], "__getstate__() (vl53l8chconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__getstate__"]], "__getstate__() (vl53l8chconfig4x4 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__getstate__"]], "__getstate__() (vl53l8chconfig8x8 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__getstate__"]], "__getstate__() (vl53l8chsharedconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__getstate__"]], "__hash__() (rangingmode method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__hash__"]], "__reduce_ex__() (rangingmode method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__reduce_ex__"]], "__repr__() (rangingmode method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__repr__"]], "__setstate__() (vl53l8chconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__setstate__"]], "__setstate__() (vl53l8chconfig4x4 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__setstate__"]], "__setstate__() (vl53l8chconfig8x8 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__setstate__"]], "__setstate__() (vl53l8chsharedconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__setstate__"]], "__str__() (rangingmode method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.__str__"]], "__str__() (vl53l8chconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.__str__"]], "__str__() (vl53l8chconfig4x4 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.__str__"]], "__str__() (vl53l8chconfig8x8 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.__str__"]], "__str__() (vl53l8chsharedconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.__str__"]], "accumulate() (vl53l8chsensor method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.accumulate"]], "calibrate() (vl53l8chsensor method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.calibrate"]], "cc_hardware.drivers.spads.vl53l8ch": [[26, "module-cc_hardware.drivers.spads.vl53l8ch"]], "close() (vl53l8chsensor method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.close"]], "compose() (vl53l8chconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.compose"]], "compose() (vl53l8chconfig4x4 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.compose"]], "compose() (vl53l8chconfig8x8 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.compose"]], "compose() (vl53l8chsharedconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.compose"]], "config (vl53l8chconfig attribute)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.config"]], "config (vl53l8chconfig4x4 attribute)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.config"]], "config (vl53l8chconfig8x8 attribute)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.config"]], "config (vl53l8chsensor property)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.config"]], "config (vl53l8chsharedconfig attribute)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.config"]], "copy() (vl53l8chconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.copy"]], "copy() (vl53l8chconfig4x4 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.copy"]], "copy() (vl53l8chconfig8x8 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.copy"]], "copy() (vl53l8chsharedconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.copy"]], "create() (vl53l8chconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.create"]], "create() (vl53l8chconfig4x4 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.create"]], "create() (vl53l8chconfig8x8 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.create"]], "create() (vl53l8chsharedconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.create"]], "create_from_config() (vl53l8chsensor class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.create_from_config"]], "create_from_registry() (vl53l8chconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.create_from_registry"]], "create_from_registry() (vl53l8chconfig4x4 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.create_from_registry"]], "create_from_registry() (vl53l8chconfig8x8 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.create_from_registry"]], "create_from_registry() (vl53l8chsensor class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.create_from_registry"]], "create_from_registry() (vl53l8chsharedconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.create_from_registry"]], "custom (vl53l8chconfig attribute)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.custom"]], "custom (vl53l8chconfig4x4 attribute)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.custom"]], "custom (vl53l8chconfig8x8 attribute)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.custom"]], "custom (vl53l8chsharedconfig attribute)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.custom"]], "get_data() (vl53l8chhistogram method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.get_data"]], "has_data (vl53l8chhistogram property)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.has_data"]], "instantiate() (vl53l8chconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.instantiate"]], "instantiate() (vl53l8chconfig4x4 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.instantiate"]], "instantiate() (vl53l8chconfig8x8 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.instantiate"]], "instantiate() (vl53l8chsharedconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.instantiate"]], "is_okay (vl53l8chsensor property)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.is_okay"]], "load() (vl53l8chconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.load"]], "load() (vl53l8chconfig4x4 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.load"]], "load() (vl53l8chconfig8x8 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.load"]], "load() (vl53l8chsharedconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.load"]], "merge_with() (vl53l8chconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.merge_with"]], "merge_with() (vl53l8chconfig4x4 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.merge_with"]], "merge_with() (vl53l8chconfig8x8 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.merge_with"]], "merge_with() (vl53l8chsharedconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.merge_with"]], "name() (rangingmode method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.name"]], "num_bins (vl53l8chsensor property)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.num_bins"]], "pack() (vl53l8chconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.pack"]], "pack() (vl53l8chconfig4x4 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.pack"]], "pack() (vl53l8chconfig8x8 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.pack"]], "pack() (vl53l8chsharedconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.pack"]], "process() (vl53l8chhistogram method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.process"]], "register() (vl53l8chconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.register"]], "register() (vl53l8chconfig4x4 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.register"]], "register() (vl53l8chconfig8x8 class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.register"]], "register() (vl53l8chsensor class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.register"]], "register() (vl53l8chsharedconfig class method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.register"]], "registered() (vl53l8chconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.registered"]], "registered() (vl53l8chconfig4x4 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.registered"]], "registered() (vl53l8chconfig8x8 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.registered"]], "registered() (vl53l8chsensor method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.registered"]], "registered() (vl53l8chsharedconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.registered"]], "registry() (vl53l8chconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.registry"]], "registry() (vl53l8chconfig4x4 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.registry"]], "registry() (vl53l8chconfig8x8 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.registry"]], "registry() (vl53l8chsensor method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.registry"]], "registry() (vl53l8chsharedconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.registry"]], "reset() (vl53l8chhistogram method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHHistogram.reset"]], "resolution (vl53l8chsensor property)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.resolution"]], "save() (vl53l8chconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.save"]], "save() (vl53l8chconfig4x4 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.save"]], "save() (vl53l8chconfig8x8 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.save"]], "save() (vl53l8chsharedconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.save"]], "settings (vl53l8chconfig property)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.settings"]], "settings (vl53l8chconfig4x4 property)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.settings"]], "settings (vl53l8chconfig8x8 property)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.settings"]], "settings (vl53l8chsensor property)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.settings"]], "settings (vl53l8chsharedconfig property)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.settings"]], "to_yaml() (vl53l8chconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig.to_yaml"]], "to_yaml() (vl53l8chconfig4x4 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig4x4.to_yaml"]], "to_yaml() (vl53l8chconfig8x8 method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHConfig8x8.to_yaml"]], "to_yaml() (vl53l8chsharedconfig method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSharedConfig.to_yaml"]], "update() (vl53l8chsensor method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.VL53L8CHSensor.update"]], "value() (rangingmode method)": [[26, "cc_hardware.drivers.spads.vl53l8ch.RangingMode.value"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors)": [[27, "cc_hardware.drivers.stepper_motors.DummyStepperMotor"]], "steppermotor (class in cc_hardware.drivers.stepper_motors)": [[27, "cc_hardware.drivers.stepper_motors.StepperMotor"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors)": [[27, "cc_hardware.drivers.stepper_motors.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors)": [[27, "cc_hardware.drivers.stepper_motors.StepperMotorSystemAxis"]], "cc_hardware.drivers.stepper_motors": [[27, "module-cc_hardware.drivers.stepper_motors"]], "azimuthelevationsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem"]], "kinesisrotationstage (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage"]], "kinesissteppermotor (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor"]], "kinesissteppermotorsystem (class in cc_hardware.drivers.stepper_motors.kinesis_stepper)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem"]], "__getattr__() (azimuthelevationsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.__getattr__"]], "__getattr__() (kinesissteppermotorsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.__getattr__"]], "cc_hardware.drivers.stepper_motors.kinesis_stepper": [[28, "module-cc_hardware.drivers.stepper_motors.kinesis_stepper"]], "close() (azimuthelevationsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.close"]], "close() (kinesisrotationstage method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.close"]], "close() (kinesissteppermotor method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.close"]], "close() (kinesissteppermotorsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.close"]], "create_from_registry() (azimuthelevationsystem class method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.create_from_registry"]], "create_from_registry() (kinesisrotationstage class method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.create_from_registry"]], "create_from_registry() (kinesissteppermotor class method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.create_from_registry"]], "create_from_registry() (kinesissteppermotorsystem class method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.create_from_registry"]], "home() (azimuthelevationsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.home"]], "home() (kinesisrotationstage method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.home"]], "home() (kinesissteppermotor method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.home"]], "home() (kinesissteppermotorsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.home"]], "initialize() (kinesisrotationstage method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.initialize"]], "initialize() (kinesissteppermotor method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.initialize"]], "is_okay (azimuthelevationsystem property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.is_okay"]], "is_okay (kinesisrotationstage property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.is_okay"]], "is_okay (kinesissteppermotor property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.is_okay"]], "is_okay (kinesissteppermotorsystem property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.is_okay"]], "lower_limit (kinesisrotationstage property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.lower_limit"]], "lower_limit (kinesissteppermotor property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.lower_limit"]], "move_by() (azimuthelevationsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.move_by"]], "move_by() (kinesisrotationstage method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_by"]], "move_by() (kinesissteppermotor method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_by"]], "move_by() (kinesissteppermotorsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.move_by"]], "move_to() (azimuthelevationsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.move_to"]], "move_to() (kinesisrotationstage method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.move_to"]], "move_to() (kinesissteppermotor method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.move_to"]], "move_to() (kinesissteppermotorsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.move_to"]], "position (azimuthelevationsystem property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.position"]], "position (kinesisrotationstage property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.position"]], "position (kinesissteppermotor property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.position"]], "position (kinesissteppermotorsystem property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.position"]], "register() (azimuthelevationsystem class method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.register"]], "register() (kinesisrotationstage class method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.register"]], "register() (kinesissteppermotor class method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.register"]], "register() (kinesissteppermotorsystem class method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.register"]], "registered() (azimuthelevationsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.registered"]], "registered() (kinesisrotationstage method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.registered"]], "registered() (kinesissteppermotor method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.registered"]], "registered() (kinesissteppermotorsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.registered"]], "registry() (azimuthelevationsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.registry"]], "registry() (kinesisrotationstage method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.registry"]], "registry() (kinesissteppermotor method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.registry"]], "registry() (kinesissteppermotorsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.registry"]], "upper_limit (kinesisrotationstage property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.upper_limit"]], "upper_limit (kinesissteppermotor property)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.upper_limit"]], "wait_for_move() (azimuthelevationsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.AzimuthElevationSystem.wait_for_move"]], "wait_for_move() (kinesisrotationstage method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisRotationStage.wait_for_move"]], "wait_for_move() (kinesissteppermotor method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotor.wait_for_move"]], "wait_for_move() (kinesissteppermotorsystem method)": [[28, "cc_hardware.drivers.stepper_motors.kinesis_stepper.KinesisStepperMotorSystem.wait_for_move"]], "snakesteppercontroller (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController"]], "steppercontroller (class in cc_hardware.drivers.stepper_motors.stepper_controller)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController"]], "cc_hardware.drivers.stepper_motors.stepper_controller": [[29, "module-cc_hardware.drivers.stepper_motors.stepper_controller"]], "create_from_registry() (snakesteppercontroller class method)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.create_from_registry"]], "create_from_registry() (steppercontroller class method)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.create_from_registry"]], "get_position() (snakesteppercontroller method)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.get_position"]], "get_position() (steppercontroller method)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.get_position"]], "register() (snakesteppercontroller class method)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.register"]], "register() (steppercontroller class method)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.register"]], "registered() (snakesteppercontroller method)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.registered"]], "registered() (steppercontroller method)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.registered"]], "registry() (snakesteppercontroller method)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.SnakeStepperController.registry"]], "registry() (steppercontroller method)": [[29, "cc_hardware.drivers.stepper_motors.stepper_controller.StepperController.registry"]], "dummysteppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[30, "cc_hardware.drivers.stepper_motors.stepper_motor.DummyStepperMotor"]], "steppermotor (class in cc_hardware.drivers.stepper_motors.stepper_motor)": [[30, "cc_hardware.drivers.stepper_motors.stepper_motor.StepperMotor"]], "cc_hardware.drivers.stepper_motors.stepper_motor": [[30, "module-cc_hardware.drivers.stepper_motors.stepper_motor"]], "dummysteppersystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[31, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem"]], "steppermotorsystem (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystem"]], "steppermotorsystemaxis (class in cc_hardware.drivers.stepper_motors.stepper_system)": [[31, "cc_hardware.drivers.stepper_motors.stepper_system.StepperMotorSystemAxis"]], "__getattr__() (dummysteppersystem method)": [[31, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.__getattr__"]], "cc_hardware.drivers.stepper_motors.stepper_system": [[31, "module-cc_hardware.drivers.stepper_motors.stepper_system"]], "move_by() (dummysteppersystem method)": [[31, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_by"]], "move_to() (dummysteppersystem method)": [[31, "cc_hardware.drivers.stepper_motors.stepper_system.DummyStepperSystem.move_to"]], "dualdrive2axisgantry (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry"]], "dualdrive2axisgantry_x (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X"]], "dualdrive2axisgantry_y1 (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1"]], "dualdrive2axisgantry_y2 (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2"]], "singledrive1axisgantry (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry"]], "singledrive1axisgantry_x (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X"]], "singledrive1axisgantry_y (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y"]], "telemetrixsteppermotor (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor"]], "telemetrixsteppermotorsystem (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem"]], "telemetrixsteppermotorx (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX"]], "telemetrixsteppermotorxreversed (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed"]], "telemetrixsteppermotory (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY"]], "telemetrixsteppermotoryreversed (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed"]], "telemetrixsteppermotorz (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ"]], "telemetrixsteppermotorzreversed (class in cc_hardware.drivers.stepper_motors.telemetrix_stepper)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed"]], "__getattr__() (dualdrive2axisgantry method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.__getattr__"]], "__getattr__() (dualdrive2axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.__getattr__"]], "__getattr__() (dualdrive2axisgantry_y1 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.__getattr__"]], "__getattr__() (dualdrive2axisgantry_y2 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.__getattr__"]], "__getattr__() (singledrive1axisgantry method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.__getattr__"]], "__getattr__() (singledrive1axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.__getattr__"]], "__getattr__() (singledrive1axisgantry_y method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.__getattr__"]], "__getattr__() (telemetrixsteppermotor method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.__getattr__"]], "__getattr__() (telemetrixsteppermotorsystem method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.__getattr__"]], "__getattr__() (telemetrixsteppermotorx method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.__getattr__"]], "__getattr__() (telemetrixsteppermotorxreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.__getattr__"]], "__getattr__() (telemetrixsteppermotory method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.__getattr__"]], "__getattr__() (telemetrixsteppermotoryreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.__getattr__"]], "__getattr__() (telemetrixsteppermotorz method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.__getattr__"]], "__getattr__() (telemetrixsteppermotorzreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.__getattr__"]], "cc_hardware.drivers.stepper_motors.telemetrix_stepper": [[32, "module-cc_hardware.drivers.stepper_motors.telemetrix_stepper"]], "close() (dualdrive2axisgantry method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.close"]], "close() (dualdrive2axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.close"]], "close() (dualdrive2axisgantry_y1 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.close"]], "close() (dualdrive2axisgantry_y2 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.close"]], "close() (singledrive1axisgantry method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.close"]], "close() (singledrive1axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.close"]], "close() (singledrive1axisgantry_y method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.close"]], "close() (telemetrixsteppermotor method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.close"]], "close() (telemetrixsteppermotorsystem method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.close"]], "close() (telemetrixsteppermotorx method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.close"]], "close() (telemetrixsteppermotorxreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.close"]], "close() (telemetrixsteppermotory method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.close"]], "close() (telemetrixsteppermotoryreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.close"]], "close() (telemetrixsteppermotorz method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.close"]], "close() (telemetrixsteppermotorzreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.close"]], "cm_to_revs() (dualdrive2axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.cm_to_revs"]], "cm_to_revs() (dualdrive2axisgantry_y1 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.cm_to_revs"]], "cm_to_revs() (dualdrive2axisgantry_y2 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.cm_to_revs"]], "cm_to_revs() (singledrive1axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.cm_to_revs"]], "cm_to_revs() (singledrive1axisgantry_y method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotor method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorx method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorxreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotory method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotoryreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorz method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.cm_to_revs"]], "cm_to_revs() (telemetrixsteppermotorzreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.cm_to_revs"]], "home() (dualdrive2axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.home"]], "home() (dualdrive2axisgantry_y1 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.home"]], "home() (dualdrive2axisgantry_y2 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.home"]], "home() (singledrive1axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.home"]], "home() (singledrive1axisgantry_y method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.home"]], "home() (telemetrixsteppermotor method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.home"]], "home() (telemetrixsteppermotorx method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.home"]], "home() (telemetrixsteppermotorxreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.home"]], "home() (telemetrixsteppermotory method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.home"]], "home() (telemetrixsteppermotoryreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.home"]], "home() (telemetrixsteppermotorz method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.home"]], "home() (telemetrixsteppermotorzreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.home"]], "id (dualdrive2axisgantry_x property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.id"]], "id (dualdrive2axisgantry_y1 property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.id"]], "id (dualdrive2axisgantry_y2 property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.id"]], "id (singledrive1axisgantry_x property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.id"]], "id (singledrive1axisgantry_y property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.id"]], "id (telemetrixsteppermotor property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.id"]], "id (telemetrixsteppermotorx property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.id"]], "id (telemetrixsteppermotorxreversed property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.id"]], "id (telemetrixsteppermotory property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.id"]], "id (telemetrixsteppermotoryreversed property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.id"]], "id (telemetrixsteppermotorz property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.id"]], "id (telemetrixsteppermotorzreversed property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.id"]], "is_okay (dualdrive2axisgantry_x property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.is_okay"]], "is_okay (dualdrive2axisgantry_y1 property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.is_okay"]], "is_okay (dualdrive2axisgantry_y2 property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.is_okay"]], "is_okay (singledrive1axisgantry_x property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.is_okay"]], "is_okay (singledrive1axisgantry_y property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.is_okay"]], "is_okay (telemetrixsteppermotor property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.is_okay"]], "is_okay (telemetrixsteppermotorx property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.is_okay"]], "is_okay (telemetrixsteppermotorxreversed property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.is_okay"]], "is_okay (telemetrixsteppermotory property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.is_okay"]], "is_okay (telemetrixsteppermotoryreversed property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.is_okay"]], "is_okay (telemetrixsteppermotorz property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.is_okay"]], "is_okay (telemetrixsteppermotorzreversed property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.is_okay"]], "move_by() (dualdrive2axisgantry method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.move_by"]], "move_by() (dualdrive2axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.move_by"]], "move_by() (dualdrive2axisgantry_y1 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.move_by"]], "move_by() (dualdrive2axisgantry_y2 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.move_by"]], "move_by() (singledrive1axisgantry method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.move_by"]], "move_by() (singledrive1axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.move_by"]], "move_by() (singledrive1axisgantry_y method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.move_by"]], "move_by() (telemetrixsteppermotor method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_by"]], "move_by() (telemetrixsteppermotorsystem method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.move_by"]], "move_by() (telemetrixsteppermotorx method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.move_by"]], "move_by() (telemetrixsteppermotorxreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.move_by"]], "move_by() (telemetrixsteppermotory method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.move_by"]], "move_by() (telemetrixsteppermotoryreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.move_by"]], "move_by() (telemetrixsteppermotorz method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.move_by"]], "move_by() (telemetrixsteppermotorzreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.move_by"]], "move_to() (dualdrive2axisgantry method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry.move_to"]], "move_to() (dualdrive2axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.move_to"]], "move_to() (dualdrive2axisgantry_y1 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.move_to"]], "move_to() (dualdrive2axisgantry_y2 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.move_to"]], "move_to() (singledrive1axisgantry method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry.move_to"]], "move_to() (singledrive1axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.move_to"]], "move_to() (singledrive1axisgantry_y method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.move_to"]], "move_to() (telemetrixsteppermotor method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.move_to"]], "move_to() (telemetrixsteppermotorsystem method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorSystem.move_to"]], "move_to() (telemetrixsteppermotorx method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.move_to"]], "move_to() (telemetrixsteppermotorxreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.move_to"]], "move_to() (telemetrixsteppermotory method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.move_to"]], "move_to() (telemetrixsteppermotoryreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.move_to"]], "move_to() (telemetrixsteppermotorz method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.move_to"]], "move_to() (telemetrixsteppermotorzreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.move_to"]], "position (dualdrive2axisgantry_x property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.position"]], "position (dualdrive2axisgantry_y1 property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.position"]], "position (dualdrive2axisgantry_y2 property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.position"]], "position (singledrive1axisgantry_x property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.position"]], "position (singledrive1axisgantry_y property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.position"]], "position (telemetrixsteppermotor property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.position"]], "position (telemetrixsteppermotorx property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.position"]], "position (telemetrixsteppermotorxreversed property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.position"]], "position (telemetrixsteppermotory property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.position"]], "position (telemetrixsteppermotoryreversed property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.position"]], "position (telemetrixsteppermotorz property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.position"]], "position (telemetrixsteppermotorzreversed property)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.position"]], "revs_to_cm() (dualdrive2axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.revs_to_cm"]], "revs_to_cm() (dualdrive2axisgantry_y1 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.revs_to_cm"]], "revs_to_cm() (dualdrive2axisgantry_y2 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.revs_to_cm"]], "revs_to_cm() (singledrive1axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.revs_to_cm"]], "revs_to_cm() (singledrive1axisgantry_y method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotor method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorx method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorxreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotory method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotoryreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorz method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.revs_to_cm"]], "revs_to_cm() (telemetrixsteppermotorzreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.revs_to_cm"]], "set_absolute_target_position_cm() (dualdrive2axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (dualdrive2axisgantry_y1 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (dualdrive2axisgantry_y2 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (singledrive1axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (singledrive1axisgantry_y method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotor method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorx method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorxreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotory method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotoryreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorz method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.set_absolute_target_position_cm"]], "set_absolute_target_position_cm() (telemetrixsteppermotorzreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.set_absolute_target_position_cm"]], "set_target_position_cm() (dualdrive2axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.set_target_position_cm"]], "set_target_position_cm() (dualdrive2axisgantry_y1 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.set_target_position_cm"]], "set_target_position_cm() (dualdrive2axisgantry_y2 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.set_target_position_cm"]], "set_target_position_cm() (singledrive1axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.set_target_position_cm"]], "set_target_position_cm() (singledrive1axisgantry_y method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotor method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorx method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorxreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotory method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotoryreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorz method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.set_target_position_cm"]], "set_target_position_cm() (telemetrixsteppermotorzreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.set_target_position_cm"]], "wait_for_move() (dualdrive2axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_X.wait_for_move"]], "wait_for_move() (dualdrive2axisgantry_y1 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y1.wait_for_move"]], "wait_for_move() (dualdrive2axisgantry_y2 method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.DualDrive2AxisGantry_Y2.wait_for_move"]], "wait_for_move() (singledrive1axisgantry_x method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_X.wait_for_move"]], "wait_for_move() (singledrive1axisgantry_y method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.SingleDrive1AxisGantry_Y.wait_for_move"]], "wait_for_move() (telemetrixsteppermotor method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotor.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorx method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorX.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorxreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorXReversed.wait_for_move"]], "wait_for_move() (telemetrixsteppermotory method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorY.wait_for_move"]], "wait_for_move() (telemetrixsteppermotoryreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorYReversed.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorz method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZ.wait_for_move"]], "wait_for_move() (telemetrixsteppermotorzreversed method)": [[32, "cc_hardware.drivers.stepper_motors.telemetrix_stepper.TelemetrixStepperMotorZReversed.wait_for_move"]], "cc_hardware": [[33, "module-cc_hardware"]], "calibrate() (in module cc_hardware.tools.calibration)": [[34, "cc_hardware.tools.calibration.calibrate"]], "cc_hardware.tools.calibration": [[34, "module-cc_hardware.tools.calibration"]], "tmf8828_calibrate() (in module cc_hardware.tools.calibration)": [[34, "cc_hardware.tools.calibration.tmf8828_calibrate"]], "cc_hardware.tools.camera_viewer": [[35, "module-cc_hardware.tools.camera_viewer"]], "dashdashboard (class in cc_hardware.tools.dashboards.dash)": [[36, "cc_hardware.tools.dashboards.dash.DashDashboard"]], "dashdashboardconfig (class in cc_hardware.tools.dashboards.dash)": [[36, "cc_hardware.tools.dashboards.dash.DashDashboardConfig"]], "cc_hardware.tools.dashboards.dash": [[36, "module-cc_hardware.tools.dashboards.dash"]], "run() (dashdashboard method)": [[36, "cc_hardware.tools.dashboards.dash.DashDashboard.run"]], "setup() (dashdashboard method)": [[36, "cc_hardware.tools.dashboards.dash.DashDashboard.setup"]], "update() (dashdashboard method)": [[36, "cc_hardware.tools.dashboards.dash.DashDashboard.update"]], "spaddashboard (class in cc_hardware.tools.dashboards.dashboard)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboards.dashboard)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig"]], "__getstate__() (spaddashboardconfig method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.__getstate__"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.__getstate__"]], "__setstate__() (spaddashboardconfig method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.__setstate__"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.__setstate__"]], "__str__() (spaddashboardconfig method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.__str__"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.__str__"]], "cc_hardware.tools.dashboards.dashboard": [[37, "module-cc_hardware.tools.dashboards.dashboard"]], "close() (spaddashboard method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.close"], [38, "cc_hardware.tools.dashboards.SPADDashboard.close"]], "compose() (spaddashboardconfig class method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.compose"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.compose"]], "config (spaddashboard property)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.config"], [38, "cc_hardware.tools.dashboards.SPADDashboard.config"]], "config (spaddashboardconfig attribute)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.config"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.config"]], "copy() (spaddashboardconfig method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.copy"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.copy"]], "create() (spaddashboardconfig class method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.create"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.create"]], "create_from_config() (spaddashboard class method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.create_from_config"], [38, "cc_hardware.tools.dashboards.SPADDashboard.create_from_config"]], "create_from_registry() (spaddashboard class method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.create_from_registry"], [38, "cc_hardware.tools.dashboards.SPADDashboard.create_from_registry"]], "create_from_registry() (spaddashboardconfig class method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.create_from_registry"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.create_from_registry"]], "custom (spaddashboardconfig attribute)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.custom"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.custom"]], "instantiate() (spaddashboardconfig class method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.instantiate"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.instantiate"]], "is_okay (spaddashboard property)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.is_okay"], [38, "cc_hardware.tools.dashboards.SPADDashboard.is_okay"]], "load() (spaddashboardconfig class method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.load"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.load"]], "max_bin (spaddashboard property)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.max_bin"], [38, "cc_hardware.tools.dashboards.SPADDashboard.max_bin"]], "merge_with() (spaddashboardconfig method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.merge_with"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.merge_with"]], "min_bin (spaddashboard property)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.min_bin"], [38, "cc_hardware.tools.dashboards.SPADDashboard.min_bin"]], "register() (spaddashboard class method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.register"], [38, "cc_hardware.tools.dashboards.SPADDashboard.register"]], "register() (spaddashboardconfig class method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.register"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.register"]], "registered() (spaddashboard method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.registered"], [38, "cc_hardware.tools.dashboards.SPADDashboard.registered"]], "registered() (spaddashboardconfig method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.registered"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.registered"]], "registry() (spaddashboard method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.registry"], [38, "cc_hardware.tools.dashboards.SPADDashboard.registry"]], "registry() (spaddashboardconfig method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.registry"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.registry"]], "run() (spaddashboard method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.run"], [38, "cc_hardware.tools.dashboards.SPADDashboard.run"]], "save() (spaddashboardconfig method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.save"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.save"]], "sensor (spaddashboard property)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.sensor"], [38, "cc_hardware.tools.dashboards.SPADDashboard.sensor"]], "setup() (spaddashboard method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.setup"], [38, "cc_hardware.tools.dashboards.SPADDashboard.setup"]], "to_yaml() (spaddashboardconfig method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboardConfig.to_yaml"], [38, "cc_hardware.tools.dashboards.SPADDashboardConfig.to_yaml"]], "update() (spaddashboard method)": [[37, "cc_hardware.tools.dashboards.dashboard.SPADDashboard.update"], [38, "cc_hardware.tools.dashboards.SPADDashboard.update"]], "spaddashboard (class in cc_hardware.tools.dashboards)": [[38, "cc_hardware.tools.dashboards.SPADDashboard"]], "spaddashboardconfig (class in cc_hardware.tools.dashboards)": [[38, "cc_hardware.tools.dashboards.SPADDashboardConfig"]], "cc_hardware.tools.dashboards": [[38, "module-cc_hardware.tools.dashboards"]], "matplotlibdashboard (class in cc_hardware.tools.dashboards.matplotlib)": [[39, "cc_hardware.tools.dashboards.matplotlib.MatplotlibDashboard"]], "matplotlibdashboardconfig (class in cc_hardware.tools.dashboards.matplotlib)": [[39, "cc_hardware.tools.dashboards.matplotlib.MatplotlibDashboardConfig"]], "adjust_ylim() (matplotlibdashboard method)": [[39, "cc_hardware.tools.dashboards.matplotlib.MatplotlibDashboard.adjust_ylim"]], "cc_hardware.tools.dashboards.matplotlib": [[39, "module-cc_hardware.tools.dashboards.matplotlib"]], "run() (matplotlibdashboard method)": [[39, "cc_hardware.tools.dashboards.matplotlib.MatplotlibDashboard.run"]], "save_animation() (in module cc_hardware.tools.dashboards.matplotlib)": [[39, "cc_hardware.tools.dashboards.matplotlib.save_animation"]], "setup() (matplotlibdashboard method)": [[39, "cc_hardware.tools.dashboards.matplotlib.MatplotlibDashboard.setup"]], "update() (matplotlibdashboard method)": [[39, "cc_hardware.tools.dashboards.matplotlib.MatplotlibDashboard.update"]], "dashboardwindow (class in cc_hardware.tools.dashboards.pyqtgraph)": [[40, "cc_hardware.tools.dashboards.pyqtgraph.DashboardWindow"]], "pyqtgraphdashboard (class in cc_hardware.tools.dashboards.pyqtgraph)": [[40, "cc_hardware.tools.dashboards.pyqtgraph.PyQtGraphDashboard"]], "pyqtgraphdashboardconfig (class in cc_hardware.tools.dashboards.pyqtgraph)": [[40, "cc_hardware.tools.dashboards.pyqtgraph.PyQtGraphDashboardConfig"]], "cc_hardware.tools.dashboards.pyqtgraph": [[40, "module-cc_hardware.tools.dashboards.pyqtgraph"]], "init_ui() (dashboardwindow method)": [[40, "cc_hardware.tools.dashboards.pyqtgraph.DashboardWindow.init_ui"]], "keypressevent() (dashboardwindow method)": [[40, "cc_hardware.tools.dashboards.pyqtgraph.DashboardWindow.keyPressEvent"]], "run() (pyqtgraphdashboard method)": [[40, "cc_hardware.tools.dashboards.pyqtgraph.PyQtGraphDashboard.run"]], "setup() (pyqtgraphdashboard method)": [[40, "cc_hardware.tools.dashboards.pyqtgraph.PyQtGraphDashboard.setup"]], "update() (pyqtgraphdashboard method)": [[40, "cc_hardware.tools.dashboards.pyqtgraph.PyQtGraphDashboard.update"]], "cc_hardware.tools.flash": [[41, "module-cc_hardware.tools.flash"]], "registry (class in cc_hardware.tools)": [[42, "cc_hardware.tools.Registry"]], "toolregistry (class in cc_hardware.tools)": [[42, "cc_hardware.tools.ToolRegistry"]], "cc_hardware.tools": [[42, "module-cc_hardware.tools"]], "create_from_registry() (registry class method)": [[42, "cc_hardware.tools.Registry.create_from_registry"], [46, "cc_hardware.utils.Registry.create_from_registry"], [56, "cc_hardware.utils.registry.Registry.create_from_registry"]], "create_from_registry() (toolregistry class method)": [[42, "cc_hardware.tools.ToolRegistry.create_from_registry"]], "register() (registry class method)": [[42, "cc_hardware.tools.Registry.register"], [46, "cc_hardware.utils.Registry.register"], [56, "cc_hardware.utils.registry.Registry.register"]], "register() (toolregistry class method)": [[42, "cc_hardware.tools.ToolRegistry.register"]], "registered() (registry method)": [[42, "cc_hardware.tools.Registry.registered"], [46, "cc_hardware.utils.Registry.registered"], [56, "cc_hardware.utils.registry.Registry.registered"]], "registered() (toolregistry method)": [[42, "cc_hardware.tools.ToolRegistry.registered"]], "registry() (registry method)": [[42, "cc_hardware.tools.Registry.registry"], [46, "cc_hardware.utils.Registry.registry"], [56, "cc_hardware.utils.registry.Registry.registry"]], "registry() (toolregistry method)": [[42, "cc_hardware.tools.ToolRegistry.registry"]], "logbufferhandler (class in cc_hardware.tools.jogger)": [[43, "cc_hardware.tools.jogger.LogBufferHandler"]], "outputcapture (class in cc_hardware.tools.jogger)": [[43, "cc_hardware.tools.jogger.OutputCapture"]], "__repr__() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.__repr__"]], "acquire() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.acquire"]], "addfilter() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.addFilter"]], "cc_hardware.tools.jogger": [[43, "module-cc_hardware.tools.jogger"]], "close() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.close"]], "createlock() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.createLock"]], "emit() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.emit"]], "filter() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.filter"]], "flush() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.flush"]], "format() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.format"]], "handle() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.handle"]], "handleerror() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.handleError"]], "release() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.release"]], "removefilter() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.removeFilter"]], "setformatter() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.setFormatter"]], "setlevel() (logbufferhandler method)": [[43, "cc_hardware.tools.jogger.LogBufferHandler.setLevel"]], "c (in module cc_hardware.utils.constants)": [[44, "cc_hardware.utils.constants.C"]], "cc_hardware.utils.constants": [[44, "module-cc_hardware.utils.constants"]], "pklhandler (class in cc_hardware.utils.file_handlers)": [[45, "cc_hardware.utils.file_handlers.PklHandler"]], "pklreader (class in cc_hardware.utils.file_handlers)": [[45, "cc_hardware.utils.file_handlers.PklReader"]], "videowriter (class in cc_hardware.utils.file_handlers)": [[45, "cc_hardware.utils.file_handlers.VideoWriter"]], "__del__() (videowriter method)": [[45, "cc_hardware.utils.file_handlers.VideoWriter.__del__"]], "__len__() (pklhandler method)": [[45, "cc_hardware.utils.file_handlers.PklHandler.__len__"]], "__len__() (pklreader method)": [[45, "cc_hardware.utils.file_handlers.PklReader.__len__"]], "append() (pklhandler method)": [[45, "cc_hardware.utils.file_handlers.PklHandler.append"]], "append() (pklreader method)": [[45, "cc_hardware.utils.file_handlers.PklReader.append"]], "append() (videowriter method)": [[45, "cc_hardware.utils.file_handlers.VideoWriter.append"]], "cc_hardware.utils.file_handlers": [[45, "module-cc_hardware.utils.file_handlers"]], "close() (videowriter method)": [[45, "cc_hardware.utils.file_handlers.VideoWriter.close"]], "load() (pklhandler method)": [[45, "cc_hardware.utils.file_handlers.PklHandler.load"]], "load() (pklreader method)": [[45, "cc_hardware.utils.file_handlers.PklReader.load"]], "load_all() (pklhandler static method)": [[45, "cc_hardware.utils.file_handlers.PklHandler.load_all"]], "load_all() (pklreader static method)": [[45, "cc_hardware.utils.file_handlers.PklReader.load_all"]], "update_index() (pklhandler method)": [[45, "cc_hardware.utils.file_handlers.PklHandler.update_index"]], "update_index() (pklreader method)": [[45, "cc_hardware.utils.file_handlers.PklReader.update_index"]], "write() (pklhandler method)": [[45, "cc_hardware.utils.file_handlers.PklHandler.write"]], "write() (pklreader method)": [[45, "cc_hardware.utils.file_handlers.PklReader.write"]], "blockingdeque (class in cc_hardware.utils)": [[46, "cc_hardware.utils.BlockingDeque"]], "component (class in cc_hardware.utils)": [[46, "cc_hardware.utils.Component"]], "config (class in cc_hardware.utils)": [[46, "cc_hardware.utils.Config"]], "manager (class in cc_hardware.utils)": [[46, "cc_hardware.utils.Manager"]], "registry (class in cc_hardware.utils)": [[46, "cc_hardware.utils.Registry"]], "singletonabcmeta (class in cc_hardware.utils)": [[46, "cc_hardware.utils.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils)": [[46, "cc_hardware.utils.SingletonMeta"]], "__call__() (singletonabcmeta method)": [[46, "cc_hardware.utils.SingletonABCMeta.__call__"], [52, "cc_hardware.utils.misc.SingletonABCMeta.__call__"], [55, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__call__"]], "__call__() (singletonmeta method)": [[46, "cc_hardware.utils.SingletonMeta.__call__"], [52, "cc_hardware.utils.misc.SingletonMeta.__call__"], [55, "cc_hardware.utils.misc.singleton.SingletonMeta.__call__"]], "__enter__() (manager method)": [[46, "cc_hardware.utils.Manager.__enter__"], [48, "cc_hardware.utils.manager.Manager.__enter__"]], "__exit__() (manager method)": [[46, "cc_hardware.utils.Manager.__exit__"], [48, "cc_hardware.utils.manager.Manager.__exit__"]], "__getattr__() (blockingdeque method)": [[46, "cc_hardware.utils.BlockingDeque.__getattr__"], [51, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__getattr__"], [52, "cc_hardware.utils.misc.BlockingDeque.__getattr__"]], "__getitem__() (blockingdeque method)": [[46, "cc_hardware.utils.BlockingDeque.__getitem__"], [51, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__getitem__"], [52, "cc_hardware.utils.misc.BlockingDeque.__getitem__"]], "__getstate__() (config method)": [[46, "cc_hardware.utils.Config.__getstate__"], [48, "cc_hardware.utils.manager.Config.__getstate__"]], "__instancecheck__() (singletonabcmeta method)": [[46, "cc_hardware.utils.SingletonABCMeta.__instancecheck__"], [52, "cc_hardware.utils.misc.SingletonABCMeta.__instancecheck__"], [55, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__instancecheck__"]], "__len__() (blockingdeque method)": [[46, "cc_hardware.utils.BlockingDeque.__len__"], [51, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__len__"], [52, "cc_hardware.utils.misc.BlockingDeque.__len__"]], "__repr__() (blockingdeque method)": [[46, "cc_hardware.utils.BlockingDeque.__repr__"], [51, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.__repr__"], [52, "cc_hardware.utils.misc.BlockingDeque.__repr__"]], "__setstate__() (config method)": [[46, "cc_hardware.utils.Config.__setstate__"], [48, "cc_hardware.utils.manager.Config.__setstate__"]], "__str__() (config method)": [[46, "cc_hardware.utils.Config.__str__"], [48, "cc_hardware.utils.manager.Config.__str__"]], "__subclasscheck__() (singletonabcmeta method)": [[46, "cc_hardware.utils.SingletonABCMeta.__subclasscheck__"], [52, "cc_hardware.utils.misc.SingletonABCMeta.__subclasscheck__"], [55, "cc_hardware.utils.misc.singleton.SingletonABCMeta.__subclasscheck__"]], "add() (manager method)": [[46, "cc_hardware.utils.Manager.add"], [48, "cc_hardware.utils.manager.Manager.add"]], "append() (blockingdeque method)": [[46, "cc_hardware.utils.BlockingDeque.append"], [51, "cc_hardware.utils.misc.blocking_deque.BlockingDeque.append"], [52, "cc_hardware.utils.misc.BlockingDeque.append"]], "arduino_upload() (in module cc_hardware.utils)": [[46, "cc_hardware.utils.arduino_upload"]], "call_async() (in module cc_hardware.utils)": [[46, "cc_hardware.utils.call_async"]], "call_async_gather() (in module cc_hardware.utils)": [[46, "cc_hardware.utils.call_async_gather"]], "call_async_value() (in module cc_hardware.utils)": [[46, "cc_hardware.utils.call_async_value"]], "cc_hardware.utils": [[46, "module-cc_hardware.utils"]], "close() (component method)": [[46, "cc_hardware.utils.Component.close"], [48, "cc_hardware.utils.manager.Component.close"]], "close() (manager method)": [[46, "cc_hardware.utils.Manager.close"], [48, "cc_hardware.utils.manager.Manager.close"]], "components (manager property)": [[46, "cc_hardware.utils.Manager.components"], [48, "cc_hardware.utils.manager.Manager.components"]], "compose() (config class method)": [[46, "cc_hardware.utils.Config.compose"], [48, "cc_hardware.utils.manager.Config.compose"]], "config (component property)": [[46, "cc_hardware.utils.Component.config"], [48, "cc_hardware.utils.manager.Component.config"]], "config (config attribute)": [[46, "cc_hardware.utils.Config.config"], [48, "cc_hardware.utils.manager.Config.config"]], "copy() (config method)": [[46, "cc_hardware.utils.Config.copy"], [48, "cc_hardware.utils.manager.Config.copy"]], "create() (config class method)": [[46, "cc_hardware.utils.Config.create"], [48, "cc_hardware.utils.manager.Config.create"]], "create_from_config() (component class method)": [[46, "cc_hardware.utils.Component.create_from_config"], [48, "cc_hardware.utils.manager.Component.create_from_config"]], "create_from_registry() (component class method)": [[46, "cc_hardware.utils.Component.create_from_registry"], [48, "cc_hardware.utils.manager.Component.create_from_registry"]], "create_from_registry() (config class method)": [[46, "cc_hardware.utils.Config.create_from_registry"], [48, "cc_hardware.utils.manager.Config.create_from_registry"]], "custom (config attribute)": [[46, "cc_hardware.utils.Config.custom"], [48, "cc_hardware.utils.manager.Config.custom"]], "find_device_by_label() (in module cc_hardware.utils)": [[46, "cc_hardware.utils.find_device_by_label"]], "find_ports() (in module cc_hardware.utils)": [[46, "cc_hardware.utils.find_ports"]], "get_object() (in module cc_hardware.utils)": [[46, "cc_hardware.utils.get_object"]], "instance() (singletonabcmeta class method)": [[46, "cc_hardware.utils.SingletonABCMeta.instance"], [52, "cc_hardware.utils.misc.SingletonABCMeta.instance"], [55, "cc_hardware.utils.misc.singleton.SingletonABCMeta.instance"]], "instance() (singletonmeta class method)": [[46, "cc_hardware.utils.SingletonMeta.instance"], [52, "cc_hardware.utils.misc.SingletonMeta.instance"], [55, "cc_hardware.utils.misc.singleton.SingletonMeta.instance"]], "instantiate() (config class method)": [[46, "cc_hardware.utils.Config.instantiate"], [48, "cc_hardware.utils.manager.Config.instantiate"]], "is_okay (component property)": [[46, "cc_hardware.utils.Component.is_okay"], [48, "cc_hardware.utils.manager.Component.is_okay"]], "is_okay (manager property)": [[46, "cc_hardware.utils.Manager.is_okay"], [48, "cc_hardware.utils.manager.Manager.is_okay"]], "load() (config class method)": [[46, "cc_hardware.utils.Config.load"], [48, "cc_hardware.utils.manager.Config.load"]], "merge_with() (config method)": [[46, "cc_hardware.utils.Config.merge_with"], [48, "cc_hardware.utils.manager.Config.merge_with"]], "register() (component class method)": [[46, "cc_hardware.utils.Component.register"], [48, "cc_hardware.utils.manager.Component.register"]], "register() (config class method)": [[46, "cc_hardware.utils.Config.register"], [48, "cc_hardware.utils.manager.Config.register"]], "register() (singletonabcmeta method)": [[46, "cc_hardware.utils.SingletonABCMeta.register"], [52, "cc_hardware.utils.misc.SingletonABCMeta.register"], [55, "cc_hardware.utils.misc.singleton.SingletonABCMeta.register"]], "register() (in module cc_hardware.utils)": [[46, "cc_hardware.utils.register"]], "registered() (component method)": [[46, "cc_hardware.utils.Component.registered"], [48, "cc_hardware.utils.manager.Component.registered"]], "registered() (config method)": [[46, "cc_hardware.utils.Config.registered"], [48, "cc_hardware.utils.manager.Config.registered"]], "registry() (component method)": [[46, "cc_hardware.utils.Component.registry"], [48, "cc_hardware.utils.manager.Component.registry"]], "registry() (config method)": [[46, "cc_hardware.utils.Config.registry"], [48, "cc_hardware.utils.manager.Config.registry"]], "run() (manager method)": [[46, "cc_hardware.utils.Manager.run"], [48, "cc_hardware.utils.manager.Manager.run"]], "save() (config method)": [[46, "cc_hardware.utils.Config.save"], [48, "cc_hardware.utils.manager.Config.save"]], "to_yaml() (config method)": [[46, "cc_hardware.utils.Config.to_yaml"], [48, "cc_hardware.utils.manager.Config.to_yaml"]], "filehandler (class in cc_hardware.utils.logger)": [[47, "cc_hardware.utils.logger.FileHandler"]], "loggermaxlevelfilter (class in cc_hardware.utils.logger)": [[47, "cc_hardware.utils.logger.LoggerMaxLevelFilter"]], "tqdmstreamhandler (class in cc_hardware.utils.logger)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler"]], "__repr__() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.__repr__"]], "__repr__() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.__repr__"]], "acquire() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.acquire"]], "acquire() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.acquire"]], "addfilter() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.addFilter"]], "addfilter() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.addFilter"]], "cc_hardware.utils.logger": [[47, "module-cc_hardware.utils.logger"]], "close() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.close"]], "close() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.close"]], "createlock() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.createLock"]], "createlock() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.createLock"]], "emit() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.emit"]], "emit() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.emit"]], "filter() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.filter"]], "filter() (loggermaxlevelfilter method)": [[47, "cc_hardware.utils.logger.LoggerMaxLevelFilter.filter"]], "filter() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.filter"]], "flush() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.flush"]], "flush() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.flush"]], "format() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.format"]], "format() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.format"]], "handle() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.handle"]], "handle() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.handle"]], "handleerror() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.handleError"]], "handleerror() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.handleError"]], "release() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.release"]], "release() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.release"]], "removefilter() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.removeFilter"]], "removefilter() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.removeFilter"]], "setformatter() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.setFormatter"]], "setformatter() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.setFormatter"]], "setlevel() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.setLevel"]], "setlevel() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.setLevel"]], "setstream() (filehandler method)": [[47, "cc_hardware.utils.logger.FileHandler.setStream"]], "setstream() (tqdmstreamhandler method)": [[47, "cc_hardware.utils.logger.TqdmStreamHandler.setStream"]], "component (class in cc_hardware.utils.manager)": [[48, "cc_hardware.utils.manager.Component"]], "config (class in cc_hardware.utils.manager)": [[48, "cc_hardware.utils.manager.Config"]], "manager (class in cc_hardware.utils.manager)": [[48, "cc_hardware.utils.manager.Manager"]], "cc_hardware.utils.manager": [[48, "module-cc_hardware.utils.manager"]], "cc_hardware.utils.matplotlib": [[49, "module-cc_hardware.utils.matplotlib"]], "set_matplotlib_style() (in module cc_hardware.utils.matplotlib)": [[49, "cc_hardware.utils.matplotlib.set_matplotlib_style"]], "call_async() (in module cc_hardware.utils.misc.asyncio_utils)": [[50, "cc_hardware.utils.misc.asyncio_utils.call_async"]], "call_async_gather() (in module cc_hardware.utils.misc.asyncio_utils)": [[50, "cc_hardware.utils.misc.asyncio_utils.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.misc.asyncio_utils)": [[50, "cc_hardware.utils.misc.asyncio_utils.call_async_value"]], "cc_hardware.utils.misc.asyncio_utils": [[50, "module-cc_hardware.utils.misc.asyncio_utils"]], "blockingdeque (class in cc_hardware.utils.misc.blocking_deque)": [[51, "cc_hardware.utils.misc.blocking_deque.BlockingDeque"]], "cc_hardware.utils.misc.blocking_deque": [[51, "module-cc_hardware.utils.misc.blocking_deque"]], "blockingdeque (class in cc_hardware.utils.misc)": [[52, "cc_hardware.utils.misc.BlockingDeque"]], "singletonabcmeta (class in cc_hardware.utils.misc)": [[52, "cc_hardware.utils.misc.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.misc)": [[52, "cc_hardware.utils.misc.SingletonMeta"]], "arduino_upload() (in module cc_hardware.utils.misc)": [[52, "cc_hardware.utils.misc.arduino_upload"]], "call_async() (in module cc_hardware.utils.misc)": [[52, "cc_hardware.utils.misc.call_async"]], "call_async_gather() (in module cc_hardware.utils.misc)": [[52, "cc_hardware.utils.misc.call_async_gather"]], "call_async_value() (in module cc_hardware.utils.misc)": [[52, "cc_hardware.utils.misc.call_async_value"]], "cc_hardware.utils.misc": [[52, "module-cc_hardware.utils.misc"]], "find_device_by_label() (in module cc_hardware.utils.misc)": [[52, "cc_hardware.utils.misc.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.misc)": [[52, "cc_hardware.utils.misc.find_ports"]], "get_object() (in module cc_hardware.utils.misc)": [[52, "cc_hardware.utils.misc.get_object"]], "cc_hardware.utils.misc.misc": [[53, "module-cc_hardware.utils.misc.misc"]], "get_object() (in module cc_hardware.utils.misc.misc)": [[53, "cc_hardware.utils.misc.misc.get_object"]], "arduino_upload() (in module cc_hardware.utils.misc.serial_utils)": [[54, "cc_hardware.utils.misc.serial_utils.arduino_upload"]], "cc_hardware.utils.misc.serial_utils": [[54, "module-cc_hardware.utils.misc.serial_utils"]], "find_device_by_label() (in module cc_hardware.utils.misc.serial_utils)": [[54, "cc_hardware.utils.misc.serial_utils.find_device_by_label"]], "find_ports() (in module cc_hardware.utils.misc.serial_utils)": [[54, "cc_hardware.utils.misc.serial_utils.find_ports"]], "singletonabcmeta (class in cc_hardware.utils.misc.singleton)": [[55, "cc_hardware.utils.misc.singleton.SingletonABCMeta"]], "singletonmeta (class in cc_hardware.utils.misc.singleton)": [[55, "cc_hardware.utils.misc.singleton.SingletonMeta"]], "cc_hardware.utils.misc.singleton": [[55, "module-cc_hardware.utils.misc.singleton"]], "registry (class in cc_hardware.utils.registry)": [[56, "cc_hardware.utils.registry.Registry"]], "cc_hardware.utils.registry": [[56, "module-cc_hardware.utils.registry"]], "register() (in module cc_hardware.utils.registry)": [[56, "cc_hardware.utils.registry.register"]], "boolsetting (class in cc_hardware.utils.setting)": [[57, "cc_hardware.utils.setting.BoolSetting"]], "optionsetting (class in cc_hardware.utils.setting)": [[57, "cc_hardware.utils.setting.OptionSetting"]], "rangesetting (class in cc_hardware.utils.setting)": [[57, "cc_hardware.utils.setting.RangeSetting"]], "setting (class in cc_hardware.utils.setting)": [[57, "cc_hardware.utils.setting.Setting"]], "__getstate__() (boolsetting method)": [[57, "cc_hardware.utils.setting.BoolSetting.__getstate__"]], "__getstate__() (optionsetting method)": [[57, "cc_hardware.utils.setting.OptionSetting.__getstate__"]], "__getstate__() (rangesetting method)": [[57, "cc_hardware.utils.setting.RangeSetting.__getstate__"]], "__getstate__() (setting method)": [[57, "cc_hardware.utils.setting.Setting.__getstate__"]], "__setstate__() (boolsetting method)": [[57, "cc_hardware.utils.setting.BoolSetting.__setstate__"]], "__setstate__() (optionsetting method)": [[57, "cc_hardware.utils.setting.OptionSetting.__setstate__"]], "__setstate__() (rangesetting method)": [[57, "cc_hardware.utils.setting.RangeSetting.__setstate__"]], "__setstate__() (setting method)": [[57, "cc_hardware.utils.setting.Setting.__setstate__"]], "__str__() (boolsetting method)": [[57, "cc_hardware.utils.setting.BoolSetting.__str__"]], "__str__() (optionsetting method)": [[57, "cc_hardware.utils.setting.OptionSetting.__str__"]], "__str__() (rangesetting method)": [[57, "cc_hardware.utils.setting.RangeSetting.__str__"]], "__str__() (setting method)": [[57, "cc_hardware.utils.setting.Setting.__str__"]], "cc_hardware.utils.setting": [[57, "module-cc_hardware.utils.setting"]], "compose() (boolsetting class method)": [[57, "cc_hardware.utils.setting.BoolSetting.compose"]], "compose() (optionsetting class method)": [[57, "cc_hardware.utils.setting.OptionSetting.compose"]], "compose() (rangesetting class method)": [[57, "cc_hardware.utils.setting.RangeSetting.compose"]], "compose() (setting class method)": [[57, "cc_hardware.utils.setting.Setting.compose"]], "config (boolsetting attribute)": [[57, "cc_hardware.utils.setting.BoolSetting.config"]], "config (optionsetting attribute)": [[57, "cc_hardware.utils.setting.OptionSetting.config"]], "config (rangesetting attribute)": [[57, "cc_hardware.utils.setting.RangeSetting.config"]], "config (setting attribute)": [[57, "cc_hardware.utils.setting.Setting.config"]], "copy() (boolsetting method)": [[57, "cc_hardware.utils.setting.BoolSetting.copy"]], "copy() (optionsetting method)": [[57, "cc_hardware.utils.setting.OptionSetting.copy"]], "copy() (rangesetting method)": [[57, "cc_hardware.utils.setting.RangeSetting.copy"]], "copy() (setting method)": [[57, "cc_hardware.utils.setting.Setting.copy"]], "create() (boolsetting class method)": [[57, "cc_hardware.utils.setting.BoolSetting.create"]], "create() (optionsetting class method)": [[57, "cc_hardware.utils.setting.OptionSetting.create"]], "create() (rangesetting class method)": [[57, "cc_hardware.utils.setting.RangeSetting.create"]], "create() (setting class method)": [[57, "cc_hardware.utils.setting.Setting.create"]], "create_from_registry() (boolsetting class method)": [[57, "cc_hardware.utils.setting.BoolSetting.create_from_registry"]], "create_from_registry() (optionsetting class method)": [[57, "cc_hardware.utils.setting.OptionSetting.create_from_registry"]], "create_from_registry() (rangesetting class method)": [[57, "cc_hardware.utils.setting.RangeSetting.create_from_registry"]], "create_from_registry() (setting class method)": [[57, "cc_hardware.utils.setting.Setting.create_from_registry"]], "custom (boolsetting attribute)": [[57, "cc_hardware.utils.setting.BoolSetting.custom"]], "custom (optionsetting attribute)": [[57, "cc_hardware.utils.setting.OptionSetting.custom"]], "custom (rangesetting attribute)": [[57, "cc_hardware.utils.setting.RangeSetting.custom"]], "custom (setting attribute)": [[57, "cc_hardware.utils.setting.Setting.custom"]], "default_factory() (boolsetting class method)": [[57, "cc_hardware.utils.setting.BoolSetting.default_factory"]], "default_factory() (optionsetting class method)": [[57, "cc_hardware.utils.setting.OptionSetting.default_factory"]], "default_factory() (rangesetting class method)": [[57, "cc_hardware.utils.setting.RangeSetting.default_factory"]], "default_factory() (setting class method)": [[57, "cc_hardware.utils.setting.Setting.default_factory"]], "from_enum() (optionsetting class method)": [[57, "cc_hardware.utils.setting.OptionSetting.from_enum"]], "instantiate() (boolsetting class method)": [[57, "cc_hardware.utils.setting.BoolSetting.instantiate"]], "instantiate() (optionsetting class method)": [[57, "cc_hardware.utils.setting.OptionSetting.instantiate"]], "instantiate() (rangesetting class method)": [[57, "cc_hardware.utils.setting.RangeSetting.instantiate"]], "instantiate() (setting class method)": [[57, "cc_hardware.utils.setting.Setting.instantiate"]], "load() (boolsetting class method)": [[57, "cc_hardware.utils.setting.BoolSetting.load"]], "load() (optionsetting class method)": [[57, "cc_hardware.utils.setting.OptionSetting.load"]], "load() (rangesetting class method)": [[57, "cc_hardware.utils.setting.RangeSetting.load"]], "load() (setting class method)": [[57, "cc_hardware.utils.setting.Setting.load"]], "merge_with() (boolsetting method)": [[57, "cc_hardware.utils.setting.BoolSetting.merge_with"]], "merge_with() (optionsetting method)": [[57, "cc_hardware.utils.setting.OptionSetting.merge_with"]], "merge_with() (rangesetting method)": [[57, "cc_hardware.utils.setting.RangeSetting.merge_with"]], "merge_with() (setting method)": [[57, "cc_hardware.utils.setting.Setting.merge_with"]], "register() (boolsetting class method)": [[57, "cc_hardware.utils.setting.BoolSetting.register"]], "register() (optionsetting class method)": [[57, "cc_hardware.utils.setting.OptionSetting.register"]], "register() (rangesetting class method)": [[57, "cc_hardware.utils.setting.RangeSetting.register"]], "register() (setting class method)": [[57, "cc_hardware.utils.setting.Setting.register"]], "registered() (boolsetting method)": [[57, "cc_hardware.utils.setting.BoolSetting.registered"]], "registered() (optionsetting method)": [[57, "cc_hardware.utils.setting.OptionSetting.registered"]], "registered() (rangesetting method)": [[57, "cc_hardware.utils.setting.RangeSetting.registered"]], "registered() (setting method)": [[57, "cc_hardware.utils.setting.Setting.registered"]], "registry() (boolsetting method)": [[57, "cc_hardware.utils.setting.BoolSetting.registry"]], "registry() (optionsetting method)": [[57, "cc_hardware.utils.setting.OptionSetting.registry"]], "registry() (rangesetting method)": [[57, "cc_hardware.utils.setting.RangeSetting.registry"]], "registry() (setting method)": [[57, "cc_hardware.utils.setting.Setting.registry"]], "save() (boolsetting method)": [[57, "cc_hardware.utils.setting.BoolSetting.save"]], "save() (optionsetting method)": [[57, "cc_hardware.utils.setting.OptionSetting.save"]], "save() (rangesetting method)": [[57, "cc_hardware.utils.setting.RangeSetting.save"]], "save() (setting method)": [[57, "cc_hardware.utils.setting.Setting.save"]], "to_yaml() (boolsetting method)": [[57, "cc_hardware.utils.setting.BoolSetting.to_yaml"]], "to_yaml() (optionsetting method)": [[57, "cc_hardware.utils.setting.OptionSetting.to_yaml"]], "to_yaml() (rangesetting method)": [[57, "cc_hardware.utils.setting.RangeSetting.to_yaml"]], "to_yaml() (setting method)": [[57, "cc_hardware.utils.setting.Setting.to_yaml"]], "update() (boolsetting method)": [[57, "cc_hardware.utils.setting.BoolSetting.update"]], "update() (optionsetting method)": [[57, "cc_hardware.utils.setting.OptionSetting.update"]], "update() (rangesetting method)": [[57, "cc_hardware.utils.setting.RangeSetting.update"]], "cc_hardware.utils.transformations": [[58, "module-cc_hardware.utils.transformations"]]}})